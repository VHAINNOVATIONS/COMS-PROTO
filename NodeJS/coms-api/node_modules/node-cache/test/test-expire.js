// Generated by CoffeeScript 1.6.3
(function() {
  var NodeCache, idx, queriesCache, _readA, _readC, _readS, _writeA, _writeS;

  NodeCache = require('../');

  queriesCache = new NodeCache({
    stdTTL: 2,
    checkperiod: 0
  });

  idx = 0;

  _writeA = function() {
    console.log("t write:A key:" + idx);
    queriesCache.set("key", idx, function(err, success) {
      console.log("t write:B key:" + idx, err, success);
      idx++;
    });
  };

  _writeS = function() {
    var success;
    console.log("t write:A key:" + idx);
    success = queriesCache.set("key", idx, function(err, success) {});
    console.log("t write:B key:" + idx, success);
    idx++;
  };

  _readA = function() {
    console.log("t read:A key");
    queriesCache.get("key", function(err, value) {
      if (value["key"] != null) {
        console.log("t read:B key:" + value["key"]);
      } else {
        console.log("t ERROR read:B key:" + value["key"]);
      }
    });
  };

  _readC = function() {
    console.log("t read:A key");
    queriesCache.getConsistent("key", function(err, value) {
      if (value["key"] != null) {
        console.log("t read:B key:" + value["key"]);
      } else {
        console.log("t ERROR read:B key:" + value["key"]);
      }
    });
  };

  _readS = function() {
    var value;
    console.log("t read:A key");
    value = queriesCache.get("key", function(err, value) {});
    if (value["key"] != null) {
      console.log("t read:B key:" + value["key"]);
    } else {
      console.log("t ERROR read:B key:" + value["key"]);
    }
  };

  queriesCache.on("expired", function(key, value) {
    console.log("t expired key:" + value);
    _writeA();
  });

  _writeA();

  setInterval(_readA, 300);

}).call(this);
