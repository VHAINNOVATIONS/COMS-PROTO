<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" 
    href="ant2html.xsl"?>
<!-- ======================================================================
	Refer to http://wiki.apache.org/ant/TheElementsOfAntStyle 
	for how this script conforms to standards
	As well as http://www.ibm.com/developerworks/library/x-antxsl/ for styling the build file
	And https://raw.github.com/FrancisVarga/ant-git-macros for the GIT Macros
	====================================================================== -->
<project name="${git.projname}" default="jshint">
    <description>
        Build file for the VA COMS project
    </description>

	<property file="project.properties" description="User specific global configuration properties" />
	<import file="gitmacros.xml" description="Common GIT macros" />

	<target name="usage">
		<echo>Execute 'ant -help' for Ant help&#xa;
Execute 'ant build' is the default build script for the project
Execute 'ant super-clean' (depends on 'clean' and 'prepare')
Execute 'ant init-project' Create the initial project configuration on the local machine, push to a remote repository and launch Jenkins build job
Execute 'ant init-push' Adds and does an initial push of all files for the current project to the repo
Execute 'ant commit' Performs a commit of all changed files
Execute 'ant commit-build' Add changed files to commit process and push to remote repository Also launches Jenkins CI Tasks
Execute 'ant Unit-Tests' Runs all unit tests
Execute 'ant Code-Sniffer' Run Code Sniffer Syntax Checking Tools
Execute 'ant Build-Dev' Builds the development environment from the Jenkins CI Server
Execute 'ant jshint' checks the JavaScript files against JS-Lint</echo>
	</target>



	<!-- Add additional processes when they are all working -->
	<!-- lint, Lines-Of-Code, Mess-Detector, Copy-Paste-Detect, Code-Sniffer, Doc-Builder, Unit-Tests, -->
	<target name="build"
		depends="prepare, run, Build-Dev" />

	<target name="build-parallel"
		depends="prepare, lint, tools-parallel, Copy-Paste-Detect, Unit-Tests" />

	<target name="tools-parallel" description="Run tools in parallel">
		<parallel threadCount="2">
			<sequential>
				<antcall target="Mess-Detector" />
			</sequential>
			<antcall target="Copy-Paste-Detect"/>
			<antcall target="Code-Sniffer"/>
			<antcall target="Lines-Of-Code"/>
			<antcall target="Doc-Builder"/>
		</parallel>
	</target>

	<target name="clean" description="Cleanup build artifacts from previous builds">
		<delete dir="${basedir}\build\coverage"/>
		<delete dir="${basedir}\build\logs"/>
		<delete dir="${basedir}\build\api"/>
		<delete dir="${basedir}\application\cache"/>
	</target>
 
	<target name="prepare" depends="clean" description="Prepare for the new build">
		<mkdir dir="${basedir}\build\coverage"/>
		<mkdir dir="${basedir}\build\logs"/>
		<mkdir dir="${basedir}\build\api"/>
		<mkdir dir="${basedir}\application\cache"/>
	</target>


	<target name="super-clean" depends="prepare" description="Cleans out the entire project including the local GIT repository information">
		<input
		    message="All project data (but NOT code) is going to be deleted from the local project (y/n)?"
		    validargs="y,n"
		    addproperty="do.delete"
		  />
		<condition property="do.abort">
			<equals arg1="n" arg2="${do.delete}"/>
		</condition>
		<fail if="do.abort">Build aborted by user.</fail>
		<delete file=".gitignore" />
		<delete file="${LogFile.name}" />
		<delete dir=".git" />
		<input message="Press ENTER to continue the commit" />
	</target>





	
	<!-- Code example from - http://www.sitepoint.com/tutorial-introduction-to-unit-testing-in-php-with-phpunit/ -->
	<!-- Build target example from - http://phpunit.de/manual/3.4/en/build-automation.html -->
	<target name="Unit-Tests">
		<exec dir="${basedir}/tests" executable="phpunit" failonerror="true" description="Run unit tests with PHPUnit">
			<env key="APPLICATION_ENV" value="testing"/>
			<arg line="--verbose --stderr" />   
		</exec>
	</target>


	<target name="Build-Dev" description="Builds the development environment from the Jenkins CI Server">
		<echo>git --work-tree=${server.dest} --git-dir=${server.dest}.git pull</echo>
		<exec executable="git" >
			<arg line="--work-tree=${server.dest} --git-dir=${server.dest}.git pull" />
		</exec>
	</target>

	<target name="commit" depends="prepare"
			description="Add changed files to commit process and push to remote repository" >
			<echo>Running GIT ADD -A ${basedir}</echo>
			<git command="add">
				<args>
					<arg value="-A" />
					<arg value="${basedir}" />
				</args>
			</git>

			<echo>Running GIT COMMIT</echo>
			<git command="commit" />

			<echo>Running GIT push -u origin ${git.currentbranch}</echo>
			<git command="push">
				<args>
					<arg line="-u origin ${git.currentbranch}" />
				</args>
			</git>
	</target>


	<target name="commit-build" depends="commit">
			<echo>Launching Jenkins process</echo>
			<exec executable="cmd">
				<arg value="/c" />
				<arg value="post-receive.bat" />
			</exec>
	</target>


	<target 
		name="init-project" 
		description="Create the initial project configuration on the local machine, push to a remote repository and launch Jenkins build job" 
		depends="super-clean, [Git] Init Git, [Git] Add Properties to Config, [Git] post-receive">
			<echo>Please create a new Repository named '${git.projname}' on '${RepoServer.url}'</echo>
			<input message="Press ENTER to continue the commit" />

			<git command="add">
				<args>
					<arg value="${basedir}" />
				</args>
			</git>

			<git command="commit">
				<args>
					<arg line="-m 'Initial Commit'" />
				</args>
			</git>

			<git command="remote">
				<args>
					<arg line="add origin ${git.repository}" />
				</args>
			</git>

			<git command="push">
				<args>
					<arg line="-u origin master" />
				</args>
			</git>

			<input message="Create an empty GIT repository on the remote server and add a 'remote origin' to the git config from this local config" />

			<exec executable="cmd">
				<arg value="/c" />
				<arg value="post-receive.bat" />
			</exec>
	</target>

	<target name="init-push" depends="[Git] Add all files, [Git] Initial Commit">
		<git-add-remote dir="${basedir}" repository="${git.repository}" />
		<git command="push" description="Push files to the repository" />
	</target>


<!-- Lint the PHP files in application dir. Linting the whole ZF framework library takes forever -->
	<target name="lint" description="Perform syntax check of sourcecode files">
		<apply executable="php" failonerror="true">
			<arg value="-l" />
			<fileset dir="${basedir}\application">
				<include name="**\*.php" />
				<modified />
			</fileset>
		</apply>
	</target>
 
<!-- PHPLoc (Lines Of Code) report -->  
	<target name="Lines-Of-Code" description="Measure project size using PHPLOC">
		<exec executable="phploc">
			<arg value="--log-csv" />
			<arg value="${basedir}\logs\phploc.csv" />
		</exec>
	</target>
 
<!-- PHP Mess Detector -->
	<target name="Mess-Detector" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
		<exec executable="phpmd">
			<arg path="${basedir}/application" />
			<arg value="xml" />
			<arg value="codesize,unusedcode,naming" />
			<arg value="--reportfile" />
			<arg value="${basedir}\build\logs\pmd.xml" />
		</exec>
	</target>

<!-- PHP Copy Paste Detector -->
	<target name="Copy-Paste-Detect" description="Find duplicate code using PHPCPD">
		<exec executable="phpcpd">
			<arg value="--log-pmd" />
			<arg value="${basedir}\build\logs\pmd-cpd.xml" />
		</exec>
	</target>

	<target name="Code-Sniffer" depends="prepare" description="Run Code Sniffer Syntax Checking Tools" >
		<exec dir="${basedir}"
			executable="phpcs.bat"
			output="${basedir}\build\logs\checkstyle.xml"
			failonerror="true">
			<arg line="-n -p -s -v -s --tab-width=4 --standard=ruleset.xml app\NWPatient.php "/>

			<!-- -p Show progress of run  -->
			<!-- -v Verbose output  -->
			<!-- -e lists all the sniffs, by standard, which are included -->
			<!-- -s Show sniff codes in all reports -->
		</exec>
	</target>

	<target name="Doc-Builder" description="Generates Code Documentation from built in comments" />

	<target name="lint-new" description="Lint new files listed" depends="prepare">
		<exec executable="jsl">
			<arg line="-process app\js\UAT_18June2012\app\controller\Authoring\Hydration.js >> ${basedir}\build\logs\JSLint.log" />
		</exec>
		<exec executable="jsl">
			<arg line="-process app\js\UAT_18June2012\app\model\HydrationDrug.js >> ${basedir}\build\logs\JSLint.log" />
		</exec>
	</target>


<!-- Define the task -->
<taskdef name="jshint" classname="com.philmander.jshint.JsHintAntTask" 
    classpath="ant-jshint-0.3.6-deps.jar" />


<target name="jshint">

  <!-- Lint the code -->
  <jshint dir="${basedir}/app/js" globalsFile="jshint_globals.properties" optionsFile="jshint_options.properties">
    <include name="**/*.js" />
    <report type="plain" destFile="${basedir}\build\logs\jshint-report.txt"/>
  </jshint>
</target>

</project>