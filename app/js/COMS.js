/***
 *
 *	Console Logging Code
 *
 **/
function wccConsoleLog(msg) { 
	/**
	var LogTag = Ext.getDom("LogInfo");
	if (LogTag) {
		if ("" !== LogTag.innerHTML){
			LogTag.innerHTML += "<br>";
		}
		LogTag.innerHTML += msg;
	}
	**/
}

Ext.HandleLogout = function() {
	var btn = Ext.get("LogoutBtn");
	btn.on('click', logoutPrompt, this);
};

var LogoutCancelled = true;
function logoutConfirmed(btn) {
    if ("yes" === btn) {
        LogoutCancelled = false;
        document.location.href="/logout.php";
    }
    else {
        LogoutCancelled = true;
    }
}

function logoutPrompt(e) {
    Ext.MessageBox.confirm('Confirm', 'Are you sure you want to logout?', logoutConfirmed);
}


/***
 *
 *	Google Analytics Code
 *
 **/
 /**
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-30444542-1']);
  _gaq.push(['_setDomainName', 'dbitpro.com']);
  _gaq.push(['_setAllowLinker', true]);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
**/

/***
 *
 *	YUI Boomerang Analytics Code
 *
 **/
 /**
function extract_boomerang_data(o) {
	var resultsID = document.getElementById('results');
	if (resultsID) {
		var html = "<div>";

		if(o.t_done) { 
			html += "This page took " + o.t_done + "ms to load<br>"; 
		}
		if(o.bw) { 
			html += "Your bandwidth to this server is " + parseInt(o.bw/1024) + "kbps (&#x00b1;" + parseInt(o.bw_err*100/o.bw) + "%)<br>"; 
		}
		if(o.lat) { 
			html += "Your latency to this server is " + parseInt(o.lat) + "&#x00b1;" + o.lat_err + "ms<br>"; 
		}
		if(o.r) {
			html += "You came to this page from " + o.r + "<br>"; 
		}
		if(o.u) {
			html += "The current URI = " + o.u + "<br>"; 
		}
		html += "</div>";

		resultsID.innerHTML = html;
	}
	return true;
}

BOOMR.addVar("page_id", "Home");
BOOMR.subscribe('before_beacon', extract_boomerang_data );
BOOMR.init({
	beacon_url: "/libs/images/beacon-test.gif",
	BW : {
		base_url: "/libs/images/"
	}

});
**/

/**
 *
 * CONSTANTS FILE
 *
 **/
// Note: ExtJS bombs when strict mode is applied
// Useful functions within the application
/*********** Search for - LIST OF CONTROLLERS 
 **** Controllers ~ 611 & 1751
/**
 *
 *	this.getController("NewPlan.OEM").IsDayAnAdminDay( Ext.Date.format( new Date(), "m/d/Y") );
 *	If the date passed is an Admin day for the current Patients currently active template then
 *	the OEM Data for that Admin day is returned.
 *	Else returns null.
 *	Member of the "NewPlan.OEM" controller
 *
 **/
var MaxTimeoutMinutes = 5;
var MaxTimeoutSec = MaxTimeoutMinutes * 60;
var MaxTimeoutMS = MaxTimeoutSec * 1000;
var LockedInfo = null;

Ext.override(Ext.data.proxy.Ajax, {
	timeout: MaxTimeoutMS
});
Ext.override(Ext.data.Connection, {
	timeout: MaxTimeoutMS
});
Ext.override(Ext.form.action.Action, {
	timeout: MaxTimeoutSec
});
Ext.Ajax.timeout = MaxTimeoutMS;


// MWB 21 Jan 2012 - Cleaned up the code, ran through JSLint which caught a couple of missing ";" and http://jsbeautifier.org/
// All URLs for the application (REST Data Stores) must be included here.
// This way whenever the base structure/path of all the URLs needs to change it can be done in a single place.
// Moved into the index.php file (approx line 47) to be based on the $Version php variable;

var theJSPath = theJSPath + "app";
Ext.URLs = [];
Ext.COMSModels = []; // Needed for Lookup Table Models, only needed for local dev environment.
Ext.Loader.setConfig({
	enabled: true,
	paths: {
		// "COMS": theJSPath,
		"Ext.ux": "/libs/ExtJS_4.1.0/examples/ux"
		//		"Ext.ux" : theJSPath + "/ux"	// <--- Comment out line above and UNcomment this line to build deployment version
	}
});



Ext.URLs.Inventory               = "/Reports/Inventory";
Ext.URLs.Lockout                 = "/Patient/Lock";
Ext.URLs.LoadVPR                 = "/Patient/VPR";
Ext.URLs.MedReminders            = "/Patient/MedReminders";
Ext.URLs.PatientDischarge        = "/Patient/DischargeInstructions";
Ext.URLs.DiseaseStaging          = "/LookUp/DiseaseStaging";

Ext.URLs.ClinicInfo              = "/LookUp/ClinicInfo";
Ext.URLs.DischargeInstruction    = "/LookUp/DischargeInstruction";
Ext.URLs.ToxicityInstruction     = "/LookUp/ToxicityInstruction";
Ext.URLs.CumulativeDosingMeds    = "/LookUp/CumulativeDoseMeds";
Ext.URLs.MedRisks                = "/LookUp/MedRisks";
Ext.URLs.TemplateLocation        = "/LookUp/TemplateLocation/";
Ext.URLs.MedDoc                  = "/LookUp/MedDocs";
Ext.URLs.TemplateMedDocs         = "/LookUp/TemplateMedDocs";
Ext.URLs.MedHold                 = "/LookUp/MedHold";
Ext.URLs.RoundingRule            = "/LookUp/RoundingRule";
Ext.URLs.SiteConfig              = "/LookUp/SiteConfig";
Ext.URLs.LookupIVFluidType4Med   = "/LookUp/IVFluidType4Med/";
Ext.URLs.DiseaseType             = "/LookUp/view/DiseaseType";
Ext.URLs.DrugInfo                = "/LookUp/DrugInfo";
// No Params,
// Returns list of all Diseases, used in "Select Disease Type" combobox
// Example Usage - https://devtest.dbitpro.com/LookUp/view/DiseaseType


Ext.URLs.IntelligentDataEntry    = "/LookUp/IDEntry";
Ext.URLs.NOT_USED_IDEntry        = "/LookUp/IDEntry";

Ext.URLs.TemplateAlias           = "/LookUp/view/TemplateAlias";
// No Params,
// Returns list of all Template Aliases (e.g. User Defined Template Name)
// Used to determine duplicate Template by User Name

Ext.URLs.Templates               = "/LookUp/Templates";
// No Param - Returns list of templates available

Ext.URLs.TemplateList            = "/LookUp/Templates";

Ext.URLs.TemplateListByLocation  = "/LookUp/Templates/Location"; // Requires LocationID as the last parameter

Ext.URLs.FlagTemplateInactive    = "/LookUp/flagTemplateInactive";

Ext.URLs.BaseView                = "/LookUp/view";
Ext.URLs.TimeFrameUnit           = "/LookUp/view/TimeFrameUnit";
Ext.URLs.TempLoc                 = "/LookUp/view/TempLoc";
Ext.URLs.DelivMech               = "/LookUp/view/DelivMech";

Ext.URLs.EmetogenicLevel_ASCO    = "/LookUp/view/Erisk_ASCO";
Ext.URLs.EmetogenicLevel_NCCN    = "/LookUp/view/Erisk_NCCN";
Ext.URLs.EmetogenicLevel         = "/LookUp/view/Emetogenic";
Ext.URLs.EmeticMeds              = "/LookUp/EmeticMeds";

Ext.URLs.TemplateSources         = "/LookUp/view/TemplateSource";

Ext.URLs.DiseaseStage            = "/LookUp/DiseaseStage";
// Param = DiseaseType ID,
// Returns list of all Stages for the specified Disease Type, used in "Select Disease Stage" combobox
// Example Usage - https://devtest.dbitpro.com/LookUp/DiseaseStage/C884F3AA-0B21-E111-BF57-000C2935B86F

Ext.URLs.Lookups                 = "/LookUp/viewall";
Ext.URLs.AddLookup               = "/LookUp/save"; //KD - 12/20/11 - new URI associated with adding data to the lookup table
Ext.URLs.DeleteLookup            = "/LookUp/save"; // "/LookUp/delete"; //KD - 12/23/11 - new URI associated with deleting data from the lookup table

Ext.URLs.References              = "/LookUp/view/References"; // MWB - 12/27/2011 - Moved from local to SQL Data Store
Ext.URLs.HydrationDrug           = "/LookUp/Hydration"; // MWB - 12/28/2011 - Added Hydration drug listing
Ext.URLs.NOT_USED_Drugs          = "/LookUp/view/Drug/NonFormaDrug"; // MWB - 12/29/2011 - Added drug listing //KD - 1/13/11 - To support Non-Formulary Drugs
Ext.URLs.Drugs = "/LookUp/view/Drug"; //KD - 05/17/12 - Will Append 'InPatient' or 'OutPatient' in Controller
Ext.URLs.DrugsInPatient = "/LookUp/view/DrugsInPatient";
Ext.URLs.DrugsOutPatient = "/LookUp/view/DrugsOutPatient";
Ext.URLs.DrugUnits = "/LookUp/view/Unit/Drug"; // MWB - 12/29/2011 - Added drug units listing
Ext.URLs.Units = "/LookUp/view/Unit"; // MWB - 12/29/2011 - Added drug units listing
Ext.URLs.DrugRegimen = "/LookUp/DrugRegimen"; // MWB - 12/30/2011 - Added drug Regimen
Ext.URLs.Infusion = "/LookUp/view/Route"; // MWB - 12/30/2011 - Added Infusion
Ext.URLs.CTOS = "/LookUp/TemplateData/"; // MWB - 1/2/2012 - Added TemplateData/CTOS
Ext.URLs.AddCTOS = "/LookUp/saveTemplate/";
Ext.URLs.UpdateCTOS = "/LookUp/updateTemplate/";
Ext.URLs.DeleteTemplate = "/LookUp/deleteTemplate"; //KD 1/26/12 - To delete Templates.

Ext.URLs.IVFluidType = "/LookUp/IVFluidType/";
Ext.URLs.FluidType = "/LookUp/view/FluidType"; //KD 3/7/2012 - Retrieve Fluid Types

Ext.URLs.PrintTemplate = "/LookUp/PrintTemplate";
// Param = Template GUID
// Opens a new window showing the specified template as a stand alone page for printing.
// Example Usage - https://mwb.dbitpro.com/LookUp/PrintTemplate/D7356037-A3B5-E111-A560-000C2935B86F










Ext.URLs.PatientCumulativeDosing = "/Patient/CumulativeDoseTracking";


Ext.URLs.Amputations = "/Patient/Amputations";
Ext.URLs.CancerType = "/Patient/Cancer";



Ext.URLs.Reasons = "/Workflow/Reasons";
Ext.URLs.Patients = "/Patient/viewall";
// No Params,
// Returns list of all patients and their info, used in the "Select Patient from CRPS" combobox
// Example Usage - https://devtest.dbitpro.com/Patient/viewall
//
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns the info for the specified patient.
//	{
//	    "success": true,
//	    "total": 1,
//	    "records": [
//	        {
//	            "id": "4A12C2FF-E4A4-E111-903E-000C2935B86F",
//	            "name": "PATIENT  FIVEHUNDREDTWENTY",
//	            "DOB": "04/07/1935",
//	            "Gender": "M",
//	            "Age": "77",
//	            "DFN": "100519",
//	            "TemplateName": "",
//	            "TemplateDescription": "",
//	            "TemplateID": "",
//	            "TreatmentStart": "",
//	            "TreatmentEnd": "",
//	            "TreatmentStatus": "",
//	            "Goal": "",
//	            "ClinicalTrial": "",
//	            "WeightFormula": "",
//	            "BSAFormula": "",
//	            "PerformanceStatus": "",
//	            "Amputations": []
//	        }
//	    ]
//	}
// Example Usage - https://devtest.dbitpro.com/Patient/viewall/28225CF5-3937-E111-9B9C-000C2935B86F


Ext.URLs.HoldCancel = "/Patient/HoldCancel";
Ext.URLs.OrderHoldCancel = "/Orders/HoldCancel";
Ext.URLs.OrderStatus = "/Orders/OrderStatus";

Ext.URLs.LabInfo = "/Patient/LabInfoResults";
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns list of Lab Info Results for specified patient
// Example Usage - https://devtest.dbitpro.com/Patient/LabInfoResults/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.Allergies = "/Patient/Allergies";
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns list of Allergies for specified patient
// Example Usage - https://devtest.dbitpro.com/Patient/Allergies/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.PatientHistory = "/Patient/History";
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns list of History Results for specified patient



Ext.URLs.PatientTemplates = "/Patient/Templates/";
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns list of all templates which have been applied to a given patient as 2 arrays (current and historical)
// Example Usage (for Patient f0400) - https://mwb.dbitpro.com/Patient/Templates/6855D2FD-27A1-E111-903E-000C2935B86F

Ext.URLs.PatientTemplate = "/Patient/Template/";
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns Template currently applied for specified patient
// Example Usage - https://devtest.dbitpro.com/Patient/Template/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.AddPatientTemplate = "/Patient/savePatientTemplate/";

Ext.URLs.SavePatient = "/Patient/savePatient";

Ext.URLs.OEMRecords = "/Patient/OEM"; // MWB 02/17/2012 - Added OEM Record URI
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns list of OEM Records for specified patient
// Example Usage - https://devtest.dbitpro.com/Patient/OEM/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.Edit_OEMRecord = "/Patient/OEM"; // MWB 3/5/2012 - Added Edit/Save OEM Record URI - Pending Kevin's specific URI from the framework


Ext.URLs.Vitals = "/Patient/Vitals";
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns list of Vitals for specified patient
// Example Usage - https://devtest.dbitpro.com/Patient/Vitals/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.AddVitals = "/Patient/Vitals";


Ext.URLs.AdminGlobals = "/Admin/Globals";
// No Params
// Returns list of globals
// Example usage - https://devtest.dbitpro.com/Admin/Globals
// returns - {"success":true,"total":1,"records":[{"domain":"sictest.dbitpro.com","sitelist":"901"}]}

Ext.URLs.AdminUsers = "/Admin/Users";
Ext.URLs.ActiveWorkflows = "/Admin/ActiveWorkflows";
Ext.URLs.MedsNonRounded = "/Admin/MedsNonRounded";
Ext.URLs.Orders = "/Orders/Orders";

// Ext.URLs.ND_Treatment = "/Treatment/NDT";
// Ext.URLs.AddND_Treatment = "/Treatment/NDT";
Ext.URLs.ReadND_Treatment = "/NursingDoc/Treatment"; // Param = PAT_ID to obtain all treatments for the current ID. Used mostly in Flowsheet
Ext.URLs.ND_Treatment = "/Orders/Orders"; // This URI is called to obtain the initial Treatment Record from the Orders generated.
Ext.URLs.ND_TreatmentDispensed = "/Orders/Dispensed/"; // This URI is called to obtain the initial Treatment Record from the Orders generated.
Ext.URLs.AddND_Treatment = "/Orders/Orders";
// Param = none
// Returns all the orders for all patients for the next 3 days.
// The ND_Treatment store has a filter to grab ONLY the orders for the current patient for the current day.
// (see app\controller\NewPlan\CTOS\NursingDocs\TreatmentTab.js)



Ext.URLs.ChangeAdminDate = "";

Ext.URLs.FlowSheetRecords = "/Flowsheet/FS2"; // "Flowsheet/Data";		// Used in Flowsheet Model
Ext.URLs.AddFlowSheetRecords = "/Flowsheet/FS2"; // "Flowsheet/Data";		// Used in Flowsheet Model
Ext.URLs.FlowSheetOptionalInfo = "/Flowsheet/Optional"; // "Flowsheet Optional questions

// OLD DATA ---> Param = Flowsheet Record GUID - This is the ID for the Flowsheet which is an array of FlowsheetAdminDay records
// Param = PAT_ID - Patient Treatment ID which identifies the set of records for the current treatment (including flowsheet, nursing docs, OEM, etc)
// Returns Success or Failure of data retrieval from MDWs as a standard JSON object:
//	{
//		"success": "true",
//		"total": "1",
//		"records": [
//			{
//				"FlowsheetAdminDay" : [
//					"id" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//					"PatientID" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//					"Cycle" : 1,
//					"Day" : 1,
//					"AdminDate" : "06/06/2012",
//					"PS" : "Dead",
//					"PSID" : 5,
//					"Weight" : 250,		// Weight in pounds
//					"DiseaseResponse" : "",
//					"Toxicity" : "",
//					"Other" : "",
//					"Labs" : [
//						"id" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//						"PatientID" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//						"Cycle" : 1,
//						"Day" : 1,
//						"AdminDate" : "06/06/2012",
//						"Name" : "",
//						"Data" : ""
//					]
//					"PreTherapy" : [
//						"id" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//						"PatientID" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//						"Cycle" : 1,
//						"Day" : 1,
//						"AdminDate" : "06/06/2012",
//						"Drug" : "",
//						"AdministeredDose" : ""
//					]
//					"Therapy" : [
//						"id" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//						"PatientID" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//						"Cycle" : 1,
//						"Day" : 1,
//						"AdminDate" : "06/06/2012",
//						"Drug" : "",
//						"AdministeredDose" : ""
//					]
//					"PostTherapy" : [
//						"id" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//						"PatientID" : "28225CF5-3937-E111-9B9C-000C2935B86F",
//						"Cycle" : 1,
//						"Day" : 1,
//						"AdminDate" : "06/06/2012",
//						"Drug" : "",
//						"AdministeredDose" : ""
//					]
//				]
//			}
//		]
//	}
//		OR
//	{"success":"false","message":"Some Error Message","records":""}
// Example Usage - https://devtest.dbitpro.com/Mymdws/Match/B0087


Ext.URLs.MDWS = "/mdws/Patient/index.php";

Ext.URLs.MDWSMatch = "/Mymdws/Match";
// Param = Patient SSN (e.g. B0087)
// Returns Success or Failure of data retrieval from MDWs as a standard JSON object:
//	{
//		"success": "true",
//		"total": "1",
//		"records": {
//			"ID": "94FE3D4E-B78F-E111-8613-000C2935B86F",
//			"Name": "EIGHTYSEVEN-PATIENT BCMA",
//			"Age": 77,
//			"DOB": "04/07/1935",
//			"Gender": "M",
//			"lname": "BCMA",
//			"fname": "EIGHTYSEVEN-PATIENT",
//			"dfn": 100102,
//			"TemplateID": "",
//			"TemplateDescription": "",
//			"TemplateName": "",
//			"TreatmentStart": "",
//			"DateTaken": "",
//			"TreatmentEnd": ""
//		}
//	}
//		OR
//	{"success":"false","message":"Some Error Message","records":""}
// Example Usage - https://devtest.dbitpro.com/Mymdws/Match/B0087



Ext.URLs.MegaMDWS = "/Mymdws/Mega";
// Param = Patient DFN (e.g. 100001)
// Returns Success or Failure of data retrieval from MDWs as a standard JSON object:
//	{"success":"true","message":"Mega call completed succesfully","records":""}
//		OR
//	{"success":"false","message":"MDWS is down...","records":""}
// Example Usage - https://devtest.dbitpro.com/Mymdws/Mega/100000



Ext.URLs.ND_IVSite = "/NursingDoc/IVSite/";
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns $$$$$$$$$$$$$$$ for specified patient
// Example Usage - https://devtest.dbitpro.com/NursingDoc/IVSite/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.AddND_IVSite = "/NursingDoc/IVSite/";
// JSON -
//	{
//		"patientId":"2A225CF5-3937-E111-9B9C-000C2935B86F",
//		"DeviceID":"1",
//		"DeviceName":"Hickman",
//		"GaugeID":"2",
//		"GaugeName":"22g",
//		"LocationID":"3",
//		"LocationName":"Right Dorsal Proximal Forearm",
//		"AccessComments":"Some long comment",
//		"NoSymptoms":true,
//		"Pain":true,
//		"Swelling":false,
//		"Erythema":false,
//		"Disconnected":true,
//		"AppearanceComments":"Some more long comments",
//		"PreTreatment":true,
//		"DuringTreatment":false,
//		"PostTreatment":true,
//		"BBRVComments":"Some more BBRV Comments"
//	}
// Note: sequence and levelChosen must be integers.




Ext.URLs.AddND_React_Assess = "/NursingDoc/ReactAssess/";


Ext.URLs.ND_Assessment = "/NursingDoc/Assessment/"; // MWB - 22 Feb 2012
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns $$$$$$$$$$$$$$$ for specified patient
// Example Usage - https://devtest.dbitpro.com/NursingDoc/Assessment/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.AddND_Assessment = "/NursingDoc/Assessment/"; // MWB - 22 Feb 2012
// JSON -
//	{
//		"patientId":"2A225CF5-3937-E111-9B9C-000C2935B86F",
//		"assessmentDetails":[
//			{"sequence":4,"fieldLabel":"Sleep","choice":false,"comments":"Lots of comments","levelChosen":5},
//			{"sequence":2,"fieldLabel":"Jog","choice":true,"comments":"Lots of comments","levelChosen":3}
//		]
//	}
// Note: sequence and levelChosen must be integers.

Ext.URLs.ND_GenInfo = "/NursingDoc/GenInfo/"; // MWB - 22 Feb 2012
// Param = Patient ID (e.g. 28225CF5-3937-E111-9B9C-000C2935B86F)
// Returns $$$$$$$$$$$$$$$ for specified patient
// Example Usage - https://devtest.dbitpro.com/NursingDoc/GenInfo/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.AddND_GenInfo = "/NursingDoc/GenInfo/"; // MWB - 22 Feb 2012

// Ext.URLs.CTCAE_SOC = "/js/MWB_OEM1/app/data1/NursingDocs/CTCAE_SOC.js";
Ext.URLs.CTCAE_SOC = "/NursingDoc/CTCAE_SOC";
// Ext.URLs.CTCAE_Data = "/js/MWB_OEM1/app/data1/NursingDocs/CTCAE_Data";
Ext.URLs.CTCAE_Data = "/NursingDoc/CTCAE_Data";

Ext.URLs.AdverseEventsHistory = "/NursingDoc/AdverseEventsHistory";



Ext.URLs.EoTS = "/EndTreatmentSummary/EoTS";
// Param = EoTS GUID;
// Returns data structure for a specific EoTS;
// Example Usage - https://devtest.dbitpro.com/EndTreatmentSummary/EoTS/28225CF5-3937-E111-9B9C-000C2935B86F

Ext.URLs.AddEoTS = "/EndTreatmentSummary/EoTS";



Ext.URLs.ChemoHistory = theJSPath + "/data1/ChemoHistory.js";
// Used in the ChemoHistory Model.

Ext.URLs.RadiationHistory = theJSPath + "/data1/RadiationHistory.js";
// Used in the RadiationHistory Model.

// Ext.URLs.Template = theJSPath + "/data1/Templates.js";
Ext.URLs.CycleLengthMax = theJSPath + "/data1/CycleLengthMax.js";
// Used in the LookupTable_CycleLengthMax model.

// INLINE FOR TESTING: Ext.URLs.Messages = "app/data1/Messages/Filtered/RID/16.js";
// Param = Role ID,
// Returns list of all Messages for the specified Role ID, used in "MessagesTab" Grid Control
// Example Usage - https://devtest.dbitpro.com/Messages/1



Ext.URLs.ToxGrid = "/NursingDoc/ToxicityDetail";









Ext.COMSModels.EmeticMeds = "COMS.model.EmeticMeds";

Ext.COMSModels.DiseaseStaging = "COMS.model.DiseaseStaging";
Ext.COMSModels.MedRisks = "COMS.model.MedRisks";
Ext.COMSModels.DischargeInstruction = "COMS.model.DischargeInstruction";
Ext.COMSModels.ClinicInfo = "COMS.model.ClinicInfo";
Ext.COMSModels.IVFluidType = "COMS.model.IVFluidType";
Ext.COMSModels.Allergies = "COMS.model.Allergies";
Ext.COMSModels.ChemoHistory = "COMS.model.ChemoHistory";
Ext.COMSModels.CTOS = "COMS.model.CTOS";
Ext.COMSModels.CTOS_References = "COMS.model.CTOS_References";
Ext.COMSModels.CumulativeDoseMedsInRegimen = "COMS.model.CumulativeDoseMedsInRegimen";
Ext.COMSModels.CycleLengthMax = "COMS.model.LookupTable_CycleLengthMax";
Ext.COMSModels.CycleLengthStore = "COMS.model.LookupTable_CycleLengthStore";
Ext.COMSModels.DiseaseType = "COMS.model.LookupTable_DiseaseType";
Ext.COMSModels.DiseaseStage = "COMS.model.DiseaseStage";
Ext.COMSModels.Drugs = "COMS.model.Drugs"; // MWB - 12/29/2011 - Added drug listing
Ext.COMSModels.DrugUnits = "COMS.model.DrugUnits"; // MWB - 12/29/2011 - Added drug units listing
Ext.COMSModels.DrugRegimen = "COMS.model.DrugRegimen"; // MWB - 12/30/2011 - Added Drug Regimen
Ext.COMSModels.EmetogenicLevel = "COMS.model.LookupTable_EmetogenicLevel";
Ext.COMSModels.FebrileNeutropeniaRisk = "COMS.model.LookupTable_FebrileNeutropeniaRisk";
Ext.COMSModels.FluidType = "COMS.model.LookupTable_FluidType";
Ext.COMSModels.GenericLookup = "COMS.model.GenericLookupModel";
Ext.COMSModels.Hydration = "COMS.model.HydrationDrug"; // MWB 12/28/2011 - Added for the Hydration Drugs
Ext.COMSModels.Infusion = "COMS.model.Infusion"; // MWB - 12/30/2011 - Added Infusion
Ext.COMSModels.LabInfo = "COMS.model.LabInfo";
Ext.COMSModels.LUReferences = "COMS.model.LUReferences"; // MWB 12/27/2011 - Added for the AddReference Combo
Ext.COMSModels.LookupTable = "COMS.model.LookupTable"; //KD - 12/20/11 - Model associated with adding data to the lookup table
Ext.COMSModels.Med = "COMS.model.Med";
Ext.COMSModels.MHMedInfusion = "COMS.model.MHMedInfusion";
Ext.COMSModels.MHMed = "COMS.model.MHMed";
Ext.COMSModels.PatientHistory = "COMS.model.PatientHistory";
Ext.COMSModels.PatientInfo = "COMS.model.PatientInfo";
Ext.COMSModels.PatientInfoMDWS = "COMS.model.PatientInfoMDWS";
// Ext.COMSModels.PatientList = "COMS.model.PatientList";
Ext.COMSModels.TemplateList = "COMS.model.TemplateList";
Ext.COMSModels.TemperatureLocation = "COMS.model.TemperatureLocation";
Ext.COMSModels.DeliveryMechanism = "COMS.model.DeliveryMechanism";

Ext.COMSModels.GlobalsTable = "COMS.model.GlobalsTable";
Ext.COMSModels.GlobalLookupModel = "COMS.model.GlobalLookupModel";
Ext.COMSModels.UsersTable = "COMS.model.UsersTable";
Ext.COMSModels.ActiveWorkflowsTable = "COMS.model.ActiveWorkflowsTable";
Ext.COMSModels.MedsNonRoundedTable = "COMS.model.MedsNonRoundedTable";
Ext.COMSModels.MedDocs = "COMS.model.MedDocs";
Ext.COMSModels.OrdersTable = "COMS.model.OrdersTable";

Ext.COMSModels.PatientTemplates = "COMS.model.PatientTemplates";
Ext.COMSModels.References = "COMS.model.References";
Ext.COMSModels.RadiationHistory = "COMS.model.RadiationHistory";
Ext.COMSModels.Template = "COMS.model.LookupTable_Template";
Ext.COMSModels.Templates = "COMS.model.LookupTable_Templates";
Ext.COMSModels.TemplateSources = "COMS.model.LookupTable_TemplateSources";
Ext.COMSModels.TimeFrameUnit = "COMS.model.LookupTable_TimeFrameUnit";
Ext.COMSModels.TotalCoursesMax = "COMS.model.LookupTable_TotalCoursesMax";
Ext.COMSModels.OEMRecords = "COMS.model.OEMRecords"; // MWB - 02/17/2012 - OEM Record Model
Ext.COMSModels.MDWs = "COMS.model.MDWs"; // MWB - 3/15/2012 - MDWs Data Model
Ext.COMSModels.Edit_OEMRecord = "COMS.model.OEMEditRecord"; // MWB 03/5/2012 - Added Edit/Save OEM Record Model
Ext.COMSModels.Vitals = "COMS.model.Vitals";
Ext.COMSModels.ND_Assessment = "COMS.model.ND_Assessment"; // MWB - 22 Feb 2012
Ext.COMSModels.ND_GenInfo = "COMS.model.ND_GenInfo"; // MWB - 22 Feb 2012
Ext.COMSModels.ND_CTCAE_SOC = "COMS.model.ND_CTCAE_SOC"; // MWB - 27 Feb 2012
Ext.COMSModels.ND_CTCAE_Data = "COMS.model.ND_CTCAE_Data"; // MWB - 27 Feb 2012
// INLINE FOR TESTING: Ext.COMSModels.Messages = "COMS.model.Messages";


Ext.COMSModels.EoTS = "COMS.model.EndTreatmentSummary";
Ext.COMSModels.ND_Treatment = "COMS.model.ND_Treatment";
Ext.COMSModels.Flowsheet = "COMS.model.Flowsheet";
Ext.COMSModels.IDEntry = "COMS.model.IDEntry";
Ext.COMSModels.Toxicity = "COMS.model.Toxicity";
Ext.COMSModels.CumulativeDosingMeds = "COMS.model.CumulativeDosingMeds";
Ext.COMSModels.PatientCumulativeDosing = "COMS.model.PatientCumulativeDosing";
Ext.COMSModels.MedReminder = "COMS.model.MedReminder";
Ext.COMSModels.ToxGridModel = "COMS.model.ToxGridModel";


/**
 * @class Ext.ux.CheckColumn
 * @extends Ext.grid.column.Column
 * A Header subclass which renders a checkbox in each column cell which toggles the truthiness of the associated data field on click.
 *
 * Example usage:
 * 
 *    // create the grid
 *    var grid = Ext.create('Ext.grid.Panel', {
 *        ...
 *        columns: [{
 *           text: 'Foo',
 *           ...
 *        },{
 *           xtype: 'checkcolumn',
 *           text: 'Indoor?',
 *           dataIndex: 'indoor',
 *           width: 55
 *        }]
 *        ...
 *    });
 *
 * In addition to toggling a Boolean value within the record data, this
 * class adds or removes a css class <tt>'x-grid-checked'</tt> on the td
 * based on whether or not it is checked to alter the background image used
 * for a column.
 */
Ext.define('Ext.ux.CheckColumn', {
    extend: 'Ext.grid.column.Column',
    alias: 'widget.checkcolumn',

    /**
     * @cfg {Boolean} [stopSelection=true]
     * Prevent grid selection upon mousedown.
     */
    stopSelection: true,

    tdCls: Ext.baseCSSPrefix + 'grid-cell-checkcolumn',

    constructor: function() {
        this.addEvents(
            /**
             * @event beforecheckchange
             * Fires when before checked state of a row changes.
             * The change may be vetoed by returning `false` from a listener.
             * @param {Ext.ux.CheckColumn} this CheckColumn
             * @param {Number} rowIndex The row index
             * @param {Boolean} checked True if the box is to be checked
             */
            'beforecheckchange',
            /**
             * @event checkchange
             * Fires when the checked state of a row changes
             * @param {Ext.ux.CheckColumn} this CheckColumn
             * @param {Number} rowIndex The row index
             * @param {Boolean} checked True if the box is now checked
             */
            'checkchange'
        );
        this.callParent(arguments);
    },

    /**
     * @private
     * Process and refire events routed from the GridView's processEvent method.
     */
    processEvent: function(type, view, cell, recordIndex, cellIndex, e, record, row) {
        var me = this,
            key = type === 'keydown' && e.getKey(),
            mousedown = type == 'mousedown';

        if (mousedown || (key == e.ENTER || key == e.SPACE)) {
            var dataIndex = me.dataIndex,
                checked = !record.get(dataIndex);

            // Allow apps to hook beforecheckchange
            if (me.fireEvent('beforecheckchange', me, recordIndex, checked) !== false) {
                record.set(dataIndex, checked);
                me.fireEvent('checkchange', me, recordIndex, checked);

                // Mousedown on the now nonexistent cell causes the view to blur, so stop it continuing.
                if (mousedown) {
                    e.stopEvent();
                }

                // Selection will not proceed after this because of the DOM update caused by the record modification
                // Invoke the SelectionModel unless configured not to do so
                if (!me.stopSelection) {
                    view.selModel.selectByPosition({
                        row: recordIndex,
                        column: cellIndex
                    });
                }

                // Prevent the view from propagating the event to the selection model - we have done that job.
                return false;
            } else {
                // Prevent the view from propagating the event to the selection model if configured to do so.
                return !me.stopSelection;
            }
        } else {
            return me.callParent(arguments);
        }
    },

    // Note: class names are not placed on the prototype bc renderer scope
    // is not in the header.
    renderer : function(value){
        var cssPrefix = Ext.baseCSSPrefix,
            cls = [cssPrefix + 'grid-checkheader'];

        if (value) {
            cls.push(cssPrefix + 'grid-checkheader-checked');
        }
        return '<div class="' + cls.join(' ') + '">&#160;</div>';
    }
});


/**
 * http://www.sencha.com/forum/showthread.php?198862
 **/
Ext.define('Ext.ux.CheckCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: 'widget.checkcombo',
    multiSelect: true,
    allSelector: false,
    noData: false,
    noDataText: 'No combo data',
    addAllSelector: false,
    allSelectorHidden: false,
    enableKeyEvents: true,
    afterExpandCheck: false,
    allText: 'All',
    oldValue: '',
    listeners:
    {
/* uncomment if you want to reload store on every combo expand
        beforequery: function(qe)
        {
            this.store.removeAll();
            delete qe.combo.lastQuery;
        },
*/
        focus: function(cpt)
        {
            cpt.oldValue = cpt.getValue();
        },
        keydown: function(cpt, e, eOpts)
        {
            var    value = cpt.getRawValue(),
                oldValue = cpt.oldValue;
            
            if(value != oldValue) cpt.setValue('');
        }
    },
    createPicker: function() 
    {
        var    me = this,
            picker,
            menuCls = Ext.baseCSSPrefix + 'menu',
            opts = Ext.apply(
            {
                pickerField: me,
                selModel:
                {
                    mode: me.multiSelect ? 'SIMPLE' : 'SINGLE'
                },
                floating: true,
                hidden: true,
                ownerCt: me.ownerCt,
                cls: me.el.up('.' + menuCls) ? menuCls : '',
                store: me.store,
                displayField: me.displayField,
                focusOnToFront: false,
                pageSize: me.pageSize,
                tpl: 
                [
                    '<ul><tpl for=".">',
                        '<li role="option" class="' + Ext.baseCSSPrefix + 'boundlist-item"><span class="x-combo-checker">&nbsp;</span> {' + me.displayField + '}</li>',
                    '</tpl></ul>'
                ]
            }, me.listConfig, me.defaultListConfig);


        picker = me.picker = Ext.create('Ext.view.BoundList', opts);
        if(me.pageSize) 
        {
            picker.pagingToolbar.on('beforechange', me.onPageChange, me);
        }        


        me.mon(picker,
        {
            itemclick: me.onItemClick,
            refresh: me.onListRefresh,
            scope: me
        });


        me.mon(picker.getSelectionModel(),
        {
            'beforeselect': me.onBeforeSelect,
            'beforedeselect': me.onBeforeDeselect,
            'selectionchange': me.onListSelectionChange,
            scope: me
        });


        me.store.on('load', function(store)
        {
            if(store.getTotalCount() == 0)
            {
                me.allSelectorHidden = true;
                if(me.allSelector != false) me.allSelector.setStyle('display', 'none');
                if(me.noData != false) me.noData.setStyle('display', 'block');
            }
            else
            {
                me.allSelectorHidden = false;
                if(me.allSelector != false) me.allSelector.setStyle('display', 'block');
                if(me.noData != false) me.noData.setStyle('display', 'none');
            }
        });


        return picker;
    },
    reset: function()
    {
        var    me = this;


        me.setValue('');
    },
    setValue: function(value)
    {
        this.value = value;
        if(!value)
        {
            if(this.allSelector != false) this.allSelector.removeCls('x-boundlist-selected');
            return this.callParent(arguments);
        }


        if(typeof value == 'string') 
        {
            var    me = this,
                records = [],
                vals = value.split(',');


            if(value == '')
            {
                if(me.allSelector != false) me.allSelector.removeCls('x-boundlist-selected');
            }
            else
            {
                if(vals.length == me.store.getCount() && vals.length != 0)
                {
                    if(me.allSelector != false) me.allSelector.addCls('x-boundlist-selected');
                    else me.afterExpandCheck = true;
                }
            }

            Ext.each(vals, function(val)
            {
				var record;
                if (Ext.isNumber(val)) {
                    record = me.store.getById(parseInt(val));
                } else {
                    record = me.store.findRecord(me.valueField, val);
                }
                if(record) records.push(record);
            });


            return me.setValue(records);
        }
        else return this.callParent(arguments);
    },
    getValue: function()
    {
        if(typeof this.value == 'object') return this.value.join(',');
        else return this.value;
    },
    getSubmitValue: function()
    {
        return this.getValue();
    },
    expand: function()
    {
        var    me = this,
            bodyEl, picker, collapseIf;


            if(me.rendered && !me.isExpanded && !me.isDestroyed)
            {
            bodyEl = me.bodyEl;
            picker = me.getPicker();
            collapseIf = me.collapseIf;


            // show the picker and set isExpanded flag
            picker.show();
            me.isExpanded = true;
            me.alignPicker();
            bodyEl.addCls(me.openCls);


            if(me.noData == false) me.noData = picker.getEl().down('.x-boundlist-list-ct').insertHtml('beforeBegin', '<div class="x-boundlist-item" role="option">'+me.noDataText+'</div>', true);


            if(me.addAllSelector == true && me.allSelector == false)
            {
                me.allSelector = picker.getEl().down('.x-boundlist-list-ct').insertHtml('beforeBegin', '<div class="x-boundlist-item" role="option"><span class="x-combo-checker">&nbsp;</span> '+me.allText+'</div>', true);
                me.allSelector.on('click', function(e)
                {
                    if(me.allSelector.hasCls('x-boundlist-selected'))
                    {
                        me.allSelector.removeCls('x-boundlist-selected');
                        me.setValue('');
                        me.fireEvent('select', me, []);
                    }
                    else
                    {
                        var records = [];
                        me.store.each(function(record)
                        {
                            records.push(record);
                        });
                        me.allSelector.addCls('x-boundlist-selected');
                        me.select(records);
                        me.fireEvent('select', me, records); 
                    }
                });


                if(me.allSelectorHidden == true) me.allSelector.hide();
                else me.allSelector.show();
                
                if(me.afterExpandCheck == true)
                {
                    me.allSelector.addCls('x-boundlist-selected');
                    me.afterExpandCheck = false;
                }
            }


            // monitor clicking and mousewheel
            me.mon(Ext.getDoc(),
            {
                mousewheel: collapseIf,
                mousedown: collapseIf,
                scope: me
            });
            Ext.EventManager.onWindowResize(me.alignPicker, me);
            me.fireEvent('expand', me);
            me.onExpand();
        }
        else
        {
            me.fireEvent('expand', me);
            me.onExpand();
        }
    },
    alignPicker: function()
    {    
        var me = this,
            picker = me.getPicker();


        me.callParent();
    
        if(me.addAllSelector == true)
        {
            var height = picker.getHeight();
            height = parseInt(height)+20;
            picker.setHeight(height);
            picker.getEl().setStyle('height', height+'px');
        }
    },
    onListSelectionChange: function(list, selectedRecords)
    {
        var    me = this,
            isMulti = me.multiSelect,
            hasRecords = selectedRecords.length > 0;
        // Only react to selection if it is not called from setValue, and if our list is
        // expanded (ignores changes to the selection model triggered elsewhere)
        if(!me.ignoreSelection && me.isExpanded)
        {
            if(!isMulti)
            {
                Ext.defer(me.collapse, 1, me);
            }
            /*
            * Only set the value here if we're in multi selection mode or we have
            * a selection. Otherwise setValue will be called with an empty value
            * which will cause the change event to fire twice.
            */
            if(isMulti || hasRecords)
            {
                me.setValue(selectedRecords, false);
            }
            if(hasRecords)
            {
                me.fireEvent('select', me, selectedRecords);
            }
            me.inputEl.focus();


            if(me.addAllSelector == true && me.allSelector != false)
            {
                if(selectedRecords.length == me.store.getTotalCount()) me.allSelector.addCls('x-boundlist-selected');
                else me.allSelector.removeCls('x-boundlist-selected'); 
            } 
        }
    }
});

Ext.define('Ext.ux.grid.column.ActionButtonColumn', {

    extend: 'Ext.grid.column.Column',
    alias: ['widget.actionbuttoncolumn'],
    alternateClassName: 'Ext.grid.ActionButtonColumn',

    /**
* @cfg {Function} handler A function called when the button is clicked.
* The handler(or event) is passed the following parameters:<div class="mdetail-params"><ul>
* <li><code>view</code> : TableView<div class="sub-desc">The owning TableView.</div></li>
* <li><code>rowIndex</code> : Number<div class="sub-desc">The row index clicked on.</div></li>
* <li><code>colIndex</code> : Number<div class="sub-desc">The column index clicked on.</div></li>
* </ul></div>
*/

    /**
* @cfg {Array} items An Array which may contain multiple button definitions, each element of which may contain:
* <div class="mdetail-params"><ul>
* <li><code>text</code> : String<div class="sub-desc">The button text to be used as innerHTML (html tags are accepted).</div></li>
* <li><code>iconIndex</code> : String<div class="sub-desc">Optional, however either iconIndex or iconCls must be configured. Field name of the field of the grid store record that contains css class of the button to show. If configured, shown icons can vary depending of the value of this field.</div></li>
* <li><code>hideIndex</code> : String<div class="sub-desc">Optional. Field name of the field of the grid store record that contains hide flag (falsie [null, '', 0, false, undefined] to show, anything else to hide).</div></li>
* <li><code>showIndex</code> : String<div class="sub-desc">Optional. This is the polar opposite of hideIndex. Will show this button if the field specified is truethy</div></li>.
* <li><code>eventName</code> : String<div class="sub-desc">Optional. This is a unique name for an event that will get created on the parent gridview. (ignored if handler is specified)</div></li>
* <li><code>handler</code> : function<div class="sub-desc">A function called when the button is clicked.</div></li>
* <li><code>scope</code> : Ref<div class="sub-desc">The scope (<em>this</em>) of the handler function.</div></li>
* <li><code>cls</code> : String<div class="sub-desc">cls spefies the class of the button. In addition, if there is no handler or eventName set the class is stripped down to Alpha characters and suffixed with "click" to create an event on the parent gridview</div></li>
* </ul></div>
*/
    header: '&#160;',

    sortable: false,
    btns: [],
    constructor: function(config) {

        var me = this,
        cfg = Ext.apply({}, config),
        items = cfg.items || [me],
        l = items.length,
        i,
        item;
        me.btns = new Ext.util.MixedCollection();
        // This is a Container. Delete the items config to be reinstated after construction.
        delete cfg.items;
        me.callParent([cfg]);

        // Items is an array property of ActionButtonColumns
        me.items = items;
        var gv = '';

        // Renderer closure iterates through items creating a button element for each and tagging with an identifying
        me.renderer = function(v, meta, rec, rowIndex, colIndex, store, view) {
			if ("COMS.store.ND_Treatment" === store.$className) {		// HACK to get past signing button column
				if (Ext.ColSigned) {
					if (Ext.ColSigned[rowIndex]) {
						return Ext.ColSigned[rowIndex];
					}
				}
			}

            if (gv == '') {
                gv = view;

                var evnts = {
                    'actionbuttonclick':true
                }
                Ext.Array.each(items, function(btn) {
                    if (btn.handler) { }
                    else if (btn.eventName) {
                        evnts[btn.eventName] = true;
                    } else if (btn.cls) {
                        var evntName = btn.cls.replace(/[^a-zA-Z]/,'')+'click';
                        evnts[evntName]=true;
                    }
                });
                view.addEvents(evnts);
            }

            // Allow a configured renderer to create initial value (And set the other values in the "metadata" argument!)
            v = Ext.isFunction(cfg.renderer) ? cfg.renderer.apply(this, arguments)||'' : '';

            meta.tdCls += ' ' + Ext.baseCSSPrefix + 'action-col-cell';

            for (i = 0; i < l; i++) {

                item = items[i];

                var nid = Ext.id();
                var cls = Ext.baseCSSPrefix + 'action-col-button ' + Ext.baseCSSPrefix + 'action-col-button-' + String(i)+(item.cls ? ' '+item.cls : '');
                var iconCls = item.iconIndex ? rec.data[item.iconIndex] : (item.iconCls ? item.iconCls : '');
                var fun = Ext.emptyFn;
                var context = me;
                if (item.handler) {
                    if (item.context) {
                        context = item.context;
                    }
                    fun = Ext.bind(item.handler, context, [view, rowIndex, colIndex]);
                }
                else {
                    (function(item) {
                        var eventName = 'actionbuttonclick';
                        if (typeof item.eventName != 'undefined') {
                            eventName = item.eventName;
                        } else if (typeof item.cls != 'undefined') {
                            eventName = item.cls.replace(/[^a-zA-Z]/,'')+'click';
                        }
                        fun = function() {
                            if (eventName != 'actionbuttonclick') {
                                view.fireEvent('actionbuttonclick', this, view, rowIndex, colIndex);
                            }
                            view.fireEvent(eventName, view, rowIndex, colIndex);
                        }
                    })(item);
                }
                var hide;
                if (typeof item.showIndex != 'undefined') {
                    hide = !rec.data[item.showIndex];
                } else if (typeof item.hideIndex != 'undefined') {
                    hide = rec.data[item.hideIndex];
                }

                Ext.Function.defer(me.createGridButton, 100, me, [item.text, nid, rec, cls, fun, hide, iconCls]);

                v += '<div id="' + nid + '">&#160;</div>';
            }
            return v;
        };
    },

    createGridButton: function(value, id, record, cls, fn, hide, iconCls) {
        var target = Ext.get(id);
        if (target !== null) {
            var btn = new Ext.Button({
                text: value,
                cls: cls,
                iconCls: iconCls,
                hidden: hide,
                handler: fn,
                renderTo: target.parent()
            });
            this.btns.add(btn);
            Ext.get(id).remove();
        }
    },

    destroy: function() {
        delete this.items;
        delete this.renderer;
        this.btns.each(function(btn){
            btn.destroy();
        });
        return this.callParent(arguments);
    },

    cascade: function(fn, scope) {
        fn.call(scope||this, this);
    },

    // Private override because this cannot function as a Container, and it has an items property which is an Array,
    // NOT a MixedCollection.
    getRefItems: function() {
        return [];
    }
});


/**
 *
 * EXTENSIONS FILE
 *
 **/
/*************************************************************
 *
 *	All Dosing and BSA Calculations are grouped here
 *	and attached directly to the Ext object
 *	so that they can be made available to any xTemplate formulas
 *
 *************************************************************/
// data.BSA = Ext.BSA_Calc(data.Height, data.BSA_Weight, data.BSA_Method, data.Gender);
Ext.BSA_Formulas = [];
Ext.BSA_Formulas.Capped = "= Capped BSA";
Ext.BSA_Formulas.DuBois = "= 0.20247 x (Height(m)<sup>0.725</sup>) x (Weight(kg)<sup>0.425</sup>)";
Ext.BSA_Formulas.Mosteller = "= <span style=\"white-space: nowrap; font-size:larger\">&radic;<span style=\"text-decoration:overline;\">&nbsp;(Height(cm) * Weight(kg))/3600 &nbsp;</span></span>";
Ext.BSA_Formulas.Haycock = "= 0.024265 x (Height(cm)<sup>0.3964</sup>) x (Weight(kg)<sup>0.5378</sup>)";
Ext.BSA_Formulas.Gehan_George = "= 0.0235 x (Height(cm)<sup>0.42246</sup>) x (Weight(kg)<sup>0.51456</sup>)";
Ext.BSA_Formulas.Boyd = "= 0.0003207 * (Height(cm)<sup>0.3</sup>) * Weight(g) <sup>(0.7285-0.0188 log Weight(g))</sup>";

Ext.BSA_Formulas.IdealWeightF = "((Height in Inches - 60) * 2.3) + 45.5";
Ext.BSA_Formulas.IdealWeightM = "((Height in Inches - 60) * 2.3) + 50";
Ext.BSA_Formulas.AdjustedWeight = "((Weight In Kilos - Ideal Weight) * 0.4) + Ideal Weight;";
Ext.BSA_Formulas.LeanWeightF = "(1.07 * WeightInKilos) - 148 * (WeightInKilos<sup>2</sup> / (100*Height in M<sup>2</sup>));";
Ext.BSA_Formulas.LeanWeightM = "(1.1 * WeightInKilos) - 128 * (WeightInKilos<sup>2</sup> / (100*Height in M<sup>2</sup>));";




// Data from Amputee Calculator from - http://www.oncologypharmacist.net/clinical_tools.html
// Fraction of Weight and BSA Corresponding to Amputated Limbs
// Body Part Amputated	% Loss in Weight	% of BSA to Subtract
Ext.Amputations = [];

// weight = % weight loss due to amputation
// BSA = % BSA reduction due to amputation
Ext.Amputations["Upper Left Arm"] = {
	BSA: 6
};
Ext.Amputations["Upper Right Arm"] = {
	BSA: 6
};

Ext.Amputations["Lower Left Arm"] = {
	BSA: 4
};
Ext.Amputations["Lower Right Arm"] = {
	BSA: 4
};

Ext.Amputations["Left Hand and Fingers"] = {
	BSA: 3
};
Ext.Amputations["Right Hand and Fingers"] = {
	BSA: 3
};

Ext.Amputations["Left Thigh"] = {
	BSA: 12
};
Ext.Amputations["Right Thigh"] = {
	BSA: 12
};

Ext.Amputations["Lower Left Leg"] = {
	BSA: 6
};
Ext.Amputations["Lower Right Leg"] = {
	BSA: 6
};

Ext.Amputations["Left Foot"] = {
	BSA: 3
};
Ext.Amputations["Right Foot"] = {
	BSA: 3
};


/*
 * Sections:
 *		Amputations
 *		AddEditBSA
 *		AddEditCancer
 *		AddCumulativeMedication
 *		
 *	Enable Lock:
 *		Ext.COMS_LockSection(<ID of patient to lock>, <Section to lock>, <Callback Function when lock is enabled to continue>);
 *	Example:
 *		Ext.COMS_LockSection(this.application.Patient.id, "Amputations", this.showAmputationWiget); 
 *
 *	Call to Unlock last locked section
 *		Ext.COMS_UnLockSection();
 */
Ext.COMS_LockoutAjaxCall = function(fcn, rid, section, callback, params) {
	/* 
	 *	fcn = "Lock", "Unlock" 
	 *	rid = Patient_ID if fcn = "Lock", Record_ID if fcn = "Unlock";
	 *	section = Section to manage
	 */
	var CMD = "POST";
	var URL = Ext.URLs.Lockout + "/" + rid;
	if ("Unlock" == fcn) {
		CMD = "PUT";
	}
	else {
		URL += "/" + section;
	}
	Ext.Ajax.request({
		url: URL,
		method : CMD,
		scope: this,
		lockCallback : callback,
		params : params,
		success: function( response, opts ){
			var text = response.responseText;
			var resp = Ext.JSON.decode( text );
			if (resp.records) {
				LockedInfo = resp.records[0];
			}
			if (resp.success) {
				if (opts.lockCallback) {
					opts.lockCallback.call(this, opts.params);
				}
			}
			else {
				var Owner = resp.records[0].UserName;
				if (Owner === dName) {
					opts.lockCallback.call(this, opts.params);
				}
				else {
					Ext.MessageBox.alert(resp.records[0].Section + " section Locked", "The " + resp.records[0].Section + " section is currently locked by " + Owner );
					opts.lockCallback = null;
				}
			}
		},
		failure : function( response, opts ) {
			opts.lockCallback = null;
			var text = response.responseText;
			var resp = Ext.JSON.decode( text );
			Ext.MessageBox.alert("Saving Error", "Saving Error", "Can't " + fcn + " desired section - <br />" + resp.msg );
		}
	});
};

Ext.COMS_LockSection = function(PatientID, Section, callback, params) {
	Ext.COMS_LockoutAjaxCall("Lock", PatientID, Section, callback, params);
};

Ext.COMS_UnLockSection = function() {
	try {
		if (LockedInfo) {
			Ext.COMS_LockoutAjaxCall("Unlock", LockedInfo.id, LockedInfo.Section, null, null);
			LockedInfo = null;
		}
	}
	catch (e) {
//		console.log("LockedInfo does not exist");
	}
};

Ext.togglePanelOnTitleBarClick = function(panel) {
	try {
		var x = panel.header.el;
		if (x) {
			x.on('click', function() {
				if (panel.collapsed) {
					panel.expand();
				}
				else {
					panel.collapse();
				}
			});
		}
	}
	catch (e) {
		alert("Error togglePanelOnTitleBarClick");

	}
};

Ext.GeneralRounding2Digits = function (n) {
	var ret = Ext.FormatNumber(+(Math.round(n + "e+" + 2) + "e-" + 2));
	n = ret.search(/\./i);
	if (n > 0) {	// We have a decimal point
		n = ret.search(/0$/i);
		if (n>0) {
			ret = ret.substring(0, ret.length - 1);
		}
	}
	return ret;
};

Ext.In2Meters = function (h) {
	var h1 = (0.0254 * h);
	var ret = Ext.GeneralRounding2Digits(h1);
	return ret;
};

Ext.In2CM = function (h) {
	var h1 = (2.54 * h);
	var ret = Ext.GeneralRounding2Digits(h1);
	return ret;
};

Ext.Pounds2Kilos = function (w) {
	var w1 = (0.45359237 * w);
	var ret = Ext.GeneralRounding2Digits(w1);
	return ret;
};

Ext.TempF2C = function (f) {
	var t1 = ((5 * (f - 32)) / 9);
	var ret = Ext.GeneralRounding2Digits(t1);
	return ret;
};

Ext.HeightSquared = function (h) {
	var ret = Math.pow(h, 2);
	return ret;
};

Ext.WeightSquared = function (w) {
	var ret = Math.pow(w, 2);
	return ret;
};

Ext.IdealWeight = function (h, g) { // Height in Inches
	if (h < 60) {
		h = 60;
	}
	var IdealWeight = ((h - 60) * 2.3) + 45.5; // in KG
	if ("M" === g) {
		IdealWeight = ((h - 60) * 2.3) + 50;
	}
	return IdealWeight;
};

Ext.AdjustedWeight = function (w, h, g) { // Height in Inches, weight in pounds
	var WeightInKilos = Ext.Pounds2Kilos(w);
	var IdealWeight = Ext.IdealWeight(h, g);
	return ((WeightInKilos - IdealWeight) * 0.4) + IdealWeight;
};

Ext.LeanWeight = function (w, h, g) { // Height in Inches, weight in pounds
	var WeightInKilos = Ext.Pounds2Kilos(w);
	var WeightSquared = Ext.WeightSquared(WeightInKilos);

	var HeightInM = Ext.In2Meters(h);
	var HeightInM100 = (100 * HeightInM);
	var HeightSquared = Ext.HeightSquared(HeightInM100);
	// var IdealWeight = Ext.IdealWeight(h, g);
	var LeanWeight = (1.07 * WeightInKilos) - 148 * (WeightSquared / HeightSquared);

	if ("M" === g) {
		LeanWeight = (1.1 * WeightInKilos) - 128 * (WeightSquared / HeightSquared);
	}
	LeanWeight = Ext.FormatNumber(+(Math.round(LeanWeight + "e+" + 2) + "e-" + 2));
	return LeanWeight;
};



Ext.ShowUnitPerWeightCalcs = function (PatientInfo, saveCalc, Dose, calcDose, origDose) {
	var x1 = Dose.split(" ");
	var units = x1[1].split("/")[0];

	var temp = Ext.apply(PatientInfo, {
		dose: Dose,
		calcDose: calcDose,
		origDose: origDose,
		units : units
	});
/**
	var AdditionalPossibleXTemplateInfo =
		"<tr><th>BSA Weight <br>({WeightFormula})</th><td>{BSA_Weight} kg</td></tr>",
		"<tr><th>Height:</th><td>{Height} in {[this.HeightInCM(values)]}</td></tr>",
		"<tr><th>Weight</th><td>{Weight} lbs {[this.WeightInKG(values)]}</td></tr>";
 **/
	var html = new Ext.XTemplate(
		"<table class=\"InformationTable\" border=\"1\">",
		"<tr><th>Actual Weight: </th><td>{Weight} lbs{[this.WeightInKG(values)]}</td></tr>",
		"<tr><th>Ordered Dose: </th><td>{origDose} {units}/kg</td></tr>",
		"<tr><th>Calculated&nbsp;Dose: </th><td>{[this.calcDose(values)]}</td></tr>",
		"</table>", {
			// XTemplate Configuration
			disableFormats: true,
			WeightInKG: function (x) {
				if ("" === x.Weight) {
					return "";
				}
				var x1 = Ext.Pounds2Kilos(x.Weight);
				return (" = " + x1 + " kg");
			},
			calcDose: function (x) {
				var kg = Ext.Pounds2Kilos(x.Weight);
				var dose = x.origDose;
				return x.origDose + "&nbsp;*&nbsp;" + kg + "kg&nbsp;=&nbsp;" + (1*kg*dose) + x.units;
			}
		}
	);
	var newFormula = html.applyTemplate(temp);
	return newFormula;
},
Ext.ShowAUCCalcs = function (PatientInfo, saveCalc, Dose, calcDose) {
	var temp = Ext.apply(PatientInfo, {
		dose: Dose,
		calcDose: calcDose
	});

	var html = new Ext.XTemplate(
		"<table class=\"InformationTable\" border=\"1\">",
		"<tr><th>Age:</th><td>{Age}</td></tr>",
		"<tr><th>Weight</th><td>{Weight} lbs{[this.WeightInKG(values)]}</td></tr>",
		"<tr><th>Gender</th><td>{Gender}</td></tr>",
		"<tr><th>Serum&nbsp;Creatinine</th><td>{[this.Serum(values)]}</td></tr>",
		"<tr><th>AUC</th><td>{[this.AUC(values)]}</td></tr>",
		"{[this.calcGFR(values)]}",
		"</table>", {
			// XTemplate Configuration
			disableFormats: true,
			HeightInCM: function (x) {
				if ("" === x.Height) {
					return "";
				}
				var x1 = Ext.In2CM(x.Height);
				return (" = " + x1 + " cm");
			},

			WeightInKG: function (x) {
				if ("" === x.Weight) {
					return "";
				}
				var x1 = Ext.Pounds2Kilos(x.Weight);
				return (" = " + x1 + " kg");
			},

			Serum: function (x) {
				var sc = x.SerumCreatinine || 1;
				return sc;
			},
			AUC: function (x) {
				var auc = x.dose.split(" ")[0];
				return auc;
			},



			calcGFR: function (x) {
				var gender = x.Gender;
				var kg = Ext.Pounds2Kilos(x.Weight);
				// var dose = x.dose.split(" ")[0];
				var sc = x.SerumCreatinine || 1;
				var AUC = x.dose.split(" ")[0];
				var age = x.Age;

				var GFR = Ext.CalcGFR(age, kg, gender, x.SerumCreatinine);
				var Dose = (GFR + 25) * AUC;
				Dose = Ext.GeneralRounding2Digits(Dose);

				var calc1 = "<td>((140 - Age) x Weight(kg))</td>";
				var calc2 = "<td>((140 - " + age + ") x " + kg + ")</td>";

				if ("F" === gender) {
					calc1 = "<td>((140 - Age) x Weight(kg)) x 0.85</td>";
					calc2 = "<td>((140 - " + age + ") x " + kg + ") x 0.85</td>";
				}

				var r1 = "<tr><th>GFR</th>" +
					"<td>" +
					"<table class=\"GFR_Calc\">" +
					"<tr>" +
					"<td rowspan=3 style='width: 20px;'>&nbsp;=&nbsp;&nbsp;</td>" +
					calc1 +
					"</tr><tr>" +
					"<td><hr /></td>" +
					"</tr><tr>" +
					"<td>72&nbsp;x&nbsp;(Serum&nbsp;Creatinine)</td>" +
					"</tr>" +
					"</table>" +
					"</td></tr>";

				var r2 = "<tr><th>&nbsp;</th>" +
					"<td>" +
					"<table class=\"GFR_Calc\">" +
					"<tr>" +
					"<td rowspan=3 style='width: 20px;'>&nbsp;=&nbsp;&nbsp;</td>" +
					calc2 +
					"</tr><tr>" +
					"<td><hr /></td>" +
					"</tr><tr>" +
					"<td>72&nbsp;x&nbsp;" + sc + "</td>" +
					"</tr>" +
					"</table>" +
					"</td></tr>";

				var r3 = "<tr><th>&nbsp;</th>" +
					"<td>" +
					"<table class=\"GFR_Calc\">" +
					"<tr>" +
					"<td style='width: 20px;'>&nbsp;=&nbsp;&nbsp;</td>" +
					"<td style='text-align: left;'>" + GFR + "</td>" +
					"</tr>" +
					"</table>" +
					"</td></tr>";


				var r4 = "<tr><th>Dosing</th><td>(GFR + 25) X AUC mg</td></tr>";
				var r5 = "<tr><th>&nbsp;</th><td>(" + GFR + " + 25) X " + AUC + " mg</td></tr>";
				var r6 = "<tr><th>&nbsp;</th><td>" + (GFR + 25) * AUC + " mg</td></tr>";
				return r1 + r2 + r3 + r4 + r5 + r6;
			}
		}
	);
	var newFormula = html.applyTemplate(temp);
	return newFormula;
};

Ext.ShowBSACalcs = function (PatientInfo, saveCalc, Dose, calcDose, OrigDose) {
	// Dose is the original dosage (e.g. 15 mg/m2)
	// calcDose is the calculated dosage based on Dosage Units and various formula (e.g. 15mg, if the BSA is 1 in the above example)
	// Dose, calcDose and calcDoseUnits are passed by the HandleOEMCalcDoseButtons() in the OEM.js controller
	var temp = PatientInfo;
	var ckDose = "";
	if (Dose) {
		ckDose = Dose.toLowerCase();
	}
	if (Dose && ckDose.search("auc") >= 0) {
		return Ext.ShowAUCCalcs(PatientInfo, saveCalc, ckDose, calcDose);
	}
	if (Dose && ckDose.search("mg/kg") >= 0 || ckDose.search("units/kg") >= 0) {
		return Ext.ShowUnitPerWeightCalcs(PatientInfo, saveCalc, ckDose, calcDose, OrigDose);
	}

	if ("" === temp.BSA_Method) {
		temp.Formula = "";
		temp.PatientInfo_BSA = "";
	} else {
		temp.Formula = Ext.BSA_Formulas[PatientInfo.BSA_Method];
		PatientInfo.BSA_Weight = Ext.BSAWeight(PatientInfo);
		temp.PatientInfo_BSA = PatientInfo.BSA;
	}

	delete temp.Dose;
	delete temp.calcDose;
	if (calcDose && Dose) {
		temp.Dose = ckDose;
		temp.calcDose = calcDose;
	}

	switch (PatientInfo.BSA_Method) {
	case "Capped":
		break;

	case "DuBois":
		temp.PatientInfo_BSA = Ext.BSA_DuBois(PatientInfo.Height, PatientInfo.BSA_Weight);
		break;

	case "Mosteller":
		temp.PatientInfo_BSA = Ext.BSA_Mosteller(PatientInfo.Height, PatientInfo.BSA_Weight);
		break;

	case "Haycock":
		temp.PatientInfo_BSA = Ext.BSA_Haycock(PatientInfo.Height, PatientInfo.BSA_Weight);
		break;

	case "Gehan and George":
		temp.Formula = Ext.BSA_Formulas.Gehan_George;
		temp.PatientInfo_BSA = Ext.BSA_Gehan_George(PatientInfo.Height, PatientInfo.BSA_Weight);
		break;

	case "Boyd":
		temp.PatientInfo_BSA = Ext.BSA_Boyd(PatientInfo.Height, PatientInfo.BSA_Weight);
		break;
	}

	switch (PatientInfo.WeightFormula) {
	case "Ideal Weight":
		if ("M" === PatientInfo.Gender) {
			temp.WF = Ext.BSA_Formulas.IdealWeightM;
		} else {
			temp.WF = Ext.BSA_Formulas.IdealWeightF;
		}
		break;
	case "Adjusted Weight":
		temp.WF = Ext.BSA_Formulas.AdjustedWeight;
		break;
	case "Lean Weight":
		if ("M" === PatientInfo.Gender) {
			temp.WF = Ext.BSA_Formulas.LeanWeightM;
		} else {
			temp.WF = Ext.BSA_Formulas.LeanWeightF;
		}
		break;
	default:
		temp.WF = "Weight in KG";
		break;
	}

	if ("" === calcDose) {
		calcDose = OrigDose * temp.BSA;
		calcDose = Ext.GeneralRounding2Digits(calcDose);
	}


	var html = new Ext.XTemplate(
		"<table class=\"InformationTable\" border=\"1\">",
		"<tr><th>Height:</th><td>{Height} in {[this.HeightInCM(values)]}</td></tr>",
		"<tr><th>Weight</th><td>{Weight} lbs {[this.WeightInKG(values)]}</td></tr>",
		"<tr><td colspan=\"2\" style=\"text-align: center;\">",
		"<button class=\"anchor changeBSAHeightWeight\" title=\"Select Height/Weight used in BSA Calculations from list of Vitals\">Select</button> different Height/Weight from Vitals",
	// {[this.changeHeightWeight(values)]}
		"</td></tr>",
		"<tr><th>Gender</th><td>{Gender}</td></tr>",
		"<tr><th>Amputations</th><td>",

		"<tpl if=\"this.HasAmputations(values)\">",
		"<tpl for=\"Amputations\">",
		"{description}{[this.BSAReduction(values, parent)]}",
		"<br /></tpl>",
		"</tpl>",
		"<tpl if=\"this.NoAmputations(values)\">",
		"None Listed",
		"</tpl>",


		"</td></tr>",

		"<tr><th>Weight Method</th><td>{[this.dspWeightFormula(values)]}</td></tr>",

		"<tr><th>BSA Method</th><td>{BSA_Method}</td></tr>",

		"<tr><th>BSA Formula</th><td>{Formula}</td></tr>",

		"{[this.showBSACalc(values)]}",

		"<tr><th>BSA</th><td>{[this.finalBSA(values)]}</td></tr>",
		"<tpl if=\"calcDose\">",
		"<tr><th>Dose</th><td>{[this.finalBSA(values)]} * {Dose} = {calcDose} {[this.finalBSAUnits(values)]}</td></tr>",
		"</tpl>",
		"</table>", {
			// XTemplate Configuration
			disableFormats: true,
			// locPatient : "",
			HeightInCM: function (x) {
				if ("" === x.Height) {
					return "";
				}
				var x1 = Ext.In2CM(x.Height);
				return (" = " + x1 + " cm");
			},

			WeightInKG: function (x) {
				if ("" === x.Weight) {
					return "";
				}
				var x1 = Ext.Pounds2Kilos(x.Weight);
				return (" = " + x1 + " kg");
			},
			HasAmputations: function (x) {
				if (0 === x.Amputations.length) {
					return false;
				}
				return true;
			},

			NoAmputations: function (x) {
				if (0 === x.Amputations.length) {
					return true;
				}
				return false;
			},
			BSAReduction: function (values, parent) {
				if ("" !== values.description) {
					var y = values.description;
					var x = Ext.Amputations;
					var z = x[y];
					if (parent.BSA_Reduction) {
						parent.BSA_Reduction += z.BSA;
					} else {
						parent.BSA_Reduction = z.BSA;
					}

					return " - Reduce BSA by " + z.BSA + " %";
				}
				return "None Identified";
			},
			dspWeightFormula: function (x) {
				var tmp = "";
				if ("" === x.WeightFormula) {
					return "&nbsp;";
				}
				var x1, WeightInKilos, HeightInMeters, tmp1;
				x1 = Ext.Pounds2Kilos(x.Weight);
				WeightInKilos = Ext.Pounds2Kilos(x.Weight);
				HeightInMeters = Ext.In2Meters(x.Height);

				tmp1 = x1 + " kg";
				var xtramsg = ((x.Height < 60) ? (" Min Ideal Weight = " + (("M" === x.Gender) ? "50" : "45.5")) : "");
				switch (x.WeightFormula) {
				case "Ideal Weight":
					x1 = Ext.IdealWeight(x.Height, x.Gender);
					tmp1 = ("((" + x.Height + " - 60) * 2.3) + " + ("M" === x.Gender ? "50" : "45.5"));
					tmp1 += " = " + x1 + " kg";
					// console.log("Calculating " + x.WeightFormula + " - " + x1);
					break;
				case "Adjusted Weight":
					x1 = Ext.AdjustedWeight(x.Weight, x.Height, x.Gender);
					tmp1 = ("((" + WeightInKilos + " - " + Ext.IdealWeight(x.Height, x.Gender) + ") * 0.4) + " + Ext.IdealWeight(x.Height, x.Gender));
					tmp1 += " = " + x1 + " kg";
					//console.log("Calculating " + x.WeightFormula + " - " + x1);
					break;
				case "Lean Weight":
					x1 = Ext.LeanWeight(x.Weight, x.Height, x.Gender);
					tmp1 = ("(" + ("M" === x.Gender ? "1.1" : "1.07") + " * " + WeightInKilos + ") - " + ("M" === x.Gender ? "128" : "148") + " * (" + WeightInKilos + "<sup>2</sup> / 100 * " + (2.54 * HeightInMeters) + "<sup>2</sup>))");
					tmp1 += " = " + x1 + " kg";
					//console.log("Calculating " + x.WeightFormula + " - " + x1);
					break;
				}

				tmp += x.WeightFormula + "</td></tr>"; // The name of the Weight Method used (e.g. Actual, Ideal, Adjusted, etc).
				tmp += "<tr><th>&nbsp;</th><td>= " + x.WF + " = " + x1 + " kg</td></tr>"; // The string for calculating the weight as well as the result of the calculation
				tmp += "<tr><th>&nbsp;</th><td>= " + tmp1 + xtramsg; // The details of the calculation as well as the result.
				//console.log("BSA_Weight - " + x1);
				x.BSA_Weight = x1;
				//					this.locPatient.BSA_Weight = x.BSA_Weight;	//??????????????????????
				return ("= " + tmp);
			},



			showBSACalc: function (x) {
				var strFormula, BSA_Value;
				if ("" === x.BSA_Method) {
					return "";
				}

				var HInMeters = Ext.In2Meters(x.Height);
				// var WInKg = Ext.Pounds2Kilos(x.Weight);
				BSA_Value = x.BSA;
				x.BSA_NoReduction = ""; // Original Calculated BSA w/o reduction due to amputations;
				switch (x.BSA_Method) {
				case "DuBois":
					strFormula = ("= 0.20247 * " + HInMeters + "<sup>0.725</sup> * " + x.BSA_Weight + "<sup>0.425</sup>");
					BSA_Value = Ext.BSA_DuBois(HInMeters, x.BSA_Weight);
					break;

				case "Mosteller":
					strFormula = ("= <span style=\"white-space: nowrap; font-size:larger\">&radic;<span style=\"text-decoration:overline;\">&nbsp;(" + Ext.In2CM(x.Height) + " * " + x.BSA_Weight + ")/3600 &nbsp;</span></span>");
					BSA_Value = Ext.BSA_Mosteller(HInMeters, x.BSA_Weight);
					break;

				case "Haycock":
					strFormula = ("= 0.024265 * " + Ext.In2CM(x.Height) + "<sup>0.3964</sup> * " + x.BSA_Weight + "<sup>0.5378</sup>");
					BSA_Value = Ext.BSA_Haycock(HInMeters, x.BSA_Weight);
					break;

				case "Gehan and George":
					strFormula = ("= 0.0235 * " + Ext.In2CM(x.Height) + "<sup>0.42246</sup> * " + x.BSA_Weight + "<sup>0.51456</sup>");
					BSA_Value = Ext.BSA_Gehan_George(HInMeters, x.BSA_Weight);
					break;

				case "Boyd":
					strFormula = ("= 0.0003207 * " + Ext.In2CM(x.Height) + "<sup>0.3</sup>) * " + (1000 * x.BSA_Weight) + "<sup>(0.7285-0.0188 log " + (1000 * x.BSA_Weight) + ")</sup>");
					BSA_Value = Ext.BSA_Boyd(HInMeters, x.BSA_Weight);
					break;
				default:
					BSA_Value = "";
					break;

				}

				var pAmpu = x.Amputations;
				var AmpuReduction = "";
				if (pAmpu.length > 0) {
					var Reduction = 0;
					var AmpuList = Ext.Amputations;
					var i, y, z;
					for (i = 0; i < pAmpu.length; i++) {
						y = pAmpu[i].description;
						z = AmpuList[y];
						if (0 !== Reduction) {
							Reduction += z.BSA;
						} else {
							Reduction = z.BSA;
						}
					}

					var tmp2 = ((BSA_Value * Reduction) / 100);
					var t1 = tmp2 + "e+" + 2;
					var t2 = Math.round(t1);
					var t3 = t2 + "e-" + 2;
					// var t4 = Ext.GeneralRounding2Digits(t3);
					tmp2 = Ext.FormatNumber(+t3);
					tmp2 = Ext.FormatNumber(+(Math.round(tmp2 + "e+" + 2) + "e-" + 2));
					var Final = (BSA_Value - tmp2);

					var f1 = Final + "e+" + 2;
					var f2 = Math.round(f1);
					var f3 = f2 + "e-" + 2;
					// var f4 = Ext.GeneralRounding2Digits(f3);
					Final = Ext.FormatNumber(+f3);

					AmpuReduction = " - " + Reduction + "% (due to Amputations) = " + Final;
				}

				x.BSA_NoReduction = BSA_Value; // Original Calculated BSA w/o reduction due to amputations;
				var buf = "<tr><th>&nbsp;</th><td>" + strFormula + " = " + BSA_Value + AmpuReduction + " m<sup>2</sup></td></tr>";
				return buf;
			},


			finalBSA: function (v) {
				return ("= " + Ext.BSA_Calc(v) + " m<sup>2</sup>");
			},

			finalBSAUnits : function(v) {
				return v.Dose.split(" ")[1].split("/")[0];
			},

			changeHeightWeight : function () {
				return "<button class=\"anchor changeBSAHeightWeight\" title=\"Change Height/Weight used in BSA Calculations\">Change Height/Weight</button>";
			}
		}
	);

	var newFormula = html.applyTemplate(temp);

	if (saveCalc) {
		PatientInfo.BSA = temp.BSA;
		PatientInfo.BSA_Weight = temp.BSA_Weight;
	}

	return newFormula;

};




Ext.BSAWeight = function (PatientInfo) { // Returns weight in Kilos
	// var h = Ext.In2Meters(PatientInfo.Height);	// Height (in Metres)
	if (!PatientInfo.hasOwnProperty("Height") || !PatientInfo.hasOwnProperty("Weight") || !PatientInfo.hasOwnProperty("Gender") ||
	   ("" === PatientInfo.Height || "" === PatientInfo.Weight)
	) {
		PatientInfo.BSA_Weight = "";
		return "";
	}
	var h = PatientInfo.Height; // Height (in Inches)
	var w = PatientInfo.Weight; // Ext.Pounds2Kilos(PatientInfo.Weight);
	var g = PatientInfo.Gender; // Gender (M/F)
	var CalcWeight = w;

	switch (PatientInfo.WeightFormula) {
	case "Actual Weight":
		CalcWeight = Ext.Pounds2Kilos(w);
		break;

	case "Ideal Weight":
		CalcWeight = Ext.IdealWeight(h, g); // Height in Inches
		break;

	case "Adjusted Weight":
		CalcWeight = Ext.AdjustedWeight(w, h, g); // Weight in pounds, Height in Inches
		break;

	case "Lean Weight":
		CalcWeight = Ext.LeanWeight(w, h, g); // Weight in pounds, Height in Inches
		break;

	default:
		PatientInfo.BSA_Weight = "";
		return "";
	}

	CalcWeight = Ext.FormatNumber(+(Math.round(CalcWeight + "e+" + 2) + "e-" + 2));
	PatientInfo.BSA_Weight = CalcWeight;
	return CalcWeight;
};


Ext.BSA_Calc = function (PatientInfo) {

	var h = Ext.In2Meters(PatientInfo.Height); // Height (in Metres)
	var w = Ext.BSAWeight(PatientInfo);

	// PatientInfo.BSA_Weight;				// BSA_Weight (in Kilos)
	var t = PatientInfo.BSA_Method; // BSA Method (string)
	// var g = PatientInfo.Gender; // Gender (M/F)
	var BaseBSA = "";


	if (0 === h || 0 === w || "" === t) {
		return "";
	}

	switch (t) {
	case "Capped":
		break;

	case "DuBois":
		BaseBSA = Ext.BSA_DuBois(h, w);
		break;

	case "Mosteller":
		BaseBSA = Ext.BSA_Mosteller(h, w);
		break;

	case "Haycock":
		BaseBSA = Ext.BSA_Haycock(h, w);
		break;

	case "Gehan and George":
		BaseBSA = Ext.BSA_Gehan_George(h, w);
		break;

	case "Boyd":
		BaseBSA = Ext.BSA_Boyd(h, w);
		break;
	}



	var pAmpu = PatientInfo.Amputations;
	var Final = BaseBSA;
	if (pAmpu && pAmpu.length > 0) {
		var Reduction = 0;
		var x = Ext.Amputations;
		var i, y, z;
		for (i = 0; i < pAmpu.length; i++) {
			y = pAmpu[i].description;
			z = x[y];
			if (0 !== Reduction) {
				Reduction += z.BSA;
			} else {
				Reduction = z.BSA;
			}
		}

		var tmp = ((BaseBSA * Reduction) / 100);

		var tmp1 = Ext.FormatNumber(+(Math.round(tmp + "e+" + 2) + "e-" + 2));
		Final = (Final - tmp1);
		var f1 = Final + "e+" + 2;
		var f2 = Math.round(f1);
		var f3 = f2 + "e-" + 2;
		// var f4 = Ext.GeneralRounding2Digits(f3);

		Final = Ext.FormatNumber(+f3);
	}

	//	PatientInfo.BSA = Final;
	return Final; // MWB - 6/27/2012 -
};

Ext.DoseCalc = function (Patient, d, du) {
	// MWB - 7/6/2012 - Note this function is never called as of this date
	// h == Height in inches
	// w == Weight in pounds
	// t == BSA Method (string)
	// g == Gender (M/F)
	// d == Dose
	// du = Dose Units

	// var PatientHeight = Patient.Height;
	var PatientWeight = Patient.Weight; // BSA_Weight???
	// var PatientBSA_Method = Patient.BSA_Method;
	var PatientBSA = Patient.BSA;
	// var PatientGender = Patient.Gender;

	// console.log("Return Dose = " + d + " - " + du );

	var ReturnDose = Ext.GeneralRounding2Digits(d) + " " + du;
	if ("AUC" !== du.toUpperCase()) {
		var x = du.split("/");
		if (x.length > 0) {
			if ("M2" === x[1].toUpperCase()) { // Use BSA Calculation
				ReturnDose = Ext.GeneralRounding2Digits(d * PatientBSA) + " " + x[0];
			} else if ("KG" === x[1].toUpperCase()) {
				ReturnDose = Ext.GeneralRounding2Digits(d * PatientWeight) + " " + x[0];
			} else {
				alert("Unknown Dosage Calculation required - " + du);
			}
		}
	}
	//	else {
	// Use Calvert Formula
	// alert("AUC Dosing requires Calvert Formula, Not Yet Available");
	// consle.log("AUC Dosing requires Calvert Formula, Not Yet Available - " + d + " = " + du);
	//	}

	return ReturnDose;
};

Ext.CalcGFR = function(age, kg, gender, SerumCreatinine) {
	var GFR = (140 - age) * kg;
	SerumCreatinine = SerumCreatinine || 1; // fail safe if no SC is available from Lab Results
	if ("F" === gender) {
		GFR = GFR * 0.85;
	}
	GFR = 1 * Ext.GeneralRounding2Digits(GFR / (72 * SerumCreatinine));
	return GFR;
};

Ext.CalcAUCDose = function (Patient, AUC) {
	var age = Patient.Age;
	var gender = Patient.Gender;
	var wt = Patient.Weight; // in pounds
	var kg = Ext.Pounds2Kilos(wt);
	AUC = AUC || 1; // fail safe if no AUC is passed;

	var GFR = Ext.CalcGFR(age, kg, gender, Patient.SerumCreatinine);
	var Dose = (GFR + 25) * AUC;
	Dose = Ext.GeneralRounding2Digits(Dose);
	// Dose = Ext.FormatNumber("" + Dose);
	return Dose + " mg";
};


// http://www.halls.md/bsa/bsaVuReport.htm
// http://www.halls.md/body-surface-area/refs.htm
//  1 inches = 0.0254 meters = 2.54 cm
//	1 pound = 0.45359237 kilograms
//
// Generica formula:
// hMultiplier x (height ^ hPower) x wMultiplier x (weight ^ wPower)
// Note: Mosteller MAY be slightly different (I don't remember my "basic algebra" enough to know if Mosteller could still follow the same pattern)

// The Mosteller formula - http://www.halls.md/body-surface-area/refs.htm
// BSA = Math.sqrt( (cm*kg)/3600 )
//     = Math.sqrt( ((HeightInInches * 2.54) * (WeightInPounds * 0.45359237 ))/3600);
//
// The DuBois and DuBois formula - http://www.halls.md/body-surface-area/refs.htm
// BSA (m^2) = 0.20247 x Height(m)^0.725 x Weight(kg)^0.425
//          = 0.20247 * (Math.pow((0.0254 * HeightInInches), 0.725)) * (Math.pow((0.45359237 * WeightInPounds), 0.425));
//
// Haycock formula - http://www.halls.md/body-surface-area/refs.htm
// BSA (m^2) = 0.024265 x Height(cm)^0.3964 x Weight(kg)^0.5378
//
// Gehan and George formula - http://www.halls.md/body-surface-area/refs.htm
// BSA (m^2) = 0.0235 x Height(cm)^0.42246 x Weight(kg)^0.51456
//
// Boyd BSA Formula -  - http://www.ispub.com/journal/the-internet-journal-of-anesthesiology/volume-2-number-2/a-linear-equation-for-estimating-the-body-surface-area-in-infants-and-children.html
// BSA (cm^2) = 0.0003207 * (Height(cm)^0.3) * Weight(g) ^(0.7285-0.0188 log Weight(g))
//
// Boyd Approximation - http://www.ispub.com/journal/the-internet-journal-of-anesthesiology/volume-2-number-2/a-linear-equation-for-estimating-the-body-surface-area-in-infants-and-children.html
// BSA (cm^2) = 1321 + 0.3433* Wt(g)
// BSA (m^2) = (1321 + 0.3433* Wt(g))/10000

Ext.generic_BSA_Calc = function (h, w, hMultiplier, hPower, wMultiplier, wPower) {
	// var HeightInInches = h.split(" ")[0];
	// var HeightInMeters = (0.0254 * HeightInInches);
	// var HeightInCM = (2.54 * HeightInInches);
	// var WeightInPounds = w.split(" ")[0];
	// var WeightInKilograms = (0.45359237 * WeightInPounds);
	var HeightInMeters = h;
	var WeightInKilograms = w;

	var H1 = Math.pow(HeightInMeters, hPower);
	var W1 = Math.pow(WeightInKilograms, wPower);

	var BSA = hMultiplier * H1 * wMultiplier * W1;


	var rBSA = Ext.FormatNumber(+(Math.round(BSA + "e+" + 2) + "e-" + 2));
	return rBSA;
};

Ext.BSA_Mosteller = function (h, w) { // Height in Meters, Weight in Kg
	if (w <= 0) { // MWB - 5/15/2012 - Sanity check if the weight is too low. This could be due to user input error or entering a user who's too short when using ideal weight
		w = 0;
	}
	if (h <= 0) {
		h = 0;
	}
	var BSA = Math.sqrt((h * 100 * w) / 3600);

	var rBSA = Ext.FormatNumber(+(Math.round(BSA + "e+" + 2) + "e-" + 2));
	return rBSA;
};

Ext.BSA_DuBois = function (h, w) { // Height in Meters, Weight in Kg
	if (w <= 0) { // MWB - 5/15/2012 - Sanity check if the weight is too low. This could be due to user input error or entering a user who's too short when using ideal weight
		w = 0;
	}
	if (h <= 0) {
		h = 0;
	}
	return this.generic_BSA_Calc(h, w, 0.20247, 0.725, 1, 0.425);
};

Ext.BSA_Haycock = function (h, w) { // Height in Meters, Weight in Kg
	if (w <= 0) { // MWB - 5/15/2012 - Sanity check if the weight is too low. This could be due to user input error or entering a user who's too short when using ideal weight
		w = 0;
	}
	if (h <= 0) {
		h = 0;
	}
	return this.generic_BSA_Calc(h * 100, w, 0.024265, 0.3964, 1, 0.5378);
};
Ext.BSA_Gehan_George = function (h, w) { // Height in Meters, Weight in Kg
	if (w <= 0) { // MWB - 5/15/2012 - Sanity check if the weight is too low. This could be due to user input error or entering a user who's too short when using ideal weight
		w = 0;
	}
	if (h <= 0) {
		h = 0;
	}
	return this.generic_BSA_Calc(h * 100, w, 0.0235, 0.42246, 1, 0.51456);
};
Ext.BSA_Boyd = function (h, w) { // Height in Meters, Weight in Kg
	if (w <= 0) { // MWB - 5/15/2012 - Sanity check if the weight is too low. This could be due to user input error or entering a user who's too short when using ideal weight
		w = 0;
	}
	if (h <= 0) {
		h = 0;
	}
	var BSA = 0.0003207 * Math.pow(h * 100, 0.3) * Math.pow(w * 1000, (0.7285 - 0.0188 * Math.log(w * 1000) / Math.LN10));

	var rBSA = Ext.FormatNumber(+(Math.round(BSA + "e+" + 2) + "e-" + 2));
	return rBSA;
};
/*************************************************************
 *
 *	END BSA Calculations Modules
 *
 *************************************************************/


Ext.GetListOfChangedFields = function(theForm) {
	if (theForm.isDirty()) {
		var changedData = Array();
		var itemsList = theForm.getFields().items;
		var iLen = itemsList.length;
		var f;
		for (var i = 0; i < iLen; i++){
			f = itemsList[i];
			if(f.isDirty()){
				var data = {
					"fieldName" : f.getName(),
					"originalValue" : f.originalValue,
					"newValue" : f.getValue()
				};
				if (data.originalValue) {
					changedData.push(data);
				}
			}
		}
		return changedData;
	}
	return false;
};

/* Clear dirty flags for all fields on the form */
/* Call upon successful form submit */
Ext.ClearDirtyFlags = function(theForm) {
	if (theForm.isDirty()) {
		var i, f, itemsList = theForm.getFields().items;
		var iLen = itemsList.length;
		for (i = 0; i < iLen; i++){
			f = itemsList[i];
			if(f.isDirty()){
				f.originalValue = f.getValue();
			}
		}
	}
};

Ext.ClearForm = function(theForm) {
	var i, f, itemsList = theForm.getFields().items;
	var iLen = itemsList.length;
	for (i = 0; i < iLen; i++){
		f = itemsList[i];
		if ("radiofield" == f.xtype) {
			f.setValue(false);
		}
		else if ("checkboxfield" == f.xtype) {
			f.setValue("off");
		}
		else {
			f.setValue("");
		}
		f.originalValue = f.setValue();
		
	}
};

Ext.SetForm2ReadOnly = function(formID, readOnly) {
	var allFields = Ext.query("#" + formID + " input");
	var allText = Ext.query("#" + formID + "  textarea");
	var i, f, itemsList = allFields.concat(allText);
	var iLen = itemsList.length;
	for (i = 0; i < iLen; i++){
		f = itemsList[i];
		f.readOnly = readOnly;
		f.readonly = readOnly;
		if (readOnly) {
			f.setAttribute("disabled", true);
		}
		else {
			f.removeAttribute("disabled");
		}
	}
};



Ext.define('COMS.Ajax', {
	extend: 'Ext.data.Connection',
	singleton: true,
	onComplete: function (request) {
		var me = this;
		var options = request.options;
		var result = (!request.timedout && request.xhr.status) ? me.parseStatus(request.xhr.status) : null;
		var success = (!request.timedout) ? result.success : null;
		var response;
		if (success) {
			response = me.createResponse(request);
			me.fireEvent('requestcomplete', me, response, options);
			Ext.callback(options.success, options.scope, [response, options]);
		} else {
			if (!result || result.isException || request.aborted || request.timedout) {
				response = me.createException(request);
			} else {
				response = me.createResponse(request);
			}
			me.fireEvent('requestexception', me, response, options);
			Ext.callback(options.failure, options.scope, [response, options]);
		}
		Ext.callback(options.callback, options.scope, [options, success, response]);
		delete me.requests[request.id];
		return response;
	}
});

/* taken from - 
 * http://www.learnsomethings.com/2011/10/25/ext-grid-grouping-summary-collapse-all-expand-all-and-collapse-all-but-the-top-group-overrides-for-extjs4/ 
 */
Ext.override(Ext.grid.feature.Grouping, {
	collapseAll: function() {
		var self = this, groups = this.view.el.query('.x-grid-group-body');
		Ext.Array.forEach(groups, function (group) {        
			self.collapse(Ext.get(group.id));    
		});
	},
	expandAll: function() {
		var self = this, groups = this.view.el.query('.x-grid-group-body');   
		Ext.Array.forEach(groups, function (group) {    
			self.expand(Ext.get(group.id));    
		});
	},
	collapseAllButTop: function() {
		var self = this, groups = this.view.el.query('.x-grid-group-body');
		Ext.Array.forEach(groups, function (group) {        
			self.collapse(Ext.get(group.id));    
		});
		if(groups.length > 0){
			this.expand(Ext.get(groups[0].id));
		}
	}
});



Ext.ND_TreatmentTimeRenderer = function(v) {
	if (v && "" !== v) {
		var v1, v2, v3;
		if ("string" == typeof v) {
			v1 = v.split("T");
			if (v1.length > 0) {
				v1 = v1.join(" ");
			}
			v1 = new Date(v1);
			if (isNaN(v1)) {
				return v;
			}
		}
		else {
			v1 = new Date(v);
		}
		v2 = Ext.Date.format(v1, "h:i A");
		return v2;
	}
	return v;
};

Ext.ND_TreatmentTypeOrderRenderer = function(v) {
	switch (v) {
		case 1:
			return "Pre Therapy";
		case 2:
			return "Therapy";
		case 3:
			return "Post Therapy";
	}
};

Ext.ND_TreatmentSignature = function(value, metadata, record, rowIndex, colIndex, store, view) {
	var aStyle = "style=\"text-decoration:underline; color: navy;\"";
	var dspValue = "Sign to Verify";
	var retBuf = "";
	var status = record.getData().orderstatus;
	var dspStatus = record.getData().ActualOrderStatus;
	// if ("Not Dispensed" == status || "Cancelled" ) {
	if ("Dispensed" == status || "Administered" == status ) {
		if (value) {
			aStyle = "";
			dspValue = (value + " - " + record.get("Treatment_Date"));
		}
	}
	else {
		aStyle = "";
		dspValue = "";
	}
	retBuf = Ext.String.format("<span class=\"anchor TreatmentSigner\" {0} row={1} col={2}>{3}</span>", aStyle, rowIndex, colIndex, dspValue);

	return retBuf;
};

Ext.ND_TreatmentAmmendIcon = function(value, metadata, record, rowIndex, colIndex, store, view) {
	var aClass = "";
	if ("Administered" === record.getData().orderstatus) {
		aClass = "class=\"EditCell\" ";
	}
	return Ext.String.format("<div {0} row={1} col={2}>&nbsp;</div>", aClass, rowIndex, colIndex);
};

Ext.ND_CommentRenderer = function(value, metadata, record, rowIndex, colIndex, store, view) {
	if ("Administered" === record.getData().orderstatus || "Dispensed" === record.getData().orderstatus) {
		return value;
	}
	else {
		return record.getData().ActualOrderStatus;
	}
};

// plugins: [ Ext.ND_cellEditing ],
// plugins: [ Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 }) ],
Ext.ND_cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
    pluginId: 'cellplugin',
    clicksToEdit: 1,
    listeners : {
        scope: this,
        beforeedit: function(e, options) {
			if ("Administered" === options.record.getData().orderstatus || "Dispensed" === options.record.getData().orderstatus) {
				return true;
			}
			else {
				return false;
			}
			/** - https://ahlearns.wordpress.com/2012/06/22/ext-js-4-simple-grid-with-cell-editing/
            // Allow edits in the first column to new rows only
            if (options.colIdx === 0) {
                if (options.record.phantom === true) {
                    return true;
                }
                return false;
            }
			 **/
        }
    }
});

// plugins: [ Ext.ND_cellEditing ],
// plugins: [ Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 }) ],
Ext.ND_cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
    pluginId: 'cellplugin',
    clicksToEdit: 1,
    listeners : {
        scope: this,
        beforeedit: function(e, options) {
			if ("Administered" === options.record.getData().orderstatus || "Dispensed" === options.record.getData().orderstatus) {
				return true;
			}
			else {
				return false;
			}
			/** - https://ahlearns.wordpress.com/2012/06/22/ext-js-4-simple-grid-with-cell-editing/
            // Allow edits in the first column to new rows only
            if (options.colIdx === 0) {
                if (options.record.phantom === true) {
                    return true;
                }
                return false;
            }
			 **/
        }
    }
});



Ext.define('Ext.ux.grid.column.ActionButtonColumn', {

    extend: 'Ext.grid.column.Column',
    alias: ['widget.actionbuttoncolumn'],
    alternateClassName: 'Ext.grid.ActionButtonColumn',

    /**
* @cfg {Function} handler A function called when the button is clicked.
* The handler(or event) is passed the following parameters:<div class="mdetail-params"><ul>
* <li><code>view</code> : TableView<div class="sub-desc">The owning TableView.</div></li>
* <li><code>rowIndex</code> : Number<div class="sub-desc">The row index clicked on.</div></li>
* <li><code>colIndex</code> : Number<div class="sub-desc">The column index clicked on.</div></li>
* </ul></div>
*/

    /**
* @cfg {Array} items An Array which may contain multiple button definitions, each element of which may contain:
* <div class="mdetail-params"><ul>
* <li><code>text</code> : String<div class="sub-desc">The button text to be used as innerHTML (html tags are accepted).</div></li>
* <li><code>iconIndex</code> : String<div class="sub-desc">Optional, however either iconIndex or iconCls must be configured. Field name of the field of the grid store record that contains css class of the button to show. If configured, shown icons can vary depending of the value of this field.</div></li>
* <li><code>hideIndex</code> : String<div class="sub-desc">Optional. Field name of the field of the grid store record that contains hide flag (falsie [null, '', 0, false, undefined] to show, anything else to hide).</div></li>
* <li><code>showIndex</code> : String<div class="sub-desc">Optional. This is the polar opposite of hideIndex. Will show this button if the field specified is truethy</div></li>.
* <li><code>eventName</code> : String<div class="sub-desc">Optional. This is a unique name for an event that will get created on the parent gridview. (ignored if handler is specified)</div></li>
* <li><code>handler</code> : function<div class="sub-desc">A function called when the button is clicked.</div></li>
* <li><code>scope</code> : Ref<div class="sub-desc">The scope (<em>this</em>) of the handler function.</div></li>
* <li><code>cls</code> : String<div class="sub-desc">cls spefies the class of the button. In addition, if there is no handler or eventName set the class is stripped down to Alpha characters and suffixed with "click" to create an event on the parent gridview</div></li>
* </ul></div>
*/
    header: '&#160;',

    sortable: false,
    btns: [],
    constructor: function(config) {
		var ActionBtnClickHandler = function(item) {
                        var eventName = 'actionbuttonclick';
                        if (typeof item.eventName != 'undefined') {
                            eventName = item.eventName;
                        } else if (typeof item.cls != 'undefined') {
                            eventName = item.cls.replace(/[^a-zA-Z]/,'')+'click';
                        }
                        fun = function() {
                            if (eventName != 'actionbuttonclick') {
                                view.fireEvent('actionbuttonclick', this, view, rowIndex, colIndex);
                            }
                            view.fireEvent(eventName, view, rowIndex, colIndex);
                        };
		};

        var me = this,
        cfg = Ext.apply({}, config),
        items = cfg.items || [me],
        l = items.length,
        i,
        item;
        me.btns = new Ext.util.MixedCollection();
        // This is a Container. Delete the items config to be reinstated after construction.
        delete cfg.items;
        me.callParent([cfg]);

        // Items is an array property of ActionButtonColumns
        me.items = items;
        var gv = '';

        // Renderer closure iterates through items creating a button element for each and tagging with an identifying
        me.renderer = function(v, meta, rec, rowIndex, colIndex, store, view) {
			if ("COMS.store.ND_Treatment" === store.$className) {		// HACK to get past signing button column
				if (Ext.ColSigned) {
					if (Ext.ColSigned[rowIndex]) {
						return Ext.ColSigned[rowIndex];
					}
				}
			}

            if (gv == '') {
                gv = view;

                var evnts = {
                    'actionbuttonclick':true
                };
                Ext.Array.each(items, function(btn) {
                    if (btn.handler) { }
                    else if (btn.eventName) {
                        evnts[btn.eventName] = true;
                    } else if (btn.cls) {
                        var evntName = btn.cls.replace(/[^a-zA-Z]/,'')+'click';
                        evnts[evntName]=true;
                    }
                });
                view.addEvents(evnts);
            }

            // Allow a configured renderer to create initial value (And set the other values in the "metadata" argument!)
            v = Ext.isFunction(cfg.renderer) ? cfg.renderer.apply(this, arguments)||'' : '';

            meta.tdCls += ' ' + Ext.baseCSSPrefix + 'action-col-cell';

            for (i = 0; i < l; i++) {

                item = items[i];

                var nid = Ext.id();
                var cls = Ext.baseCSSPrefix + 'action-col-button ' + Ext.baseCSSPrefix + 'action-col-button-' + String(i)+(item.cls ? ' '+item.cls : '');
                var iconCls = item.iconIndex ? rec.data[item.iconIndex] : (item.iconCls ? item.iconCls : '');
                var fun = Ext.emptyFn;
                var context = me;
                if (item.handler) {
                    if (item.context) {
                        context = item.context;
                    }
                    fun = Ext.bind(item.handler, context, [view, rowIndex, colIndex]);
                }
                else {
                    this.ActionBtnClickHandler(item);
                }
                var hide;
                if (typeof item.showIndex != 'undefined') {
                    hide = !rec.data[item.showIndex];
                } else if (typeof item.hideIndex != 'undefined') {
                    hide = rec.data[item.hideIndex];
                }

                Ext.Function.defer(me.createGridButton, 100, me, [item.text, nid, rec, cls, fun, hide, iconCls]);

                v += '<div id="' + nid + '">&#160;</div>';
            }
            return v;
        };
    },

    createGridButton: function(value, id, record, cls, fn, hide, iconCls) {
        var target = Ext.get(id);
        if (target !== null) {
            var btn = new Ext.Button({
                text: value,
                cls: cls,
                iconCls: iconCls,
                hidden: hide,
                handler: fn,
                renderTo: target.parent()
            });
            this.btns.add(btn);
            Ext.get(id).remove();
        }
    },

    destroy: function() {
        delete this.items;
        delete this.renderer;
        this.btns.each(function(btn){
            btn.destroy();
        });
        return this.callParent(arguments);
    },

    cascade: function(fn, scope) {
        fn.call(scope||this, this);
    },

    // Private override because this cannot function as a Container, and it has an items property which is an Array,
    // NOT a MixedCollection.
    getRefItems: function() {
        return [];
    }
});


Ext.define('COMS.model.ActiveWorkflowsTable', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'WorkFlowName', type: 'string'},
		{ name: 'Active', type: 'string'},
		{ name: 'Reason', type: 'string'},
		{ name: 'NoSteps', type: 'string'},
		{ name: 'Body', type: 'string'}
	],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.ActiveWorkflows
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success'
		}
	}
});


Ext.define('COMS.model.AppliedTemplateInfo', {
    extend: 'Ext.data.Model',
    fields: [
        'id',
        'PatientID',
        'TemplateID',
        'DateApplied',
        'DateStarted',
        'DateEnded',
        'DateEndedActual',
        'TemplateName',
        'TemplateDescription',
        "EotsID"
    ]
});

Ext.define('COMS.model.AllTemplatesApplied2Patient', {
    extend: 'Ext.data.Model',
    fields : [
        "current",
        "historical"
    ],
	hasMany : [
		{ model : "COMS.model.AppliedTemplateInfo", name : "current" },
		{ model : "COMS.model.AppliedTemplateInfo", name : "historical" }
    ],
    proxy: {
        type: 'rest',
        url : Ext.URLs.PatientTemplates,
        reader: {
            type: 'json',
            root : 'records',
            successProperty : 'success',
            messageProperty: 'msg'
        }
    }
});


Ext.define('COMS.model.Allergies', {
	extend: 'Ext.data.Model',
	fields: [
		'id',
		'name',
		'type',
		'comment'		// Comment - raw data/comment
	],
	proxy: {
		type: 'rest',
		url: Ext.URLs.Allergies, 
		reader: {
			type: 'json',
			root: 'records'
		}
	}
});

// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader

Ext.define('COMS.model.CTOS', {
    extend: 'Ext.data.Model',
    fields: [
            'id',					// GUID for this record
			'Order_IDR',
            'Disease',
            'DiseaseStage',
            'RegimenName',			// via lookup into Lookup Table for Regimen Name Data Type
			'Description',			// raw data
            'CourseNum',
            'CourseNumMax',
            'CycleLength',			// raw data
            'CycleLengthUnit',
			"CumulativeDoseMedsInRegimen",
            'ELevel',				// via lookup into Lookup Table for ELevel Data Type (this is a 1 element array containing the following elements: id, name, details)
            'FNRisk',				// raw data
			'FNRiskDetails',
            'KeepAlive',            // Flag used to indicate that this regimen is active or not
			'References',			// Array of References data, uses the 'hasMany' object below; Added - MWB 2 Jan 2012
//		'Ref',					// raw data	Removed - MWB 2 Jan 2012
//		'RefURI',				// raw data	Removed - MWB 2 Jan 2012

            'PreMHInstructions',	// raw data
            'RegimenInstruction',
            'PostMHInstructions',	// raw data

            'PreMHMeds',		// Array of PreMHMeds data, uses the 'hasMany' object below
            'Meds',		// Array of Meds data, uses the 'hasMany' object below
            'PostMHMeds',		// Array of PostMHMeds data, uses the 'hasMany' object below
			'PatientList',
			'PatientListCount'

    ],
    hasMany : [
			{ model : 'COMS.model.TemplateListPatients', name : 'PatientList' },
            { model : 'COMS.model.CTOS_References', name : 'References' },		// Added - MWB 2 Jan 2012
			{ model : 'COMS.model.CumulativeDoseMedsInRegimen', name : 'CumulativeDoseMedsInRegimen' },
            { model : 'COMS.model.MHMed', name : 'PreMHMeds' },
            { model : 'COMS.model.Med', name : 'Meds' },
            { model : 'COMS.model.MHMed', name : 'PostMHMeds' }
    ],
    validations : [
      { type: 'presence', name: 'Disease', message: "Cancer Type must be selected"},  
      { type: 'presence', name: 'CourseNumMax', message: "Max Courses must be entered"},
      { type: 'presence', name: 'CycleLength', message: "Cycle Length must be selected"},
      { type: 'regimenVal', name: 'Meds', message: "At least 1 Therapy Regimen must be entered"},
      { type: 'presence', name: 'ELevel', message: "Emotegenic Level must be selected"},
      { type: 'presence', name: 'CycleLengthUnit', message: "Cycle Length Unit must be selected"}
    ],
    proxy: {
        type: 'rest',
        api: {
                read: Ext.URLs.CTOS,
                create: Ext.URLs.AddCTOS,		// KD - 1/03/11 - Added new URI to PUT data back to PHP
				update: Ext.URLs.UpdateCTOS
        },
        
        reader: {
            type: 'json',
            root : 'records',
            successProperty : 'success'
        }
    }
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader

Ext.define('COMS.model.CTOS_References', {
	extend: 'Ext.data.Model',
	fields: [
		{ name : 'RefID', type : 'string' },	// raw data
		{ name : 'Ref', type : 'string' },	// raw data
		{ name : 'RefURI', type : 'string' }	// raw data
	],
	belongsTo : 'COMS.model.CTOS'
});


/* Note: This model may have to be refactored once we identify what type of info is held in the Chemo History */
Ext.define('COMS.model.ChemoHistory', {
	extend: 'Ext.data.Model',
	fields: [
		{ name : 'results', type : 'string' }		// Whether patient had any previous Chemo History - blank or Internally held as a GUID which links to the ChemoHistoryInfo Table
	],
    proxy: {
        type: 'rest',
		url : Ext.URLs.ChemoHistory,
        reader: {
            type: 'json',
            root: 'records'
        }
    }
});


Ext.define('COMS.model.ClinicInfo', {
	extend: 'Ext.data.Model',
	fields: ["ID", "Label", "Details"]
});


Ext.define('COMS.model.CumulativeDoseMedsInRegimen', {
	extend: 'Ext.data.Model',
	fields: [ "ID", "CumDosePerCycle", "CumDosePerCycleUnits", "CumDosePerRegimen", "CumulativeDoseAmt", "CumulativeDoseUnits", "MedID", "MedName", "UnitsID" ],
	belongsTo : 'COMS.model.CTOS'
});


Ext.define('COMS.model.CumulativeDosingMeds', {
	extend: 'Ext.data.Model',
	fields: ["MedName", "CumulativeDoseAmt", "UnitsID", "ID", "CumulativeDoseUnits", "MedID"]
});

Ext.define('COMS.model.DeliveryMechanism', {
	extend: 'Ext.data.Model',
	fields: [
		'id',
		'name',
		'type',
		'description'
	],
	proxy: {
		type: 'rest',
		url: Ext.URLs.DelivMech, 
		reader: {
			type: 'json',
			root: 'records'
		}
	}
});

Ext.define('COMS.model.DischargeInstruction', {
	extend: 'Ext.data.Model',
	fields: ["ID", "Label", "Details"]
});


Ext.define('COMS.model.DiseaseStage', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'ID', type: 'string'},
		{ name: 'Stage', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.DiseaseStage,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define("COMS.model.DiseaseStaging", {
	extend: "Ext.data.Model",
	fields: ["ID", "DiseaseID", "Disease", "Stage"]
});


Ext.define('COMS.model.DrugRegimen', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'Drug', type: 'string'},
		{ name: 'Amt', type: 'string'},
		{ name: 'Units', type: 'string'},		// Internally, use a GUID to the Units Lookup Table, but this should be the actual string
		{ name: 'Route', type: 'string'},	// Internally, use a GUID to the Infusion Method Lookup Table, but this should be the actual string
                { name: 'Sequence', type: 'string'},
		// { name: 'PctDose', type: 'string'},
		// { name: 'PctDose', type: 'string'},
		{ name: 'Day', type: 'string'},
		{ name: 'FluidVol', type: 'string'},
		{ name: 'InfusionTime', type: 'string'},		
		{ name: 'AdminTime', type: 'string'},
		{ name: 'FlowRate', type: 'string'},
                { name: 'FluidType', type: 'string'},
        { name: 'Instructions', type: 'string'}
	],
        validations : [
            { type: 'presence', name: 'Drug', message: 'Please select a drug'},
            { type: 'presence', name: 'Sequence', message: 'Please select a sequence'},
            { type: 'presence', name: 'Amt', message: 'Amount must be entered.'},
            { type: 'presence', name: 'Units', message: 'Units must be entered.'},
				// the name used to be "Infusion" rather than "Route", Infusion doesn't exist in the model, 
				// but a bug in the RC version of the library prevented this from being found. 
				// The release version fixed that bug which is why I saw a validation error and the UAT-Test site (which uses the RC library) did not.
			{ type: 'presence', name: 'Route', message: 'Route must be entered.'},		
            { type: 'fluidVolregimen', name: 'FluidVol', message: 'Fluid Volume must be entered.'},
            // { type: 'adminTimeregimen', name: 'AdminTime', message: 'Administration Time must be entered.'},
            { type: 'flowRateregimen', name: 'FlowRate', message: 'Flow Rate must be entered'},
            { type: 'fluidTyperegimen', name: 'FluidType', message: 'Fluid Type must be selected'},
            { type: 'presence', name: 'Day', message: 'Administration Day(s) must be entered.'}
        ],
	proxy: {
		type: 'rest',
		url : Ext.URLs.DrugRegimen,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.DrugUnits', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'name', type: 'string' },
		{ name: 'description', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.DrugUnits,
		reader: {
			type: 'json',
			root : 'records'
		}
	}

});

Ext.define('COMS.model.Drugs', {
	extend: 'Ext.data.Model',
	fields: [ "id", "name", "description" ],
	proxy: {
		type: 'rest',
		url : Ext.URLs.Drugs,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.EmeticMeds', {
	extend: 'Ext.data.Model',
	fields: [ "id", "EmoLevel", "EmoLevelName", "MedID", "MedName", "MedType" ],
	proxy: {
		type: 'rest',
		url : Ext.URLs.EmeticMeds,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define("COMS.model.EoTSVitals", {
	extend: "Ext.data.Model",
	fields: [
		"DateTaken",
		"Height",
		"Weight",
		"BP",
		"Temperature",
		"Pain",
		"Pulse",
		"Respiration",
		"SPO2",
		"WeightFormula",
		"BSA_Weight",
		"BSA_Method",
		"BSA",
		"PSID",
		"PS"
	],
	belongsTo : "COMS.model.EndTreatmentSummary"
});

Ext.define("COMS.model.EoTSAllergies", {
	extend: "Ext.data.Model",
	fields: [
		"name",
		"type",
		"comment"
	],
	belongsTo : "COMS.model.EndTreatmentSummary"
});

Ext.define("COMS.model.EoTSAmputations", {
	extend: "Ext.data.Model",
	fields: [
		"description"
	],
	belongsTo : "COMS.model.EndTreatmentSummary"
});

Ext.define("COMS.model.EoTSMedAdmin", {
	extend: "Ext.data.Model",
	fields: [
		"day", "date", "dosage"
	],
	belongsTo : "COMS.model.EoTSMeds"
});
Ext.define("COMS.model.EoTSMeds", {
	extend: "Ext.data.Model",
	fields: [
		"name", "administered"
	],
	hasMany : [
		{ model : "COMS.model.EoTSMeds", name : "administered" }
	],
	belongsTo : "COMS.model.EndTreatmentSummary"
});

Ext.define("COMS.model.EoTSResponses", {
	extend: "Ext.data.Model",
	fields: [
		"day", "date", "desc"
	],
	belongsTo : "COMS.model.EndTreatmentSummary"
});

Ext.define("COMS.model.EndTreatmentSummary", {
	extend: "Ext.data.Model",
	fields: [
		"Name",
		"PatientID",			// GUID for the Patient
		"PAT_ID",
		"Gender",
		"Age",
		"DOB",
		"Amputations",
		"ClinicalTrial",
		"Allergies",
		"TemplateName",
		"TemplateID",
		"TemplateDescription",
		"TreatmentStatus",
		"TreatmentStart",
		"TreatmentEnd",
		"Vitals",
		"EndReason",
		"ProviderReport",
		"FollowUpAppointments",

		"Meds",
		"DiseaseResponse",
		"Toxicity",
		"Other"
	],

	hasMany : [
		{ model : "COMS.model.EoTSVitals", name : "Vitals" },
		{ model : "COMS.model.EoTSAllergies", name : "Allergies" },
		{ model : "COMS.model.EoTSAmputations", name : "Amputations" },
		{ model : "COMS.model.EoTSMeds", name : "Meds" },
		{ model : "COMS.model.EoTSResponses", name : "DiseaseResponse" },
		{ model : "COMS.model.EoTSResponses", name : "Toxicity" },
		{ model : "COMS.model.EoTSResponses", name : "Other" }
	],
	
	proxy: {
		type: "rest",
		api: {
			read: Ext.URLs.EoTS,
			create: Ext.URLs.EoTS,
			update: Ext.URLs.EoTS
		},
		reader: {
			type: "json",
			root : "records",
			successProperty : "success",
			messageProperty: "msg"
		}
	}
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader

Ext.define("COMS.model.FlowSheetMed", {
    extend: "Ext.data.Model",
    fields: [
		"id",
		"PatientID",
		"Cycle",
		"Day",
		"AdminDate",
		"Drug",
		"AdministeredDose"
	],
	belongsTo : "COMS.model.FlowsheetAdminDay"
});


Ext.define("COMS.model.FlowSheetLab", {
	extend: "Ext.data.Model",
	fields: [
		"id",
		"PatientID",
		"Cycle",
		"Day",
		"AdminDate",
		"Name",
		"Data"
	],
	belongsTo : "COMS.model.FlowsheetAdminDay"
});



Ext.define("COMS.model.FlowsheetAdminDay", {
    extend: "Ext.data.Model",
	fields : [
		"id",							// ID of this particular Flowsheet Admin Day Record
		"PatientID",
		"Cycle",
		"Day",
		"AdminDate",
		"PS",
		"PSID",
		"Weight",
		"DiseaseResponse",
		"Toxicity",
		"ToxicityLU_ID",
		"Other",
		"Labs",
		"PreTherapy",
		"Therapy",
		"PostTherapy"
	],
	hasMany : [ 
		{ model : "COMS.model.FlowSheetLab", name : "Labs" },
		{ model : "COMS.model.FlowSheetMed", name : "PreTherapy" },
		{ model : "COMS.model.FlowSheetMed", name : "Therapy" },
		{ model : "COMS.model.FlowSheetMed", name : "PostTherapy" }
	],
	belongsTo : "COMS.model.Flowsheet"
});


//
Ext.define("COMS.model.Flowsheet", {
    extend: "Ext.data.Model",
	fields : [
		"PAT_ID",				// GUID for the Treatment record
		"FlowsheetAdminDay"
	],
	hasMany : [ 
		{ model : "COMS.model.FlowsheetAdminDay", name : "FlowsheetAdminDay" }
	],

    proxy: {
        type: "rest",
        api: {
			read: Ext.URLs.FlowSheetRecords,
			create: Ext.URLs.AddFlowSheetRecords,
			update: Ext.URLs.AddFlowSheetRecords
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success",
			messageProperty : "msg"
        }
    }
});


Ext.define('COMS.model.GenericLookupModel', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'name', type: 'string'},		// should this sometimes be "name" or "value"?
		{ name: 'description', type: 'string'},
		{ name: 'lookupid', type:'string'}
	],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.Lookups
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success'
		}
	}
});


Ext.define('COMS.model.GlobalLookupModel', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'sitelist', type: 'string'},
		{ name: 'domain', type: 'string'}			
	],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.Lookups
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success'
		}
	}
});


Ext.define('COMS.model.GlobalsTable', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'sitelist', type: 'string'},
		{ name: 'domain', type: 'string'}
	],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.GlobalLookupModel
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success'
		}
	}
});


Ext.define("COMS.model.HydrationDrug", {
	extend: "Ext.data.Model",
	fields: [
		"id",
		"hydrationType",	// specifies pre or post hydration
		"Sequence",
		"Drug",

		"Amt1",
		"Units1",		// Internally, use a GUID to the Units Lookup Table, but this should be the actual string
		"Infusion1",	// Internally, use a GUID to the Infusion Method Lookup Table, but this should be the actual string

		"Amt2",
		"Units2",		// Internally, use a GUID to the Units Lookup Table, but this should be the actual string
		"Infusion2",	// Internally, use a GUID to the Infusion Method Lookup Table, but this should be the actual string

		"Instructions",
		"FluidVol1",
		"FlowRate1",
		"InfusionTime1",
		"FluidType1",

		"FluidVol2",
		"FlowRate2",
		"FluidType2",
		"InfusionTime2",

		"NumAdminDays",
		"CumDosePerCycle",
		"CumDosePerCycleUnits",

		"AdminTime",
		"Day"
	],

	validations : [
		{ type: "presence", name: "Drug", message: "Please select a drug"},
		{ type: "presence", name: "Sequence", message: "Please select a sequence"},
		{ type: "amt1hydration", name: "Amt1", message: "Dosage Amount must be entered."},
		{ type: "unit1hydration", name: "Units1", message: "Units must be entered."},
		{ type: "route1hydration", name: "Infusion1", message: "Route must be entered."},
		{ type: "fluidVol1hydration", name: "FluidVol1", message: "Fluid Volume must be entered."},
		{ type: "presence", name: "Day", message: "Administration Day(s) must be entered."},
		{ type: "flowRate1hydration", name: "FlowRate1", message: "Flow Rate must be entered"},
		{ type: "fluidType1hydration", name: "FluidType1", message: "Fluid Type must be entered "}
	],
	proxy: {
		type: "rest",
		url : Ext.URLs.HydrationDrug,
		reader: {
			type: "json",
			root : "records"
		}
	}

});


Ext.define("COMS.model.IDEntry", {
	extend: "Ext.data.Model",
	fields: ["Vital2Check", "MinMax", "MinValue", "MaxValue", "MinMaxMsg", "PctVarFromValue", "PctVarFromValuePct", "PctVarFromValueValue", "PctVarFromValueMsg", "PctVarFromLast", "PctVarFromLastPct", "PctVarFromLastMsg"]
});


Ext.define('COMS.model.IVFluidType', {
	extend: 'Ext.data.Model',
	fields: ["Med_ID", "FluidType_ID", "MedName", "FluidType"]
});


Ext.define('COMS.model.Infusion', {
	extend: 'Ext.data.Model',
	fields: [ "id", "name", "description" ],
	proxy: {
		type: 'rest',
		url : Ext.URLs.Infusion,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.LUReferences', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'name', type: 'string'},
		{ name: 'description', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.References,
		reader: {
			type: 'json',
			root : 'records'
		}
	}

});


Ext.define('COMS.model.LabInfo', {
	extend: 'Ext.data.Model',
	fields: [
		'ID',			// GUID of the Lab Result
		'relDate',		// Release date of the test - should be a date type field
		'author',		// Author of this lab result
		'specimen',		// Specimen - What the specimen was (e.g. blood, stool, urine, etc) - Internally held as a GUID which links to the Speciment Type Lookup Category
		'specInfo',		// Specimen info - any additional information on the specimen - raw data/comment
		'specColDate',	// Specimen Collection Date - should be a date type field
		'ResultID',
		'name',
		'units',
		'result',
		'mdwsId',
		'acceptRange',
		'site',
		'outOfRange',
		'comment'
	],
	proxy: {
		type: 'rest',
		url: Ext.URLs.LabInfo,
		reader: {
			type: 'json',
			root: 'records'
		}
	}

});

Ext.define('COMS.model.LookupTable', {
	extend: 'Ext.data.Model',
	fields: [ "id", "value", "description", "lookupid" ],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.Lookups,
			update: Ext.URLs.AddLookup,		// KD - 12/20/11 - Added new URI to PUT data back to PHP
			destroy: Ext.URLs.DeleteLookup,	// KD - 12/23/11 - New URI called when deleting item from Lookup
			create: Ext.URLs.AddLookup
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success',
			messageProperty : 'message'
		}
	}
});


Ext.define('COMS.model.LookupTable_CycleLengthMax', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'value', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.CycleLengthMax,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.LookupTable_CycleLengthStore', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'value', type: 'string'}
	],
    proxy: {
        type: 'rest',
		url : Ext.URLs.CycleLengthStore,
        reader: {
            type: 'json',
			root : 'records'
        }
    }
});


Ext.define('COMS.model.LookupTable_DiseaseType', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'name', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.DiseaseType,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.LookupTable_EmetogenicLevel', {
	extend: 'Ext.data.Model',
	fields: [ "id", "name", "description" ],
	proxy: {
		type: 'rest',
		url : Ext.URLs.EmetogenicLevel,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.LookupTable_FebrileNeutropeniaRisk', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'value', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.FebrileNeutropeniaRisk,
		reader: {
		type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.LookupTable_FluidType', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'name', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.FluidType,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.LookupTable_Template', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'value', type: 'string'}
	],
    proxy: {
        type: 'rest',
		url : Ext.URLs.Template,
        reader: {
            type: 'json',
			root : 'records'
        }
    }
});


Ext.define('COMS.model.LookupTable_TemplateSources', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'name', type: 'string'},
		{ name: 'description', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.TemplateSources,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define("COMS.model.LookupTable_Templates", {
    "extend" : "Ext.data.Model",
    "fields" : [ "id", "description", "force" ],
    "proxy" : {
        "type" : "rest",
        "api" : {
                "read" : Ext.URLs.Templates,
                "destroy" : Ext.URLs.DeleteTemplate
        },
        "reader" : {
            "type" : "json",
            "root" : "records"
        }
    }
});


Ext.define('COMS.model.LookupTable_TimeFrameUnit', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'name', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.TimeFrameUnit,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.LookupTable_TotalCoursesMax', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'value', type: 'string'}
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.TotalCoursesMax,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define("COMS.model.MDWs", {
	extend: "Ext.data.Model",
	fields: [ "id", "data" ],	// These fields are a placeholder till we know what data MDWs will be sending back
	proxy: {
		type: 'rest',
		url : Ext.URLs.MDWS,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader

Ext.define('COMS.model.MHMed', {
	extend: 'Ext.data.Model',
	fields: [
		{ name : 'mhid', type : 'string' },	// raw data
		{ name : 'templateid', type : 'string' },	// raw data            
		{ name : 'drugid', type : 'string' },	// raw data
                { name : 'preorpost', type : 'string' },	// raw data
                { name : 'description', type : 'string' },	// raw data
                { name : 'infusions' },	// raw data
                { name : 'adminDay', type: 'string'},
                { name : 'sequence', type: 'string'},
                { name : 'adminTime', type: 'string'}
	],
	hasMany : { model : 'COMS.model.MHMedInfusion', name : 'infusions' },		// Added - KD 2 Jan 2012
	belongsTo : 'COMS.model.CTOS'
      
//    proxy: {
//        type: 'rest',
//		url : Ext.URLs.MHMed,
//        reader: {
//            type: 'json',
//			root : 'records'
//        }
//    }
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader

Ext.define('COMS.model.MHMedInfusion', {
	extend: 'Ext.data.Model',
	fields: [
		{ name : 'amt', type : 'string' },	// raw data
                { name : 'unit', type : 'string' },	// raw data
                { name : 'type', type : 'string' },	// raw data
                { name : 'instruction', type : 'string' },	// raw data
                { name : 'flowRate', type : 'string' },	// raw data
                { name : 'fluidVol', type : 'string' },	// raw data
                { name : 'fluidType', type : 'string' },	// raw data                
                { name : 'infusionTime', type : 'string' }	// raw data                                
                
	],
	belongsTo : 'COMS.model.MHMed'
//    proxy: {
//        type: 'rest',
//		url : Ext.URLs.MHMed,
//        reader: {
//            type: 'json',
//			root : 'records'
//        }
//    }
});


Ext.define('COMS.model.Med', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'Drug', type: 'string'},
		{ name: 'Amt', type: 'string'},
		{ name: 'Units', type: 'string'},		// Internally, use a GUID to the Units Lookup Table, but this should be the actual string
		{ name: 'Route', type: 'string'},	// Internally, use a GUID to the Infusion Method Lookup Table, but this should be the actual string

		{ name: 'Day', type: 'string'},
		{ name: 'FluidVol', type: 'string'},
		{ name: 'InfusionTime', type: 'string'},
		{ name: 'FlowRate', type: 'string'},
		{ name: 'Instructions', type: 'string'},
		{ name : 'FluidType', type : 'string' },	// raw data                                
		{ name : 'Sequence', type: 'string'},
		{ name: 'AdminTime', type: 'string'}
	],

    belongsTo : 'COMS.model.CTOS'
});


Ext.define('COMS.model.MedDocs', {
	extend: 'Ext.data.Model',
	fields: ["ID", "Med_ID", "MedName", "Documentation"]
});

Ext.define('COMS.model.MedReminder', {
	extend: 'Ext.data.Model',
	fields: ["MR_ID", "TemplateID", "Title", "Description", "ReminderWhenCycle", "ReminderWhenPeriod"],
	proxy: {
		type: 'rest',
		url : "/Patient/MedReminders",
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});

Ext.define('COMS.model.MedRisks', {
	extend: 'Ext.data.Model',
	fields: ["ID", "Label", "Details"]
});


Ext.define('COMS.model.MedsNonRoundedTable', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'Lookup_ID', type: 'string'},
		{ name: 'Name', type: 'string'},
		{ name: 'NonRounding', type: 'string'}
	],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.MedsNonRounded
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success'
		}
	}
});


Ext.define("COMS.model.Messages", {
	extend: "Ext.data.Model",
	fields: [ "mid", "MTo", "CC", "Subject", "Message", "Date", "MFrom", "rid", "wid", "dateSent", "OpenLink", "timeSent", "MStatus" ],
	proxy: {
		type: "rest",
		url : Ext.URLs.Messages,
		reader: {
			type: "json",
			root : "records"
		}
	}
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader
Ext.define("COMS.model.Assessment", {
	extend: "Ext.data.Model",
	fields: [
		"sequence",			// The order that this record is to be displayed (fatigue = 1, anorexia = 2, nauesa = 3, vomiting = 4, diarrhea = 5 all others as neeeded
		"fieldLabel",		// The label for the assessment: "fatigue", "Anorexia", "Nausea", etc 
							// Note: the Label should be stored in the Lookup Table and a GUID to that label value stored in the SQL Record for the entries
							// We need the actual label string here so a lookup will need to be done on the SQL side before sending the data to this object
		"choice",			// The value chosen for this assessment: true, false, null 
		"comments",			// The user entered comments
		"levelChosen"		// The level of the Assessment: 1, 2, 3, 4 etc based on the type of assessment
	],
	belongsTo : "COMS.model.ND_Assessment"
});


Ext.define("COMS.model.ND_Assessment", {
	extend: "Ext.data.Model",
	fields: [
			"PatientID",			// GUID for the Patient
            "id",					// GUID for this record
			"date",					// Date assessment made
			"author",				// ID of person who entered this assessment record
            "assessmentDetails"		// Array of Assessment data, uses the "hasMany" object below;
    ],
    hasMany : [
            { model : "COMS.model.Assessment", name : "assessmentDetails" }
    ],
    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.ND_Assessment,
                create: Ext.URLs.AddND_Assessment
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader
Ext.define("COMS.model.ND_CTCAE_Data", {
	extend: "Ext.data.Model",
	fields: [
            "code",				// Data from the CTCAE Spreadsheet VVVVV
            "cat",				// This is a cross reference field to the CTCAE_SOC data table
            "soc",
            "term",
            "grade1",
            "grade2",
            "grade3",
            "grade4",
            "grade5",
            "termdef"
    ],
    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.CTCAE_Data
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader
Ext.define("COMS.model.ND_CTCAE_SOC", {
	extend: "Ext.data.Model",
	fields: [
            "cat",					// Category for this record
			"soc"					// SOC Data (used to select a category in the Nursing Docs
    ],
    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.CTCAE_SOC
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});


Ext.define("COMS.model.ND_D_Instructions", {
	extend: "Ext.data.Model",
	fields: [
		"InstructionID",	// GUID - list of possible instructions stored in the Lookup Table
		"InstructionText"	// Text label for an instruction, to be displayed in a DropDown
	],
	belongsTo : "COMS.model.ND_Discharge"
});

Ext.define("COMS.model.ND_Discharge", {
	extend: "Ext.data.Model",
	fields: [
		"PatientID",			// GUID for the Patient
		"Education",			// Boolean - True/False
		"EducationComments",	// Text - Large
		"FollowUpInPatient",	// Boolean - True = Inpatient Followup; False = Outpatient Followup
		"NextChemoDate",		// Date
		"NextClinicDate",		// Date
		"LabTest1Date",			// Date
		"LabTest2Date",			// Date
		"PatientGivenDischarge",// Boolean - True/False
		"Instructions",			// Array of strings
		"Comments"				// Text - Large
	],
    hasMany : [
            { model : "COMS.model.ND_D_Instructions", name : "Instructions" }
    ],

    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.ND_Discharge,
                create: Ext.URLs.AddND_Discharge
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader
Ext.define("COMS.model.ND_GenInfo", {
	extend: "Ext.data.Model",
	fields: [
			"patientId",			// GUID for the Patient
            "id",					// GUID for this record
			"date",					// Date assessment made
			"author",				// ID of person who entered this assessment record

			// Patient Identification section
			"patientIDGood",		// true/false/null - For the "Patient Identification verified..." field
			"consentGood",			// true/false/null - For the "Consent obtained" field
			"comment",				// String			- For the Comment Field in the Patient Identification section

			// Patient Teaching section
			"educationGood",		// true/false/null - "Education assessment complete" field
			"planReviewed"			// true/false/null - "Pre-Procedure plan reviewed..." field
    ],
    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.ND_GenInfo,
                create: Ext.URLs.AddND_GenInfo
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader
Ext.define("COMS.model.ND_IVSite", {
	extend: "Ext.data.Model",
	fields: [
		"PatientID",			// GUID for the Patient
		// IV Access Section
		"DateAccessed",
		"DeviceID",
		"DeviceName",
		"GaugeID",
		"GaugeName",
		"LocationID",
		"LocationName",
		"AccessComments",

		// Site Appearance Section
		"NoSymptoms",	// true/false
		"Pain",			// true/false
		"Swelling",		// true/false
		"Erythema",		// true/false
		"Disconnected",	// true/false
		"AppearanceComments",

		// Brisk blood return verified
		"PreTreatment",		// true/false/null
		"DuringTreatment",	// true/false/null
		"PostTreatment",	// true/false/null
		"BBRVComments"
	],

    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.ND_IV_Site,
                create: Ext.URLs.AddND_IV_Site
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader
Ext.define("COMS.model.ND_ReactAssess", {
	extend: "Ext.data.Model",
	fields: [
		"patientId",	// GUID for the Patient
		"DateTaken",	// Date and Timestamp of when this record was saved

		// Chemotherapy Reaction
		"Adverse",		// true/false
		"Comments"
	],

    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.ND_ReactionAssessment,
                create: Ext.URLs.AddND_ReactionAssessment
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});


Ext.define("COMS.model.ND_ReactAssessXtrav", {
	extend: "Ext.data.Model",
	fields: [
		"patientId",	// GUID for the Patient
		"DateTaken",	// Date and Timestamp of when this record was saved

		// Extravasation
		"ND_RA_Xtrav_Heating",			// true/false
		"ND_RA_Xtrav_HeatFreq",
		"ND_RA_Xtrav_Cooling",			// true/false
		"ND_RA_Xtrav_CoolFreq",
		"ND_RA_Xtrav_Interventions",	// true/false
		"ND_RA_Xtrav_Interventions",
		"ND_RA_Xtrav_Antidotes",		// true/false
		"ND_RA_Xtrav_AntidotesGiven",
		"ND_RA_Xtrav_Measurements",		// true/false
		"ND_RA_Xtrav_MeasurementsTaken",
		"ND_RA_Xtrav_Edema",			// true/false
		"ND_RA_Xtrav_Erythema",			// true/false
		"ND_RA_Xtrav_Discomfort",		// true/false
		"ND_RA_Xtrav_DiscomfortDesc"
	],

    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.ND_ReactionAssessmentXtrav,
                create: Ext.URLs.AddND_ReactionAssessmentXtrav
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});









Ext.define("COMS.model.ND_ReactAssessCRSyndrome", {
	extend: "Ext.data.Model",
	fields: [
		"patientId",				// GUID for the Patient
		"DateTaken",	// Date and Timestamp of when this record was saved

		// Cytokine-Release Syndrome
		"ND_RA_CRS_Fever",			// true/false
		"ND_RA_CRS_Temperature",
		"ND_RA_CRS_Chills",			// true/false
		"ND_RA_CRS_Rigors",			// true/false
		"ND_RA_CRS_Nausea",			// true/false
		"ND_RA_CRS_Hypotension",	// true/false
		"ND_RA_CRS_BP",
		"ND_RA_CRS_Tachycardia",	// true/false
		"ND_RA_CRS_Pulse", 
		"ND_RA_CRS_Asthenia",		// true/false
		"ND_RA_CRS_Headache",		// true/false
		"ND_RA_CRS_Rash",			// true/false
		"ND_RA_CRS_RashDesc",
		"ND_RA_CRS_TongueEdema",	// true/false
		"ND_RA_CRS_Dyspnea"			// true/false
	],

    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.ND_ReactionAssessmentCRS,
                create: Ext.URLs.AddND_ReactionAssessmentCRS
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});









Ext.define("COMS.model.ND_ReactAssessHorA", {
	extend: "Ext.data.Model",
	fields: [
		"patientId",					// GUID for the Patient
		"DateTaken",	// Date and Timestamp of when this record was saved

		// Hypersensitivity_Anaphylaxis
		"ND_RA_HorA_Agitation",			// true/false
		"ND_RA_HorA_ChestTight",		// true/false
		"ND_RA_HorA_Hypotension",		// true/false
		"ND_RA_HorA_BP",
		"ND_RA_HorA_Dyspnea",			// true/false
		"ND_RA_HorA_Wheezing",			// true/false
		"ND_RA_HorA_Urticaria",			// true/false
		"ND_RA_HorA_PeriorbitalEdema",	// true/false
		"ND_RA_HorA_AbdominalCramping",	// true/false
		"ND_RA_HorA_Diarrhea",			// true/false
		"ND_RA_HorA_Nausea"				// true/false
	],

    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.ND_ReactionAssessmentHorA,
                create: Ext.URLs.AddND_ReactionAssessmentHorA
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success"
        }
    }
});


Ext.define("COMS.model.ND_Treatment", {
	extend: "Ext.data.Model",
	fields : [
		"patientID",			// GUID for the Patient
		"templateID",			// GUID for the Template
		"PAT_ID",				// GUID for the Treatment record
		"Order_ID",
		"Cycle",
		"adminDay",
		"adminDate",
		"typeOrder",	// Used to display therapy type in grid in sorted order (Pre = 1, Therapy = 2, Post = 3)
		"type",			// Indicates type of Therapy this record is for e.g. PreTherapy, Therapy, PostTherapy
		"drug",		// Includes sequence in the treatment type (e.g. "1. Ibuprofin" in Pre Therapy, "3. Mylanta" in Post Therapy
		"MedID",
		"Drug_ID",
		"dose",
		"unit",
		"UnitID",
		"route",
		"StartTime",
		"EndTime",
		"Comments",
		"User",
		"Treatment_User",
		"Treatment_Date",		// Time/Date stamp of when the treatment was recorded
		"drug_originalValue",
		"dose_originalValue",
		"unit_originalValue",
		"route_originalValue",
		"orderstatus",
		"ActualOrderStatus"
	],

	proxy: {
		type: "rest",
		api: {
			read: Ext.URLs.ND_Treatment,	// this is really /Order/Orders <--- MWB - 6/29/2012 Removed for testing???
			// read: Ext.URLs.ND_TreatmentDispensed,
			// read: Ext.URLs.ReadND_Treatment,		// Parameter = PAT_ID -> "/NursingDoc/Treatment/<PAT_ID>",
			create: "/NursingDoc/Treatment",
			update: "/NursingDoc/Treatment"
		},
		reader: {
			type: "json",
			root : "records",
			successProperty : "success",
			messageProperty : "msg"
		}
	}
});

Ext.define("COMS.model.OEMEditRecord", {
	extend:	"Ext.data.Model",
	fields : [
		"TemplateID",		// ID of the specific template this	record belongs to. This	ID should be for a template	specific to	this patient. There	might be multiple templates	with the same name but this	template should	be unique and only linked to this patient
		"OEMRecordID",		// ID of the specific OEM Record of	the	specified template
		"Order_ID",			// ID of the Order Record for this record

		"TherapyID",		// ID of the specific Therapy (Pre,	Post or	Therapy) record	of the specified OEM Record
		"TherapyType",		// Type	of Therapy (Pre, Post or Therapy)
		"Instructions",		// Instructions	for	this record
        "Status",            // Hold/Cancel State of this particular medication
		"AdminTime",		// Time	of day the med is supposed to be administered
		"MedID",			// ID of the med being administered
		"Med",				// Name	of the med being administered
        "Reason",

		"Dose",				// Base	Dose of	the	Med
		"BSA_Dose",			// BSA Dose	of the Med (blank unless Units is measured in surface area)
		"Units",			// Units
		"InfusionMethod",	// Infusion	Method
		"FluidType",		// Fluid Type (blank unless	the	infusion method	is an IV Type)
		"FluidVol",			// Fluid Volume	(blank unless the infusion method is an	IV Type)
		"FlowRate",			// FlowRate	(blank unless the infusion method is an	IV Type)
		"InfusionTime"		// Duration	of the infusion	 (can be left blank	as it's	computed locally, otherwise	blank unless the infusion method is	an IV Type)

/**
	// Optional	Dosing blank if	the	TherapyType	is "Therapy"
		, "Dose2",			// Base	Dose of	the	Med																											   
		"BSA_Dose2",		// BSA Dose	of the Med (blank unless Units is measured in surface area)															   
		"Units2",			// Units																														   
		"InfusionMethod2",	// Infusion	Method																												   
		"FluidType2",		// Fluid Type (blank unless	the	infusion method	is an IV Type)																	   
		"FluidVol2",		// Fluid Volume	(blank unless the infusion method is an	IV Type)																   
		"FlowRate2",		// FlowRate	(blank unless the infusion method is an	IV Type)																	   
		"InfusionTime2"		// Duration	of the infusion	 (can be left blank	as it's	computed locally, otherwise	blank unless the infusion method is	an IV Type)
**/
	],


	proxy: {
		type : "rest",
		api: {
			read : Ext.URLs.Edit_OEMRecord,
			update : Ext.URLs.Edit_OEMRecord,
			create : Ext.URLs.Edit_OEMRecord
		},
		reader:	{
			type: "json",
			root : "records",
			successProperty	: "success"
		}
	}
});


// Loading Nested Data - See the Ext.data.reader.Reader intro docs for a full explanation.
// http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.reader.Reader

Ext.define("COMS.model.OEMRecordsTherapy", {
    extend: "Ext.data.Model",
    fields: [
		"id",
		"Instructions",
		"Med",
		"AdminTime",
        "Status",       // MWB - 3/20/2014 - Used for flagging a medication as cancelled or on hold

		"Order_ID",		// MWB - 7/2/2012 - New Data for Orders
        "Order_Status",
        "Reason",       // MWB - 3/23/2014 - Reason for changing existing medication order
		"Dose",
		"BSA_Dose",
		"DoseUnits",
		"AdminMethod",

		"FluidType",
		"FluidVol",
		"FlowRate",
		"InfusionTime",
		"NumAdminDays",
		"CumDosePerCycle",
		"CumDosePerCycleUnits"

	],
	belongsTo : "COMS.model.OEMRecord"
});


Ext.define("COMS.model.OEMRecordsPrePostTherapy", {
    extend: "Ext.data.Model",
    fields: [
			"id",
			"Instructions",
			"Med",
			"AdminTime",
            "Status",       // MWB - 3/20/2014 - Used for flagging a medication as cancelled or on hold

			"Order_ID",		// MWB - 7/2/2012 - New Data for Orders
			"Order_Status",
            "Reason",       // MWB - 3/23/2014 - Reason for changing existing medication order
			"Dose1",
			"BSA_Dose1",
			"DoseUnits1",
			"AdminMethod1",

			"FluidType1",
			"FluidVol1",
			"FlowRate1",
			"InfusionTime1",

			"Dose2",
			"BSA_Dose2",
			"DoseUnits2",
			"AdminMethod2",

			"FluidType2",
			"FluidVol2",
			"FlowRate2",
			"InfusionTime2",
			"NumAdminDays",
			"CumDosePerCycle",
			"CumDosePerCycleUnits"
	],
	belongsTo : "COMS.model.OEMRecord"
});
Ext.define("COMS.model.OEMRecord", {
    extend: "Ext.data.Model",
    fields: [
            "id",					// GUID for this record
			"Cycle",
			"Day",
			"AdminDate",
			"PreTherapyInstr",
			"TherapyInstr",
			"PostTherapyInstr",
			"PreTherapy",
			"Therapy",
			"PostTherapy"
    ],
    hasMany : [
            { model : "COMS.model.OEMRecordsPrePostTherapy", name : "PreTherapy" },
            { model : "COMS.model.OEMRecordsPrePostTherapy", name : "PostTherapy" },
            { model : "COMS.model.OEMRecordsTherapy", name : "Therapy" }
    ],
	belongsTo : "COMS.model.OEMRecords"
});



Ext.define("COMS.model.OEMRecords", {
    extend: "Ext.data.Model",
	fields : [
		"id",							// ID of this particular OEM Record

        "FNRisk",						// Febrile Neutropenia Risk (%)
		"FNRiskDetails",
        "NeutropeniaRecommendation",	// Recommendation for now can be blank

        "ELevelName",					// Emotegenic Level string (e.g. Low (10% - 30%)), taken from Lookup Table
        "ELevelID",						// ID of the ELevel string taken from Lookup Table
        "ELevelRecommendationASCO",		// ASCO Recommendation taken from new table (see "MWB 17 Feb 2012" comment in controller\OEM.js)
        "ELevelRecommendationNCCN",		// NCCN Recommendation taken from new table (see "MWB 17 Feb 2012" comment in controller\OEM.js)

		"Goal",							// Goal of this Treatment Regimen
		"ClinicalTrial",				// Is this a clinical trial (true/false)
		"TrialType",					// If this IS a clinical trial, then this is a string
		"PerformanceStatus",			// Performance Status


		"numCycles",					// Number of Cycles
		"AdminDaysPerCycle",			// # of Admin Days in any given cycle
		"OEMRecords"					// All the OEM Records.
	],
	hasMany : [ { model : "COMS.model.OEMRecord", name : "OEMRecords" } ],

    proxy: {
        type: "rest",
        api: {
                read: Ext.URLs.OEMRecords
        },
        
        reader: {
            type: "json",
            root : "records",
            successProperty : "success",
			messageProperty : "msg"
        }
    }
});


Ext.define('COMS.model.OrdersTable', {
	extend: 'Ext.data.Model',
	fields: [ 'patientID', 'dfn', 'templateID', 'adminDay', "CourseNum", 'adminDate', 'drug', 'type', 'dose', 'unit', 'route', 'fluidVol', 'fluidType', 'flowRate', 'instructions', 'orderstatus', 'ActualOrderStatus', 'orderid', 'Last_Name' ],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.Orders,
			update: Ext.URLs.Orders,
			create: Ext.URLs.Orders
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success'
		}
	}
});


Ext.define('COMS.model.PatientCumulativeDosing', {
	extend: 'Ext.data.Model',
	fields: ["name", "LifetimeDose", "Units"],
	proxy: {
		type: 'rest',
		url : Ext.URLs.PatientCumulativeDosing,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


/* Note: This model may have to be refactored once we identify what type of info is held in the Radiation History */
Ext.define('COMS.model.PatientHistory', {
	extend: 'Ext.data.Model',
	fields: [
		{ name : 'DiseaseType', type : 'string' },
		{ name : 'DiseaseCat', type : 'string' },
		{ name : 'PerfStat', type : 'string' },
		{ name : 'TreatIndic', type : 'string' },
		{ name : 'Protocol', type : 'string' },
		{ name : 'Chemo', type : 'string' },		// Whether patient had any previous Chemo History - blank or Internally held as a GUID which links to the RadiationHistoryInfo Table
		{ name : 'Radiation', type : 'string' }		// Whether patient had any previous Radiation History - blank or Internally held as a GUID which links to the RadiationHistoryInfo Table
	],
    proxy: {
        type: 'rest',
		url : Ext.URLs.PatientHistory,
        reader: {
            type: 'json',
			root : 'records'
        }
    }
});


/************* OLD MODEL ************************
Ext.define('COMS.model.PatientInfo', {
	extend: 'Ext.data.Model',
	idProperty : 'id',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'name', type: 'string'},
		{ name: 'Height', type: 'string'},
		{ name: 'Weight', type: 'string'},
		{ name: 'Age', type: 'string'},
		{ name: 'DOB', type: 'string'},
		{ name: 'Gender', type: 'string'},
		{ name: 'Date', type: 'string'},
		{ name: 'BP', type: 'string'}
	],
    proxy: {
        type: 'rest',
		url : Ext.URLs.Patients,
        reader: {
            type: 'json',
            root: 'records'
        }
    }
});
*****************************************************/
//
// MWB - 01/27/2012
// Major rewrite of the model due to changing the data coming back from the Web Service
//
Ext.define("COMS.model.PatientInfoDiseases", {
	extend: "Ext.data.Model",
	fields: [
		"Type",
		"Stage"
	],
	belongsTo : "COMS.model.PatientInfo"
});



Ext.define("COMS.model.PatientInfoAmputee", {
	extend: "Ext.data.Model",
	fields: [
		"description"
	],
	belongsTo : "COMS.model.PatientInfo"
});

/***********
Ext.define("COMS.model.PatientInfoMeasurements", {
	extend: "Ext.data.Model",
	fields: [
		"Height",
		"Weight",
		"BP",
		"DateTaken",
		"WeightFormula",
		"BSA_Method",
		"BSA_Weight",
		"BSA"
	],
	belongsTo : "COMS.model.PatientInfo"
});
***************/

Ext.define("COMS.model.PatientInfo", {
	extend: "Ext.data.Model",
	idProperty : "id",
	fields: [
		"id",
		"name",
		"DOB",
		"Gender",
		"Age",
		"ApprovedByUser",
		"AssignedByUser",
		"ConcurRadTherapy",
		"Goal",
		"PerformanceStatus",

		"DFN",				// Data File Name which links to MDWS
		"Disease",			// Array of diseases

		"TemplateName",		// Info on the currently active template
		"TemplateDescription",
		"TemplateID",
		"PAT_ID",				// This is really the "Treatemen ID" but for now just using the existing SQL Field name.
		"TreatmentStart",
		"TreatmentEnd",
		"TreatmentStatus",
		"ClinicalTrial",

		"WeightFormula",
		"BSA_Method",
		"BSA_Weight",
		"BSA",
		"BSAFormula",

		"Amputations",
		"message"			// Used in case an error message is returned from the framework
	],

	hasMany : [
		{ model : "COMS.model.PatientInfoDiseases", name : "Disease" },
		{ model : "COMS.model.PatientInfoAmputee", name : "Amputations" }
	],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.Patients,
			update: Ext.URLs.SavePatient,
			create: Ext.URLs.SavePatient
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success',
			messageProperty: 'message'
		}
	}
});

Ext.define("COMS.model.PatientInfoMDWSDiseases", {
	extend: "Ext.data.Model",
	fields: [
		"Type",
		"Stage"
	],
	belongsTo : "COMS.model.PatientInfoMDWS"
});

Ext.define("COMS.model.PatientInfoAmputee", {
	extend: "Ext.data.Model",
	fields: [
		"description"
	],
	belongsTo : "COMS.model.PatientInfo"
});

Ext.define("COMS.model.PatientInfoMDWS", {
	extend: "Ext.data.Model",
	idProperty : "id",
	fields: [
		"id",
		"name",
		"DOB",
		"Gender",
		"Age",
		"DFN",				// Data File Name which links to MDWS
		"Disease",			// Array of diseases
		"TemplateName",		// Info on the currently active template
		"TemplateDescription",
		"TemplateID",
		"TreatmentStart",
		"TreatmentEnd",
		"TreatmentStatus",
		"Amputations",
		"message",			// Used in case an error message is returned from the framework
		"VPR",		// Consider this as a string even though it's really a JSON Object from VistA - MWB - 2/24/2015
		"BSAFormula",
		"ClinicalTrial",
		"Goal",
		"PerformanceStatus"
	],

	hasMany : [
		{ model : "COMS.model.PatientInfoMDWSDiseases", name : "Disease" },
		{ model : "COMS.model.PatientInfoAmputee", name : "Amputations" }
	],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.MDWSMatch
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success',
			messageProperty: 'message'
		}
	}
});

Ext.define("COMS.model.PatientTemplates", {
	extend: "Ext.data.Model",
	queryMode: "local",
	fields: [
		"id",
		"PatientID",
		"TemplateID",
		"DateApplied",
		"DateStarted",
		"DateEnded",
		"DateEndedActual",
		"Goal",
		"ConcurRadTherapy",
		"ClinicalTrial",
		"PerformanceStatus",
		"WeightFormula",
		"BSAFormula",
		"Amputations",
		"msg",
		"EotsID"
	],
	proxy: {
		type: "rest",
		api: {
			read: Ext.URLs.PatientTemplate,
			create: Ext.URLs.AddPatientTemplate,
			update: Ext.URLs.AddPatientTemplate
		},

		reader: {
			type: "json",
			root : "records",
			successProperty : "success",
			messageProperty: "msg"
		}
	}
});

/* Note: This model may have to be refactored once we identify what type of info is held in the Radiation History */
Ext.define('COMS.model.RadiationHistory', {
	extend: 'Ext.data.Model',
	fields: [
		{ name : 'results', type : 'string' }		// Whether patient had any previous Radiation History - blank or Internally held as a GUID which links to the RadiationHistoryInfo Table
	],
	proxy: {
		type: 'rest',
		url : Ext.URLs.RadiationHistory,
		reader: {
			type: 'json',
			root: 'records'
		}
	}
});


Ext.define('COMS.model.References', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'id', type: 'string'},
		{ name: 'Reference', type: 'string'},
		{ name: 'ReferenceLink', type: 'string'}
	]
});


Ext.define('COMS.model.TemperatureLocation', {
	extend: 'Ext.data.Model',
	fields: [
		'id',
		'name',
		'type',
		'description'
	],
	proxy: {
		type: 'rest',
		url: Ext.URLs.TempLoc, 
		reader: {
			type: 'json',
			root: 'records'
		}
	}
});

/***/
Ext.define("COMS.model.TemplateListPatients", {
	"extend" : "Ext.data.Model",
	"fields" : [
		"Patient_ID",
		"Date_Started",
		"Est_End_Date",
		"First_Name",
		"Last_Name",
		"Name",
		"SSID"
	],
	"belongsTo" : ["COMS.model.TemplateList", "COMS.model.CTOS" ]
});
/***/
Ext.define("COMS.model.TemplateList", {
	"extend" : "Ext.data.Model",
	"fields" : [ "name", "id", "regimenId", "description", "DiseaseName", "DiseaseStageName", "Patients", "PatientCount", "Location" ],
	"hasMany" : { "model" : "COMS.model.TemplateListPatients", "name" : "Patients" }
});


Ext.define('COMS.model.ToxGridModel', {
	extend: 'Ext.data.Model',
	fields: ["id", "Label", "OtherTox", "Grade_Level", "Details", "Comments", {name: 'tDate', type: 'date', dateFormat:'m/d/Y'}, "Alert"],
	proxy: {
		type: 'rest',
		url : Ext.URLs.ToxGrid,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.Toxicity', {
	extend: 'Ext.data.Model',
	fields: ["ID", "Label", "Grade_Level", "Details"],
	proxy: {
		type: 'rest',
		url : Ext.URLs.ToxicityInstruction,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.model.ToxicityInstruction', {
	extend: 'Ext.data.Model',
	fields: ["ID", "Label", "Details"]
});


Ext.define('COMS.model.UsersTable', {
	extend: 'Ext.data.Model',
	fields: [
		{ name: 'username', type: 'string'},
		{ name: 'role', type: 'string'},
		{ name: 'DisplayName', type: 'string'},
		{ name: 'Email', type: 'string'},
		{ name: 'cprsUsername', type: 'string'}
	],
	proxy: {
		type: 'rest',
		api: {
			read: Ext.URLs.UsersLookupModel
		},
		reader: {
			type: 'json',
			root : 'records',
			successProperty : 'success'
		}
	}
});


Ext.define("COMS.model.Vitals", {
	extend: "Ext.data.Model",
	fields: [
			"PatientID",			// GUID for the Patient
            "Height",
            "Weight",
            "BP",
			"Diastolic",
			"Systolic",
            "WeightFormula",
            "BSA_Method",
            "BSA",
            "BSA_Weight",
            "DateTaken",
            "Temperature",
            "TemperatureLocation",
            "Pulse",
            "Respiration",
            "Pain",
            "SPO2",
            "Cycle",
            "Day",
            "PS",
            "Age",
            "Gender",
			"PS_ID"				// MWB - 6/21/2012 - Added so we can save the PS if passed
	],
	proxy: {
		type: "rest",
		api: {
			read: Ext.URLs.Vitals,
			update: Ext.URLs.Vitals,
			create: Ext.URLs.Vitals
		},
		reader: {
			type: "json",
			root : "records",
			successProperty : "success",
			messageProperty: "msg"
		}
	}
});


Ext.define('COMS.store.ActiveWorkflowsStore', {
	extend : 'Ext.data.Store',
        listeners: {
            'beforeload' : function(store, options){
                
                if(options.params){
                    if(options.params.id!=null){
                        store.proxy.api.read = options.params.URL + options.params.id;
                    }                
                }
            },
            'load': function(store, records, success) {
                if(success){
                    store.proxy.api.read = Ext.URLs.Lookups;
                }
            }
            

        },
        
	model : Ext.COMSModels.ActiveWorkflowsTable
});

Ext.define('COMS.store.ChemoHistory', {
	extend : 'Ext.data.Store',
	model : 'COMS.model.ChemoHistory'
});

Ext.define('COMS.store.CTOS', {
	extend : 'Ext.data.Store',
//        autoDestroy: true,
        autoLoad: false,
        listeners: {
            'beforeload' : function(store, options){

                if(options.params){
                    if(options.params.id!=null){
                        store.proxy.api.read = options.params.URL + options.params.id;
                    }else{
                        store.proxy.api.create = Ext.URLs.AddCTOS;
                    }
                }
            },
            'load': function(store, records, success) {
                if(success){
                    store.proxy.api.read = Ext.URLs.CTOS;
                }
            }
            

        },

        model : Ext.COMSModels.CTOS
});

Ext.define('COMS.store.ChemoHistory', {
	extend : 'Ext.data.Store',
	model : 'COMS.model.ChemoHistory'
});

Ext.define('COMS.store.ClinicInfo', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.ClinicInfo,
	proxy: {
		type: 'rest',
		url : Ext.URLs.ClinicInfo,
		reader: {
			type: 'json',
			root : 'records'
		}
	},
	listeners: {
		"load" : function(store, records, success) {
			if(success){
				var i, aRecord, rLen = records.length;
				for (i = 0; i < rLen; i++) {
					aRecord = store.getAt(i);
					var raw = aRecord.get("Details");
					var dec = Ext.util.Format.htmlDecode(raw);
					aRecord.set("Details", dec);
				}
			}
		}
	}
});

Ext.define('COMS.store.CumulativeDosingMeds', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.CumulativeDosingMeds,
	proxy: {
		type: 'rest',
		url : Ext.URLs.CumulativeDosingMeds,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});

Ext.define('COMS.store.CycleLengthMax', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.CycleLengthMax
});

Ext.define('COMS.store.CycleLengthStore', {
    extend : 'Ext.data.Store',
    model : Ext.COMSModels.CycleLengthStore
});

Ext.define('COMS.store.DeliveryMechanism', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.DeliveryMechanism
});

Ext.define('COMS.store.DischargeInstruction', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.DischargeInstruction,
	proxy: {
		type: 'rest',
		url : Ext.URLs.DischargeInstruction,
		reader: {
			type: 'json',
			root : 'records'
		}
	},
	listeners: {
		"load" : function(store, records, success) {
			if(success){
				var i, aRecord, rLen = records.length;
				for (i = 0; i < rLen; i++) {
					aRecord = store.getAt(i);
					var raw = aRecord.get("Details");
					var dec = Ext.util.Format.htmlDecode(raw);
					aRecord.set("Details", dec);
				}
			}
		}
	}
});

Ext.define('COMS.store.DiseaseStage', {
	extend : 'Ext.data.Store',
        // autoDestroy: true,
        autoLoad: false,
        listeners: {
            'beforeload' : function(store, options){
                if(options.params.ID!=null){
                    store.proxy.url = options.params.URL + options.params.ID;
                }else{
                    store.proxy.url = options.params.URL;
                }

            }

        },
        
	model : Ext.COMSModels.DiseaseStage
});

Ext.define('COMS.store.DiseaseStaging', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.DiseaseStaging,
	groupField : "Disease",
	proxy: {
		type: 'rest',
		url : Ext.URLs.DiseaseStaging,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});

Ext.define('COMS.store.DiseaseType', {
    extend : 'Ext.data.Store',
    /*
     * KD - 5/9/12 - This listener was added because there are several ways the DiseaseType store can be accessed
     * 1) Retrieve Cancer Types based on the Template Source selected
     * 2) Retrieve a specific Cancer type based on id
     * 3) Retrieve ALL Cancer Types
     * 
     * If no options are provided the default is to retrieve all Cancer types.
     */
    listeners: {
		'beforeload' : function(store, options){
			store.proxy.url = Ext.URLs.DiseaseType;
			if(options.params){
				if (options.params.URL) {
					store.proxy.url = options.params.URL;
					if(options.params.ID != null){
						store.proxy.url += options.params.ID;
					}
				}
			}
		}
	},
	model : Ext.COMSModels.DiseaseType
});


Ext.define('COMS.store.DrugRegimenStore', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.DrugRegimen
});

Ext.define('COMS.store.DrugStore', {
    extend : 'Ext.data.Store',
    model : Ext.COMSModels.Drugs,
    listeners: {
        'beforeload' : function(store, options){
            if(options.params){
                if(options.params.ID!=null){
                    store.proxy.url = options.params.URL + options.params.ID;
                }
            }
        },
        
        'load': function(store, options) {
            if(store!=null){
                store.sort('name','ASC');
            }
        }
    }
});


Ext.define('COMS.store.DrugUnitsStore', {
    extend : 'Ext.data.Store',
    model : Ext.COMSModels.DrugUnits,
	autoLoad: true
});

Ext.define('COMS.store.DrugUnitsStore2', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.DrugUnits,

	filters: [
		function(item) {
			switch(item.getData().name.toUpperCase()) {
				case "UNITS":
				case "MG":
				case "MG/M2":
					return true;
				default:
					return false;
			}
		}
	]
});

Ext.define('COMS.store.EmeticMeds', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.EmeticMeds,
	groupField: 'EmoLevelName',
	autoLoad: true	/* Load this store on start up so we have a local copy when we need to find the emetogenic level of a medication */
});

Ext.define('COMS.store.EmetogenicLevel', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.EmetogenicLevel
});

Ext.define('COMS.store.FebrileNeutropeniaRisk', {
    extend : 'Ext.data.Store',
	model : Ext.COMSModels.FebrileNeutropeniaRisk,
	data : [
		{ id : '1', value : 'Low' },
		{ id : '2', value : 'Medium' },
		{ id : '3', value : 'Moderate' },
		{ id : '4', value : 'High' }
	]
});

Ext.define("COMS.store.FlowSheetCombo", {
	"extend" : "Ext.data.Store",
	"fields" : ["label", "cols", "Cycle", "StartDate", "StartDay", "StartIdx", "EndDate", "EndDay", "EndIdx"]
});


Ext.define("COMS.store.FluidType", {
	extend : "Ext.data.Store",
	model : "COMS.model.LookupTable_FluidType"
});

Ext.define("COMS.store.GenericLookup", {
	extend : "Ext.data.Store",
	model : "COMS.model.GenericLookupModel"
});

Ext.define('COMS.store.GlobalStore', {
	extend : 'Ext.data.Store',
        listeners: {
            'beforeload' : function(store, options){
                
                if(options.params){
                    if(options.params.id!=null){
                        store.proxy.api.read = options.params.URL + options.params.id;
                    }                
                }
            },
            'load': function(store, records, success) {
                if(success){
                    store.proxy.api.read = Ext.URLs.Lookups;
                }
            }
            

        },
        
	model : Ext.COMSModels.GlobalsTable
});

Ext.define('COMS.store.HydrationStore', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.Hydration,
        listeners: {
                    'load': function(store, options) {
                        if(store!=null){
                            store.sort('Sequence','ASC');
                        }
                    }
                }
        
});

Ext.define('COMS.store.IDEntry', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.IDEntry,
	proxy: {
		type: 'rest',
		url : Ext.URLs.IntelligentDataEntry,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});

Ext.define('COMS.store.IVFluidType', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.IVFluidType,
	proxy: {
		type: 'rest',
		url : Ext.URLs.IVFluidType,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});

Ext.define('COMS.store.InfusionReaction', {
	extend : 'Ext.data.Store',
	fields: [ "IReact_Detail_ID", "IReact_ID", "Sequence", "Field_Label", "Choice", "Comments", "sectionTitle", "alertEvent" ],
	proxy: {
		type: 'rest',
		url : Ext.URLs.Infusion,
		reader: {
			type: 'json',
			root : 'records[0].InfuseReactLink.Details'
		}
	}
});


Ext.define('COMS.store.InfusionStore', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.Infusion,
	autoLoad: true
});

Ext.define('COMS.store.InventoryConsumption', {
				extend : 'Ext.data.Store',
				fields:["ID", "iReport_ID", "Drug", "Total", "Unit"],
				proxy: {
					type: 'rest',
					url : "/Reports/Inventory",
					reader: {
						type: 'json',
						root : 'records'
					}
				}
			});

Ext.define('COMS.store.InventoryList', {
				extend : 'Ext.data.Store',
				fields:["ID", "Date", "StartDate"],
				proxy: {
					type: 'rest',
					url : "/Reports/Inventory",
					reader: {
						type: 'json',
						root : 'records'
					}
				}
			});

Ext.define('COMS.store.LUReferences', {
    extend : 'Ext.data.Store',
    model : Ext.COMSModels.LUReferences
});

Ext.define("COMS.store.LabInfo", {
	extend : "Ext.data.Store",
	model : "COMS.model.LabInfo",
	groupField : "specimen"
});

Ext.define('COMS.store.Lockout', {
	extend : 'Ext.data.Store',
	fields:["id", "Patient_ID", "Section", "UserName", "dtLocked", "dtUnLocked", "Patient_DFN"],
	proxy: {
		type: 'rest',
		url : "/Patient/Lock",
		reader: {
			type: 'json',
			root : 'records'
		}
	}
});


Ext.define('COMS.store.LookupStore', {
	extend : 'Ext.data.Store',
        listeners: {
            'beforeload' : function(store, options){
                
                if(options.params){
                    if(options.params.id!=null){
                        store.proxy.api.read = options.params.URL + options.params.id;
                    }                
                }
            },
            'load': function(store, records, success) {
                if(success){
                    store.proxy.api.read = Ext.URLs.Lookups;
                }
            }

        },
        
	model : Ext.COMSModels.LookupTable
});

Ext.define("COMS.store.MedDocs", {
	extend : "Ext.data.Store",
	model : Ext.COMSModels.MedDocs,
	proxy: {
		type: 'rest',
		url : Ext.URLs.MedDoc,
		reader: {
			type: 'json',
			root : 'records'
		}
	},
	listeners: {
		"load" : function(store, records, success) {
			if(success){
				// debugger;
				var i, aRecord, rLen = records.length;
				for (i = 0; i < rLen; i++) {
					aRecord = store.getAt(i);
					var raw = aRecord.get("Documentation");
					var dec = Ext.util.Format.htmlDecode(raw);
					aRecord.set("Documentation", dec);
				}
			}
		}
	}
});

Ext.define("COMS.store.MedReminders", {
	extend : "Ext.data.Store",
	model : Ext.COMSModels.MedReminder
});

Ext.define('COMS.store.MedRisks', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.MedRisks,
	proxy: {
		type: 'rest',
		url : Ext.URLs.MedRisks,
		reader: {
			type: 'json',
			root : 'records'
		}
	},
	listeners: {
		"load" : function(store, records, success) {
			if(success){
				var i, aRecord, rLen = records.length;
				for (i = 0; i < rLen; i++) {
					aRecord = store.getAt(i);
					var raw = aRecord.get("Details");
					var dec = Ext.util.Format.htmlDecode(raw);
					aRecord.set("Details", dec);
				}
			}
		}
	}
});

Ext.define('COMS.store.MedsNonRounded', {
	extend : 'Ext.data.Store',
        listeners: {
            'beforeload' : function(store, options){
                
                if(options.params){
                    if(options.params.id!=null){
                        store.proxy.api.read = options.params.URL + options.params.id;
                    }                
                }
            },
            'load': function(store, records, success) {
                if(success){
                    store.proxy.api.read = Ext.URLs.Lookups;
                }
            }
            

        },
        
	model : Ext.COMSModels.MedsNonRoundedTable
});

Ext.define("COMS.store.Messages", {
	extend : "Ext.data.Store",
//	autoLoad: true,
    autoLoad: false,
	model : "COMS.model.Messages",
	groupField: 'MStatus'
});

Ext.define("COMS.store.ND_CTCAE_Data", {
	extend : "Ext.data.Store",
	model : Ext.COMSModels.ND_CTCAE_Data
});

Ext.define("COMS.store.ND_CTCAE_SOC", {
	extend : "Ext.data.Store",
	model : Ext.COMSModels.ND_CTCAE_SOC
});

Ext.define('COMS.store.ND_Treatment', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.ND_Treatment,
	groupField : "typeOrder",
	listeners: {
		beforeload : function(theStore, operation, opts) {
			//debugger;
		},
		load : function(theStore, records, state, opts) {
			//debugger;
		}
	}
});

/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */




Ext.define('COMS.store.OrdersStore', {
	extend : 'Ext.data.Store',
	autoLoad: false,
	model : Ext.COMSModels.OrdersTable,
	groupField: 'Last_Name'
});


Ext.define('COMS.store.PatientCumulativeDosing', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.PatientCumulativeDosing
});

Ext.define('COMS.store.PatientHistory', {
	extend : 'Ext.data.Store',
	model : 'COMS.model.PatientHistory'
});

Ext.define('COMS.store.Patients', {
	extend : 'Ext.data.Store',
	model : 'COMS.model.PatientInfo'
});

Ext.define('COMS.store.PerfStatStore', {
    extend : 'Ext.data.Store',
//    autoLoad: true,
//      autoLoad: true,          // KD 03/27/12 - When autoload is commented out then none of the Performance Status are available when Applying Template
autoLoad: false,
    model : Ext.COMSModels.LookupTable,
    proxy: {
        type: 'ajax',
        url: Ext.URLs.Lookups + '/PerformanceStatus',
        reader: {
            type: 'json',
            root: 'records'
        }
    }
});

Ext.define('COMS.store.ReasonStore', {
    extend : 'Ext.data.Store',
//    autoLoad: true,          // KD 03/27/12 - When autoload is commented out then none of the Performance Status are available when Applying Template
    autoLoad: false,
    model : Ext.COMSModels.LookupTable,
    proxy: {
        type: 'ajax',
        url: Ext.URLs.Reasons,
        reader: {
            type: 'json',
            root: 'records'
        }
    }
});

Ext.define('COMS.store.ReferencesStore', {
    extend : 'Ext.data.Store',
    model : Ext.COMSModels.References
});

Ext.define('COMS.store.TemperatureLocation', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.TemperatureLocation
});

Ext.define('COMS.store.Template', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.Template
});

Ext.define('COMS.store.TemplateListByLocationStore', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.TemplateList,
	groupField: 'DiseaseName',
	proxy: {
		type: 'rest',
		url: Ext.URLs.TemplateListByLocation,
		reader: {
			type: 'json',
			root: 'records'
		}
	}

});


Ext.define('COMS.store.TemplateListStore', {
    extend : 'Ext.data.Store',
    model : Ext.COMSModels.TemplateList,
    groupField: 'DiseaseName',
	autoLoad: true,
	proxy: {
		type: 'rest',
		url: Ext.URLs.TemplateList,
		reader: {
			type: 'json',
			root: 'records'
		}
	}

});


Ext.define('COMS.store.TemplateSources', {
	extend : 'Ext.data.Store',
    autoLoad: false,
	model : Ext.COMSModels.TemplateSources
});


Ext.define("COMS.store.Templates", {
	"extend" : "Ext.data.Store",
	"autoLoad" : false,
	"model" : Ext.COMSModels.Templates
});

Ext.define('COMS.store.TimeFrameUnit', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.TimeFrameUnit
});

Ext.define('COMS.store.TotalCoursesMax', {
    extend : 'Ext.data.Store',
	model : Ext.COMSModels.TotalCoursesMax,
	data : [
		{ id : '1', value : '1' },
		{ id : '2', value : '2' },
		{ id : '3', value : '3' },
		{ id : '4', value : '4' },
		{ id : '5', value : '5' },
		{ id : '6', value : '6' },
		{ id : '7', value : '7' },
		{ id : '8', value : '8' },
		{ id : '9', value : '9' },
		{ id : '10', value : '10' }
	]
});

Ext.define('COMS.store.ToxGridStore', {
	extend : 'Ext.data.Store',
	autoSync : true,
	model : Ext.COMSModels.ToxGridModel,
	groupField: "tDate",

	sortOnLoad: true,
	sorters: { property: 'tDate', direction : 'DESC' },

	onCreateRecords : function(records, operation, success) {
		Ext.loadAdverseEventsHistoryLaunchLoc = "onCreateRecords from ToxGridStore";
		COMS.Application.fireEvent("loadAdverseEventsHistory");
	},

	onUpdateRecords : function(records, operation, success) {
		Ext.loadAdverseEventsHistoryLaunchLoc = "onUpdateRecords from ToxGridStore";
		COMS.Application.fireEvent("loadAdverseEventsHistory");
	},

	onDestroyRecords : function(records, operation, success) {
		Ext.loadAdverseEventsHistoryLaunchLoc = "onDestroyRecords from ToxGridStore";
		COMS.Application.fireEvent("loadAdverseEventsHistory");
	}
});

Ext.define('COMS.store.Toxicity', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.Toxicity,
	groupField : "Label"
});

Ext.define('COMS.store.ToxicityInstruction', {
	extend : 'Ext.data.Store',
	model : Ext.COMSModels.ToxicityInstruction,
	groupField : "Grade_Level",
	proxy: {
		type: 'rest',
		url : Ext.URLs.ToxicityInstruction,
		reader: {
			type: 'json',
			root : 'records'
		}
	}
/*********	,

	listeners: {
		"load" : function(store, records, success) {
			if(success){
				var i, aRecord, rLen = records.length;
				for (i = 0; i < rLen; i++) {
					aRecord = store.getAt(i);
					var raw = aRecord.get("Details");
					var dec = Ext.util.Format.htmlDecode(raw);
					aRecord.set("Details", dec);
				}
			}
		}
	}
************/
});

Ext.define('COMS.store.UsersStore', {
	extend : 'Ext.data.Store',
        listeners: {
            'beforeload' : function(store, options){
                
                if(options.params){
                    if(options.params.id!=null){
                        store.proxy.api.read = options.params.URL + options.params.id;
                    }                
                }
            },
            'load': function(store, records, success) {
                if(success){
                    store.proxy.api.read = Ext.URLs.Lookups;
                }
            }
            

        },
        
	model : Ext.COMSModels.UsersTable
});

/*
 *	Since this widget is a window, it's not a sub object to any other class when attempting to get a handle to it.
 *	Hence its reference is : Ext.ComponentQuery.query("AddDrugRegimen")[0].el.dom
 *	The reference to the "Save" button is Ext.ComponentQuery.query("AddDrugRegimen button")[0].el.dom
 *	The reference to the "Cancel" button is Ext.ComponentQuery.query("AddDrugRegimen button[action="save"]")[0].el.dom
 */
Ext.define("COMS.view.Authoring.AddDrugRegimen", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.AddDrugRegimen",

	"title" : "Add New Therapy Drug",
	"layout" : "fit",
	"autoShow" : true,
	"width" : 820,
	"items" : [{
		"xtype" : "form",
		"items" : [
			{
				"xtype" : "RequiredInstr"
			},
			{
				"xtype" : "container",
				"layout" : "hbox",
				"defaults" : {
					"labelAlign" : "right",
					"margin" : "5 5 5 0"
				},
				"items" : [
					{
						"xtype" : "radiogroup",
						"labelAlign" : "left",
						"name" : "patientRadio",
						"fieldLabel" : "Medication Type",
						"afterLabelTextTpl" : "<img class=\"HelpIcon\" alt=\"Indicates whether Medication comes from Inpatient Medication List or Outpatient Medication List\" title=\"Indicates whether Medication comes from Inpatient Medication List or Outpatient Medication List\" >",
						"labelWidth" : 115,
						"columns" : 2,
						"items" : [
							{
								boxLabel: "Inpatient",
								name: "PatientType",
								inputValue: "InPatient",
								width: 100,
								checked: true
							},
							{
								boxLabel: "Outpatient",
								name: "PatientType",
								inputValue: "OutPatient",
								width: 125
							}
						]
					}
				]
			},
			{
				"xtype" : "container",
				"layout" : "hbox",
				"defaults" : {
					"labelAlign" : "right",
					"margin" : "5 5 5 0"
				},
				"items" : [
					{
						"xtype" : "combo",
						"fieldLabel" : "Select Drug <em>*</em>",
						"labelWidth" : 80,
						"width" : 425,
						"name" : "Drug",
						"store" : "DrugStore",
						"displayField" : "name",
						"valueField" : "name",
						"queryMode" : "local",
						"editable" : true,
						"typeahead" : true,

						"allowBlank" : false
					}
				]
			},
			{
				"xtype" : "container",
				"name" : "Dose_RouteFields",
				"hidden" : true,
				"layout" : "hbox",
				"defaults" : {
					"labelAlign" : "right",
					"margin" : "5 5 5 0"
				},
				"items" : [
					{
						"xtype" : "container",
						"width" : 10,
						"name" : "dosespacer",
						"html" : "<span style=\"margin-left: 15px; font-weight: bold;\">&nbsp;</span>",
						"hidden" : false
					},
					{
						"xtype" : "textfield",
						"fieldLabel" : "Administration Time",
						"width" : 220,
						"hidden" : true,
						"labelWidth" : 130,
						"name" : "AdminTime"
					},
					{
						"xtype" : "textfield",
						"maskRe" : /[0-9\.]/,
						"fieldLabel" : "Dosage Amount <em>*</em>",
						"width" : 180,
						"labelWidth" : 100,
						"allowBlank" : false,
						"name" : "Amt"
					},
					{
						"xtype" : "combo",
						"fieldLabel" : "Units <em>*</em>",
						"width" : 150,
						"labelWidth" : 45,
						"store" : "DrugUnitsStore",
						"displayField" : "name",
						"valueField" : "name",
						"allowBlank" : false,
						"queryMode" : "local",
						"editable" : true,
						"typeahead" : true,
						"name" : "Units"
					},
					{
						"xtype" : "combo",
						"fieldLabel" : "Route <em>*</em>",
						"width" : 210,
						"labelWidth" : 65,
						"store" : Ext.create('Ext.data.Store', {
							"fields" : [ "id", "name", "description" ]
						}),
						"displayField" : "name",
						"valueField" : "id",
						"allowBlank" : false,
						"queryMode" : "local",
						"editable" : true,
						"typeahead" : true,
						"name" : "Route"
					}
				]
			},
			{
				xtype: "container",
				layout: "hbox",
				name: "fluidInfo",
				hidden: true,
				defaults: {
					labelAlign: "right",
					margin: "5 0 5 0"
				},
				items: [
					{
						xtype: "combo",
						name: "FluidType",
						fieldLabel: "Fluid Type <em>*</em>",
						width: 220,
						lableWidth: 85,
						allowBlank: false,
						displayField: "value",
						valueField: "value",
						"queryMode" : "local",
						"editable" : true,
						"typeahead" : true,

						store: "LookupStore"
					},
					{
						xtype: "textfield",
						fieldLabel: "Fluid Volume <em>*</em>",
						maskRe: /[0-9\.]/,
						labelWidth: 85,
						width: 170,
						name: "FluidVol",
						margin: "5 0 5 5",
						colspan: 1,
						allowBlank: false
					},
					{
						"xtype" : "container",
						"html" : "ml",
						"name" : "fluidVolUnit",
						"margin" : "8 0 0 3",
						"width" : 20
					},
					{
						xtype: "textfield",
						fieldLabel: "Flow Rate <em>*</em>",
						maskRe: /[0-9\.]/,
						labelWidth: 70,
						width: 120,
						name: "FlowRate",
						colspan: 1,
						allowBlank: false
					},
					{
						xtype: "container",
						html: "ml/hr",
						readOnly: true,
						name: "flowRateUnit",
						margin: "8 0 0 3",
						width: 50
					},
					{
						xtype: "textfield",
						name: "InfusionTime",
						fieldLabel: "Infusion Time",
						width: 195,
						lableWidth: 120,
						readOnly: true
					}
				]
			},



			{
				"xtype" : "container",
				"layout" : "hbox",
				"defaults" : {
					"labelAlign" : "right",
					"margin" : "0 5 5 0"
				},
				"items" : [
					{
						"xtype" : "textfield",
						"fieldLabel" : "Administration Day(s) <em>*</em>",
						"labelWidth" : 140,
						"width" : 285,
						"maskRe" : /^[-,0-9 ]+$/,
						"name" : "Day",
						"allowBlank" : false,
						"colspan " : 4,
						"margin" : "0 0 5 30"
					},
					{
						"xtype" : "selSequence"
					}
				]
			},




			{
				xtype: "textfield",
				labelAlign: "right",
				margin: "0 5 5 0",
				labelWidth: 75,
				width: 780,
				fieldLabel: "Instructions",
				name: "Instructions",
				colspan: 4
			}
		]
	}],

	initComponent: function () {
		this.buttons = [{
			text: "Save",
			action: "save"
		}, {
			text: "Cancel",
			scope: this,
			handler: this.close
		}];
		this.callParent(arguments);
	}
});

/*global Ext */
/*
 *	Since this widget is a window, it's not a sub object to any	other class when attempting to get a handle to it.
 *	Hence it's reference is	: Ext.ComponentQuery.query('AddHydrationDrug')[0].el.dom
 *	The reference to the "Save" button is Ext.ComponentQuery.query('AddHydrationDrug button')[0].el.dom
 *	The reference to the "Cancel" button is Ext.ComponentQuery.query('AddHydrationDrug button[action="save"]')[0].el.dom
 */
Ext.define('COMS.view.Authoring.AddHydrationDrug', {
	extend: 'Ext.window.Window',
	alias: 'widget.AddHydrationDrug',

	title: 'Add New Drug',
	layout: 'fit',
	autoShow: true,
	width: 820,
	modal: true,

	initComponent: function () {
		this.items = [
			{
				xtype: 'form',
				items: [
					{"xtype": "RequiredInstr"},
					{
						xtype: 'container',
						layout: 'hbox',
						defaults: {
							labelAlign: 'right',
							margin: '5 5 5 0'
						},
						items: [{
							xtype: 'radiogroup',
							labelAlign: 'left',
							name: 'patientRadio',
							fieldLabel: 'Medication Type',
							labelWidth: 115,
							'afterLabelTextTpl' : '<img class="HelpIcon" alt="Indicates whether Medication comes from Inpatient Medication List or Outpatient Medication List" title="Indicates whether Medication comes from Inpatient Medication List or Outpatient Medication List" >',
							columns: 2,
							items: [{
								boxLabel: 'Inpatient',
								name: 'PatientType',
								inputValue: 'InPatient',
								width: 100,
								checked: true
							}, {
								boxLabel: 'Outpatient',
								name: 'PatientType',
								inputValue: 'OutPatient',
								width: 125
							}]
						}]
					},
					{
						xtype: 'container',
						layout: 'hbox',
						defaults: {
							labelAlign: 'right',
							margin: '5 5 5 0'
						},
						items: [{
							xtype: 'combo',
							fieldLabel: 'Select Drug <em>*</em>',
							labelWidth: 80,
							width: 405,
							name: 'Drug',
							store: 'DrugStore',
							allowBlank: false,
							'queryMode' : 'local',
							'editable' : true,
							'typeahead' : true,
							displayField: 'name',
							valueField: 'name'
						}]
					},

					{
						'xtype' : 'container',
						"name" : "Dose_RouteFields",
						"hidden" : true,
						'layout' : 'hbox',
						'defaults' : {
							'labelAlign' : 'right',
							'margin' : '5 5 5 0'
						},
						'items' : [
						{
							'xtype' : 'container',
							'width' : 10,
							'name' : 'dosespacer',
							'html' : "<span style='margin-left: 15px; font-weight: bold;'>&nbsp;</span>",
							'hidden' : false
						}, 
						{
							'xtype' : 'textfield',
							'fieldLabel' : 'Administration Time',
							'width' : 220,
							'hidden' : true,
							'labelWidth' : 130,
							'name' : 'AdminTime'
						}, 
						{
							'xtype' : 'textfield',
							'maskRe' : /[0-9\.]/,
							'fieldLabel' : 'Dosage Amount <em>*</em>',
							'width' : 180,
							'labelWidth' : 120,
							'allowBlank' : false,
							'name' : 'Amt1'
						}, 
						{
							'xtype' : 'combo',
							'fieldLabel' : 'Units <em>*</em>',
							'width' : 150,
							'labelWidth' : 45,
							'store' : 'DrugUnitsStore',
							'displayField' : 'name',
							'valueField' : 'name',
							'allowBlank' : false,
							'queryMode' : 'local',
							'editable' : true,
							'typeahead' : true,
							'name' : 'Units1'
						}, 
						{
							'xtype' : 'combo',
							'fieldLabel' : 'Route <em>*</em>',
							'width' : 210,
							'labelWidth' : 65,
							// 'store' : 'InfusionStore',
							"store" : Ext.create('Ext.data.Store', {
								"fields" : [ "id", "name", "description" ]
							}),
							'displayField' : 'name',
							'valueField' : 'id' ,
							'allowBlank' : false,
							'queryMode' : 'local',
							'editable' : true,
							'typeahead' : true,
							'name' : 'Infusion1'
						}
						]
					},
					{
						xtype: 'container',
						layout: 'hbox',
						name: 'fluidInfo',
						hidden: true,
						defaults: {
							labelAlign: 'right',
							margin: '0 0 5 0'
						},
						items: [
							{
								xtype: 'combo',
								name: 'FluidType1',
								fieldLabel: 'Fluid Type <em>*</em>',
								width: 205,
								lableWidth: 85,
								allowBlank: false,
								displayField: 'value',
								valueField: 'value',
							'queryMode' : 'local',
							'editable' : true,
							'typeahead' : true,

								store: 'LookupStore'
							},
							{
								xtype: 'textfield',
								maskRe: /[0-9\.]/,
								name: 'FluidVol1',
								fieldLabel: 'Fluid Volume <em>*</em>',
								labelWidth: 85,
								margin: '0 0 5 15',
								width: 175,
								allowBlank: false
							}, {
								xtype: 'container',
								html: 'ml',
								readOnly: true,
								name: 'fluidVolUnit1',
								margin: '2 0 0 3',
								width: 20
							}, {
								xtype: 'textfield',
								name: 'FlowRate1',
								maskRe: /[0-9\.]/,
								fieldLabel: 'Flow Rate <em>*</em>',
								width: 140,
								labelWidth: 95,
								allowBlank: false
							}, {
								xtype: 'container',
								html: 'ml/hr',
								readOnly: true,
								name: 'flowRateUnit1',
								margin: '2 0 0 3',
								width: 30
							}, {
								xtype: 'textfield',
								name: 'InfusionTime1',
								fieldLabel: 'Infusion Time',
								width: 180,
								lableWidth: 100,
								readOnly: true
							}
						]
					},
					{
						xtype: 'container',
						layout: 'hbox',
						defaults: {
							labelAlign: 'right',
							margin: '0 5 5 0'
						},
						items: [
						{
							xtype: 'textfield',
							maskRe: /^[-,0-9 ]+$/,
							name: 'Day',
							fieldLabel: 'Administration Day(s) <em>*</em>',
							width: 270,
							labelWidth: 150,
							allowBlank: false,
							margin: '0 5 5 0'
						},
						{
							xtype: 'selSequence'
						}
						]
					},
					{
						xtype: 'textfield',
						labelAlign: 'right',
						margin: '5 5 5 0',
						labelWidth: 75,
						width: 765,
						fieldLabel: "Instructions",
						name: 'Instructions'
					}
				]
			}
		];
		this.buttons = [
			{
				text: 'Save',
				action: 'save'
			},
			{
				text: 'Cancel',
				scope: this,
				handler: this.close
			}
		];
		this.callParent(arguments);
	}
});

/*
 *	Since this widget is a window, it's not a sub object to any other class when attempting to get a handle to it.
 *	Hence it's reference is : Ext.ComponentQuery.query('AddReference')[0].el.dom
 *	The reference to the "Save" button is Ext.ComponentQuery.query('AddReference button')[0].el.dom
 *	The reference to the "Cancel" button is Ext.ComponentQuery.query('AddReference button[action="save"]')[0].el.dom
 */	
Ext.define('COMS.view.Authoring.AddReference', {
	extend: 'Ext.window.Window',
	alias : 'widget.AddReference',

	title : 'Add New Reference',
	layout: 'fit',
	autoShow: true,
	width: 600,

	initComponent: function() {
		this.items = [ {
			xtype: 'form',
			defaults : { labelAlign: 'right', width: 580, margin: '5 0 5 0'	},
			items: [
				{	xtype : 'combo',
					fieldLabel : 'Select Reference', 
					name : 'SelReference', 
					store : 'LUReferences', 
					displayField: 'name',
					valueField: 'description'
				},
				{ xtype : 'container', html : '<div style="text-align:center;">OR Enter a new reference below</div>' },
				{ xtype: 'textfield', name : 'Reference', fieldLabel: 'Reference' },
				{ xtype: 'textfield', name : 'ReferenceLink', fieldLabel: 'URL' }
			]
		} ];

		this.buttons = [
			{ text: 'Save', action: 'save' },
			{ text: 'Cancel', action: 'cancel' }
		];

		this.callParent(arguments);
	}
});

/*
 *	MWB - 12/5/2011
 *	Template Authoring Tab View
 *	This view maintains the tabset for the "Template Authoring Tab" which is one of the main tabs in the application
 *	It is rendered in the application container as part of the main tabset (see "Navigation".
 *	This view is managed by the "TemplateAuthoring" Control
 */
Ext.define("COMS.view.Authoring.AuthoringTab" ,{
	"extend" : "Ext.container.Container",
	"alias" : "widget.AuthoringTab",
	"name" : "Template Author Tab",
	"height" : "auto",
	"autoEl" : {
		"tag" : "section"
	},
	"items" : [
		{
			"xtype" : "container",
			"autoEl" : { "tag" : "section" },
			"title" : "Create New Template",
			"defaults" : {
				"xtype" : "container", 
				"labelAlign" : "right"
			},
			"items" : [
				{
					"xtype" : "fieldcontainer", 
					"fieldLabel" : "What do you want to do?", 
					"labelAlign" : "right", 
					"labelWidth" : 180,
					"defaultType" : "radiofield", 
					"defaults" : {
						"flex" : 1
					},
					"items" : [ 
						{
							"boxLabel" : "Select Existing Template", 
							"name" : "Authoring_SelectTemplateType", 
							"inputValue" : 0
						}, 
						{
							"boxLabel" : "Create New Template", 
							"name" : "Authoring_SelectTemplateType", 
							"inputValue" : 1
						}
					]
				},

				{ "xtype" : "RequiredInstr", "hidden" : true },
				{ "xtype" : "selCTOSTemplate", "hidden" : true },

				{
					xtype : "container", 
					name : "courseInfo", 
					layout : "hbox", 
					margin : "5 5 0 0", 
					hidden: true, 
					items : [ 
						{
							xtype : "textfield", 
							name : "CourseNum", 
							fieldLabel : "Max Courses", 
							labelAlign : "right", 
							width : 250, 
							labelWidth: 200, 
							hidden: true
						},
						{
							xtype : "textfield", 
							name : "CourseNumMax", 
							fieldLabel : "Max Cycles  <em>*</em>", 
							labelAlign : "right", 
							allowBlank : false,
							width : 140, 
							labelWidth: 95
						}
					]
				},
				{
					xtype : "CreateNewTemplate", 
					hidden : true
				}
			]
		}
	],

	initComponent: function() {
		this.callParent(arguments);
	}
});


/*
 *	MWB - 2/3/2012
 *	Create New Template View
 *	This view is managed by the 'TemplateAuthoring' Control
 */
Ext.define('COMS.view.Authoring.CreateNewTemplate' ,{
	extend: 'Ext.container.Container',
	alias : 'widget.CreateNewTemplate',
	name : 'Create New Template',
	defaults : {xtype : 'container', labelAlign: 'right', padding : '5 0 0 0' },
	items : [
		{ xtype : 'CycleLength' },
		{
			layout: 'hbox', 
			defaults : {displayField: 'value', valueField: 'id' },
			items: [
				{ xtype: 'combo', name: 'EmetogenicLevel', fieldLabel: 'Emetogenic Level <em>*</em>', labelAlign: 'right', 
					width: 400, labelWidth: 120, allowBlank: false,
					store: 'EmetogenicLevel', displayField : 'name', valueField : 'id'
				},
				{ xtype : 'textfield', maskRe: /[0-9\.]/, maxValue: 100, minValue: 0, name: 'FebrileNeutropeniaRisk', fieldLabel: 'Febrile Neutropenia Risk', labelAlign: 'right', width : 210, labelWidth: 150 },
				{ xtype : 'container', html : "%", margin: '1 0 0 3' }
			]
		},

		{ xtype : 'EmeticInfo' },

		{ xtype : 'TemplateHydration', title : 'Pre Therapy', type : 'Pre' },
		{ xtype : 'TemplateDrugRegimen', title : 'Therapy' },
		{ xtype : 'TemplateHydration', title : 'Post Therapy', type : 'Post' },
		{ xtype : 'TemplateReferences',height : 130 },

		{ xtype : 'MedReminder' },

		{ xtype : "container", layout : "hbox", margin : "5 5 0 0", items : [ 
				{ xtype : 'textfield', name : "RegimenName", fieldLabel: 'Chemotherapy Regimen Name', labelAlign : "right", width : 700, labelWidth: 200, readOnly: true, disabled: true },
				{ xtype : "container", margin: "2 0 0 5", html : "<span style=\"color: blue;\">Generated</span>" }
			]
		},

		{ xtype : "container", layout : "hbox", margin : "5 5 0 0", items : [ 
				{ xtype : "textfield", name : "TemplateAlias", fieldLabel : "Template Name", labelAlign : "right", width : 700 },
				{ xtype : "container", margin: "2 0 0 5", html : "<span style=\"color: blue;\">Optional</span>" }
			]
		},
		{ xtype : "textfield", name : "KeepActive", hidden: true, value:"1" },




		{ xtype: "displayfield", fieldCls: "textAnchor", fieldLabel: "Patients Currently Undergoing This Regimen", labelWidth: 300, name: "PatientListCount" },
		{
			layout: 'hbox', 
			margin: '0 0 10 300',	// style: 'margin-left: 300px;',
			items: [
				{xtype : 'button', text : 'Save Template', action: 'save'},
				{xtype : 'container',html : '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'},
//				{xtype : 'button', text : 'Save Template As...', action: 'saveAs'},
//				{xtype : 'container',html : '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'},
				{xtype : 'button',text : 'Clear Template', action: 'clear'}
			]
		}
	]
});



Ext.define('COMS.view.Authoring.CycleLength' ,{
	extend: 'Ext.container.Container',
	alias : 'widget.CycleLength',
	name : 'Cycle Length',
	defaults : {xtype : 'combo', labelAlign: 'right', padding : '5 0 0 0', displayField: 'value', valueField: 'id' },
	layout: 'hbox', 

	items : [
		{name: 'CycleLength', fieldLabel: 'Cycle Length <em>*</em>', labelAlign: 'right',
			width: 155, labelWidth: 95,allowBlank : false,
			store: Ext.create('Ext.data.Store', {
				fields: ["id", "value"],
				data : [
					{ "id" : 1, "value" : "1"},
					{ "id" : 2, "value" : "2"},
					{ "id" : 3, "value" : "3"},
					{ "id" : 4, "value" : "4"},
					{ "id" : 5, "value" : "5"},
					{ "id" : 6, "value" : "6"},
					{ "id" : 7, "value" : "7"},
					{ "id" : 8, "value" : "8"},
					{ "id" : 9, "value" : "9"},
					{ "id" : 10, "value" : "10"}
				]
			}),
			margin: '0 5 5 0'
		},
		{name: 'CycleLengthUnits', 
			width: 70,
			store: 'TimeFrameUnit', displayField : 'name', valueField : 'id', allowBlank : false,    /* idField : 'id', */
			margin: '0 5 5 0'
		}
	]
});


Ext.define('COMS.view.Authoring.DrugRegimen' ,{
	extend: 'Ext.panel.Panel',
	alias : 'widget.TemplateDrugRegimen',
        border : 3,
	margin: '0 20 20 20',
        
        items:[
		{ xtype : 'textfield', name : "RegimenInstructions", fieldLabel: 'Instructions', labelAlign: 'right', margin : '10 10 0 10', width : 840, labelWidth: 100 },
                { xtype: 'grid',
                    autoScroll: 'y',
                    columnLines: true,
                    width: 925,
                    title : 'Drug Regimen',
                    viewConfig: {stripeRows: true, height: 125, forceFit: true},
                    margin: '10 10 10 10',
                    // store : { fields: ['Day', 'Drug', 'Dosage', 'Unit', 'PctDose', 'Reason', 'PDose', 'Route', 'AdminDay'] },
                    store : { model : Ext.COMSModels.DrugRegimen },	// create here since each instance of the Hydration panel needs it's own store
                    columns : [
                                {header : 'Sequence', dataIndex : 'Sequence', width: 60, sortable : true, align: 'center' },                        
                                {header : 'Admin<br/>Day(s)', dataIndex : 'Day', width: 80, align: 'center' },
                                {header : 'Admin<br/>Time', dataIndex : 'AdminTime', width: 60, align: 'center' },
                                {header : 'Drug', dataIndex : 'Drug', width: 100, align: 'center' },                                
                                {header : 'Dosage<br/>Amount', dataIndex : 'Amt', width: 50, align: 'center' },
                                {header : 'Units', dataIndex : 'Units', width: 50, align: 'center' },
                                {header : 'Route', dataIndex : 'Route', width: 50, align: 'center',
									renderer: function (value, p, record) {
										if (value.indexOf(" : ") > 0) {
											return value.split(" : ")[0];
										}
										return value;
									}
								},
                                // These are only needed during the administration
                                // {header : '% of Regimen Dose', dataIndex : 'PctDose', width: 110 },
                                // {header : 'Reason', dataIndex : 'Reason', flex : 1 },
                                // {header : 'Patient Dose', dataIndex : 'PDose', width: 90 },
                                {header : 'Fluid/<br/>Volume', dataIndex : 'FluidVol', width: 50, align: 'center' },
                                {header : 'Flow<br/>Rate', dataIndex : 'FlowRate', width: 40, align: 'center'},
                                {header : 'Infusion<br/>Time', dataIndex : 'InfusionTime', width: 100, align: 'center' },
                                {header : 'Fluid/<br/>Type', dataIndex : 'FluidType', width: 50, align: 'center'},
                                {header : 'Instructions', dataIndex: 'Instructions', flex: 1, align: 'center'}
                             ],
                            buttons: [
                                    { text: 'Add Drug' }, 
                                    { text: 'Add Non-Formulary Drug', title: 'AddNonForma' },
                                    { text: 'Remove Drug', disabled: true },
                                    { text: 'Edit Drug', disabled: true }
                            ],
                            buttonAlign: 'left'
                }
        ]
 
});


/*global Ext, renderAmt, renderRoute, renderUnit, renderFluidVol, renderFlowRate, renderInfusionTime, renderFluidType */
Ext.define('COMS.view.Authoring.Hydration', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.TemplateHydration',
	margin: '0 20 20 20',
	items: [
		{
			xtype: 'textfield',
			name: "HydrationInstructions",
			fieldLabel: 'Instructions',
			labelAlign: 'right',
			margin: '10 10 0 10',
			width: 840,
			labelWidth: 100
		},
		{
			xtype: 'grid',
			autoScroll: 'y',
			cls: 'custom-grid',
			columnLines: true,
			width: 925,
			viewConfig: {
				stripeRows: true,
				height: 125,
				forceFit: true
			},
			title: 'Drug Regimen',
			margin: '10 10 10 10',
			store: {
				model: Ext.COMSModels.Hydration
			},
			// create here since each instance of the Hydration panel needs it's own store
			columns: [
				{
					header: 'Sequence',
					dataIndex: 'Sequence',
					width: 60,
					sortable: true,
					align: 'center',
					renderer: function (value, p, record) {
						return Ext.String.format('{0}', value);
					}
				},
				{
					header: 'Admin<br/>Day(s)',
					dataIndex: 'Day',
					width: 80,
					sortable: false,
					align: 'center',
					renderer: function (value, p, record) {
						return Ext.String.format('{0}', value);
					}
				},
				{
					header: 'Admin<br/>Time',
					dataIndex: 'AdminTime',
					width: 60,
					sortable: false,
					align: 'center',
					renderer: function (value, p, record) {
						return Ext.String.format('{0}', value);
					}
				},
				{
					header: 'Drug',
					dataIndex: 'Drug',
					width: 100,
					sortable: false,
					align: 'center',
					renderer: function (value, p, record) {
						return Ext.String.format('{0}', value);
					}
				},
				{
					header: 'Dosage<br/>Amount',
					dataIndex: 'Amt1',
					width: 50,
					sortable: false,
					align: 'center',
					renderer: renderAmt
				},
				{
					header: 'Units',
					dataIndex: 'Units1',
					width: 50,
					sortable: false,
					renderer: renderUnit,
					align: 'center'
				},
				{
					header: 'Route',
					dataIndex: 'Infusion1',
					width: 50,
					sortable: false,
					renderer: renderRoute,
					align: 'center'
				},
				{
					header: 'Fluid/<br/>Volume',
					dataIndex: 'FluidVol1',
					width: 50,
					sortable: false,
					renderer: renderFluidVol,
					align: 'center'
				},
				{
					header: 'Flow<br/>Rate',
					dataIndex: 'FlowRate1',
					width: 40,
					sortable: false,
					renderer: renderFlowRate,
					align: 'center'
				},
				{
					header: 'Infusion<br/>Time',
					dataIndex: 'InfusionTime1',
					width: 100,
					sortable: false,
					renderer: renderInfusionTime,
					align: 'center'
				},
				{
					header: 'Fluid/<br/>Type',
					dataIndex: 'FluidType1',
					width: 50,
					sortable: false,
					renderer: renderFluidType,
					align: 'center'
				},
				{
					header: 'Instructions',
					dataIndex: 'Instructions',
					width: 217,
					sortable: false,
					align: 'center',
					renderer: function (value, p, record) {
						return Ext.String.format('{0}', value);
					}
				}
			],
			buttons: [
				{
					text: 'Add Drug'
				},
				{
					text: 'Remove Drug',
					disabled: true
				},
				{
					text: 'Edit Drug',
					disabled: true
				}
			],
			buttonAlign: 'left'
		}		// END of Grid definition
	]
});

function renderAmt(value, p, record) {

	var amt2 = record.data.Amt2;

	if (null !== value && null !== amt2 && '' !== amt2) {
		return Ext.String.format('{0}', value);
	}
	return Ext.String.format('{0}', value);
}

function renderUnit(value, p, record) {

	var unit2 = record.data.Units2;

	if (null !== value && null !== unit2 && '' !== unit2) {
		return Ext.String.format('{0}', value);
	}
	return Ext.String.format('{0}', value);
}

function renderRoute(value, p, record) {
	if (value.indexOf(" : ") > 0) {
		return value.split(" : ")[0];
	}
	return Ext.String.format('{0}', value);
}

function renderFluidVol(value, p, record) {

	var val2 = record.data.FluidVol2;

	if (null !== value && null !== val2 && '' !== val2) {
		return Ext.String.format('{0}', value);
	}
	return Ext.String.format('{0}', value);
}

function renderFlowRate(value, p, record) {

	var val2 = record.data.FlowRate2;

	if (null !== value && null !== val2 && '' !== val2) {
		return Ext.String.format('{0}', value);
	}
	return Ext.String.format('{0}', value);
}

function renderInfusionTime(value, p, record) {

	var val2 = record.data.InfusionTime2;

	if (null !== value && null !== val2 && '' !== val2) {
		return Ext.String.format('{0}', value);
	}
	return Ext.String.format('{0}', value);
}

function renderFluidType(value, p, record) {

	var val2 = record.data.FluidType2;

	if (null !== value && null !== val2 && '' !== val2) {
		return Ext.String.format('{0}', value);
	}
	return Ext.String.format('{0}', value);
}

Ext.define('COMS.view.Authoring.HydrationSequence', {
	extend: 'Ext.window.Window',
	alias : 'widget.HydrationSequence',

	title : 'Information',
	layout: 'fit',
	autoShow: true,
	width: 440,
    height: 150,

	initComponent: function() {
		this.items = [ {
			xtype: 'form',
			defaults : { labelAlign: 'top', margin: '5'},
			items: [
                            {
                                xtype: 'radiogroup',
                                fieldLabel: 'You have entered a duplicate sequence number. Would you like to',
                                columns: 1,
                                items: [
                                            { boxLabel  : 'Apply Next Sequence Number', name : 'ApplySequence', inputValue: '0'  }, 
                                            { boxLabel  : 'Insert as Entered and Re-sequence Drugs', name  : 'ApplySequence', inputValue: '1'  }
                                    ]
                            }
                        ]}];
                                    
		this.buttons = [
			{ text: 'Save', action: 'save' },
			{ text: 'Cancel', scope: this, handler: this.close }
		];

		this.callParent(arguments);
	}
});

Ext.define('COMS.view.Authoring.MedReminder' ,{
	extend: 'Ext.form.Panel',
	alias : 'widget.MedReminder',
	margin: '0 20 20 20',
	title : 'Medication Reminders',
	items: [
		{
			xtype : "grid",
			store: "MedReminders",
			viewConfig: { stripeRows: true },
			plugins: [ Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 }) ],
			columns : [
				{header: 'When',  dataIndex: 'ReminderWhenCycle',  flex: 1},
				{header: '',  dataIndex: 'ReminderWhenPeriod',  flex: 1},
				{header: 'Title', dataIndex: 'Title', flex: 5}
			],
			buttons: [
				{ text: 'Add Reminder', title: 'AddReminder'},
				{ text: 'Remove Reminder', title: 'RemoveReminder', disabled: true }
			],
			buttonAlign: 'left'
		},
			{ xtype : "MedRemindersForm", hidden : true }
		]
});


Ext.define('COMS.view.Template.PostHydration' ,{
	extend: 'Ext.container.Container',
//	extend: 'Ext.grid.Panel',
	alias : 'widget.TemplatePostHydration',

	margin: '0 20 20 20',
	title : 'Post Therapy',
	items : [
		{ xtype : 'textfield', fieldLabel: 'PreHydration Instructions', width : 640, labelWidth: 200 },
		{ xtype : 'gridpanel', columns : [
				{ header: 'Drug', dataIndex: 'drug', editor : { allowBlank:false /* , xtype : 'selDrug' */ } },
				{ header: 'Unit', dataIndex: 'unit', editor: { allowBlank:false }},
				{ header: 'Comments', dataIndex: 'description', width: 270, editor: { allowBlank:false }, flex: 1 }
			]
		}

	],

	initComponent: function() {
		this.store = {
			fields: ['Drug', 'Unit', 'Comments']
		};
/* MWB - 10/29/2013 Added spacing in comment below because it was preventing the entire colums array from being commented out
        this.columns = [
            { header: 'Drug', dataIndex: 'drug', editor : { allowBlank:false / * , xtype : 'selDrug' * / } },
            { header: 'Unit', dataIndex: 'unit', editor: { allowBlank:false }},
            { header: 'Comments', dataIndex: 'description', width: 270, editor: { allowBlank:false }, flex: 1 }
        ];
*/
		var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
			clicksToEdit: 1
		});

		this.dockedItems = [{
			xtype: 'toolbar',
			dock: 'bottom',
			buttonAlign: 'right',
			items: [
				{
					xtype: 'button',
					text: 'Add Drug',
					title: 'AddDrug'
				},
				{
					xtype: 'button',
					text: 'Remove Drug',
					disabled: true,
					handler: function(){
						//addReferenceRow();
					}
				}
			]
		}];
		this.plugins = [cellEditing];
		this.callParent();
    }
});

/*global Ext */
Ext.define('COMS.view.Authoring.PreHydration' ,{
	extend: 'Ext.container.Container',
	alias : 'widget.TemplatePreHydration',

	margin: '0 20 20 20',
	title : 'Pre Therapy',
	items : [
		{ xtype : 'textfield', fieldLabel: 'PreHydration Instructions', labelAlign: 'right', width : 840, labelWidth: 150 },
		{ xtype : 'grid',
			height : 150,
			title : 'PreHydration Drug Regimen',
			store : { fields: ['Drug', 'Dosage1', 'Unit1', 'Infusion1', 'Dosage2', 'Unit2', 'Infusion2', 'Comments'] },

			columns : [
				{header : 'Drug', dataIndex : 'Drug' },
				{header : 'Dosage Amount', dataIndex : 'Dosage1', width: 90 },
				{header : 'Units', dataIndex : 'Units1', width: 40 },
				{header : 'Administration Method', dataIndex : 'Infusion1', width: 50 },

//				{header : 'OR', width: 25 },
//				{header : 'Dosage Amount', dataIndex : 'Dosage2', width: 25 },
//				{header : 'Units', dataIndex : 'Units2', width: 25 },
//				{header : 'Administration Method', dataIndex : 'Infusion2', width: 50 },

				{header : 'Instructions', dataIndex : 'Comments' }
			],
			dockedItems : [{
				xtype: 'toolbar',
				dock: 'bottom',
				buttonAlign: 'right',
				items: [
					{
						xtype: 'button',
						text: 'Add Drug',
						title: 'AddDrug'
					},
					{
						xtype: 'button',
						text: 'Remove Drug',
						title: 'RemoveDrug',
						disabled: true
					}
				]
			}]
		}

	]
});

Ext.define('COMS.view.Authoring.References' ,{
	extend: 'Ext.grid.Panel',
	alias : 'widget.TemplateReferences',
	margin: '0 20 20 20',
	title : 'References',
	store: 'ReferencesStore',
	viewConfig: { stripeRows: true },
	plugins: [ Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 }) ],

	columns : [
			{header: 'Reference',  dataIndex: 'Reference',  flex: 1},
			{header: 'Reference Link', dataIndex: 'ReferenceLink', flex: 1, renderer : renderURI}
	],
	buttons: [
		{ text: 'Add Reference', title: 'AddReference' },
		{ text: 'Remove Reference', title: 'RemoveReference', disabled: true },
		{ text: 'Edit Reference', title: 'EditReference', disabled: true}
	],
	buttonAlign: 'left',
	initComponent: function() {
		var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', { clicksToEdit: 1 });
		this.plugins = [cellEditing];
		this.callParent(arguments);
	}
});


function renderURI(value, p, record) {
	var description = record.data.ReferenceLink;
	var tmp;
	if(null !== value && null !== description){
		tmp = Ext.String.format('<b><a href="{0}">{0}</a></b>', value, record.data.ReferenceLink );
		return tmp;
	}
}


Ext.define('COMS.view.Template.selDrug' ,{
    extend: 'Ext.form.field.ComboBox',
    alias : 'widget.selDrug',
	name : 'Select Drug',

	width: 500,
	size : 50,
	labelWidth: 150,
	displayField: 'Drug',
	valueField: 'Drug',
    initComponent: function() {
        this.store = {
            fields: ['Drug', 'Unit', 'Comments'],
            data  : [
                {Drug: 'Cisplatin', Unit : 'mg', Comments : '' },
                {Drug: 'Vinorelbine', Unit : 'mg', Comments : '' },
                {Drug: 'Pemetrexed', Unit : 'micrograms', Comments : '' },
                {Drug: 'Gemcitabine', Unit : 'mg', Comments : '' },
                {Drug: 'Dexamethasone', Unit : 'mg', Comments : '' },
                {Drug: 'Ondansetron', Unit : 'mg', Comments : '' },
                {Drug: 'Aprepitant', Unit : 'mg', Comments : '' },
                {Drug: 'NS', Unit : 'mg', Comments : '' },
                {Drug: 'Prochlorperazine', Unit : 'mg', Comments : '' }
            ]
        };
	}
});


Ext.define("COMS.view.CkBoxTArea" ,{
	"extend" : "Ext.container.Container",
	"alias" : "widget.CkBoxTArea",
	"layout" : { "type" : "hbox" },
	"cls" : "Test", 
	"margin" : "5 0 5 0",
	"items" : [
		{ "xtype" : "checkbox", flex: 0 }, 
		{ "xtype" : "textarea", "rows" : 5, flex : 1, "grow" : true, "name" : "", "hidden" : true, "fieldLabel" : "Please Explain <em>*</em>", "labelAlign" : "top", "margin" : "2 0 5 5"}
	]
});


/**
 * http://www.sencha.com/forum/showthread.php?198862
 * cleaned up with JSLint - MWB 5/19/2014
 **/
Ext.define('Ext.ux.CheckCombo', {
	extend: 'Ext.form.field.ComboBox',
	alias: 'widget.checkcombo',
	multiSelect: true,
	allSelector: false,
	noData: false,
	noDataText: 'No combo data',
	addAllSelector: false,
	allSelectorHidden: false,
	enableKeyEvents: true,
	afterExpandCheck: false,
	allText: 'All',
	oldValue: '',
	listeners: {
		/* uncomment if you want to reload store on every combo expand
        beforequery: function(qe)
        {
            this.store.removeAll();
            delete qe.combo.lastQuery;
        },
*/
		focus: function (cpt) {
			cpt.oldValue = cpt.getValue();
		},
		keydown: function (cpt, e, eOpts) {
			var value = cpt.getRawValue(),
				oldValue = cpt.oldValue;

			if (value != oldValue) {
				cpt.setValue('');
			}
		}
	},
	createPicker: function () {
		var me = this,
			picker,
			menuCls = Ext.baseCSSPrefix + 'menu',
			opts = Ext.apply({
				pickerField: me,
				selModel: {
					mode: me.multiSelect ? 'SIMPLE' : 'SINGLE'
				},
				floating: true,
				hidden: true,
				ownerCt: me.ownerCt,
				cls: me.el.up('.' + menuCls) ? menuCls : '',
				store: me.store,
				displayField: me.displayField,
				focusOnToFront: false,
				pageSize: me.pageSize,
				tpl: [
					'<ul><tpl for=".">',
					'<li role="option" class="' + Ext.baseCSSPrefix + 'boundlist-item"><span class="x-combo-checker">&nbsp;</span> {' + me.displayField + '}</li>',
					'</tpl></ul>'
				]
			}, me.listConfig, me.defaultListConfig);


		picker = me.picker = Ext.create('Ext.view.BoundList', opts);
		if (me.pageSize) {
			picker.pagingToolbar.on('beforechange', me.onPageChange, me);
		}


		me.mon(picker, {
			itemclick: me.onItemClick,
			refresh: me.onListRefresh,
			scope: me
		});


		me.mon(picker.getSelectionModel(), {
			'beforeselect': me.onBeforeSelect,
			'beforedeselect': me.onBeforeDeselect,
			'selectionchange': me.onListSelectionChange,
			scope: me
		});


		me.store.on('load', function (store) {
			if (store.getTotalCount() == 0) {
				me.allSelectorHidden = true;
				if (me.allSelector != false) {
					me.allSelector.setStyle('display', 'none');
				}
				if (me.noData != false) {
					me.noData.setStyle('display', 'block');
				}
			} else {
				me.allSelectorHidden = false;
				if (me.allSelector != false) {
					me.allSelector.setStyle('display', 'block');
				}
				if (me.noData != false) {
					me.noData.setStyle('display', 'none');
				}
			}
		});


		return picker;
	},
	reset: function () {
		var me = this;


		me.setValue('');
	},
	setValue: function (value) {
		this.value = value;
		if (!value) {
			if (this.allSelector != false) {
				this.allSelector.removeCls('x-boundlist-selected');
			}
			return this.callParent(arguments);
		}


		if (typeof value == 'string') {
			var me = this,
				records = [],
				vals = value.split(',');


			if (value == '') {
				if (me.allSelector != false) {
					me.allSelector.removeCls('x-boundlist-selected');
				}
			} else {
				if (vals.length == me.store.getCount() && vals.length != 0) {
					if (me.allSelector != false) {
						me.allSelector.addCls('x-boundlist-selected');
					} else {
						me.afterExpandCheck = true;
					}
				}
			}


			Ext.each(vals, function (val) {
				var record = me.store.getById(parseInt(val, 10));
				if (record) {
					records.push(record);
				}
			});
			return me.setValue(records);

		}
		return this.callParent(arguments);
	},
	getValue: function () {
		if (typeof this.value == 'object') {
			return this.value.join(',');
		}
		return this.value;
	},
	getSubmitValue: function () {
		return this.getValue();
	},
	expand: function () {
		var me = this,
			bodyEl, picker, collapseIf;


		if (me.rendered && !me.isExpanded && !me.isDestroyed) {
			bodyEl = me.bodyEl;
			picker = me.getPicker();
			collapseIf = me.collapseIf;


			// show the picker and set isExpanded flag
			picker.show();
			me.isExpanded = true;
			me.alignPicker();
			bodyEl.addCls(me.openCls);


			if (me.noData == false) {
				me.noData = picker.getEl()
					.down('.x-boundlist-list-ct')
					.insertHtml('beforeBegin', '<div class="x-boundlist-item" role="option">' + me.noDataText + '</div>', true);
			}


			if (me.addAllSelector == true && me.allSelector == false) {
				me.allSelector = picker.getEl()
					.down('.x-boundlist-list-ct')
					.insertHtml('beforeBegin', '<div class="x-boundlist-item" role="option"><span class="x-combo-checker">&nbsp;</span> ' + me.allText + '</div>', true);
				me.allSelector.on('click', function (e) {
					if (me.allSelector.hasCls('x-boundlist-selected')) {
						me.allSelector.removeCls('x-boundlist-selected');
						me.setValue('');
						me.fireEvent('select', me, []);
					} else {
						var records = [];
						me.store.each(function (record) {
							records.push(record);
						});
						me.allSelector.addCls('x-boundlist-selected');
						me.select(records);
						me.fireEvent('select', me, records);
					}
				});


				if (me.allSelectorHidden == true) {
					me.allSelector.hide();
				} else {
					me.allSelector.show();
				}

				if (me.afterExpandCheck == true) {
					me.allSelector.addCls('x-boundlist-selected');
					me.afterExpandCheck = false;
				}
			}


			// monitor clicking and mousewheel
			me.mon(Ext.getDoc(), {
				mousewheel: collapseIf,
				mousedown: collapseIf,
				scope: me
			});
			Ext.EventManager.onWindowResize(me.alignPicker, me);
			me.fireEvent('expand', me);
			me.onExpand();
		} else {
			me.fireEvent('expand', me);
			me.onExpand();
		}
	},
	alignPicker: function () {
		var height,
			me = this,
			picker = me.getPicker();


		me.callParent();

		if (me.addAllSelector == true) {
			height = picker.getHeight();
			height = parseInt(height, 10) + 20;
			picker.setHeight(height);
			picker.getEl()
				.setStyle('height', height + 'px');
		}
	},
	onListSelectionChange: function (list, selectedRecords) {
		var me = this,
			isMulti = me.multiSelect,
			hasRecords = selectedRecords.length > 0;
		// Only react to selection if it is not called from setValue, and if our list is
		// expanded (ignores changes to the selection model triggered elsewhere)
		if (!me.ignoreSelection && me.isExpanded) {
			if (!isMulti) {
				Ext.defer(me.collapse, 1, me);
			}
			/*
			 * Only set the value here if we're in multi selection mode or we have
			 * a selection. Otherwise setValue will be called with an empty value
			 * which will cause the change event to fire twice.
			 */
			if (isMulti || hasRecords) {
				me.setValue(selectedRecords, false);
			}
			if (hasRecords) {
				me.fireEvent('select', me, selectedRecords);
			}
			me.inputEl.focus();


			if (me.addAllSelector == true && me.allSelector != false) {
				if (selectedRecords.length == me.store.getTotalCount()) {
					me.allSelector.addCls('x-boundlist-selected');
				} else {
					me.allSelector.removeCls('x-boundlist-selected');
				}
			}
		}
	}
});

Ext.define("COMS.view.Common.DEMOpuWin", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.DEMOpuWin",
	"title" : "DEMO Pop Up Window",
	"closeAction" : "destroy",
	"autoShow" : true,
	"width" : 920,
	"height" : 640,
	"minHeight" : 440,
	"layout" : "fit",
	"resizable" : true,
	"modal" : true,
	"items" : [
//		{ "xtype" : "FS_Toxicity" }
		{ "xtype" : "EmeticMeds" }
	]
});



Ext.define("COMS.view.Common.EmeticInfo" ,{
	"extend" : "Ext.Component",
	"alias" : "widget.EmeticInfo",
	"name" : "EmeticInfo",
	margin: 10,
	border: 0,
	style: {
		borderColor: '#99bce8',
		borderStyle: 'solid'
	}
});


Ext.define("COMS.view.Common.MedRemindersForm", {
	"extend": "Ext.form.Panel",
	"alias": "widget.MedRemindersForm",
	"header": false,
	"margin": 10,
	"bodyPadding": "5 5 0",

	/*** SQL Field Definitions for this form
	[MR_ID] [uniqueidentifier] NOT NULL,
	[Order_ID] [uniqueidentifier] NOT NULL,
	[Patient_ID] [uniqueidentifier] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Date_Reminder] [datetime] NULL,
	[Date_ReminderDue] [datetime] NULL,
	[Date_Entered] [datetime] NULL,
	[Date_Modified] [datetime] NULL,
	[Status] [nvarchar](max) NULL
	***/

	defaultType: 'textfield',
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "labelWidth": 85, margin: "5 10 5 0" },
	layout: 'anchor',
	items: [
		{ xtype : "container", layout : "hbox", 
			"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "labelWidth": 85, margin: "5 10 5 0" },
			items : [
				{
					xtype: 'combo',
					name: 'ReminderWhenCycle',
					labelAlign: "right",
					fieldLabel: 'When <em>*</em>',
					labelWidth: 75,
					margin: "5 10 0 0",
					queryMode: 'local',
					store : ["Before", "After"]
				},

				{
					xtype: 'combo',
					name: 'ReminderWhenPeriod',
					margin: "5 10 0 0",
					queryMode: 'local',
					store : ["Cycle", "Administration Day"]
				}
			]
		},
		{ xtype : "textfield", 
			labelAlign: 'right',
			margin: '5 5 5 0',
			labelWidth: 75,
			anchor: '95%',
			fieldLabel: "Title <em>*</em>",
			name: 'Title'
		},
		{
			xtype: 'textareafield',
			grow: true,
			labelAlign: 'right',
			margin: '5 5 5 0',
			labelWidth: 75,
			anchor: '95%',
			fieldLabel: "Description",
			name: 'Description'
		},

		{ xtype: 'hiddenfield', name: 'TemplateID' },
		{ xtype: 'hiddenfield', name: 'MR_ID' },

		{
			xtype: 'container',
			layout: 'hbox',
			"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "labelWidth": 85, margin: "5 10 5 0" },
			items: [
				{ "xtype" : "button", "text" : "Save", "scope" : this }, 
				{ "xtype" : "button", "text" : "Cancel", "scope" : this }
			]
		}
	]
});

Ext.define("COMS.view.Common.MedRemindersGrid", {
	"extend": "Ext.grid.Panel",
	"alias": "widget.MedRemindersGrid",
	"header": false,
	//"margin": 10,
	//"bodyPadding": "5 5 0",
	// store: "MedReminders",
	viewConfig: { stripeRows: true },
	plugins: [ Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 }) ],
	columns : [
		{header: 'When',  dataIndex: 'ReminderWhenCycle',  flex: 1},
		{header: '',  dataIndex: 'ReminderWhenPeriod',  flex: 1},
		{header: 'Title', dataIndex: 'Title', flex: 5}
	],
	buttonAlign: 'left',
	buttons: [
		{ text: 'Add Reminder', title: 'AddReminder'},
		{ text: 'Remove Reminder', title: 'RemoveReminder', disabled: true }
	],

	initComponent: function () {
		var me = this;

		var theStore = Ext.create("COMS.store.MedReminders");
		Ext.apply(me, {
			store: theStore
		}); 

		me.callParent();
	}
});

Ext.define("COMS.view.Common.NeutropeniaRiskPanel",{
	"extend" : "Ext.panel.Panel",
	"alias" : "widget.NeutropeniaRiskPanel",
	"title" : "Neutropenia Risk - "
});


Ext.define('COMS.view.Common.Search4Template' ,{
	extend: 'Ext.container.Container',
	alias : 'widget.Search4Template',

	layout : 'hbox', 
	items : [
		{ 
			xtype: 'textfield', 
			name : 'CancerTypeSearch', 
			margin: '5 0 0 0', 
			width: 500, 
			size : 50, 
			labelWidth: 160, 
			fieldLabel: 'Search', 
			labelAlign: 'right' 
		},

		{ 
			xtype : 'button', 
			text : 'Search', 
			margin: '5 0 0 3' 
		}
	]
});


Ext.define("COMS.view.Common.SelectAdverseReactionAlerts", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.SelectAdverseReactionAlerts",

	"title" : "Select Adverse Reaction Alerts",
	"autoShow" : true,
	"width" : 800,
	"items" : [
		{ 
			"xtype" : "form", "items" : [
				{ "xtype" : "box", "html" : "<h1>Adverse Reactions which would trigger an alert</h1>" },
				{
					"xtype": "checkcombo",
					"value" : "",		/* If a CheckCombo is not initialized with a value of "" the form shows up as Dirty */
					"labelClsExtra" : "NursingDocs-boxLabel", 
					"labelAlign" : "right",
					"labelWidth" : 250,
					"fieldLabel": "Select Adverse Reaction(s) which would trigger an alert",
					"name": "AdverseReactions4Alert",
					"width": 550,
					"margin" : "5 0 10 0",
					"displayField": "fieldLabel",
					"valueField": "fieldLabel"
				},
				{
					"xtype" : "hiddenfield",
					"name" : "AdverseReactionsType"
				}
			],
			"buttons" : [
				{ "text" : "Save", "scope" : this },
				{ "text" : "Cancel", "scope" : this }
			]
		}

	]
});

Ext.define("COMS.view.Common.VitalSignsHistory" ,{
	extend : "Ext.container.Container",
	alias : "widget.VitalSignsHistory",
	name : "NursingDocs.VitalSignsHistory",
	autoScroll : true,

	tpl : new Ext.XTemplate(
		"{[this.tempCalc(values, parent)]}",
		"{[this.getLastHWBSAInfo(values)]}",
		"<table border=\"1\" class=\"PatHistResults InformationTable\">",
			"<tr>",
				"<th rowspan=\"2\">Date</th>",
				"<th rowspan=\"2\">Temp<br />&deg;F/&deg;C</th>",
				"<th rowspan=\"2\">Temp Taken</th>",
				"<th rowspan=\"2\">Pulse</th>",
				"<th rowspan=\"2\"><abbr title=\"Blood Pressure\">BP</abbr></th>",
				"<th rowspan=\"2\"><abbr title=\"Respiration in breaths per minute\">Resp</abbr></th>",
				"<th rowspan=\"2\">Pain</th>",
				"<th rowspan=\"2\"><abbr title=\"Saturation of Peripheral Oxygen\">SP O<sub>2</sub></abbr></th>",
				"<th rowspan=\"2\"><abbr title=\"Performance Status - Using the ECOG (Eastern Cooperative Oncology Group) Scale\">PS</abbr></th>",
				"<th rowspan=\"2\">Height<br />in Inches/cm</th>",
				"<th rowspan=\"2\">Weight<br />in lbs/kg</th>",
				"<th colspan=\"4\"><abbr title=\"Body Surface Area\">BSA</abbr></th>",
			"</tr>",
			"<tr>",
				"<th ><abbr title=\"Body Surface Area Weight Formula\">Weight Form.</abbr></th>",
				"<th ><abbr title=\"Body Surface Area Weight \">Weight</abbr> in KG</th>",
				"<th ><abbr title=\"Body Surface Area Formula\">Method</abbr></th>",
				"<th ><abbr title=\"Body Surface Area Formula\">BSA</abbr></th>",
			"</tr>",
			"<tpl for=\"Vitals\">",
				"<tr>",
					"<td>{DateTaken}</td>",
					"<td>{[this.TempCalc(values, parent)]}</td>",
					"<td>{TemperatureLocation}</td>",
					"<td>{Pulse}</td>",
					"<td>{[this.BPCalc(values, parent)]}</td>",
					"<td>{Respiration}</td>",
					"<td>{Pain}</td>",
					"<td>{SPO2}</td>",
					"<td><abbr title=\"{PS}\">{PSID}</abbr></td>",
					"<td>{[this.HeightCalc(values, parent)]}</td>",
					"<td>{[this.WeightCalc(values, parent)]}</td>",
					"<td>{WeightFormula}</td>",
					"<td>{[this.BSA_WeightCalc(values, parent)]}</td>",
					"<td>{BSA_Method}</td>",
					"<td>{[this.BSACalc(values, parent, xindex)]}</td>",
				"</tr>",
			"</tpl>",
		"</table>",

		{
				// XTemplate Configuration
			disableFormats: true,
			tempCalc : function (data, pData) {
				// debugger;
			},
			getLastHWBSAInfo : function (data) {

				var Vitals = data.Vitals, vLen = data.Vitals.length;
				var i, v1, v, h = "", w = "", bm = "", bw = "", wf = "";
				v = { Height : "", Weight: "", BSA_Method : "", BSA_Weight : "", WeightFormula : "" };
				for (i = 0; i < vLen; i++ ) {
					v1 = Vitals[i];
					if (!v1.hasOwnProperty("Height")) {
					}
					else if ("" === v.Height) {
						v.Height = v1.Height;
					}
					if (!v1.hasOwnProperty("Weight")) {
					}
					else if ("" === v.Weight) {
						v.Weight = v1.Weight;
					}
					if (!v1.hasOwnProperty("BSA_Method")) {
					}
					else if ("" === v.BSA_Method) {
						v.BSA_Method = v1.BSA_Method;
					}
					if (!v1.hasOwnProperty("BSA_Weight")) {
					}
					else if ("" === v.BSA_Weight) {
						v.BSA_Weight = v1.BSA_Weight;
					}
					if (!v1.hasOwnProperty("WeightFormula")) {
					}
					else if ("" === v.WeightFormula) {
						v.WeightFormula = v1.WeightFormula;
					}
					if ("" !== v.Height && "" !== v.Weight && "" !== v.BSA_Method && "" !== v.BSA_Weight && "" !== v.WeightFormula) {
						// console.log("Vitals Property Loop Index = " + i);
						break;
					}
				}
				var NAMsg = "<abbr title='Not Available'>N/A</abbr>";
				var thepiTag = Ext.get("#PatientInfoTableBSA_Display");

				if (globalAppPatientScope) {
					var PatientInfo = globalAppPatientScope.application.Patient;
					// v = Vitals[0];
					if (!PatientInfo.hasOwnProperty("Height")) {
						PatientInfo.Height = "";
					}
					if (!PatientInfo.hasOwnProperty("Weight")) {
						PatientInfo.Weight = "";
					}
					if (!PatientInfo.hasOwnProperty("BSA_Method")) {
						PatientInfo.BSA_Method = "";
					}
					if (!PatientInfo.hasOwnProperty("BSA_Weight")) {
						PatientInfo.BSA_Weight = "";
					}
					if (!PatientInfo.hasOwnProperty("WeightFormula")) {
						PatientInfo.WeightFormula = "";
					}
					if (v.hasOwnProperty("Height") && PatientInfo.Height == "") {
						PatientInfo.Height = v.Height;
					}
					if (v.hasOwnProperty("Weight") && PatientInfo.Weight == "") {
						PatientInfo.Weight = v.Weight;
					}
					if (v.hasOwnProperty("BSA_Method") && PatientInfo.BSA_Method == "") {
						PatientInfo.BSA_Method = v.BSA_Method;
					}
					if (v.hasOwnProperty("BSA_Weight") && PatientInfo.BSA_Weight == "") {
						PatientInfo.BSA_Weight = v.BSA_Weight;
					}
					if (v.hasOwnProperty("WeightFormula") && PatientInfo.WeightFormula == "") {
						PatientInfo.WeightFormula = v.WeightFormula;
					}
					PatientInfo.BSA = Ext.BSA_Calc(PatientInfo);
					var thisCtl = globalAppPatientScope.getController("NewPlan.NewPlanTab");
					thisCtl.updatePITable( PatientInfo );
				}
				return "";
			},

			BSA_WeightCalc : function (data, pData) {
				if ("" == data.Gender) {
					data.Gender = pData.Gender;
				}
				return Ext.BSAWeight(data);
			},

			BPCalc : function (data, pData) {
				if (data.BP) {
					if ("0/0" == data.BP) {
						return "";
					}
					return data.BP;
				}
				return "";
			},

			TempCalc : function (data, pData) {
				if (data.Temperature) {
					if ("" == data.Temperature) {
						return "";
					}
					var tempF = data.Temperature;
					var tempC = Ext.TempF2C(tempF);
					return tempF + "/" + tempC;
				}
				return "";
			},

			HeightCalc : function (data, pData) {
				if (data.hasOwnProperty("Height")) {
					if ("" == data.Height) {
						return "";
					}
					var height = data.Height;
					var mHeight = Ext.In2CM(height);
					return height + "/" + mHeight;
				}
				return "";
			},

			WeightCalc : function (data, pData) {
				if (data.hasOwnProperty("Weight")) {
					if ("" == data.Weight) {
						return "";
					}
					var weight = data.Weight;
					var mWeight = Ext.Pounds2Kilos(weight);
					return weight + "/" + mWeight;
				}
				return "";
			},

			BSACalc : function (data, pData, pDataIndex) {
				var NAMsg = "<abbr title='Not Available'>N/A</abbr>";
				var btnBuf = "<button style=\"margin-left: .25em;\" class=\"anchor DoBSACalcs\" tabType=\"DoBSACalcs\" name=\"DoBSACalcs\">Update BSA</button> " + 
								"<span style=\"margin-left: .25em; font-weight: bold;\">Show</span><button class=\"anchor ShowBSACalcs\" tabType=\"ShowBSACalcs\" name=\"ShowBSACalcs\">Calculations</button>";

				if (
					(data.hasOwnProperty("BSA")           && "" !== data.BSA           ) && 
					(data.hasOwnProperty("BSA_Method")    && "" !== data.BSA_Method    && 0 !== data.BSA_Method) && 
					(data.hasOwnProperty("BSA_Weight")    && "" !== data.BSA_Weight    && 0 !== data.BSA_Weight) && 
					(data.hasOwnProperty("WeightFormula") && "" !== data.WeightFormula && 0 !== data.WeightFormula) && 
					(data.hasOwnProperty("Height")        && "" !== data.Height        && 0 !== data.Height) && 
					(data.hasOwnProperty("Weight")        && "" !== data.Weight        && 0 !== data.Weight)
				) {
					data.Amputations = pData.Amputations;
					var BSA = Ext.BSA_Calc(data);
					if ("" !== BSA && 0 !== BSA && "0.00" !== BSA) {
						if (1 === pDataIndex) {
							pData.BSA = BSA;
						}
						return ("<button class=\"anchor dspVSHDoseCalcs\" name=\"dspVSHDoseCalcs\" title=\"Show Dosage Calculation\" " + 
							"weight=\"" + data.Weight + "\" " + 
							"height=\"" + data.Height + "\" " + 
							"weightFormula=\"" + data.WeightFormula + "\" " + 
							"bsa_Weight=\"" + data.BSA_Weight + "\" " + 
							"bsa_Method=\"" + data.BSA_Method + "\" " + 
						">" + BSA + "</button> m<sup>2</sup>");
					}
				}
				if (1 === pDataIndex) {
					pData.BSA = NAMsg;
				}
				return NAMsg;
			}
		}
	)
});


Ext.define("COMS.view.Common.puWinAddCumDose", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.puWinAddCumDose",
	"title" : "Historical Cumulative Medication Dose Entry",
	"closeAction" : "hide",
	"autoShow" : true,
	"width" : 820,
	"height" : 220,
	"minHeight" : 220,
	"layout" : "fit",
	"resizable" : true,
	"modal" : true,
	"items" : [
		{
			"xtype" : "form",
			"url" : Ext.URLs.PatientCumulativeDosing,
			"layout" : { "type" : "vbox", "align" : "stretch" },
			"border" : false,
			"bodyPadding" : 10,
			"defaults" : { "labelAlign" : "right", "labelStyle" : 'font-weight:bold' },
			"items" : [
				{"xtype": "RequiredInstr"},
				{ 
					"xtype" : "combobox", 
					"name" : "value", 
					"fieldLabel" : "Medication <em>*</em>",  
					"labelWidth" : 140,
					"width" : 922,
					"displayField" : "MedName",
					"valueField" : "MedID",
					"allowBlank" : false,
					"store" : "CumulativeDosingMeds"
				},
				{ "xtype" : "component", "name" : "MedMaxAllowable", "margin" : "0 0 0 140", "autoEl" : { "tag" : "div" }},
				{ "xtype" : "container", "layout" : "hbox", "margin" : "5 0", "defaults" : { "labelAlign" : "right", "labelStyle" : 'font-weight:bold' }, "items" : [
					{ 
						"xtype" : "textfield", 
						"name" : "LifetimeDose", 
						"fieldLabel" : "Historical Dose <em>*</em>", 
						"labelWidth" : 140,
						"emptyText" : "Enter Historical dose"
					},
					{ "xtype" : "component", "name" : "HistoricalDoseUnits", "margin" : "4 0 0 0", "autoEl" : { "tag" : "span", "html" : "" }},
					{ "xtype" : "textfield", "name" : "Units", "hidden" : true },
					{ "xtype" : "textfield", "name" : "CumulativeDoseUnits", "hidden" : true }
				]},
				{ 
					"xtype" : "textfield", 
					"name" : "Source", 
					"fieldLabel" : "Source of information", 
					"labelWidth" : 140
				}
			],
			"buttons" : [
				{ "text" : "Save", "scope" : this },
				{ "text" : "Cancel" }
			]
		}
	]
});

Ext.define("COMS.view.Common.puWinChangeAdminDate", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.puWinChangeAdminDate",
	"title" : "Change Administration Date",
	// "closeAction" : "destroy",
	"closeAction" : "hide",
	"width" : 820,
	"height" : 215,
	"minHeight" : 215,
	"resizable" : true,
	"modal" : true,
	"autoShow" : true,
	"items" : [
		{
			"xtype" : "form",
			"url" : Ext.URLs.ChangeAdminDate,
			"border" : false,
			"bodyPadding" : 10,
			"defaults" : { "labelAlign" : "right", "labelStyle" : "font-weight:bold", "labelWidth" : 250, "width" : 500 },
			"items" : [
				{ "xtype": "RequiredInstr"},
				{ "xtype" : "displayfield", "name" : "CurAdminDate", "fieldLabel" : "Current Administration Date", "value" : Ext.Date.format( new Date(), "m/d/Y" ) },
				{ "xtype" : "datefield", 
					"fieldLabel" : "Enter new Administration Date <em>*</em>", 
					"minValue" : new Date(), 
					"name" : "NewAdminDate", 
					"width" : 370 
				},
				{ "xtype" : "box", "name" : "ChangeAdminDateOffsetMsg", "margin" : "0 0 5 70", "width" : 300 },
				{ "xtype" : "combobox",
					"fieldLabel" : "Dates to change <em>*</em>",
					"queryMode" : "local",
					"displayField" : "name",
					"valueField" : "data",
					"store" : { "fields" : [ "name", "data" ], "data" : [
						{ "name" : "This Administration Date Only", "data" : "This" },
						{ "name" : "All Future Dates in the Current Cycle", "data" : "Cycle" },
						{ "name" : "All Regimen Future Dates", "data" : "All" }
					]},
					"labelAlign" : "right", 
					"labelStyle" : "font-weight:bold", 
					"labelWidth" : 250, 
					"width" : 500 
				}
			],
			"buttons" : [
				{ "text" : "Save", "scope" : this },
				{ "text" : "Cancel" }
			]
		}
	]
});



Ext.define("COMS.view.Common.puWinSelAmputation",{
	"extend" : "Ext.window.Window",
	"alias" : "widget.puWinSelAmputation",
	"title" : "Patient Amputations",
	"closeAction" : "hide",
	"width" : 400,
	"height" : 270,
	"minHeight" : 270,
	"layout" : "fit",
	"resizable" : true,
	"modal" : true,
	"items" : [
		{
			"xtype" : "form",
			"layout" : { "type" : "vbox", "align" : "stretch" },
			"border" : false,
			"bodyPadding" : 10,
			"items" : [ 
				{  "xtype" : "AmputationSelection", "width" : 330 }
			],
			"buttons" : [
				{ "text" : "Save", "scope" : this },
				{ "text" : "Cancel" }
			]
		}
	]
});

Ext.define("COMS.view.Common.puWinSelBSA",{
	"extend" : "Ext.window.Window",
	"alias" : "widget.puWinSelBSA",
	"title" : "Body Surface Area (BSA) Method Selection",
	"name" : "puBSASelection",
	"closeAction" : 'hide',
	"width" : 360,
	"height" : 270,
	"minHeight" : 270,
	"layout" : 'fit',
	"resizable" : true,
	"modal" : true,
	"items" : [
		{
			"xtype" : "form",
			"layout" : { "type" : "vbox", "align" : "stretch" },
			"border" : false,
			"bodyPadding" : 10,
			"fieldDefaults" : {
				"labelAlign" : 'top',
				"labelWidth" : 100,
				"labelStyle" : 'font-weight:bold'
			},
			"defaults" : {
				"margins" : '0 0 10 0'
			},

			"items" : [
				{
					"xtype" : "combo",
					"name" : "WeightFormula",
					"fieldLabel" : "Weight to use <em>*</em>",
					"labelAlign" : "top",
					"width" : 178,
					"labelStyle" : "font-weight: bold",
					"store" : {
							"fields" : ["weightType"],
							"data" : [ 
									{ "weightType" : "Actual Weight" },
									{ "weightType" : "Ideal Weight" },
									{ "weightType" : "Adjusted Weight" },
									{ "weightType" : "Lean Weight" },
									{ "weightType" : "Other" }
							]
					},
					"queryMode" : "local",
					"displayField" : "weightType"
				},
				{
					"xtype" : "combo",
					"name" : "BSAFormula",
					"fieldLabel" : "BSA Formula <em>*</em>",
					"labelAlign" : "top",
					"width" : 178,
					"labelStyle" : "font-weight: bold",
					"store" : {
						"fields" : ["formula"],
						"data" : [ 
							{ "formula" : "DuBois" },
							{ "formula" : "Mosteller" },
							{ "formula" : "Haycock" },
							{ "formula" : "Gehan and George" },
							{ "formula" : "Boyd" },
							{ "formula" : "Capped" }
						]
					},
					"queryMode" : "local",
					"displayField" : "formula"
				}
			],
			"buttons" : [
				{ "text" : "Save", "scope" : this },
				{ "text" : "Cancel" }
			]
		}
	]
});


Ext.define("COMS.view.Common.puWinSelCancer", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.puWinSelCancer",
	"title" : "Patient Type of Cancer",
	"closeAction" : "hide",
	"width" : 520,
	"height" : 200,
	"minHeight" : 200,
	"layout" : "fit",
	"resizable" : true,
	"modal" : true,
	"items" : [
		{
			"xtype" : "form",
			"layout" : { "type" : "vbox", "align" : "stretch" },
			"border" : false,
			"bodyPadding" : 10,
			"items" : [
				{ "xtype" : "selDisease" }, 
				{ "xtype" : "selDiseaseStage" }
			],
			"buttons" : [
				{ "text" : "Save", "scope" : this },
				{ "text" : "Cancel" }
			]
		}
	]
});

Ext.define("COMS.view.Common.puWinTreatmentAmmend", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.puWinTreatmentAmmend",
	"title" : "Make Addendum to Treatment",
	"closeAction" : "destroy",
	"autoShow" : true,
	"autoScroll" : true,
	"width" : 1000,
	"height" : 450,
	// "layout" : "fit",
	"modal" : true,
	"items" : [
		// { "xtype" : "box", html : "Ammendments to this record<hr>" },

		{ "xtype" : "box", html : "<h1>Addendums to Patient Treatment Record</h1><h2>Previous Entries to Patient Treatment Record</h2>" },

		{ "xtype" : "grid", "name" : "AddendumsHistory",
			margin: "10 5 30 5",
			autoScroll : true,
			columnLines : true,
			sortableColumns : false,
			enableColumnHide : false,
			enableColumnMove : false,
			viewConfig:{ markDirty: false },
			store : {
				fields : [
					"Cycle",
					"adminDay",
					"adminDate",
					"typeOrder",	// Used to display therapy type in grid in sorted order (Pre = 1, Therapy = 2, Post = 3)
					"type",			// Indicates type of Therapy this record is for e.g. PreTherapy, Therapy, PostTherapy
					"drug",		// Includes sequence in the treatment type (e.g. "1. Ibuprofin" in Pre Therapy, "3. Mylanta" in Post Therapy
					"MedID",
					"dose",
					"unit",
					"UnitID",
					"route",
					"StartTime",
					"EndTime",
					"Comments",
					"User",
					"Treatment_User",
					"Treatment_Date",		// Time/Date stamp of when the treatment was recorded
					"drug_originalValue",
					"dose_originalValue",
					"unit_originalValue",
					"route_originalValue",
					"orderstatus"
				]
			},
			columns : [
				{ header : "Medication", dataIndex : "drug", width : 120 },
				{ header : "Dose", dataIndex : "dose", width : 50, editor: { allowBlank: false } },
				{ header : "Units", dataIndex : "unit", width : 70},
				{ header : "Route", dataIndex : "route", width : 50},
				{ header : "Start Time", dataIndex : "StartTime" },
				{ header : "End Time", dataIndex : "EndTime" },
				{ header : "Comments", dataIndex : "Comments", width : 250},
				{ header : "Signature", dataIndex : "Treatment_User", width : 200, renderer : Ext.ND_TreatmentSignature }
			]
		},


	

		{ "xtype" : "box", html : "<h2>Make Addendum to Patient Treatment Record</h2>" },
		{ "xtype" : "RequiredInstr", "margin" : "0 0 0 100" },
		{ "xtype" : "grid", margin: "10 5 10 5",
			name : "ModifyData",
			store : {
				fields : [
					"Cycle",
					"adminDay",
					"adminDate",
					"typeOrder",	// Used to display therapy type in grid in sorted order (Pre = 1, Therapy = 2, Post = 3)
					"type",			// Indicates type of Therapy this record is for e.g. PreTherapy, Therapy, PostTherapy
					"drug",		// Includes sequence in the treatment type (e.g. "1. Ibuprofin" in Pre Therapy, "3. Mylanta" in Post Therapy
					"MedID",
					"dose",
					"unit",
					"UnitID",
					"route",
					"StartTime",
					"EndTime",
					"Comments",
					"User",
					"Treatment_User",
					"Treatment_Date",		// Time/Date stamp of when the treatment was recorded
					"drug_originalValue",
					"dose_originalValue",
					"unit_originalValue",
					"route_originalValue",
					"orderstatus"
				]
			},

			autoScroll : true,
			columnLines : true,
			sortableColumns : false,
			enableColumnHide : false,
			enableColumnMove : false,
			viewConfig:{ markDirty: false },
			selType: "cellmodel",
			plugins: [ Ext.create("Ext.grid.plugin.CellEditing", { clicksToEdit: 1 }) ],
			columns : [
				{ header : "Medication", dataIndex : "drug", width : 120 },
				{ header : "Dose", dataIndex : "dose", width : 50, editor: { allowBlank: false } },
				{ header : "Units", dataIndex : "unit", width : 70},
				{ header : "Route", dataIndex : "route", width : 50},
				{ header : "Start Time", dataIndex : "StartTime", renderer : Ext.ND_TreatmentTimeRenderer, 
					editor : new Ext.form.field.Time({
						increment : 1, 
						snapToIncrement : true, 
						format : "h:i A",
						id : "startTimeEditor"
					})
				},
				{ header : "End Time", dataIndex : "EndTime", renderer : Ext.ND_TreatmentTimeRenderer, 
					editor : new Ext.form.field.Time({
						increment : 1, 
						snapToIncrement : true, 
						format : "h:i A",
						id : "endTimeEditor"
					})
				},
				{ header : "Comments <em class=\"required-field\">*</em>", dataIndex : "Comments", width : 250, editor : { xtype : "textfield" } },
				{ header : "Signature", dataIndex : "", width : 200, renderer : Ext.ND_TreatmentSignature }
			]
		},

	{ "xtype" : "button", "text" : "Cancel", "scope" : this, "margin" : "0 0 0 50" }

	]
});


Ext.define("COMS.view.Common.selCTOSTemplate", {
	"extend" : "Ext.container.Container",
	"alias" : "widget.selCTOSTemplate",
	"name" : "selCTOSTemplate",
	"autoEl" : { "tag" : "section" },
	"margin" : "0",
	"items" : [
		{ "xtype" : "Search4Template", "hidden": true },
		{ "xtype" : "container",
			"layout" : "hbox",
			"items" : [
				{ "xtype" : "selTemplateSrc" },
				{ 
					"xtype" : "button", 
					"title" : "ResetFilter",
					"text" : " Show All Templates ", 
					"margin" : "5 0 0 5",
					"hidden" : true
				}
			]
		},
		{ 
			"xtype" : "box", "autoEl" : "div", "cls" : "centeredMsg", "name" : "AllTemplatesShownMsg", 
			"html" : "All templates now available for selection", "hidden" : true 
		},
		{ "xtype" : "selDiseaseAndStage", "margin" : "5 0 5 0" },
		{ "xtype" : "selTemplate", "name" :"AllTemplates"}
	]
});

/**
 * Front End Support for Remote Autocomplete
 * See: https://www.sencha.com/forum/showthread.php?29236-Combobox-typeAhead-autocomplete-for-mode-remote
 */
Ext.define("COMS.view.Common.selDisease" ,{
	"extend" : "Ext.form.field.ComboBox",
	"alias" : "widget.selDisease",
	"name" : "selDisease",
	"store" : "DiseaseType",
	"minChars" : 1,
	"forceSelection" : true,
	"triggerAction" : "all",
	"emptyText" : "Select a Cancer Type",

	"allowBlank" : false,
	"width" : 600,
	"size" : 60,
	"labelWidth" : 190,
	"fieldLabel" : "Select a type of cancer <em>*</em>",
	"labelAlign" : "right",
	"displayField" : "name",
	"valueField" : "id",
	"typeAhead" : true
});


Ext.define("COMS.view.Common.selDiseaseAndStage" ,{
	"extend" : "Ext.container.Container",
	"alias" : "widget.selDiseaseAndStage",
	"name" : "sel Disease Type/Stage",

	"autoEl" : { "tag" : "section" },
	"layout" : "hbox",
	"hidden" : true,
	"hideMode" : "offsets",
	"items" : [
		{ "xtype" : "selDisease" },
		{ "xtype" : "selDiseaseStage" }
	]
});

Ext.define("COMS.view.Common.selDiseaseStage" ,{
	"extend" : "Ext.form.field.ComboBox",
	"alias" : "widget.selDiseaseStage",
	"name" : "Select Disease Stage Control",
	"emptyText" : "Select a Cancer Stage",

	"store" : "DiseaseStage",
	"displayField" : "Stage",
	"valueField" : "ID",
	"queryMode" : "local",
	"fieldLabel" : "Cancer Stage",
	"labelAlign" : "right",
	"width" : 300,
	"size " : 10,
	"labelWidth" : 120
});


Ext.define("COMS.view.Common.selInfusionReactionCombo" ,{
	"extend" : "Ext.form.field.ComboBox",
	"alias" : "widget.selInfusionReaction",
	"name" : "Select Infusion Reactions",
	"store" : Ext.create("Ext.data.Store", {
		"fields" : [ "id", "date", "author" ],
		"proxy" : {
			"type" : "rest",
			"reader" : {
				"type" : "json",
				"root" : "records"
			}
		}
	}),

	"width" : 300,
	"displayField" : "date",
	"valueField" : "id",
	"labelWidth" : 120,
	"labelAlign" : "right",
	"fieldLabel" : "Infusion Reactions"
});


Ext.define('COMS.view.Common.selSequence' ,{
    extend: 'Ext.form.field.ComboBox',
    alias : 'widget.selSequence',
	name : 'Sequence',

//	store : 'TemplateSources',
	store : { 
		fields : ["id"]
	},
	queryMode : "local",

        emptyText: "",
	width: 250,
	labelWidth: 125,
	fieldLabel: 'Select Sequence <em>*</em>',
	labelAlign: 'right',
	displayField: 'id',
	valueField: 'id',
        allowBlank: false,
	margin: '5 0 5 0',

	initComponent: function() {
		wccConsoleLog(this.name + " - Initialization start...");
		this.callParent(arguments);
		wccConsoleLog(this.name + " - Initialization complete...");
    }
});


Ext.define('COMS.view.Common.selTempLoc' ,{
    extend: 'Ext.form.field.ComboBox',
    alias : 'widget.selTemperatureLoc',
	name : 'Select Temperature Location',

	width: 500,
	size : 50,
	labelWidth: 150,
	displayField: 'name',
	valueField: 'name',
    fieldLabel: "Temperature Location"
});


Ext.define("COMS.view.Common.selTemplate", {
	"extend" : "Ext.form.field.ComboBox",
	"alias" : "widget.selTemplate",
	"name" : "Select Template",
	"store" : "Templates",
	"width" : 600,
	"size" : 60,
	"labelWidth" : 190,
	"fieldLabel" : "Select a Template <em>*</em>",
	"labelAlign" : "right",
	"displayField" : "description",
	"valueField" : "id",
	"hidden" : true
});


Ext.define("COMS.view.Common.selTemplateSrc", {
	"extend"      : "Ext.form.FieldContainer",
	"alias"       : "widget.selTemplateSrc",
	"width"       : 620,
	"labelWidth"  : 190,
	"fieldLabel"  : "Select a Template Source <em>*</em>",
	"labelAlign"  : "right",
	"margin"      : "5 0 5 0",
	"layout"      : "hbox",
	"defaultType" : "radiofield", 
	"defaults"    : {
		"margin"  : "0 10 0 0"
	},
	"items"       : [ 
		{
			"boxLabel"   : "My Templates", 
			"name"       : "SelectTemplateSrc", 
			"inputValue" : "My Templates"
		}, 
		{
			"boxLabel"   : "Local Templates", 
			"name"       : "SelectTemplateSrc", 
			"inputValue" : "Local Templates"
		},
		{
			"boxLabel"   : "National Templates", 
			"name"       : "SelectTemplateSrc", 
			"inputValue" : "National Templates"
		}
	]
});

Ext.define('COMS.view.ExistingPlan.ExistingPlanTab' ,{
	extend: 'Ext.container.Container',
	alias : 'widget.ExistingPlanTab',
	name : 'Existing Plan Tab',

	margin : '10',
	autoEl : { tag : 'section' },

	initComponent: function() {
		wccConsoleLog(this.name + " - Initialization start...");
		this.items = [{ xtype : 'container', html : "Content for " + this.name }];
		this.callParent(arguments);
		wccConsoleLog(this.name + " - Initialization complete...");
	}
});

Ext.define('COMS.view.KnowledgeBase.KnowledgeBaseTab' ,{
	extend: 'Ext.container.Container',
	alias : 'widget.KnowledgeBaseTab',
	name : 'Knowledge Base Tab',

	margin : '10',
	autoEl : { tag : 'section' },

	initComponent: function() {
		wccConsoleLog(this.name + " - Initialization start...");
		this.items = [{ xtype : 'container', html : "Content for " + this.name }];
		this.callParent(arguments);
		wccConsoleLog(this.name + " - Initialization complete...");
	}
});




Ext.define('COMS.view.Management.ActiveWorkflows', {
	extend: "Ext.grid.Panel",
	alias: "widget.ActiveWorkflows",
	name: "ActiveWorkflows",
	title: "COMS Active Workflows",
	width: 925,
	margin: "10",
	autoEl: {
		tag: "section"
	},

	autoScroll: 'y',
	cls: 'custom-grid',
	columnLines: true,
	viewConfig: {
		stripeRows: true,
		height: 600,
		forceFit: true
	},
	store: {
		// autoLoad: true,
        autoLoad: false,
		fields: ["WorkFlowName", "Active", "Reason", "NoSteps", "Body"],
		proxy: {
			type: "rest",
			url: "/Admin/ActiveWorkflows",
			reader: {
				type: "json",
				root: "records"
			}
		}
	},

	columns: [
		{
			header: "Workflow Name",
			dataIndex: "WorkFlowName",
			width: 120
		},
		{
			header: "Reason",
			dataIndex: "Reason",
			width: 120
		},
		//{
		//	header: "NoSteps",
		//	dataIndex: "NoSteps",
		//	width: 120
		//},
		{
			header: "Body",
			dataIndex: "Body",
			width: 180
		},
		{
			header: "Active",
			dataIndex: "Active",
			width: 50
		}
//	selType: 'cellmodel',
//	plugins: [
//	Ext.create('Ext.grid.plugin.CellEditing',{
//	clicksToEdit: 1
//	})
	]
});


Ext.define("COMS.view.Management.AddLookups" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.AddLookups",
	"name" : "Add Lookups",
	// "id" : "addLookup",
	"title" : "Add Lookups",
	"store" : "LookupStore",
	"items" : [
		{
			"xtype" : "form",
			"margin" : "10 10 10 10",
			"layout" : "hbox",
			"defaults" : { "margin" : "5 5 5 0", "labelAlign" : "right", "labelWidth" : 160, "width" : 300 },
			"items" : [
				{
					"xtype" : "SelectLookups",
					"name" : "id",
					"labelWidth" : 130
				},
				{
					"xtype" : "textfield",
					"name" : "value",
					"fieldLabel" : "Enter Lookup Name"
				},
				{
					"xtype" : "textfield",
					"name" : "description",
					"fieldLabel" : "Enter Lookup Description"
				}
			]
		},
		{ "xtype" : "ManagementBtns"},
		{
			"xtype" : "grid",
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10 0 0 0",
			"multiSelect" : true,
			"name" : "GenericLookupGrid",

			"title" : "Current Selected Lookup Type Data",
			"store" : "GenericLookup",
			"columns" : [
				{ "header" : "Lookup Name",  "dataIndex" : "name",  "flex" : 1 },
				{ "header" : "Lookup Description", "dataIndex" : "description", "flex" : 1 }
			],
			"dockedItems" : [{
				"xtype" : "toolbar",
				"dock" : "bottom",
				"buttonAlign" : "right",
				"items" : [
					{
						"xtype" : "button",
						"text" : "Edit Lookup",
						"title" : "EditLookup",
						"disabled" : true
					},
					{
						"xtype" : "button",
						"text" : "Remove Lookup",
						"title" : "RemoveLookup",
						"disabled" : true
					}
				]
			}]
		}
	]
});

Ext.define("COMS.view.Management.AdminTab" ,{
	"extend" : "Ext.tab.Panel",
	"alias" : "widget.AdminTab",
	"name" : "Admin Tab",
	"autoEl" : { "tag" : "nav" },
	"padding" : "10 10 5 10",
	"plain" : true,
	"defaults" : { "padding" : "10 10 5 10", "plain" : true, "labelAlign" : "right", "labelClsExtra" : "NursingDocs-label" },
	"items" : [
		{ "xtype" : "tabpanel", "title" : "Documentation Lists and Contents", 
			"defaults" : {
				"padding" : "10 10 5 10"
			},
			"items" : [
				{ "xtype" : "ClinicInfo", "title" : "Clinic Information"},
				{ "xtype" : "DischargeInstructionManagement", "title" : "Discharge Instructions"},
				{ "xtype" : "AddLookups", "title" : "LookUps" },
				{ "xtype" : "MedicationDocumentation", "title" : "Medication Documentation", "name" : "Documented_Meds_Tab"},
				{ "xtype" : "Toxicity", "title" : "Toxicity"}
			]
		},
		{ "xtype" : "tabpanel", "title" : "Template Management",
			"defaults" : {
				"padding" : "10 10 5 10"
			},
			"items" : [
				{ "xtype" : "DeleteTemplate", "title" : "Delete Template"},
				{ "xtype" : "DiseaseStaging", "title" : "Disease Staging" },
				{ "xtype" : "EmeticMedsTab", "title" : "Emetic Medications", "name" : "Emetic_Meds_Tab"},
				{ "xtype" : "MedRisks", "title" : "Neutropenia / Emesis Risks"},
				{ "xtype" : "tabpanel", "title" : "Import / Export Template", "closable" : false, "html" : "<h1>Not Yet Available</h1>" }
			]
		},
		{ "xtype" : "tabpanel", "title" : "User Access",
			"defaults" : {
				"padding" : "10 10 5 10"
			},
			"items" : [
				{ "xtype" : "LockoutTab", "title" : "Lockout"},
				{ "xtype" : "Roles", "title" : "User Roles" }
			]
		},
		
		{ "xtype" : "tabpanel", "title" : "Clinical Decision Support",
			"defaults" : {
				"padding" : "10 10 5 10"
			},
			"items" : [
				{ "xtype" : "CumulativeDosing", "title" : "Cumulative Dose Medications"},
				{ "xtype" : "IntelligentDataElements", "title" : "Intelligent Data Entry"}
			]
		},
		{ "xtype" : "tabpanel", "title" : "Facility Preferences",
			"defaults" : {
				"padding" : "10 10 5 10"
			},
			"items" : [
				{ "xtype" : "ActiveWorkflows", "title" : "Active Workflows"},
				{ "xtype" : "IV_Fluid_Types", "title" : "IV Fluid Types", "name" : "IV_Fluid_Types"},
				{ "xtype" : "MedicationHolds", "title" : "Medication Holds"},
				{ "xtype" : "MedsNonRounded", "title" : "Medications Not Rounded"},
				{ "xtype" : "RoundingRules", "title" : "Rounding Rules"},
				{ "xtype" : "PharmacyManagement", "title" : "Pharmacy Management", "closable" : false},
				{ "xtype" : "tabpanel", "title" : "Signature Verifications", "closable" : false, "html" : "<h1>Not Yet Available</h1>" }
			]
		}
	]
});

Ext.define("COMS.view.Management.BlankTab" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.BlankTab",
	"name" : "BlankTab",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
		{ "xtype" : "htmleditor", "name" : "Documentation", "fieldLabel" : "Documentation", "labelAlign" : "top", "resizable" : true, "height" : 250, "width" : 940, "margin" : "0 0 10 0" }
	]
});


Ext.define("COMS.view.Management.Buttons" ,{
	"extend" : "Ext.container.Container",
	"alias" : "widget.ManagementBtns",
	"name" : "ManagementBtns",

	"items" : [
		{ "xtype" : "box", "componentCls" : "scEditInstructions", "html" : "<span>Note:</span> To edit a record, click the record in the table below, make changes in the Text field above, and click the \"Save\" button" },
		{ "xtype" : "container", "defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "margin" : "0 10 0 0" },
			"layout": "hbox", 
			"items" : [ 
				{ "xtype" : "button", "text" : "Save", "scope" : this }, 
				{ "xtype" : "button", "text" : "Cancel", "scope" : this },
				{ "xtype" : "box", "html" : "<div style=\"width:700px;\">&nbsp;</div>" },
				{ "xtype" : "button", "text" : "Delete", "scope" : this, "disabled" : true, "hidden" : true },
				{ "xtype" : "button", "text" : "Refresh", "scope" : this }
			]
		}
	]
});



Ext.define("COMS.view.Management.CheckCombo" ,{
	extend: "Ext.ux.CheckCombo",
	alias: "widget.CheckCombo",
	displayField : "name", valueField : "id",
	store : Ext.create('Ext.data.Store', {
		model : 'COMS.model.GenericLookupModel',
		proxy: {
			type: 'rest',
			api: {
				read: Ext.URLs.FluidType
			},
			reader: {
				type: 'json',
				root : 'records',
				successProperty : 'success'
			}
		}
	})
});

Ext.define("COMS.view.Management.ClinicInfo" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.ClinicInfo",
	"name" : "ClinicInfo",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
		{ "xtype" : "textfield", "name" : "Label", "fieldLabel" : "Clinic Information Label", "labelWidth" : 200, "width" : 900},
		{ "xtype" : "htmleditor", "name" : "Details", "fieldLabel" : "Details", "labelAlign" : "top", "resizable" : true, "height" : 250, "width" : 940, "margin" : "0 0 10 0" },

		{ "xtype" : "ManagementBtns"},

		{  
			"xtype" : "grid",  "name" : "ClinicInfoList", "title" : "Clinic Information", 
			"store" : "ClinicInfo",
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10 0 0 0",

			"columns" : [ 
				{ "text" : "Label", "dataIndex" : "Label", "flex" : 1}, 
				{ "text" : "Details", "dataIndex" : "Details", "flex" : 3 }
			]
		}
	]
});


Ext.define("COMS.view.Management.CumulativeDosing" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.CumulativeDosing",
	"name" : "CumulativeDosing",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
		// { "xtype" : "hiddenfield", "name" : "id", "value" : "60" },					/* This represents the Lookup_Type_ID in the Lookup Table */
		// { "xtype" : "hiddenfield", "name" : "description" },					/* This field will hold the Max Dosage and Units as a combined object in the lookup table */
		{ 
			"xtype" : "combobox", "name" : "MedName", "fieldLabel" : "Medication",  "labelWidth" : 200,  "labelAlign" : "right", "width" : 922, 
			"typeAhead" : true,
			"displayField" : "name", "valueField" : "id", "allowBlank" : false,
			"store" : Ext.create('Ext.data.Store', {
				"model" : 'COMS.model.GenericLookupModel',
				"proxy" : {
					"type" : 'rest',
					"api" : {
						"read" : Ext.URLs.DrugsInPatient
					},
					"reader" : {
						"type" : 'json',
						"root" : 'records',
						"successProperty" : 'success'
					}
				}
			})
		},
		{ "xtype" : "container", "layout" : "hbox", "defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" }, "items" : [
			{ "xtype" : "textfield", "name" : "CumulativeDoseAmt", "emptyText" : "Enter Lifetime Max Allowable", "fieldLabel" : "Max Dosage", "labelWidth" : 200,  "labelAlign" : "right", "width" : 400 },
			{
				"xtype" : "combo",
				"fieldLabel" : "Units <em>*</em>",
				"width" : 150,
				"labelWidth" : 60,
				
				"store" : "DrugUnitsStore2",
				"displayField" : "name",
				"valueField" : "id",
				"allowBlank" : false,
				"name" : "CumulativeDoseUnits"
			}
		]},
		{ "xtype" : "ManagementBtns"},

		{  
			"xtype" : "grid",  "name" : "Medications2TrackList", "title" : "Cumulative Dose Medications List", 
			"store" : "CumulativeDosingMeds",
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10 0 0 0",

			"columns" : [ 
				{ "text" : "Medication", "dataIndex" : "MedName", "flex" : 3},
				{ "text" : "Max Dose", "dataIndex" : "CumulativeDoseAmt", "flex" : 1},
				{ "text" : "Units", "dataIndex" : "CumulativeDoseUnits", "flex" : 1}
			/*
				{ "text" : "Units", "dataIndex" : "UnitsID", "flex" : 1},
				{ "text" : "Units", "dataIndex" : "ID", "flex" : 1},
				{ "text" : "Units", "dataIndex" : "MedID", "flex" : 1}
			*/
			]
		}

	]
});


Ext.define('COMS.view.Management.DeleteTemplate' ,{
	extend: 'Ext.form.FormPanel',
	alias : 'widget.DeleteTemplate',
	name : 'Delete Template',
	id  : 'deleteTemplate',
	title : 'Delete Template',
	items: [
		{
			xtype: 'form',
			margin : '10 10 10 10',
			layout: 'hbox',
			defaults : { margin: '5 5 5 0', labelAlign: 'right'},
			items: [
                                    { xtype : 'selDisease' }        /*, { xtype: 'button', title : 'ReloadTemplateList', text : "Reload Template List" } */
                               ]
		},
		{
			xtype : 'gridpanel',
			margin : '10 10 10 10',
			title : 'Templates',
			store : 'Templates',
                        multiSelect: true,
			columns : [
				{header: 'Template Name',  dataIndex: 'description',  flex: 1}
			],
			dockedItems : [{
				xtype: 'toolbar',
				dock: 'bottom',
				buttonAlign: 'right',
				items: [
					{
						xtype: 'button',
						text: 'Show All Templates',
						title: 'AllTemplates'
					},
					{
						xtype: 'button',
						text: 'Remove Template',
						title: 'RemoveTemplate',
						disabled: true
					}
				]
			}]
                        
		}
	],
//	buttons : [ 
//		{ text : 'Save', action : 'save' }, 
//		{ text : 'Cancel', scope : this } 
//	],

	initComponent : function() {
		this.layoutConfig = {
			padding: 10
		};
		this.callParent(arguments);
	}
});

Ext.define("COMS.view.Management.DischargeInstructionManagement" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.DischargeInstructionManagement",
	"name" : "DischargeInstructionManagement",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
		{ "xtype" : "textfield", "name" : "Label", "fieldLabel" : "Discharge Instruction", "labelWidth" : 140, "width" : 940},
		{ "xtype" : "htmleditor", "name" : "Details", "fieldLabel" : "Documentation", "labelAlign" : "top", "resizable" : true, "height" : 250, "width" : 940, "margin" : "0 0 10 0" },

		{ "xtype" : "ManagementBtns"},


		{  
			"xtype" : "grid",  "name" : "DischargeInstructionsList", "title" : "Discharge Instructions", 
			"store" : "DischargeInstruction",
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10 0 0 0",

			"columns" : [ 
				{ "text" : "Instruction", "dataIndex" : "Label", "flex" : 1}, 
				{ "text" : "Documentation", "dataIndex" : "Details", "flex" : 3 }
			]
		}
	]
});


Ext.define("COMS.view.Management.DiseaseStaging" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.DiseaseStaging",
	"name" : "DiseaseStaging",
	"autoEl" : { "tag" : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
		{ "xtype" : "selDisease" },
//		{ "xtype" : "hidden", "name" : "DiseaseID" },
		{ "xtype" : "textfield", "name" : "Stage", "fieldLabel" : "Stage", "labelWidth" : 160},
		{ "xtype" : "ManagementBtns"},
		{  
			"xtype" : "grid",  "name" : "DiseaseStagingList", "title" : "Disease Stages", 
			"store" : "DiseaseStaging",
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10",
			"multiSelect" : true,
			"features" : [ Ext.create("Ext.grid.feature.Grouping")],
			"columns" : [ 
				{ "text" : "Staging Designation", "dataIndex" : "Stage", "flex" : 3 }
			]
		}
	]
});


Ext.define('COMS.view.Management.EditLookup', {
	extend: 'Ext.window.Window',
	alias : 'widget.EditLookup',

	title : 'Edit Lookup',
	layout: 'fit',
	autoShow: true,
	width: 640,

	initComponent: function() {
		this.items = [ {
			xtype: 'form',
            layout: 'hbox',
			defaults : { labelAlign: 'right', margin: '5 5 5 0'},
			items: [
				{ xtype: 'textfield', name : 'name', labelWidth: 50, width: 270, fieldLabel: 'Name' },
				{ xtype: 'textfield', name : 'description', labelWidth: 80, width: 340, fieldLabel: 'Description' }
			]
		} ];

		this.buttons = [
			{ text: 'Save', action: 'save' },
			{ text: 'Cancel', action: 'cancel' }
		];

		this.callParent(arguments);
	}
});

Ext.define("COMS.view.Management.EmeticMeds", {
	"extend": "Ext.form.Panel",
	"alias": "widget.EmeticMeds",
	"name": "EmeticMeds",
	"autoEl": {
		tag: "section"
	},
	border: false,
	"defaults": {
		"labelAlign": "right",
		"labelClsExtra": "NursingDocs-label",
		"labelWidth" : 130,
		"allowBlank" : false,
		"margin": "10 0"
	},
	"items": [
		{
			"xtype" : "combo",
			"name" : "EmetogenicLevel",
			"fieldLabel" : "Emotegenic Level <em>*</em>",
			"labelAlign" : "right",
			"store" : "EmetogenicLevel",
			"displayField" : "name",
			"valueField" : "description"
		},
		{
			"xtype" : "container",
			"layout" : "hbox",
			"defaults": {
				"labelAlign": "right",
				"labelClsExtra": "NursingDocs-label",
				"width" : 350,
				"labelWidth" : 130,
				"allowBlank" : false,
				"margin" : "5 5 5 0"
			},
			"items" : [{
				"xtype" : "radiogroup",
				"name" : "patientRadio",
				"fieldLabel" : "Medication Type",
				"columns" : 2,
				"items" : [{
					"boxLabel" : "InPatient",
					"name" : "PatientType",
					"inputValue" : "InPatient",
					"checked" : true
				}, 
				{
					"boxLabel" : "OutPatient",
					"name" : "PatientType",
					"inputValue" : "OutPatient"
				}]
			}]
		},
		{
			"xtype" : "combo",
			"typeAhead" : true,
			"minChars" : 2,
			"fieldLabel" : "Select Drug <em>*</em>",
			"name" : "Drug",
			"store" : "DrugStore",
			"displayField" : "name",
			"valueField" : "id",
			"width" : 500
		},
		{
			"xtype": "ManagementBtns"
		},
		{
			"xtype": "grid",
			"name": "EmeticMedsList",
			"title": "Emetic Meds",
			"store": "EmeticMeds",
			"forceFit": true,
			"overflowY": "scroll",
			"margin": "10 0",
			"multiSelect": true,
			"viewConfig": {
				"stripeRows": true,
				"markDirty": false
			},
			"features": [Ext.create("Ext.grid.feature.Grouping")],
			"columns": [
				{
					"text": "Emetic Level",
					"dataIndex": "EmoLevelName",
					"flex": 1
				},
				{
					"text": "Medication",
					"dataIndex": "MedName",
					"flex": 2
				},
				{
					"text": "ID",
					"dataIndex": "id",
					"hidden": true
				},
				{
					"text": "Med ID",
					"dataIndex": "MedID",
					"hidden": true
				}
			]
		}
	]
});

Ext.define("COMS.view.Management.EmeticMedsTab" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.EmeticMedsTab",
	"name" : "EmeticMedsTab",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ { "xtype" : "EmeticMeds" } ]
});


Ext.define('COMS.view.Management.Globals', {
	extend: "Ext.grid.Panel",
	alias: "widget.Globals",
	name: "Globals",
	title: "COMS Global Value",
	width: 925,
	margin: "10",
	autoEl: {
		tag: "section"
	},

	autoScroll: 'y',
	cls: 'custom-grid',
	columnLines: true,
	viewConfig: {
		stripeRows: true,
		height: 300,
		forceFit: true
	},
	store: {
		// autoLoad: true,
        autoLoad: false,
		fields: ["sitelist", "domain"],
		proxy: {
			type: "rest",
			url: "/Admin/Globals",
			reader: {
				type: "json",
				root: "records"
			}
		}
	},

	columns: [
		{
			header: "Site Code",
			dataIndex: "sitelist",
			width: 120
		},
		{
			header: "Domain",
			dataIndex: "domain",
			width: 120
		}
//	selType: 'cellmodel',
//	plugins: [
//	Ext.create('Ext.grid.plugin.CellEditing',{
//	clicksToEdit: 1
//	})
	]
});


Ext.define('COMS.view.Management.IV_Fluid_Types', {
	extend: "Ext.form.Panel",
	alias: "widget.IV_Fluid_Types",
	name: "IV_Fluid_Types",
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	items : [ 
		{ 
			xtype : "combobox", name : "IV_Medication", fieldLabel : "Select IV Medication",  labelWidth: 200,  labelAlign: "right", width: 550, 
			displayField : "name", valueField : "id",
			store : Ext.create('Ext.data.Store', {
				model : 'COMS.model.GenericLookupModel',
				proxy: {
					type: 'rest',
					api: {
						read: Ext.URLs.Drugs + "/InPatient"
					},
					reader: {
						type: 'json',
						root : 'records',
						successProperty : 'success'
					}
				}
			})
		},
		{ 
			xtype: "CheckCombo", 
			name: "IV_FluidTypeMulti", 
			fieldLabel : "Select IV Fluid Type", labelAlign: "right", labelWidth: 200,  width: 450, 
			displayField : "name", valueField : "id",
			store : Ext.create('Ext.data.Store', {
				model : 'COMS.model.GenericLookupModel',
				proxy: {
					type: 'rest',
					api: {
						read: Ext.URLs.FluidType
					},
					reader: {
						type: 'json',
						root : 'records',
						successProperty : 'success'
					}
				}
			})
		},
		{ "xtype" : "ManagementBtns"},
		{
			xtype : "grid",  name: "IV_FluidTypesList", title: "IV Fluid Types", store : "IVFluidType",
			forceFit : true,
			overflowY : "scroll",
			resizable : true,
			minHeight : 500,
			selModel: { allowDeselect: true },
			columns : [ 
				{ text : "Medication", dataIndex : "MedName", width: 540 }, 
				{ text : "IV Fluid Type", dataIndex : "FluidType" }
			]
		}
	]
});


Ext.define("COMS.view.Management.IntelligentDataElements" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.IntelligentDataElements",
	"name" : "IntelligentDataElements",
	"defaults": { "labelAlign": "right", "labelWidth" : 220, "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
	{ "xtype" : "box", "autoEl" : "h1", "html" : "Intelligent Data Elements Configuration" },

	{ 
		"xtype" : "combo", 
		"name" : "Vital2Check",
		"fieldLabel" : "Select Data Element to configure <em>*</em>",
		"width" : 400, 
		"allowBlank" : false,
		"margin" : "0 5 5 0",
		"displayField" : "value", 
		"valueField" : "id",
		"store" : Ext.create('Ext.data.Store', {
			fields: ["id", "value"],
			data : [
				{ "id" : "Temperature", "value" : "Temperature"},
				{ "id" : "Height", "value" : "Height"},
				{ "id" : "Weight", "value" : "Weight"},
				{ "id" : "BP_Systolic", "value" : "BP Systolic"},
				{ "id" : "BP_Diastolic", "value" : "BP Diastolic"},
				{ "id" : "Pulse", "value" : "Pulse"},
				{ "id" : "Respiration", "value" : "Respiration"},
				{ "id" : "Pain", "value" : "Pain"},
				{ "id" : "SP_O2", "value" : "SP O2"}
			]
		})
	},
	{ "xtype" : "container", "layout" : "hbox", "defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "margin" : "0 10 10 0" }, "items" : [
		{ "xtype" : "checkbox",  "name" : "MinMax", "labelWidth" : 220, "fieldLabel" : "Min/Max Value" },
		{ "xtype" : "textfield", "name" : "MinValue", "labelWidth" : 80, "width" : 130, "fieldLabel" : "Min" },
		{ "xtype" : "textfield", "name" : "MaxValue", "labelWidth" : 50, "width" : 100, "fieldLabel" : "Max" },
		{ "xtype" : "textfield", "name" : "MinMaxMsg", "labelWidth" : 150, "width" : 400, "fieldLabel" : "Display if exceeding Min/Max" }

	]},
	{ "xtype" : "container", "layout" : "hbox", "defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "margin" : "0 10 10 0" }, "items" : [
		{ "xtype" : "checkbox",  "name" : "PctVarFromValue", "labelWidth" : 220, "fieldLabel" : "% Variance from Value" },
		{ "xtype" : "textfield", "name" : "PctVarFromValuePct", "labelWidth" : 80, "width" : 130, "fieldLabel" : "% Variance" },
		{ "xtype" : "textfield", "name" : "PctVarFromValueValue", "labelWidth" : 50, "width" : 100, "fieldLabel" : "Value" },
		{ "xtype" : "textfield", "name" : "PctVarFromValueMsg", "labelWidth" : 150, "width" : 400, "fieldLabel" : "Display if exceeding % Variance" }

	]},

	{ "xtype" : "container", "layout" : "hbox", "defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "margin" : "0 10 10 0" }, "items" : [
		{ "xtype" : "checkbox",  "name" : "PctVarFromLast", "labelWidth" : 220, "fieldLabel" : "% Variance from last entry" },
		{ "xtype" : "textfield", "name" : "PctVarFromLastPct", "labelWidth" : 80, "width" : 130, "fieldLabel" : "% Variance" },
		{ "xtype" : "textfield", "name" : "PctVarFromLastMsg", "labelWidth" : 150, "width" : 400, "fieldLabel" : "Display if exceeding % Variance" }
		
	]},


		{ "xtype" : "ManagementBtns"},
		{  
			"xtype" : "grid",  "name" : "IDEntryList", "title" : "Intelligent Data Entry", 
			"store" : "IDEntry",
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10",
			"multiSelect" : true,
			"columns" : [ 
				{"text" : "Vital ", "dataIndex" : "Vital2Check" }, 
				// {"text" : "Min/Max", "dataIndex" : "MinMax" }, 
				{"text" : "Min", "dataIndex" : "MinValue", "width" : 30},
				{"text" : "Max", "dataIndex" : "MaxValue", "width" : 30},
				{"text" : "Msg", "dataIndex" : "MinMaxMsg"},
				// {"text" : "% Variance", "dataIndex" : "PctVarFromValue" }, 
				{"text" : "%", "dataIndex" : "PctVarFromValuePct", "width" : 30},
				{"text" : "Value", "dataIndex" : "PctVarFromValueValue", "width" : 12},
				{"text" : "Msg", "dataIndex" : "PctVarFromValueMsg" }, 
				// {"text" : "% From Last", "dataIndex" : "PctVarFromLast" }, 
				{"text" : "%", "dataIndex" : "PctVarFromLastPct", "width" : 12},
				{"text" : "Msg", "dataIndex" : "PctVarFromLastMsg" }
			]
		}

	]
});


Ext.define("COMS.view.Management.Inventory", {
	"extend": "Ext.form.Panel",
	"alias": "widget.Inventory",
	"name": "Inventory",
	"title": "Inventory",
	"autoEl": {
		tag: "section"
	},
	border: false,
	"defaults": {
		"labelAlign": "right",
		"labelClsExtra": "NursingDocs-label",
		"labelWidth" : 130,
		"allowBlank" : false,
		"margin": "10 0"
	},
	"items": [
		{ "xtype" : "container", "layout" : "hbox", "items" : [

		{
			"xtype" : "combobox", "name" : "selInventory","store" : "InventoryList",
				"emptyText" : "Select Date/Time of report",
				"allowBlank" : false,
				"width" : 360,
				"labelWidth" : 180,
				"fieldLabel" : "Select an Inventory Date <em>*</em>",
				"labelAlign" : "right",
				"displayField" : "Date",
				"valueField" : "id"
			},
		{ "xtype" : "box", "name" : "selInvError", "html" : "", "margin" : "4 0 0 5" }
		]},
			{ "xtype" : "button", "text" : "Generate New Report", "scope" : this },
		{ "xtype" : "box", "name" : "InvReportTitle", "html" : "", "style" : { "textAlign" : "center", "fontWeight" : "bold" }},
		{
			"xtype": "grid",
			"name": "InventoryConsumptionList",
			"title": "Inventory Consumption",
			"store": 'InventoryConsumption',
			"forceFit": true,
			"overflowY": "scroll",
			"margin": "10 0",
			"multiSelect": true,
			"viewConfig": {
				"stripeRows": true,
				"markDirty": false
			},
			"columns": [
				{
					"text": "Drug",
					"dataIndex": "Drug",
					"flex": 3
				},
				{
					"text": "Total Units",
					"dataIndex": "Total",
					"renderer" : function(value, metaData, record, row, col, store, gridView) {
						var theData = record.getData();
						return theData.Total + " " + theData.Unit.trim();
					},
					"flex": 2
				}
			]
		}
	]
});

Ext.define("COMS.view.Management.Lockout", {
	"extend": "Ext.form.Panel",
	"alias": "widget.Lockout",
	"name": "Lockout",
	"autoEl": {
		tag: "section"
	},
	border: false,
	"defaults": {
		"labelAlign": "right",
		"labelClsExtra": "NursingDocs-label",
		"labelWidth" : 130,
		"allowBlank" : false,
		"margin": "10 0"
	},
	"items": [
		{
			"xtype": "LockoutButtons"
		},
		{
			"xtype": "grid",
			"name": "LockoutList",
			"title": "Lockout Sections",
			"store": 'Lockout',
			"forceFit": true,
			"overflowY": "scroll",
			"margin": "10 0",
			"multiSelect": true,
			"viewConfig": {
				"stripeRows": true,
				"markDirty": false
			},
			"columns": [
				{
					"text": "Patient DFN",
					"dataIndex": "Patient_DFN",
					"flex": 2
				},
				{
					"text": "Section",
					"dataIndex": "Section",
					"flex": 2
				},
				{
					"text": "Date Locked",
					"dataIndex": "dtLocked",
					"flex": 1
				},
				{
					"text": "User",
					"dataIndex": "UserName",
					"flex": 1
				}
			]
		}
	]
});

Ext.define("COMS.view.Management.LockoutButtons" ,{
	"extend" : "Ext.container.Container",
	"alias" : "widget.LockoutButtons",
	"name" : "LockoutButtons",

	"items" : [
		{ "xtype" : "box", "componentCls" : "scEditInstructions", "html" : "<span>Note:</span> To unlock one or more locked records, select the record(s) in the table below, and click the \"Unlock\" button" },
		{ "xtype" : "container", "defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "margin" : "0 10 0 0" },
			"layout": "hbox", 
			"items" : [ 
				{ "xtype" : "button", "text" : "Unlock", "scope" : this }, 
				{ "xtype" : "box", "html" : "<div style=\"width:700px;\">&nbsp;</div>" },
				{ "xtype" : "button", "text" : "Refresh", "scope" : this }
			]
		}
	]
});



Ext.define("COMS.view.Management.LockoutTab" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.LockoutTab",
	"name" : "LockoutTab",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ { "xtype" : "Lockout" } ]
});


Ext.define("COMS.view.Management.MedRisks" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.MedRisks",
	"name" : "MedRisks",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 

		{ "xtype" : "combo", "name" : "Label", "fieldLabel" : "Reference Label", "labelWidth" : 140, "width" : 500,
			    "queryMode" : "local", "displayField" : "name", "valueField" : "type",
			"store" : Ext.create("Ext.data.Store", { 
				"fields" : ["type", "name"],
				"data" : [
					{ "type" : "Neutropenia-1", "name" : "Febrile Neutropenia Risk Low (< 10%)" },
					{ "type" : "Neutropenia-2", "name" : "Febrile Neutropenia Risk Intermediate (10 - 20%)" },
					{ "type" : "Neutropenia-3", "name" : "Febrile Neutropenia Risk High (> 20%)" },
					{ "type" : "Emesis-1", "name" : "Emetogenic Level 1 (Frequency of emesis < 10%)"},
					{ "type" : "Emesis-2", "name" : "Emetogenic Level 2 (Frequency of emesis 10 - 30%)"},
					{ "type" : "Emesis-3", "name" : "Emetogenic Level 3 (Frequency of emesis 30 - 60%)"},
					{ "type" : "Emesis-4", "name" : "Emetogenic Level 4 (Frequency of emesis 60 - 90%)"},
					{ "type" : "Emesis-5", "name" : "Emetogenic Level 5 (Frequency of emesis > 90%)"}
				]
			})
		},

		{ "xtype" : "htmleditor", "name" : "Details", "fieldLabel" : "Details", "labelAlign" : "top", "resizable" : true, "height" : 250, "width" : 940, "margin" : "0 0 10 0" },

		{ "xtype" : "ManagementBtns"},

		{  
			"xtype" : "grid",  "name" : "MedRisksList", "title" : "Risk Information", 
			"store" : "MedRisks",
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10 0 0 0",

			"columns" : [ 
				{ "text" : "Label", "dataIndex" : "Label", "flex" : 1}, 
				{ "text" : "Details", "dataIndex" : "Details", "flex" : 3 }
			]
		}
		/***************/
	]
});


Ext.define("COMS.view.Management.MedicationDocumentation" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.MedicationDocumentation",
	"name" : "MedicationDocumentation",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
		{ 
			"xtype" : "combobox", "name" : "InPatient_Medication", "fieldLabel" : "Select InPatient Medication",  "labelWidth" : 200,  "labelAlign" : "right", "width" : 550, 
			"displayField" : "name", "valueField" : "id", "allowBlank" : false,
			"store" : Ext.create('Ext.data.Store', {
				"model" : 'COMS.model.GenericLookupModel',
				"proxy" : {
					"type" : 'rest',
					"api" : {
						"read" : Ext.URLs.Drugs + "/InPatient"
					},
					"reader" : {
						"type" : 'json',
						"root" : 'records',
						"successProperty" : 'success'
					}
				}
			})
		},
		{ "xtype" : "htmleditor", "name" : "Documentation", "fieldLabel" : "Documentation", "labelAlign" : "top", "resizable" : true, "height" : 250, "width" : 922, "margin" : "0 0 10 0" },
		{ "xtype" : "ManagementBtns"},

		{  
			"xtype" : "grid",  "name" : "DocumentedInPatientMedsList", "title" : "Documented Medications", 
			"store" : "MedDocs",
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10 0 0 0",

			"columns" : [ 
				{ "text" : "Medication", "dataIndex" : "MedName", "flex" : 1}, 
				{ "text" : "Documentation", "dataIndex" : "Documentation", "flex" : 3 }
			]
		}
	]
});


Ext.define('COMS.view.Management.MedicationHolds', {
	extend: "Ext.form.Panel",
	alias: "widget.MedicationHolds",
	name: "MedicationHolds",
	items : [ 
		{ xtype : "radiogroup", fieldLabel : "Allow Medication Holds", labelWidth: 170, columns : 1, vertical : true, width : 450,
			items : [
				{ boxLabel : "Yes", name : "AllowMedHolds", inputValue : "1", checked : true },
				{ boxLabel : "No", name : "AllowMedHolds", inputValue : "0" }
			]
		}
	],
	buttons : [ 
		{ text : "Save", action : "save" }, 
		{ text : "Cancel", scope : this } 
	]
});


Ext.define('COMS.view.Management.MedsNonRounded', {
	extend: "Ext.grid.Panel",
	alias: "widget.MedsNonRounded",
	name: "MedsNonRounded",
	title: "Medication Except from Rounding",
	width: 925,
	margin: "10",
	autoEl: {
		tag: "section"
	},

	autoScroll: 'y',
	cls: 'custom-grid',
	columnLines: true,
	viewConfig: {
		stripeRows: true,
		height: 600,
		forceFit: true
	},
	store: {
		// autoLoad: true,
        autoLoad: false,
		fields: ["Lookup_ID", "Name", "NonRounding"],
		proxy: {
			type: "rest",
			url: "/Admin/MedsNonRounded",
			reader: {
				type: "json",
				root: "records"
			}
		}
	},

	columns: [
//		{
//			header: "Lookup ID",
//			dataIndex: "Lookup_ID",
//			width: 120
//		},
		{
			header: "Name",
			dataIndex: "Name",
			width: 120
		},
		{
			header: "Non-Rounding Applied",
			dataIndex: "NonRounding",
			width: 120
		}
//	selType: 'cellmodel',
//	plugins: [
//	Ext.create('Ext.grid.plugin.CellEditing',{
//	clicksToEdit: 1
//	})
	]
});


Ext.define("COMS.view.Management.PatternsOfCareTab" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.PatternsOfCareTab",
	"name" : "PatternsOfCareTab",
	"autoEl" : { tag : "nav" },
	// "defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ { "xtype" : "box", "html" :  
		"<ul class=\"PatternsOfCare\">" +
			"<li><a href=\"/POCD/CBG\" target=\"_POCD\" class=\"GenderCancerTypes\">Gender & Cancer Types</a></li>" +
			"<!-- <li><a href=\"#\" target=\"_blank\" class=\"TemplatesCancerTypes\">Cancer Types & Applied Templates</a></li>" +
			"<li><a href=\"#\" target=\"_blank\" class=\"ProviderTemplates\">Provider & Applied Templates</a></li>" +
			"<li><a href=\"#\" target=\"_blank\" class=\"TemplatesAndToxicities\">Applied Templates & Toxicities</a></li> -->" +
		"</ul>"
	} ]
});


Ext.define("COMS.view.Management.PharmacyManagement" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.PharmacyManagement",
	"name" : "PharmacyManagement",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
		{ "xtype" : "box", "html" : "<em style=\"font-weight: bold; color: red;\">Note:</em> Information is required to permit interopability with associated VistA instance pharmacy packages"},
		{ "xtype" : "displayfield", "labelWidth" : 150, "width" : 300, "name" : "LastSyncTime", "fieldLabel" : "<em>Last Synchronization</em>", "margin" : "20 0" },
		{ "xtype" : "button", "name" : "Submit", "text" : "Synchronize Medication Lists", "formBind" : true }
	]
});

Ext.define("COMS.view.Management.Roles", {
	"extend": "Ext.form.Panel",
	"alias": "widget.Roles",
	"name": "Roles",
	"title": "COMS Users Roles",
	"autoEl": {
		"tag": "section"
	},
	"defaults": {
		"labelAlign": "right",
		"labelClsExtra": "NursingDocs-label"
	},
	"items": [
		{"xtype": "RequiredInstr"},
		{
			"xtype": "container",
			"layout": "hbox",
			"margin" : "0 0 10 0",
			"defaults" : {"margin" : "0 10 0 0" },
			"items": [
				{
					"xtype" : "textfield",
					"name" : "LastName",
					"fieldLabel" : "Last Name <em class=\"required-field\">*</em>",
					"labelWidth": 80,
					"width": 190,
					"allowBlank" : false
				}, 
				{
					"xtype" : "textfield",
					"name" : "FirstName",
					"fieldLabel" : "First Name",
					"labelWidth": 80,
					"width": 190
				}, 
				{
					"xtype" : "button",
					"name" : "GetUserList",
					"text" : "Get Users"
				}
			]
		},
		{
			"xtype": "container",
			"layout": "hbox",
			"margin" : "0 0 10 0",
			"defaults" : {"margin" : "0 10 0 0" },
			"items": [
				{
					"xtype": "combo",
					"name": "SelVistAUser",
					"fieldLabel": "Users",
					"labelWidth": 35,
					"width": 200,
					"displayField": "name",
					"valueField": "duz",
					"typeAhead" : true,
					"hidden" : true,
					"store" : {
						"fields" : ["name", "duz"],
						"proxy" : {
							"type" : "rest",
							"reader" : {
								"type" : "json",
								"root" : "records"
							}
						}
					}
				},
				{
					"xtype" : "box", "name" : "SelVistAUserNoMatch", "html" : "No match for name entered, please select from choices provided", "hidden" : true 
				},
				{
					"xtype": "combo",
					"name": "Role",
					"hidden" : true,
					"fieldLabel": "Role <em class=\"required-field\">*</em>",
					"labelWidth": 40,
					"width": 160,
					"queryMode": "local",
					"displayField": "name",
					"valueField": "name",
					"store": Ext.create("Ext.data.Store", {
						"fields": ["name"],
						"data": [
							{ "name": "All Roles" },
							{ "name": "Provider" },
							{ "name": "Nurse" },
							{ "name": "Pharmacist" }
						]
					})
				},
				{ 
					"xtype" : "checkbox",
					"name" : "Preceptee",
					"labelWidth" : 55,
					"fieldLabel" : "Preceptee",
					"checked" : true,
					"hidden": true
				},
				{ 
					"xtype" : "checkbox",
					"name" : "TemplateAuthoring",
					"labelWidth" : 110,
					"fieldLabel" : "Template Authoring",
					"hidden": true 
				}
			]
		},
		{
			"xtype": "ManagementBtns"
		},
		{
			"xtype": "grid",
			"name": "RolesList",
			"title": "User Roles",
			"autoScroll": "y",
			"cls" : "custom-grid",
			"columnLines" : true,
			"viewConfig" : {
				"stripeRows" : true,
				"height" : 600,
				"forceFit" : true
			},
			"store" : {
				"autoLoad" : false,
					// username, role, displayname, email, templateAuthoring
				"fields" : [ "rid", "username", "vcode", "role", "lastlogin", "DisplayName", "Preceptee", "TemplateAuthoring", "Role_ID", "Last_SessionID" ],
				"proxy" : {
					"type" : "rest",
					"url" : "/Admin/UserRoles",
					"reader" : {
						"type" : "json",
						"root" : "records"
					}
				}
			},
			"columns" : [
				{
					"header" : "Name",
					"dataIndex" : "DisplayName",
					"width" : 120
				},
				{
					"header" : "DUZ",
					"dataIndex" : "username",
					"width" : 120
				},
				{
					"header" : "Role",
					"dataIndex" : "role",
					"width" : 120
				},
				{
					"header" : "Preceptee",
					"dataIndex" : "Preceptee",
					"renderer" : function (value, p, record) {
						if (value) {
							return "Yes";
						}
						return "No";
					},
					"width" : 120
				},
				{
					"header" : "Template Authoring",
					"dataIndex" : "TemplateAuthoring",
					"renderer" : function (value, p, record) {
						if (value) {
							return "Yes";
						}
						return "No";
					},
					"width" : 120
				}
			]
		}
	]
});

Ext.define('COMS.view.Management.RoundingRules', {
	extend: "Ext.form.Panel",
	alias: "widget.RoundingRules",
	name: "RoundingRules",
	items : [ 
		{ 
			xtype : "radiogroup", 
			fieldLabel : "Select Rounding Percentage", 
			labelWidth: 170, 
			columns : 1, 
			vertical : true, 
			width : 450,
			items : [
				{ boxLabel : "No&nbsp;rounding", name : "RoundingRule", inputValue : "0", checked : true },
				{ boxLabel : "5%", name : "RoundingRule", inputValue : "5" },
				{ boxLabel : "10%", name : "RoundingRule", inputValue : "10" }
			]
		},
		{ 
			xtype : "container", 
			html : "Rounding Rules are applied based on the percentage specified when the Pharmacist finalizes an Order Entry Management Record"
		}			
	],
	buttons : [ 
		// The Rounding Value get's pushed into the Lookup Table
		{ text : "Save", action : "save" }, 
		{ text : "Cancel", scope : this } 
	]
});

Ext.define('COMS.view.Management.SelectGlobals' ,{
    extend: 'Ext.form.field.ComboBox',
    alias : 'widget.SelectGlobals',
	name : 'Select Lookup Control',

	store : "GlobalStore",
	labelWidth: 150,
	fieldLabel: 'Select Global Type',
	displayField: 'value',
	valueField: 'sitelist'
});

Ext.define('COMS.view.Management.SelectLookups' ,{
    extend: 'Ext.form.field.ComboBox',
    alias : 'widget.SelectLookups',
	name : 'Select Lookup Control',

	store : 'LookupStore',
	labelWidth: 150,
	fieldLabel: 'Select Lookup Type',
	displayField: 'value',
	valueField: 'id'
});

Ext.define("COMS.view.Management.Toxicity" ,{
	"extend" : "Ext.form.Panel",
	"alias" : "widget.Toxicity",
	"name" : "Toxicity",
	"autoEl" : { tag : "section" },
	"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
	"items" : [ 
		{ "xtype" : "textfield", "allowBlank": false, "name" : "Label", "fieldLabel" : "Toxicity <em>*</em>", "labelWidth" : 160, "width" : 922},
		{ "xtype" : "textfield", "allowBlank": false, "name" : "Grade_Level", "fieldLabel" : "Grade <em>*</em>", "labelWidth" : 160, "width" : 922},
		{ "xtype" : "htmleditor", "allowBlank": false, "style" : "color: white", "name" : "Details", "fieldLabel" : "Documentation <em>*</em>", "labelAlign" : "top", "resizable" : true, "height" : 250, "width" : 922, "margin" : "0 0 10 0" },
		{ "xtype" : "ManagementBtns"},
		{  
			"xtype" : "grid",  "name" : "ToxicityInstructionsList", "title" : "Toxicity", 
			"store" : "Toxicity",
			
			"forceFit" : true,
			"overflowY" : "scroll",
			"minHeight" : 500,
			"margin" : "10 0 0 0",
			"multiSelect" : true,
			"viewConfig" : { 
				"stripeRows" : true,
				"markDirty" : false 
			},
			"features" : [ Ext.create("Ext.grid.feature.Grouping")],
			"columns" : [ 
				{ "text" : "Toxicity", "dataIndex" : "Label", "flex" : 1}, 
				{ "text" : "Grade", "dataIndex" : "Grade_Level", "flex" : 1}, 
				{ "text" : "Detail", "renderer" : Ext.util.Format.htmlDecode, "dataIndex" : "Details", "flex" : 3 }
			]
		}
	]
});


Ext.define('COMS.view.Management.Users', {
	extend: "Ext.grid.Panel",
	alias: "widget.Users",
	name: "Users",
	title: "COMS Users Value",
	width: 925,
	margin: "10",
	autoEl: {
		tag: "section"
	},

	autoScroll: 'y',
	cls: 'custom-grid',
	columnLines: true,
	viewConfig: {
		stripeRows: true,
		height: 600,
		forceFit: true
	},
	store: {
		// autoLoad: true,
        autoLoad: false,
		fields: ["username", "role", "DisplayName", "Email", "cprsUsername"],
		proxy: {
			type: "rest",
			url: "/Admin/Users",
			reader: {
				type: "json",
				root: "records"
			}
		}
	},

	columns: [
		{
			header: "Username",
			dataIndex: "username",
			width: 120
		},
		{
			header: "Role",
			dataIndex: "role",
			width: 120
		},
		{
			header: "Display Name",
			dataIndex: "DisplayName",
			width: 120
		},
		{
			header: "Email",
			dataIndex: "Email",
			width: 120
		},
		{
			header: "CPRS Username (ACCESS CODE)",
			dataIndex: "cprsUsername",
			width: 180
		}
//	selType: 'cellmodel',
//	plugins: [
//	Ext.create('Ext.grid.plugin.CellEditing',{
//	clicksToEdit: 1
//	})
	]
});


Ext.define("COMS.view.Messages.MessagesPanels" ,{
	extend: "Ext.tab.Panel",
	alias : "widget.MessagesPanels",
	name : "Messages Panels",
	title: "Messages",
	plain : true,
	autoEl : { tag : 'nav' },
	padding : "20 10 5 10",

//	tabPosition : "bottom",

	items : [
		{ xtype : "MessagesTab" },
		{ xtype : "MessagesUnread" }
	]
});


Ext.define('COMS.view.Messages.MessagesTab', {
	extend: "Ext.grid.Panel",
	alias: "widget.MessagesTab",
	name: "Messages Tab",
	title: "My Messages",
	width: 925,
	margin: "10",
	autoEl: {
		tag: "section"
	},

	autoScroll: 'y',
//	cls: 'custom-grid',
	columnLines: true,
	viewConfig: {
		stripeRows: true,
		height: 300,
		forceFit: true
	},
	store: {
		// autoLoad: true,
        autoLoad: false,
		fields: ["mid", "MTo", "CC", "Subject", "Message", "Date", "MFrom", "rid", "wid", "dateSent", "OpenLink", "timeSent", "MStatus"],
		proxy: {
			type: "rest",
			url: "/Messages/Filtered/RID/16",
			reader: {
				type: "json",
				root: "records"
			}
		}
	},
	
	features: [ Ext.create('Ext.grid.feature.Grouping')],

	columns: [
		//{header : "mid", dataIndex : "mid", width: 25}, 
			//{header : "rid", dataIndex : "rid", width: 25}, 
			//{header : "wid", dataIndex : "wid", width: 25}, 
			//{header : "To", dataIndex : "MTo", width: 250}, 
			//{header : "CC", dataIndex : "CC"}, 
			//{header : "Date", dataIndex : "Date", width: 200}, 
		{
			header: "Date Sent",
			dataIndex: "dateSent",
			width: 80
		},
		{
			header: "Status",
			dataIndex: "MStatus",
			width: 80,
			hidden: true
		},
		{
			header: "Time",
			dataIndex: "timeSent",
			width: 30
		},
		{
			header: "To",
			dataIndex: "MTo"
		},
		{
			header: "From",
			dataIndex: "MFrom"
		},
		{
			header: "CC",
			dataIndex: "CC"
		},
		{
			header: "Subject",
			dataIndex: "Subject",
			width: 400
		},
		{
			header: "Action",
			dataIndex: "OpenLink",
			width: 60,
			renderer: renderURI
		}
		//{header : "Message", dataIndex : "Message", width: 200}
	],
	bbar: [
		{
			text: 'Refresh',
			handler: function () {
				var grid = Ext.ComponentQuery.query('MessagesTab')[0];
				var mystore = grid.getStore();
				mystore.removeAll(true);
				var myview = grid.getView();
				myview.refresh(true);
				mystore.load();
			}
		}
	]
});

function renderURI(value, p, record) {
	var description = record.data.OpenLink;
	if (null !== value && null !== description) {
		return Ext.String.format('<b><a href="{0}" target="_blank">Open</a></b>', value, record.data.OpenLink);
	}
	return ("");
}

Ext.define('COMS.view.Messages.MessagesUnread' ,{
	extend : "Ext.grid.Panel",
	alias : "widget.MessagesUnread",
	name : "Messages Tab",
	title : "Unread Messages",
	width: 925,
	margin : "10",
	autoEl : { tag : "section" },

	autoScroll: 'y',
	cls: 'custom-grid',
	columnLines: true,
	viewConfig: { stripeRows: true, height: 300, forceFit: true },
	store : {
		// autoLoad: true,
        autoLoad: false,
		fields: [ "mid", "MTo", "CC", "Subject", "Message", "Date", "MFrom", "rid", "wid", "dateSent", "OpenLink", "timeSent" ],
		proxy: {
			type: "rest",
			url : "/Messages/Filtered/RID/16",
			reader: {
				type: "json",
				root : "records"
			}
		}
	},
	
	columns : [
		{header : "Date Sent", dataIndex : "dateSent", width: 80}, 
		{header : "Time", dataIndex : "timeSent", width: 30}, 
		{header : "From", dataIndex : "MFrom"},
		{header : "Subject", dataIndex : "Subject", width: 400},
		{header : "Open Link", dataIndex : "OpenLink", width: 125, renderer : renderURI}
	],
	bbar    : [
	 {
        text    : 'Refresh',
        handler : function() {
			var grid = Ext.ComponentQuery.query('MessagesTab')[0];
			var mystore = grid.getStore();
			mystore.removeAll(true);
			var myview = grid.getView();
			myview.refresh(true);
			mystore.load();
        }
      }
]
});

function renderURI(value, p, record) {
    
    var description = record.data.OpenLink;
    
    if(value!=null && description !=null){
        return Ext.String.format(
                '<b><a href="{0}" target="_blank">Open Message</a></b>',
                value,
                record.data.OpenLink
        );
        
    }
}


Ext.define('COMS.view.NavigationTabs' ,{
    extend: 'Ext.tab.Panel',
    alias : 'widget.NavigationTabs',
    name : 'Main Navigation Tabs',

// Add these when working through rest of panels - MWB 1/2/2014
// resizable: true,
// autoScroll : true,
    plain : true,
	
/************** WORK IN PROGRESS...
	tabBar : {
		items : [{ xtype : "checkbox", margins: "0 0 0 100", labelWidth : 200, labelAlign: "right", fieldLabel : "Use Accessibility Theme",
			listeners : { 
			**
				beforerender : { fn : function(ckBox, eOpts) {
					var temp = COMS_theme;
					if( "access" === temp) {
						ckBox.setValue(true);
					}
					else {
						ckBox.setValue(false);
					}
				}},
			 **

				change : { fn : function(ckBox, nValue, oValue, eOpts) {
					var temp = COMS_theme;
					if (nValue) {
						Ext.util.Cookies.set('theme', "access");
						location = location; // Refresh of page cannot be avoided as its an Ext-JS limitation
					}
					else {
						Ext.util.Cookies.set('theme', "default");
						location = location; // Refresh of page cannot be avoided as its an Ext-JS limitation
					}
				}}
			}
		}]
	},
************/
    initComponent: function() {
        wccConsoleLog("Navigation Tabs View - Initialization");

        // Based on the "Sessionrole" set in main.php ($role = $_SESSION['role'];)
        // determine who can see what tabs.
        // The same process can be used to show/hide various other elements such as buttons 
        if ("Administrator" === Sessionrole || "All Roles" === Sessionrole) {
			// this.activeTab = 6;	Opens the "Testing" Tab by default
            this.items = [
                { title : 'Patient',  items : [ { xtype : 'NewPlanTab' } ] },
				{ title : 'Orders', items : [ { xtype : 'OrdersTab'} ] },
				{ title : 'Template Authoring', items : [ { xtype : 'AuthoringTab'} ] },
				{ title : 'Template List', items : [ { xtype : 'TemplateListTab'} ] },
				{ title : 'Template Promotion', items : [ {xtype : 'TemplatePromotionTab' }]},
				{ xtype : "tabpanel", title: "Reports",
					defaults: {
						padding : "10 10 5 10"
					},
					items : [
						{ "xtype" : "Inventory" },
						{ "xtype" : "PatternsOfCareTab", "title" : "Patterns of Care Determination", "closable" : false },
						{ "xtype" : "tabpanel", "title" : "Lab Reports", "closable" : false, items : [
							{ xtype : "box", "html" : "<h1>Not Yet Available</h1>" }
						]}
					]
				},
				{ title : 'Messages', items : [ { xtype : 'MessagesTab' } ] },
				{ title : 'Site Configuration', items : [ {xtype : 'AdminTab' }]}
            ];
        }
        else if ("1" === SessionTemplateAuthoring) {
            this.items = [
                { title : 'Patient',  items : [ { xtype : 'NewPlanTab' } ] },
				{ title : 'Orders', items : [ { xtype : 'OrdersTab'} ] },
				{ title : 'Template Authoring', items : [ { xtype : 'AuthoringTab'} ] },
				{ title : 'Template List', items : [ { xtype : 'TemplateListTab'} ] },
				{ xtype : "tabpanel", title: "Reports",
					defaults: {
						padding : "10 10 5 10"
					},
					items : [
						{ "xtype" : "Inventory" },
						{ "xtype" : "PatternsOfCareTab", "title" : "Patterns of Care Determination", "closable" : false },
						{ "xtype" : "tabpanel", "title" : "Lab Reports", "closable" : false, items : [
							{ xtype : "box", "html" : "<h1>Not Yet Available</h1>" }
						]}
					]
				},
				{ title : 'Messages', items : [ { xtype : 'MessagesTab' } ] }
            ];
        }
        else {
            this.items = [
                { title : 'Patient',  items : [ { xtype : 'NewPlanTab' } ] },
				{ title : 'Orders', items : [ { xtype : 'OrdersTab'} ] },
				{ title : 'Template List', items : [ { xtype : 'TemplateListTab'} ] },
				{ xtype : "tabpanel", title: "Reports",
					defaults: {
						padding : "10 10 5 10"
					},
					items : [
						{ "xtype" : "Inventory" },
						{ "xtype" : "PatternsOfCareTab", "title" : "Patterns of Care Determination", "closable" : false },
						{ "xtype" : "tabpanel", "title" : "Lab Reports", "closable" : false, items : [
							{ xtype : "box", "html" : "<h1>Not Yet Available</h1>" }
						]}
					]
				},
				{ title : 'Messages', items : [ { xtype : 'MessagesTab' } ] }
            ];
        }
        this.callParent(arguments);
    }
});

Ext.define("COMS.view.NewPlan.AdverseEventsHistory", {
	"extend" : "Ext.panel.Panel",
	"alias" : "widget.AdverseEventsHistory",
	"title" : "Adverse Events History",
	"name" : "AdverseEventsHistory",
	"collapsible" : true, 
	"collapsed" : true, 
	"margin" : "0 0 10 0", 
	"bodyPadding" : "10",
	"tpl" : new Ext.XTemplate(

	"<tpl for=\".\">",
		"<table border=\"1\" class=\"InformationTable\">",
		"{[this.renderSection( values )]}",
		"</table>",
	"</tpl>",

			{
					// XTemplate Configuration
				disableFormats: true,
				renderSection : function ( current ) {
					var ToxType, buf = "";
					if (current.type == "Assessment") {
						ToxType = current.Link.Label;
						if ("Other" === ToxType) {
							ToxType = current.Link.OtherTox;
						}
						buf = "<tr><th colspan=\"2\" style=\"text-align: center;\">Assessment - " + current.date + "</th></tr>";
						if (current.Link.Alert) {
							buf += "<tr><th colspan=\"2\" style=\"text-align: center;color:red;\" class=\"alert\">" + ToxType + " - Flagged as an ALERT</th></tr>";
						}

						buf += "<tr><th style=\"width: 9em;\">Event:</th><td>" + ToxType + "</td></tr>";
						buf += "<tr><th style=\"width: 9em;\">Grade:</th><td>" + current.Link.Grade_Level + "</td></tr>";
						buf += "<tr><th style=\"width: 9em;\">Details:</th><td>" + current.Link.Details + "</td></tr>";
						buf += "<tr><th style=\"width: 9em;\">Comments:</th><td>" + current.Link.Comments + "</td></tr>";
					}
					else if (current.type == "Reaction") {
						buf = "<tr><th colspan=\"2\" style=\"text-align: center;\">Reaction - " + current.date + "</th></tr>";
						var details = current.Link.Details, dLen = details.length, i, rec;
						for (i = 0; i < dLen; i++) {
							rec = details[i];
							if (rec.alertEvent) {
								buf += "<tr><th colspan=\"2\" style=\"text-align: center;color:red;\" class=\"alert\">" + rec.fieldLabel + " - Flagged as an ALERT</th></tr>";
							}
							buf += "<tr><th style=\"width: 9em;\">Event:</th><td>" + rec.fieldLabel + "</td></tr>";
							buf += "<tr><th style=\"width: 9em;\">Section:</th><td>" + rec.sectionTitle + "</td></tr>";
							buf += "<tr><th style=\"width: 9em;\">Comments:</th><td>" + rec.comments + "</td></tr>";
						}
					}
					return buf;
				},
				debuggerFcn : function ( current, prev ) {
					// debugger;
				}
			}
	)

});

Ext.define('COMS.view.NewPlan.AmputationSelection', {
	"extend" : "Ext.container.Container",
	alias : 'widget.AmputationSelection',
    items : [
        { xtype: "checkboxgroup",
            vertical: true,
            width: 350,
            columns: 2,
            shadow: true,
            name: "amputations",
            items: [
                { boxLabel : "Upper Left Arm", name : "Upper Left Arm" },
                { boxLabel : "Lower Left Arm", name : "Lower Left Arm" },
                { boxLabel : "Left Hand and Fingers", name : "Left Hand and Fingers" },
                { boxLabel : "Left Thigh", name : "Left Thigh" },
                { boxLabel : "Lower Left Leg", name : "Lower Left Leg" },
                { boxLabel : "Left Foot", name : "Left Foot" },
                { boxLabel : "Upper Right Arm", name : "Upper Right Arm" },
                { boxLabel : "Lower Right Arm", name : "Lower Right Arm" },
                { boxLabel : "Right Hand and Fingers", name : "Right Hand and Fingers" },
                { boxLabel : "Right Thigh", name : "Right Thigh" },
                { boxLabel : "Lower Right Leg", name : "Lower Right Leg" },
                { boxLabel : "Right Foot", name : "Right Foot" }
            ]
        }
    ]
});

var theMainItemsList = function(itemsInGroup) {
	var IIG_Panel = {
		xtype: "panel",
		title : "Performance Status <em>*</em>",
		name : "perfStatus",
		defaults : { labelAlign : "right", labelWidth: 300},
		items : [
			{
				xtype: 'radiogroup',
				name: 'perfStatusRadio',
				labelAlign: 'top',
				id: 'performanceRadios',
				margin: '5 5 25 5',
				columns: 1,
				items: itemsInGroup
			}
		]
	};
	return [
		{
			"xtype" : "form",
			"cls" : "custom-form",
			"defaults" : {
				"labelAlign" : "top",
				"margin" : "5"
			},
			"items" : [
				{
					"xtype" : "RequiredInstr"
				},
				{
					"xtype" : "datefield",
					"labelAlign" : "top",
					"name" : "startdate",
					"labelWidth" : 100,
					"width" : 178,
					"fieldLabel" : "Enter a Start Date <em>*</em>"
				}, 
				{
					"xtype" : "container",
					"layout" : "hbox",
					"defaults" : {
						"margin" : "5 10 5 0"
					},
					"items" : [{
						"xtype" : "combo",
						"name" : "BSA_FormulaWeight",
						"fieldLabel" : "Weight to use <em>*</em>",
						"labelAlign" : "top",
						"width" : 178,
						"labelStyle" : "font-weight: bold",
						"store" : {
							"fields" : ["weightType"],
							"data" : [{
								"weightType" : "Actual Weight"
							}, {
								"weightType" : "Ideal Weight"
							}, {
								"weightType" : "Adjusted Weight"
							}, {
								"weightType" : "Lean Weight"
							}, {
								"weightType" : "Other"
							}]
						},
						"queryMode" : "local",
						"displayField" : "weightType"
					}, {
						"xtype" : "combo",
						"name" : "BSA_Formula",
						"fieldLabel" : "BSA Formula <em>*</em>",
						"labelAlign" : "top",
						"width" : 178,
						"labelStyle" : "font-weight: bold",
						"store" : {
							"fields" : ["formula"],
							"data" : [{
								"formula" : "DuBois"
							}, {
								"formula" : "Mosteller"
							}, {
								"formula" : "Haycock"
							}, {
								"formula" : "Gehan and George"
							}, {
								"formula" : "Boyd"
							}, {
								"formula" : "Capped"
							}]
						},
						"queryMode" : "local",
						"displayField" : "formula"
					}]
				}, 
				{ 
					"xtype" : "container",
					"layout" : "hbox",
					"name" : "OtherWeightEntry",
					"hidden" : true,
					"defaults" : {
						"margin" : "5 5 5 0"
					},
					"items" : [
						{
							"xtype" : "textfield", 
							"name" : "OtherWeight", 
							"fieldLabel" : "Other weight to use <em>*</em>", 
							"labelWidth" : 170, 
							"labelAlign" : "right", 
							"width" : 220, 
							"labelStyle" : "font-weight: bold" 
						},
						{
							"xtype" : "box", "margin" : "10",
							"html" : "<span class=\"NursingDocs-boxLabel\">lbs.</span>"
						}
					]
				},

				{
					"xtype" : "radiogroup",
					"labelAlign" : "top",
					"name" : "goalRadio",
					"layout" : "hbox",
					"fieldLabel" : "Select the goal for this Regimen <em>*</em>",
					"columns" : 1,
					"items" : [{
						"boxLabel" : "Curative",
						"name" : "Goal",
						"inputValue" : "Curative",
						"width" : 100
					}, {
						"boxLabel" : "Palliative",
						"name" : "Goal",
						"inputValue" : "Palliative",
						"width" : 125
					}]
				}, 
				{
					"xtype" : "radiogroup",
					"name" : "ConcurRadTherapyRadio",
					"labelAlign" : "top",
					"layout" : "hbox",
					"fieldLabel" : "Patient undergoing concurrent radiation treatment <em>*</em>",
					"columns" : 1,
					"items" : [{
						"boxLabel" : "Yes",
						"name" : "ConcurRadTherapy",
						"inputValue" : true,
						"width" : 100
					}, {
						"boxLabel" : "No",
						"name" : "ConcurRadTherapy",
						"inputValue" : false,
						"width" : 125,
						"checked" : true
					}]
				}, 
				{
					"xtype" : "radiogroup",
					"name" : "clinicalTrialRadio",
					"labelAlign" : "top",
					"layout" : "hbox",
					"fieldLabel" : "Specify the type of clinical trial <em>*</em>",
					"columns" : 1,
					"items" : [{
						"boxLabel" : "Yes",
						"name" : "ClinicalTrial",
						"inputValue" : true,
						"width" : 100
					}, {
						"boxLabel" : "No",
						"name" : "ClinicalTrial",
						"inputValue" : false,
						"width" : 125,
						"checked" : true
					}]
				}, 
				{
					"xtype" : "textfield",
					"fieldLabel" : "Type of Trial",
					"width" : 178,
					"name" : "TypeOfTrial",
					"hidden" : true
				}, 
				{
					"xtype" : "radiogroup",
					"name" : "amputeeRadio",
					"labelAlign" : "top",
					"layout" : "hbox",
					"fieldLabel" : "Is the Patient an Amputee? <em>*</em>",
					"columns" : 1,
					"items" : [{
						"boxLabel" : "Yes",
						"name" : "Amputee",
						"inputValue" : true,
						"width" : 100
					}, {
						"boxLabel" : "No",
						"name" : "Amputee",
						"inputValue" : false,
						"width" : 125,
						"checked" : true
					}]
				}, 
				{ xtype : "AmputationSelection", "hidden" : true },
				// IIG_Panel
{
		xtype: "panel",
		title : "Performance Status <em>*</em>",
		name : "perfStatus",
		defaults : { labelAlign : "right", labelWidth: 300},
		items : [
			{
				xtype: 'radiogroup',
				name: 'perfStatusRadio',
				labelAlign: 'top',
				id: 'performanceRadios',
				margin: '5 5 25 5',
				columns: 1,
				items: itemsInGroup
			}
		]
	}
			]
		}
	];
};
var theButtons = [
		{ text: "Apply Template" },
		{ text: "Cancel" }
	];

Ext.define("COMS.view.NewPlan.AskQues2ApplyTemplate", {
	extend: "Ext.window.Window",
	alias : "widget.AskQues2ApplyTemplate",
    buttonAlign: "center",
	title : "Apply Template",
	layout: "fit",
	autoShow: true,
	width: 500,
	initComponent : function() {
		this.items = theMainItemsList(this.itemsInGroup);
		this.buttons = theButtons;
		this.callParent(arguments);
	}
});

Ext.define('COMS.view.NewPlan.BSASelection', {
	extend: 'Ext.panel.Panel',
	alias : 'widget.BSASelection',
    buttonAlign: 'center',
	autoShow: true,
	width: 390,

    title : "Dosage Calculations",
    name : "bsaCalcInfo",
    hidden: true,
    layout : "hbox",
    defaults : { margin : "5 10 5 5", labelAlign : "top", labelWidth: 60},     //, labelClsExtra : "NursingDocs-label" },
    items : [
        {
            xtype: "combo",
            name: "WeightFormula",
            fieldLabel: "Weight to use <em>*</em>",
            labelAlign: "top",
            width: 178,
            labelStyle: "font-weight: bold",
            store: {
                    fields: ["weightType"],
                    data: [ 
                            { weightType: "Actual Weight" },
                            { weightType: "Ideal Weight" },
                            { weightType: "Adjusted Weight" },
                            { weightType: "Lean Weight" },
                            { weightType: "Other" }
                    ]
            },
            queryMode: "local",
            displayField: "weightType"
        },
        {
            xtype: "combo",
            name: "BSAFormula",
            fieldLabel: "BSA Formula <em>*</em>",
            labelAlign: "top",
            width: 178,
            labelStyle: "font-weight: bold",
            store: {
                fields: ["formula"],
                data: [ 
                    { formula: "DuBois" },
                    { formula: "Mosteller" },
                    { formula: "Haycock" },
                    { formula: "Gehan and George" },
                    { formula: "Boyd" },
                    { formula: "Capped" }
                ]
            },
            queryMode: "local",
            displayField: "formula"
        }
    ]
});


/*
 *	MWB - 12/5/2011
 *	Chemotherapy Template Order Source View
 *	This view maintains all the controls for selecting and modifying a Chemotherapy Order Template for a specific Patient
 *	Note that when a new template is saved in this section it will be flagged as created by the current author and also classed as local for this VA facility
 *	It will also be linked to the currently selected patient (the GUID for the newly created template will be placed in the currently selected patients record
 *	It is rendered in the New Plan Tab once a patient has been selected.
 *	This view is managed by the 'CTOS' Control
 */
Ext.define("COMS.view.NewPlan.CTOS", {
	extend: "Ext.tab.Panel",
	alias : "widget.CTOS",

	name : "CTOS Tabs",

	margin : '0 0 20 0',
	plain : true,
	autoEl : { tag : 'nav' },

	initComponent: function() {
		wccConsoleLog("Chemotherapy Template Order Source View - Initialization");
		var ApplyBtn = { xtype : "container", name : "Apply", html : "", hidden : true, margin: '0 0 10 50' };
		var EditBtn = { xtype : "container", name : "Edit", html : "", hidden : true, margin: '0 0 10 50' };
		var What2DoBtns;
		
		if ("Provider" === Sessionrole || "All Roles" === Sessionrole) {
			if ("1" == SessionPreceptee) {
				ApplyBtn = { xtype : "button", name : "Apply", text : "Apply Template to Patient - Requires Cosigner", hidden : true, margin: '0 0 10 50' };
				What2DoBtns = [ 
					{ boxLabel  : 'Select Template currently applied to this patient', name : 'NewPlan_What2Do', inputValue: '0'}, 
					{ boxLabel  : 'Select an existing standard template', name  : 'NewPlan_What2Do', inputValue: '1'}
				];
			}
			else {
				ApplyBtn = { xtype : "button", name : "Apply", text : "Apply Template to Patient", hidden : true, margin: '0 0 10 50' };
				What2DoBtns = [ 
					{ boxLabel  : 'Select Template currently applied to this patient', name : 'NewPlan_What2Do', inputValue: '0'}, 
					{ boxLabel  : 'Select an existing standard template', name  : 'NewPlan_What2Do', inputValue: '1'},
					{ boxLabel  : 'Approve Pending Template', name  : 'NewPlan_What2Do', inputValue: '2', hidden: true}
				];
			}
			if("1" === SessionTemplateAuthoring) {
				EditBtn = { xtype : "button", name : "Edit", text : "Edit Template", hidden : true, margin: '0 0 10 5' };
			}
		}

		if ("Administrator" === Sessionrole || "All Roles" === Sessionrole || "1" === SessionTemplateAuthoring) {
			this.items = [
				{
					title: "Chemotherapy Template Order Source",
					items : [
						{ xtype : "form", name: "NewPlan_CTOS_Form", items : [
							{ xtype : 'fieldcontainer', name : 'NewPlan_What2Do_Btns', hidden: true,
								fieldLabel : "What do you want to do?", labelAlign: "right", labelWidth : 180,
								defaultType: 'radiofield', defaults: { flex: 1 },
								items: What2DoBtns
							},
							{ xtype : 'selTemplate', name : 'MyTemplates'},		/* Select Existing Template */
							{ xtype : "selCTOSTemplate", hidden : true },
							{ xtype : 'dspTemplateData'},
							ApplyBtn, 
							EditBtn
						]}
					]
				},

				{ xtype : "OEM" },
				{ xtype : "NursingDocs" },
				{ xtype : "FlowSheet" },
				{ xtype : "Chronology", hidden : true },
				{ xtype : "KnowledgeBase", hidden : true }
			];
		}
		else {
			this.items = [
				{
					title: "Chemotherapy Template Order Source",
					items : [
						{ xtype : 'fieldcontainer', name : 'NewPlan_What2Do_Btns', hidden: true,
							fieldLabel : "What do you want to do?", labelAlign: "right", labelWidth : 180,
							defaultType: 'radiofield', defaults: { flex: 1 },
							items: What2DoBtns
						},
						{ xtype : 'selTemplate', name : 'MyTemplates'},
						{ xtype : "selCTOSTemplate", hidden : true },
						{ xtype : 'dspTemplateData'}
					]
				},

				{ xtype : "OEM" },
				{ xtype : "NursingDocs" },
				{ xtype : "FlowSheet" },
				{ xtype : "Chronology", hidden : true },
				{ xtype : "KnowledgeBase", hidden : true }
			];
		}
		this.callParent(arguments);
	}
});


Ext.define("COMS.view.NewPlan.CTOS.ChronologyOverview" ,{
	extend: "Ext.container.Container",
	alias : "widget.ChronologyOverview",
	name : "Chronology Overview",
	margin : "10 5 20 5",

	autoEl : { tag : "section" },

	tpl : new Ext.XTemplate(
		"<table border=\"1\" width=\"100%\" class=\"Therapy InformationTable\">",
			"<colgroup width=12%></colgroup>",
			"<colgroup width=15%></colgroup>",
			"<colgroup width=12%></colgroup>",
			"<colgroup width=61%></colgroup>",

		"	<thead><tr><th colspan=\"4\" class=\"large\">Chronology Information <span style=\"font-weight: normal;\">- for Patient: {PatientName}</span></th></tr></thead>",

		"	<tr><th align=\"right\">Regimen:</th><td colspan=\"3\">{RegimenName}</td></tr>",
		"	<tr><th align=\"right\">Description</th><td colspan=\"3\">{RegimenDescription}</td></tr>",
		"	<tr><th align=\"right\">Treatment Start:</th><td colspan=\"3\">{TreatmentStart}</td></tr>",
		"	<tr><th align=\"right\">Treatment End:</th><td colspan=\"3\">{TreatmentEnd}</td></tr>",
		"	<tr class=\"MultiLineRow\">",
		"		<th>Neutropenia&nbsp;Risk:</th>",
		"		<td>{FNRisk}%</td>",
		"		<th>Recommendation:</th>",
		"		<td>{NeutropeniaRecommendation} (Note: Need to add recommendations to Lookup Table for FN)</td>",
		"	</tr>",
		"	<tr class=\"MultiLineRow\">",
		"		<th>Emesis Risk:</th>",
		"		<td>{ELevelName}</td>",
		"		<th>Recommendation:</th>",
		"		<td>",
		"			<abbr title=\"American Society of Clinical Oncology\">ASCO</abbr><p>{ELevelRecommendationASCO}</p>",
		"			<abbr title=\"National Comprehensive Cancer Network\">NCCN</abbr><p>{ELevelRecommendationNCCN}</p>",
		"		</td>",
		"	</tr>",

		"	<tr><th>Goal</th><td colspan=\"5\">{[this.goalLink( values )]}</td></tr>",
		"	<tr><th>Clinical Trial</th><td colspan=\"5\">{[this.ctLink( values )]}</td></tr>",
		"	{[this.ctData( values )]}",
		"	<tr><th>Performance&nbsp;Status</th><td colspan=\"5\">{[this.PS( values )]}</td></tr>",
		"</table>",
		{
				// XTemplate Configuration
			disableFormats: true,
			goalLink : function ( current ) {
				if (current.Goal){
					return (current.Goal);
				}
				return ("No Goal Specified");
			},
			ctLink : function ( current ) {
				if (current.ClinicalTrial ) {
					return (current.ClinicalTrial);
				}
				return ("Clinical Trial Not Specified");
			},
			ctData : function ( current ) {
				if (current.ClinicalTrial) {
					return ("<tr><th>Type of Trial</th><td colspan=\"5\">" + current.ClinicalTrialType + "</td></tr>");
				}
				return ("");
			},
			PS : function ( current ) {
				var buf = current.PerformanceStatus;
				return (buf);
			}
		}
	)
});


Ext.define("COMS.view.NewPlan.CTOS.ChronologyBody" ,{
	extend: "Ext.container.Container",
	alias : "widget.ChronologyBody",
	name : "Chronology Body",
	margin : "0 0 20 0",
	autoEl : { tag : "section" }
});

Ext.define("COMS.view.NewPlan.CTOS.Chronology" ,{
	extend: "Ext.panel.Panel",
	alias : "widget.Chronology",

	name : "Chronology Tab",
	margin : "0 0 20 0",

	autoEl : { tag : "section" },
	title: "Chronology",
	items : [ { xtype : "ChronologyOverview" }, { xtype : "ChronologyBody" }],


	initComponent: function() {
		wccConsoleLog("Chronology Tab View - Initialization");
		this.callParent(arguments);
	}
});

Ext.define("COMS.view.NewPlan.CTOS.DiseaseResponsePUWin", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.DiseaseResponsePUWin",

	"title" : "Disease Response",
	"layout" : "fit",
	"autoShow" : true,
	"width" : 500,
	"height" : 300,
	"closeAction" : "destroy",
	// "url" : Ext.URLs.Edit_OEMRecord,

	"items" : [
		{
			"xtype" : "form",
			"margin" : "10",
			"autoScroll" : true,
			"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
			"items" : [
				{ "xtype" : "textareafield", "grow" : true, "width" : 430, "height" : 180, "margin" : "10", "name" : "Data", "fieldLabel" : "Comments"}
			],
			"buttons" : [
				{ "xtype" : "button", "text" : "Save",   "margin" : "10 30"},
				{ "xtype" : "button", "text" : "Cancel", "margin" : "10 0"}
			]
		}
	]

});

Ext.define("COMS.view.NewPlan.CTOS.DiseaseResponsePanel" ,{
	"extend" : "Ext.panel.Panel",
	"alias" : "widget.DiseaseResponsePanel",
	"title" : "Disease Response",
	"name" : "DiseaseResponsePanel",
	"collapsible" : true, 
	"collapsed" : true, 
	"margin" : "0 0 10 0", 
	"bodyPadding" : "10",
	"autoEl" : { "tag" : "section" },
	"cls" : "Tab", 
	"tpl" : new Ext.XTemplate(
		"<tpl for=\"records\">",
			"<tpl if=\"Disease_Response != ''\">",
				"<table border=\"1\" width=\"100%\" class=\"FlowsheetTable\" id=\"DRPanel-{AdminDate}-{xindex}\">",
				"	<thead><tr><th><a name=\"DR_{AdminDate}\" id=\"DR_{AdminDate}\">Disease Response for date - {AdminDate}</a></th></tr></thead>",
				"	<tr><td>{Disease_Response}</td></tr>",
				"</table>",
			"</tpl>",
		"</tpl>",
		{
			disableFormats: true,
			formatData : function(data) {
				return Ext.util.Format.htmlDecode(data);
			}
		}
	)
});

Ext.define("COMS.view.NewPlan.CTOS.FS_Toxicity", {
	"extend" : "Ext.container.Container",
	"alias" : "widget.FS_Toxicity",

	"title" : "Toxicity",
	"layout" : "fit",
	"autoShow" : true,
	"width" : 850,
	// "height" : 550,
	"closeAction" : "destroy",

	"items" : [
		{
			"xtype" : "form",
			"autoScroll" : true,
			"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "labelWidth" : 200 },
			"items" : [
				{ 
					"xtype" : "container", 
					"name" : "ToxicityEditPanel",
					"hidden" : true,
					"anchor" : "100%",

					"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "labelWidth" : 200, "margin" : "5 10" },
					"items" : [
						{ "xtype" : "RequiredInstr" },
						{ "xtype" : "container", "layout" : "hbox", "margin" : 0,
							"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "labelWidth" : 200, "margin" : "5 10" },
							"items" : [ 
								{ 
									"xtype" : "combobox", 
									"name" : "ToxInstr", 
									"width" : 350,
									"store" : Ext.create('Ext.data.Store', { "fields" : ["Details", "Label", "ID", "Grade_Level"], "expandData" : true }),
									"queryMode" : "local",
									"displayField" : "Label", 
									"valueField" : "Label", 
									"fieldLabel" : "Toxicity <em>*</em>",
									"allowBlank" : false
								},
								{ "xtype" : "textfield", "anchor" : "100%", "labelWidth" : 105, "fieldLabel" : "Other Toxicity <em>*</em>", "name" : "OtherTox", "hidden": true, "allowBlank" : true }
							]
						},
						{ 
							"xtype" : "combobox", 
							"name" : "ToxLevel", 
							"width" : 350,
							"store" : Ext.create('Ext.data.Store', { fields: ["Details", "Label", "ID", "Grade_Level"], expandData: true }),
							"queryMode" : "local",
							"displayField" : "Grade_Level", 
							"valueField" : "Grade_Level", 
							"fieldLabel" : "Grade <em>*</em>",
							"allowBlank" : false
						},

						{ 
							"xtype" : "container", 
							"layout" : "fit",
							"anchor" : "100%",
							"margin" : 0,
							"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "labelWidth" : 200, "margin" : "5 10" },
							"items" : [
								{ "xtype" : "textfield", "anchor" : "100%", "name" : "ToxEditLevel", "fieldLabel" : "Grade <em>*</em>", "hidden": true, "allowBlank" : true },
								{ "xtype" : "textareafield", "anchor" : "100%", "grow" : true, "height" : 90,  "name" : "ToxEditDetails", "fieldLabel" : "Details <em>*</em>", "hidden": true, "allowBlank" : true },
								{ "xtype" : "displayfield", "anchor" : "100%", "value" : "&nbsp;",  "name" : "ToxDetails", "fieldLabel" : "Details", "fieldCls" : "coms-displayfield-box x-form-display-field " },
								{ "xtype" : "textareafield", "anchor" : "100%", "grow" : true, "height" : 90,  "name" : "Data", "fieldLabel" : "Comments", "allowBlank" : true},
								{ 
									"xtype" : "checkbox", 
									"name" : "AdverseAlert", 
									"width" : 350,
									"fieldLabel" : "Adverse Event (AE) Alert",
									"allowBlank" : true
								}
							]
						},
						{ "xtype" : "hidden", "name" : "RecID", "margin" : 0 },
						{ "xtype" : "button", "text" : "Cancel", "name" : "Cancel", "width" : "125", "minWidth" : "75", style : {float: "right"} , "margin" : "0 10 0 0"},
						{ "xtype" : "button", "text" : " Save ", "name" : "Save", "minWidth" : "75", style : "float:right", "margin" : "0", "disabled" : true}
					]
				},

				{ "xtype" : "FS_ToxicityGrid", "margin" : "5 10"}
			],
			"buttons" : [
				{ "xtype" : "button", "text" : "Add", "margin" : "5 10"},
				{ "xtype" : "button", "text" : "Delete", "margin" : "5 10", "disabled" : true},
				{ "xtype" : "button", "text" : "Refresh", "margin" : "5 10"}
			]
		}
	]



});

Ext.define("COMS.view.NewPlan.CTOS.FS_ToxicityGrid" ,{
	"extend" : "Ext.grid.Panel",
	"alias" : "widget.FS_ToxicityGrid",
	"id" : "FS_ToxicityGrid",
	"name" : "Toxicity Grid",
	"title" : "Toxicities",
	"buttonAlign" : "left",

	"store" : "ToxGridStore",

	"forceFit" : true,
	"overflowY" : "scroll",
	"minHeight" : 150,
	"margin" : "10 auto 10 auto",
	// "margin" : "10 0 0 0",
	"multiSelect" : true,
	"viewConfig" : { 
		"stripeRows" : true,
		"markDirty" : false 
	},

	"features" : [{
		"ftype" : "groupingsummary",
		"startCollapsed" : true, 
		"hideGroupedHeader" : true,
		"id" : "FS_ToxGridSummary" 
	}],
	"columns" : [ 
		{ "text" : "&nbsp; ", "dataIndex" : "tDate", "xtype" : "datecolumn", "format" : "m/d/Y", "flex" : 1 },
		{ "text" : "Toxicity", "renderer" : function(Label, obj, rec) {
			var theData = rec.getData();
			if ("Other" === theData.Label) {
				return theData.OtherTox;
			}
			return Label;
		}, "dataIndex" : "Label", "flex" : 2}, 
		{ "text" : "Grade", "dataIndex" : "Grade_Level", "flex" : 2}, 
		{ "text" : "Detail", "renderer" : Ext.util.Format.htmlDecode, "dataIndex" : "Details", "flex" : 7 },
		{ "xtype" : "checkcolumn", "text" : "AE Alert", "dataIndex" : "Alert", "flex" : 1 },
	]
});



Ext.define("COMS.view.NewPlan.CTOS.FS_ToxicityHistory", {
	"extend" : "Ext.panel.Panel",
	"alias" : "widget.FS_ToxicityHistory",
	"title" : "Toxicity History",
	"name" : "FS_ToxicityHistory",
	"collapsible" : true, 
	"collapsed" : true, 
	"margin" : "0 0 10 0", 
	"bodyPadding" : "10",
	"tpl" : new Ext.XTemplate(
		"<tpl for=\".\">",
			"<table border=\"1\" class=\"InformationTable\">",
			"{[this.renderSection( values )]}",
			"</table>",
		"</tpl>",
		{
				// XTemplate Configuration
			disableFormats: true,
			renderSection : function ( current ) {
				var buf = "";
				if (current.type == "Assessment") {
					buf = "<tr><th colspan=\"2\" style=\"text-align: center;\">Assessment - " + current.date + "</th></tr>";
					if (current.Link.Alert) {
						buf += "<tr><th colspan=\"2\" style=\"text-align: center;color:red;\" class=\"alert\">" + current.Link.Label + " - Flagged as an ALERT</th></tr>";
					}
					buf += "<tr><th style=\"width: 9em;\">Event:</th><td>" + current.Link.Label + "</td></tr>";
					buf += "<tr><th style=\"width: 9em;\">Grade:</th><td>" + current.Link.Grade_Level + "</td></tr>";
					buf += "<tr><th style=\"width: 9em;\">Details:</th><td>" + current.Link.Details + "</td></tr>";
					buf += "<tr><th style=\"width: 9em;\">Comments:</th><td>" + current.Link.Comments + "</td></tr>";
					return buf;
				}
				return "";
			},
			debuggerFcn : function ( current, prev ) {
				// debugger;
			}
		}
	)
});

Ext.define("COMS.view.NewPlan.CTOS.FlowSheet" ,{
	"extend" : "Ext.container.Container",
	"alias" : "widget.FlowSheet",
	"name" : "Flow Sheet Tab",
	"title" : "Flow Sheet",

	"padding" : "10",
	"items" : [
		{ "xtype" : "NursingDocs_Chemotherapy", "cls" : "Level1" },
		{ "xtype" : "FlowSheetGrid" },
		{ "xtype" : "DiseaseResponsePanel" },
		// { "xtype" : "ToxicitySideEffectsPanel" },
		{ "xtype" : "FS_ToxicityHistory" },
		{ "xtype" : "OtherInfoPanel" },
		{ "xtype" : "LabInfo" }
	]
});

Ext.define("COMS.view.NewPlan.CTOS.FlowSheetOptionalQues", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.FlowSheetOptionalQues",
	"title" : "Adding General Information",
	"layout" : "fit",
	"autoShow" : true,
	"width" : 950,
	"height" : 550,
	"closeAction" : "destroy",
	"defaultFocus" : "[name=\"DRData\"]",

	"items" : [
		{
			"xtype" : "form",
			"margin" : "10",
			"autoScroll" : true,
			"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "margin" : "10" },
			"items" : [
				{
					"xtype" : "fieldset", "title" : "Disease Response", "collapsible" : true, 
					"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "margin" : "10", "width" : 700 },
					"items" : [
						{ "xtype" : "textareafield", "grow" : true, "height" : 180, "name" : "DRData", "fieldLabel" : "Disease Response"}
					]
				},
				{ "xtype" : "FS_Toxicity" },
				{
					"xtype" : "fieldset", "title" : "Other", "collapsible" : true, 
					"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label", "margin" : "10", "width" : 700 },
					"items" : [
						{ "xtype" : "textareafield", "grow" : true, "height" : 180, "name" : "OtherData", "fieldLabel" : "Other"}
					]
				}
			],
	"buttons" : [
		{ "xtype" : "button", "text" : "Save",   "margin" : "10 30"},
		{ "xtype" : "button", "text" : "Cancel", "margin" : "10 0"}
	]
		}
	]
});

Ext.define("COMS.view.NewPlan.CTOS.FlowSheetGrid" ,{
	"extend" : "Ext.grid.Panel",
	"alias" : "widget.FlowSheetGrid",
	"id" : "FlowSheetGrid",
	"name" : "Flow Sheet Grid",
	"title" : "Flowsheet",
	"margin" : "10 auto 10 auto",
	"buttonAlign" : "left",
	"enableLocking" : true,
	"columns" : [],
	
	"selType" : "cellmodel",

	"features" : [{
		"id" : "group",
		"ftype" : "groupingsummary",
		"groupHeaderTpl" : "{name}",
		"hideGroupedHeader" : true,
		"enableGroupingMenu" : false
	}],
	"dockedItems" : [
		{
			"xtype" : "toolbar",
			"dock" : "top",
			"items" : [
				{ "xtype" : "button", "text" :"<img src=\"/images/pencil.png\" /> Add General Information", "name" : "EditOptionalQues" }
			]
		},
		{
			"xtype" : "toolbar",
			"dock" : "bottom",
			"items" : [
				{ 
					"xtype" : "combobox",
					"name" : "ShowCycles",
					"fieldLabel" : "Select Cycle(s) to show",
					"labelWidth" : 150,
					"labelAlign" : "right",
					"width" : 500,
					"emptyText" : "List of Cycles",
					"store" : "FlowSheetCombo",
					"queryMode" : "local",
					"valueField" : "cols",
					"displayField" : "label"
				}
			]
		}
	]
});

Ext.define("COMS.view.NewPlan.CTOS.KnowledgeBase" ,{
	extend: "Ext.panel.Panel",
	alias : "widget.KnowledgeBase",

	name : "Knowledge Base Tab",
	margin : "0 0 20 0",

	autoEl : { tag : "section" },
	title: "Knowledge Base",
	html:	[
		"<h2>Knowlege Base Article on Gleevec</h2>",
		"<p><span class=\"style2\"><strong>Gleevec &tm;</strong></span><br />",
		"<span class=\"style2\">Generic name:</span> Imatinib Mesylate<br /><span class=\"style2\">Other names:</span> STI-571<br /><br />",
		"Gleevec is the trade name for the generic drug name Imatinib Mesylate. STI-571 is another name for Imatinib Mesylate. ",
		"In some cases, health care professionals may use the trade name Gleevec or other name STI-571 when referring to the generic drug name Imatinib Mesylate.<br />",
		"<br />",
		"<span class=\"style2\">Drug type:</span> Gleevec is a targeted therapy. Gleevec is classified as a signal transduction inhibitor - ",
		"proteintyrosine kinase inhibitor. (For more detail, see &quot;How this drug works&quot; below).<br /><br />",
		"<span class=\"style2\">What Gleevec is used for:</span><br />",
		"<ul>",
		"<li>Newly diagnosed adult and pediatric patients with Philadelphia chromosome positive chronic myeloid<br />leukemia (Ph+ CML) in chronic phase.</li>",
		"<li>Ph+ CML in blast crisis, accelerated phase, or chronic phase after failure of interferon-alpha therapy.</li>",
		"<li>Adult patients with relapsed or refractory Philadelphia chromosome + acute lymphoblastic leukemia (Ph+ALL)</li>",
		"<li>Adult patients with myelodysplastic/myeloproliferative diseases (MDS/MPD) associated with PDGFR gene rearrangements.</li>",
		"<li>Gastrointestinal stromal tumors that are C-kit positive.</li>",
		"</ul>",
		"<span class=\"style2\">Note:</span> If a drug has been approved for one use, physicians may elect to use this same drug for other problems if they ",
		"believe it may be helpful.<br /><br />",
		"<ul><span class=\"style2\">How Gleevec is given:</span>",
		"<li>Gleevec is a pill, taken by mouth, once or twice daily.</li>",
		"<li>Gleevec should be taken with a large glass of water, after a meal.</li>",
		"<li>The amount of Gleevec that you will receive depends on many factors, including your general health or other health problems, and the type of ",
		"cancer or condition being treated. Your doctor will determine your dose and schedule.</li>",
		"</ul>",
		"<br />",
		"<ul><span class=\"style2\">Side effects of Gleevec:</span><br />",
		"Important things to remember about the side effects of Gleevec:",
		"<li>Most people do not experience all of the side effects listed.</li>",
		"<li>Side effects are often predictable in terms of their onset and duration.</li>",
		"<li>Side effects are almost always reversible and will go away after treatment is complete.</li>",
		"<li>There are many options to help minimize or prevent side effects.</li>",
		"<li>There is no relationship between the presence or severity of side effects and the effectiveness of the medication.</li>",
		"<li>The side effects of Gleevec and their severity depend on how much of the drug is given. In other words, high doses may produce more severe side effects.</li>",
		"</ul><br />",
		"<ul><span class=\"style2\">The following side effects are common (occurring in greater than 30%) for patients taking Gleevec: </span> ",
		"<li>Low blood counts. Your white and red blood cells and platelets may temporarily decrease. ",
		"This can put you at increased risk for infection, anemia and/or bleeding.</li>",
		"<li>Nausea and vomiting</li><li>Edema (swelling of the face, feet, hands)</li>",
		"<li>Muscle cramps and bone pain</li><li>Diarrhea</li>",
		"<li>Hemorrhage (see bleeding problems)</li>",
		"<li>Skin rash (see skin reactions)</li>",
		"<li>Fever</li></ul><br />",
		"<ul><span class=\"style2\">These side effects are less common side effects (occurring in about 10-29%) of patients receiving Gleevec:</span>",
		"<li>Headache</li>",
		"<li>Fatigue</li>",
		"<li>Joint pain</li>",
		"<li>Indigestion (see heartburn)</li>",
		"<li>Abdominal pain</li>",
		"<li>Cough</li>",
		"<li>Shortness of breath</li>",
		"<li>Poor appetite</li>",
		"<li>Constipation</li>",
		"<li>Night sweats (see skin reactions)</li>",
		"<li>Nose bleeds (see bleeding problems)</li>",
		"<li>Weakness</li>",
		"<li>Your fertility, meaning your ability to conceive or father a child, may be affected by Gleevec.",
		" Please discuss this issue with your health care provider.</li>",
		"</ul>A <em>rare, but potentially serious</em> side effect of Gleevec is liver toxicity. ",
		"There may be elevations in transaminase, bilirubin, and lactate dehydrogenase.<br /><br />",
		"Not all side effects are listed above. Some that are rare (occurring in less than 10% of patients) are not listed here. ",
		"However, you should always inform your health care provider if you experience any unusual symptoms.<br /><br />",
		"<span class=\"style2\">When to contact your doctor or health care provider:</span><br /><br />",
		"<ul><span class=\"style2\">Contact your health care provider immediately, day or night, if you should experience any of the<br />",
		"following symptoms:</span>",
		"<li>Fever of 100.5 F (38 C) or higher, chills (possible signs of infection)</li>",
		"<li>Shortness of breath, difficulty breathing</li>",
		"<li>Significant bleeding from nose, mouth, vagina, rectum that will does not stop within 15 minutes.</li>",
		"</ul><br />",
		"<ul><span class=\"style2\">The following symptoms require medical attention, but are not an emergency. ",
		"Contact your health care provider within 24 hours of noticing any of the following:</span>",
		"<li>Nausea (interferes with ability to eat and unrelieved with prescribed medication).</li>",
		"<li>Vomiting (vomiting more than 4-5 times in a 24 hour period).Diarrhea (4-6 episodes in a 24-hour period).</li>",
		"<li>Unusual bleeding or bruising</li><li>Black or tarry stools, or blood in your stools</li><li>Blood in the urine</li>",
		"<li>Extreme fatigue (unable to carry on self-care activities)</li>",
		"<li>Swelling, redness and/or pain in one leg or arm and not the other</li>",
		"<li>Yellowing of the skin or eyes</li>",
		"<li>Swelling of the feet or ankles. Sudden weight gain.</li>",
		"</ul>",
		"<em>Always inform your health care provider if you experience any unusual symptoms.</em><br /><br />",
		"<ul><span class=\"style2\">Precautions:</span>",
		"<li>Before starting Gleevec treatment, make sure you tell your doctor about any other medications you are taking ",
		"(including prescription, over-the-counter, vitamins, herbal remedies, etc.). ",
		"Do not take aspirin, products containing aspirin unless your doctor specifically permits this. ",
		"St. John\'s Wort may decrease the effectiveness of this medication.</li>",

		"<li>Discuss pain remedies with your doctor before taking. Acetominophen (Tylenol) may not be recommended.",
		" Be sure to discuss this with your doctor.</li><li>Do not receive any kind of immunization or vaccination without your doctor\'s approval while taking Gleevec.</li>",
		"<li>Inform your health care professional if you are pregnant or may be pregnant prior to starting this treatment. ",
		"Pregnancy category D (Gleevec may be hazardous to the fetus. Women who are pregnant or become pregnant must be advised of the potential hazard to the fetus).</li>",
		"<li>For both men and women: Do not conceive a child (get pregnant) while taking Gleevec. ",
		"Barrier methods of contraception, such as condoms, are recommended. ",
		"Discuss with your doctor when you may safely become pregnant or conceive a child after therapy.</li>",
		"<li>Do not breast feed while taking this medication.</li>",
		"</ul><br />",
		"<ul><span class=\"style2\">Self-care tips:</span>",
		"<li>Take this medication after a meal with a large glass of water to reduce upset stomach. ",
		"Take this medication at about the same time each day.</li>",
		"<li>If you miss a dose of this medication, do not take the missed dose at all and do not double the next one. ",
		"Instead, go back to your regular dosing schedule and check with your health care provider.</li>",
		"<li>You may be at risk of infection so try to avoid crowds or people with colds and those not feeling well, and report fever or any other signs of ",
		"infection immediately to your health care provider.</li>",
		"<li>Wash your hands often.</li>",
		"<li>Drink at least two to three quarts of fluid every 24 hours, unless you are instructed otherwise.</li>",
		"<li>Use an electric razor and a soft toothbrush to minimize bleeding.</li>",
		"<li>Avoid contact sports or activities that could cause injury.</li>",
		"<li>In general, drinking alcoholic beverages should be kept to a minimum or avoided completely. You should discuss this with your doctor.</li>",
		"<li>Get plenty of rest.</li>",
		"<li>Maintain good nutrition.</li>",
		"<li>If you experience symptoms or side effects, be sure to discuss them with your health care team. ",
		"They can prescribe medications and/or offer other suggestions that are effective in managing such problems.</li>",
		"</ul><br />",
		"<span class=\"style2\">Monitoring and testing:</span><br />",
		"You will be checked regularly by your health care professional while you are taking Gleevec, to monitor side effects and check your response to therapy. ",
		"Periodic blood work to monitor your complete blood count (CBC) as well as the function of other organs (such as your kidneys and liver) will also be ordered by your doctor.<br /><br />",
		"<span class=\"style2\">How Gleevec works:</span><br />",
		"Targeted therapy is the result of about 100 years of research dedicated to understanding the differences between cancer cells and normal cells. ",
		"To date, cancer treatment has focused primarily on killing rapidly dividing cells because one feature of cancer cells is that divide rapidly. ",
		"Unfortunately, some of our normal cells divide rapidly too, causing multiple side effects.<br /><br />",
		"Targeted therapy is about identifying other features of cancer cells. Scientists look for specific differences in the cancer cells and the normal cells. ",
		"This information is used to create a targeted therapy to attack the cancer cells without damaging the normal cells, thus leading to fewer side effects. ",
		"Each type of targeted therapy works a little bit differently but all interfere with the ability of the cancer cell to grow, divide, repair and/or communicate with other cells.<br /><br />",
		"There are different types of targeted therapies, defined in three broad categories. ",
		"Some targeted therapies focus on the internal components and function of the cancer cell. ",
		"The targeted therapies use small molecules that can get into the cell and disrupt the function of the cells, causing them to die. ",
		"There are several types of targeted therapy that focus on the inner parts of the cells. ",
		"Other targeted therapies target receptors that are on the outside of the cell. ",
		"Therapies that target receptors are also known as monoclonal antibodies. ",
		"Antiangiogenesis inhibitors target the blood vessels that supply oxygen to the cells, ultimately causing the cells to starve.<br /><br />",
		"Researchers agree that targeted therapies are not a replacement for traditional therapies. ",
		"They may best be used in combination with traditional therapies. ",
		"More research is needed to identify which cancers may be best treated with targeted therapies and to identify additional targets for more types of cancer.<br /><br />",
		"Imatinib mesylate belongs to the signal transduction inhibitor category of targeted therapies. It is particularly a protein-tyrosine kinase inhibitor.<br /><br />",
		"Note: We strongly encourage you to talk with your health care professional about your specific medical condition and treatments. ",
		"The information contained in this website is meant to be helpful and educational, but is not a substitute for medical advice.<br /><br />",
		"<p><br />Drug information Provided by:<br />",
		"Chemocare.com - a program of the Scott Hamilton CARES initiative<br />",
		"Copyright 2005 by The Cleveland Clinic Foundation. All Rights Reserved.<br />",
		"Content provided by Cleveland Clinic Cancer Center<br /></p>"

	],

	initComponent: function() {
		wccConsoleLog("Knowledge Base Tab View - Initialization");
		this.callParent(arguments);
	}
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs" ,{
	extend : "Ext.container.Container",
	alias : "widget.NursingDocs",
	name : "Nursing Documentation Tabs",
	title: "Treatment Documentation",
	padding : "10",
	bodyCls : "Level1",
	bodyStyle: {
		background: '#ffc',
		padding: '10px'
	},

	items : [
		{ xtype : "NursingDocs_Chemotherapy", cls : "Level1" },
		{ xtype : "tabpanel", name : "NursingDocsTabs", plain : true, autoEl : { tag : 'nav' },
			items : [
				{ xtype : "NursingDocs_GenInfo", padding : "10" },
				{ xtype : "NursingDocs_Assessment", padding : "10" },
				{ xtype : "NursingDocs_PreTreatment", padding : "10" },
				{ xtype : "NursingDocs_Treatment", padding : "10" },
				{ xtype : "NursingDocs_React_Assess", padding : "10" },
				{ xtype : "NursingDocs_Education", padding : "10" }
			]
		}
	]
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.AssessmentCombo", {
	extend : "Ext.form.field.ComboBox",
    alias : "widget.NursingDocs_AssCombo",
	hidden : true,
	labelWidth : 150,
	labelAlign : "right",
	width : 840,
	labelClsExtra : "NursingDocs-label", 
	margin : "0 10 5 10",
	queryMode : "local",
	displayField : "grade",
	valueField : "gradeLevel"
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.PretreatmentAssesment" ,{
    extend: "Ext.form.FieldSet",
    alias : "widget.NursingDocs_PretreatmentAssesment",
	name : "NursingDocs.PretreatmentAssesment",
	title : "Pretreatment Assesment",

	defaults : { labelAlign : "left"}, 
	items : [
		{ xtype : "container", html : "<h3>Pretreatment Assessment of Adverse Events since last treatment:</h3>" },

		{ xtype : "fieldset", title : "Notes on Assessment Events", collapsible : true, collapsed : true, html1 : ["<h3>Note:</h3><div>",
			"After reviewing several pages on the <a href=\"http://ctep.cancer.gov\" target=\"_blank\">CTEP</a> (Cancer Therapy Evaluation Program)Site, ",
			"including their <a href=\"http://ctep.cancer.gov/protocolDevelopment/electronic_applications/ctc.htm#ctc_40\" target=\"_blank\">documentation</a> on \"Common Terminology Criteria for Adverse Events (CTCAE) and Common Toxicity Criteria (CTC)\".<br>",
			"I have generated values for the following select boxes, from the most recent release of the core terminology in <a href=\"http://evs.nci.nih.gov/ftp1/CTCAE/CTCAE_4.03_2010-06-14.xls\" target=\"_blank\">Excel spreadsheet</a><br>",
			"from the NCI Common Terminology Criteria for Adverse Events (CTCAE) v.4 <a href=\"http://evs.nci.nih.gov/ftp1/CTCAE/About.html\" target=\"_blank\">data files</a>, located on the <a href=\"http://evs.nci.nih.gov/\" target=\"_blank\">National Cancer Institute - Enterprise Vocabulary Services</a> site",
			"</div>"],

			html : ["<h3>Note:</h3><div>",
			"The <a href=\"http://ctep.cancer.gov\" target=\"_blank\">CTEP</a> (Cancer Therapy Evaluation Program) Site, ",
			"contains <a href=\"http://ctep.cancer.gov/protocolDevelopment/electronic_applications/ctc.htm#ctc_40\" target=\"_blank\">documentation</a> on \"Common Terminology Criteria for Adverse Events (CTCAE) and Common Toxicity Criteria (CTC)\". ",
			"The following assessment terms and levels have been obtained from the most recent release of the core terminology in <a href=\"http://evs.nci.nih.gov/ftp1/CTCAE/CTCAE_4.03_2010-06-14.xls\" target=\"_blank\">Excel spreadsheet</a><br>",
			"from the <abbr title=\"National Cancer Institute\">NCI</abbr> Common Terminology Criteria for Adverse Events (CTCAE) v.4 <a href=\"http://evs.nci.nih.gov/ftp1/CTCAE/About.html\" target=\"_blank\">data files</a>, located on the <a href=\"http://evs.nci.nih.gov/\" target=\"_blank\">National Cancer Institute - Enterprise Vocabulary Services</a> site.",
			"</div>"]
		},
		{ "xtype" : "FS_Toxicity", margin: "0 10 0 0" }
	]
});








Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.Assessment" ,{
	extend: "Ext.form.Panel",
	alias : "widget.NursingDocs_Assessment",
	name : "Nursing Documentation Assessment Tab",
	title: "Assessment",
	items : [
		{ xtype : "fieldset",
			padding : "10",
			items : [
				{ xtype : "NursingDocs_PretreatmentAssesment"}
			]
		}
	]
});


Ext.define('COMS.view.NewPlan.CTOS.NursingDocs.Authenticate', {
    extend: 'Ext.window.Window',
    alias : 'widget.Authenticate',
    title : 'Authenticate',
    layout: 'fit',
    autoShow: true,
    width: 400,

    initComponent: function () {
        this.items = [ {
            xtype: 'form',
            cls: 'custom-form',
            defaults : { labelAlign: 'top', margin: '5'},
            items: [
                { xtype : "RequiredInstr" },
                { xtype: "textfield", inputType: "password", name : "AccessCode", labelWidth: 100, width: 178, fieldLabel: "Access Code <em>*</em>"  },
                { xtype: "textfield", inputType: "password", name : "VerifyCode", labelWidth: 100, width: 178, fieldLabel: "Verify Code <em>*</em>"  }
            ]
        } ];
        this.buttons = [
            { text: 'Sign Record', action: 'save' },
            { text: 'Cancel', scope: this, handler: this.close }
        ];
        this.callParent(arguments);
    }
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.Chemotherapy" ,{
    extend: "Ext.form.FieldSet",
    alias : "widget.NursingDocs_Chemotherapy",
	name : "NursingDocs.Chemotherapy",
	title : "Chemotherapy / Biotherapy",

	items : [ 
		{ "xtype" : "box", "name" : "Link2XternalFlowsheet", "html" : "" },
		{ "xtype" : "displayfield", "name" : "ndctRegimen", "fieldLabel" : "Regimen", "labelClsExtra" : "NursingDocs-label" },
		{ "xtype" : "panel", "collapsible" : true, "collapsed" : true, "margin" : "0 0 10 0", "bodyPadding" : 10, "name" : "NeutropeniaInfo"}, 
		{ "xtype" : "panel", "collapsible" : true, "collapsed" : true, "margin" : "0 0 10 0", "bodyPadding" : 10, "name" : "EmesisInfo"}, 
		{ "xtype" : "box", "name" : "ndctWarning"}, 
		{ 
			xtype : "container", 
			name : "ndctCycleInfo",
			layout : "hbox",
			defaults : {
				labelAlign: "right",
				xtype : "displayfield",
				labelClsExtra : "NursingDocs-label"
			},
			items : [ { name : "ndctCycle", fieldLabel : "Cycle" }, { name : "ndctDay", fieldLabel : "Day"}, { name : "ndctDate", fieldLabel : "Date" } ]
		}
	]
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.DischargeInstructions", {
	"extend": "Ext.panel.Panel",
	"alias": "widget.DischargeInstructions",
	"items": [
		{"xtype": "RequiredInstr"},
		{ "xtype" : "container", "layout" : "hbox", "defaults" : { "margin" : "0 0 5 10" }, "items" : [
			{ "xtype" : "selDischargeInstructions"},
			{ "xtype" : "button", "baseCls" : "anchor", "id" : "PrintDischargeInstructions", "text" : "Print Discharge Instructions" },
			{ "xtype" : "button", "baseCls" : "anchor", "id" : "PrintFollowupApt", "text" : "Print Followup Appointment" }
		]},
		{ "xtype" : "form", "id" : "DischargeInstructionsForm", "submitEmptyText" : false, "trackResetOnLoad" : true, "margin" : "0 10 0 10", "items" : [
			{ "xtype" : "hidden", "name" : "Applied_Template" },
			// { "xtype" : "hidden", "name" : "MedList" },

			{
				"xtype": "fieldset",
				"title": "Clinic Information",
				"name": "ClinicInformation",
				"margin": "10 20 10 10",
				"defaults": { "labelAlign": "right", "labelWidth": 200, "labelClsExtra": "NursingDocs-label" },
				"items": [
					{
						"xtype": "CheckCombo",
						// "noDataText" : "",
						"value" : "",		// If a CheckCombo is not initialized with a value of "" the form shows up as Dirty
						"fieldLabel": "Select Clinic Information",
						"name": "ND_E_SelectClinicInfo",
						"width": 450,
						"margin" : "5 0 10 0",
						"store" : "ClinicInfo",
						"displayField": "Label",
						"valueField": "ID"
					}, 

					{
						"xtype": "ClinicInfoDisplay"
					}
				]
			},
			
			
			{
				"xtype": "fieldset",
				"title": "Patient Education",
				"name": "PatientEducation",
				"margin": "10 20 10 10",
				"defaults": { "labelAlign": "right", "labelWidth": 200, "labelClsExtra": "NursingDocs-label" },
				"items": [
					{
						"xtype": "radiogroup",
						"columns": 2,
						"defaultType": "radio",
						"fieldLabel": "Patient Education",
						"width": 20,
						"defaults": {
							"labelAlign": "right",
							"labelWidth": 50,
							"labelClsExtra": "NursingDocs-label"
						},
						"items": [
							{ "name": "PE_Taught", "inputValue": "1", "fieldLabel": "Yes" }, 
							{ "name": "PE_Taught", "inputValue": "0", "fieldLabel": "No" }
						]
					}, 
					{
						"xtype": "PatientEducationDetails",
						"defaults": { "labelAlign": "right", "labelWidth": 200, "labelClsExtra": "NursingDocs-label" }
					}
				]
			},

			{
				"xtype": "fieldset",
				"title": "Follow up",
				"name": "Followup",
				"margin": "10 20 10 10",
				"defaults": {
					"labelAlign": "right",
					"labelWidth": 200,
					"labelClsExtra": "NursingDocs-label"
				},
				"items": [
					{
						"xtype": "radiogroup",
						"columns": 2,
						"defaultType": "radio",
						"fieldLabel": "Followup Needed",
						"width": 20,
						"defaults": {
							"labelAlign": "right",
							"labelWidth": 50,
							"labelClsExtra": "NursingDocs-label"
						},
						"items": [{
							"name": "FollowupNeeded",
							"inputValue": "1",
							"fieldLabel": "Yes"
						}, {
							"name": "FollowupNeeded",
							"inputValue": "0",
							"fieldLabel": "No"
						}]
					}, 
					{
						"xtype": "FollowupDetails"
					}
				]
			}
		],
		"buttons" : [
			{ xtype: "button", "text" : "Save", "scope" : this }, 
			{ xtype: "button", "text" : "Cancel", "scope" : this }
		]
		}
	]
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.Education", {
	extend: "Ext.panel.Panel",
	alias: "widget.NursingDocs_Education",
	name: "Nursing Documentation Education Tab",
	title: "Discharge Instructions",
	items: [{xtype : 'DischargeInstructions' }]
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.FollowupDetails", {
	"extend": "Ext.container.Container",
	"alias": "widget.FollowupDetails",
	"id": "FollowupDetails",
	"hidden": true,
	"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
	"items": [
		{
			"xtype": "radiogroup",
			"columns": 2,
			"defaultType": "radio",
			"fieldLabel": "Follow up type",
			"width": 20,
			"defaults": {"labelAlign": "right","labelWidth": 100,"labelClsExtra": "NursingDocs-label"},
			"items": [{
				"name": "FollowUp_Type",
				"labelWidth": 90,
				"inputValue": "InPatient",
				"fieldLabel": "Inpatient"
			}, {
				"name": "FollowUp_Type",
				"inputValue": "OutPatient",
				"fieldLabel": "Outpatient"
			}]
		}, 
	{ "xtype" : "box", "html" : "Clinic Info" },
		{
			"xtype": "ClinicInfoDisplay"
		},
		{
			"xtype" : "datefield",
			"fieldLabel" : "Next Chemotherapy Appt.",
			"width" : 300,
			"name" : "ND_E_ChemoAptDate"
		}, 
		{
			"xtype" : "datefield",
			"fieldLabel" : "Next Clinic Appt.",
			"width" : 300,
			"name" : "ND_E_ClinicAptDate"
		}, 
		{
			"xtype" : "box",
			"html" : "<div class='NursingDocs-label'>Laboratory Test(s) Scheduled</div>"
		}, 
		{
			"xtype" : "datefield",
			"fieldLabel" : "&nbsp;",
			"labelSeparator" : "",
			"width" : 300,
			"name" : "ND_E_LabTest1Date"
		}, 
		{
			"xtype" : "datefield",
			"fieldLabel" : "&nbsp;",
			"labelSeparator" : "",
			"width" : 300,
			"name" : "ND_E_LabTest2Date"
		}
	]
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.GoalInfo" ,{
	extend: "Ext.form.FieldSet",
	alias : "widget.NursingDocs_PatientID",
	name : "NursingDocs.PatientID",

	title : "Patient Identification",

	defaults : {
		labelAlign: "right",
		labelWidth : 210,
		width : 320,
		margin : "5 10 15 10"
	},
	items : [
		{ 
			xtype : "radiogroup", 
			columns : 2,
			name: "rgPatientID",
			fieldLabel : "Patient identification verified with 2 information sources?", 
			labelClsExtra : "NursingDocs-label", 
			labelAlign: "right",
			defaults : {
				labelAlign: "right",
				labelWidth : 30,
				width : 50
			},
			items : [
				{ name : "patientIDGood", fieldLabel : "Yes", inputValue: true }, 
				{ name : "patientIDGood", fieldLabel : "No", inputValue: false }
			]
		},

		{ 
			xtype : "radiogroup", 
			columns : 2,
			name: "rgConsent",
			fieldLabel : "Consent Documentation on File?", 
			labelClsExtra : "NursingDocs-label", 
			defaults : {
				labelAlign: "right",
				labelWidth : 30,
				width : 50
			},
			items : [
				{ name : "consentGood", fieldLabel : "Yes", inputValue: true },
				{ name : "consentGood", fieldLabel : "No", inputValue: false } 
			]
		},

		{ 
			xtype : "textareafield", 
			name : "PatientIDComment",
			grow : true, 
			fieldLabel : "Comment", 
			labelClsExtra : "NursingDocs-label", 
			value : "", 
			width: 700 
		}

	]
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.PatientTeaching" ,{
    extend: "Ext.form.FieldSet",
    alias : "widget.NursingDocs_PatientTeaching",
	name : "NursingDocs.PatientTeaching",
	title : "Patient Teaching",
//	margin : "5 10 5 10",
	items : [
		{ 
			xtype : "radiogroup", 
			columns : 2,
			name: "rgEduAssess",
			margin : "0",
			fieldLabel : "Education assessment complete?", 
			labelClsExtra : "NursingDocs-label", 
			labelWidth : 230,
			labelAlign: "right",
			width : 350,
			defaults : {
				labelAlign: "right",
				labelWidth : 30,
				width : 50
			},
			items : [
				{ name : "educationGood", fieldLabel : "Yes", inputValue: true },
				{ name : "educationGood", fieldLabel : "No", inputValue: false } 
			]
		},
		{ 
			xtype : "radiogroup", 
			columns : 2,
			name: "rgPlanReviewed",
			margin : "0",
			fieldLabel : "Pre-procedure plan reviewed with patient/significant other, questions answered?", 
			labelClsExtra : "NursingDocs-label", 
			labelWidth : 530,
			labelAlign: "right",
			width : 650,
			defaults : {
				labelAlign: "right",
				labelWidth : 30,
				width : 50
			},
			items : [
				{ name : "planReviewed", fieldLabel : "Yes", inputValue: true },
				{ name : "planReviewed", fieldLabel : "No", inputValue: false } 
			]
		}
	]
});




Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.DualDosingVerification" ,{
    extend: "Ext.form.FieldSet",
    alias : "widget.NursingDocs_DualDosingVerification",
	name : "NursingDocs.DualDosingVerification",
	title : "Dual Verification of Dosing",
	items : [
		{ xtype : "container", 
			layout : { 
				type : "table", 
				// tableAttrs: { border : 1 },
				columns : 4
			},
			defaults : { labelAlign : "right", labelWidth : 60, margin: "5 0 5 0" }, 
			items : [
				{ 
					xtype : "button", 
					name: "DDV_FirstSig",
					text : "Sign to Verify",
					margin : "0"
				},
				{ 
					xtype : "displayfield", 
					name: "DDV_FirstSig1",
					margin : "0 0 0 20"
				},
				{ 
					xtype : "displayfield", 
					name: "DDV_FirstSig2",
					margin : "0"
				},
				{ 
					xtype : "displayfield", 
					name: "DDV_FirstSig3",
					margin : "0"
				},


				{ 
					xtype : "button", 
					name: "DDV_SecSig",
					text : "Sign to Verify",
					margin : "0"
				},
				{ 
					xtype : "displayfield", 
					name: "DDV_FirstSig4",
					margin : "0 0 0 20"
				},
				{ 
					xtype : "displayfield", 
					name: "DDV_FirstSig5",
					margin : "0"
				},
				{ 
					xtype : "displayfield", 
					name: "DDV_FirstSig6",
					margin : "0"
				}
			]
		}
	]
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.VitalSigns" ,{
	extend: "Ext.form.FieldSet",
	alias : "widget.NursingDocs_VitalSigns",
	name : "NursingDocs.VitalSigns",
	title : "Vital Signs",
	items : [{ xtype : "VitalSignsEntryForm" }]
});










Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.GenInfo" ,{
	extend: "Ext.panel.Panel",
	alias : "widget.NursingDocs_GenInfo",
	name : "Nursing Documentation General Info Tab",
	title: "General Information",
	items : [
		{ 
			xtype : "fieldset",
			collapsible : true, 
			collapsed : true,
			title : "Laboratory Information",
			name : "ND_PT_LabInfo",
			tpl : [
				'<table width="100%" border=1 class="LabInfoResults">',
				'<tpl for=".">',
					'<tr><th>Report&nbsp;Release&nbsp;Date:</th><td>{relDate}</td></tr>',
					'<tr><th>Name:</th><td>{name}',
								// '<a href="#" style="margin-left: 1em;" onclick="labInfoDetails({#}, this); return false;">Show Details</a>',
					'</td></tr>',

					'<tr id="LabInfoDetails_{#}"><td colspan="2" class="LabInfoDetails">',
						'<table width="100%" class="LabInfoDetails">',
							'<tr><th class="topLeftBrdr">Provider</th><td colspan="4" class="topRightBrdr">{provider}</td></tr>',
							'<tr><th class="leftBrdr">Specimen</th><td colspan="4" class="rightBrdr">{specimen} {specInfo}</td></tr>',
							'<tr>',
								'<th class="center leftBrdr">Name</th>',
								'<th class="center">Results</th>',
								'<th class="center">Units</th>',
								'<th class="center rightBrdr">Normal Range</th>',
							'</tr>',

							'<tpl for="results">',
								'<tpl if="OutOfRange">',
									'<tr xxclass="LabInfoOutOfRange">',
										'<td xxclass="LabInfoOutOfRange">{name}</td>',
										'<td xxclass="LabInfoOutOfRange">{result}</td>',
										'<td>{units}</td>',
										'<td xxclass="LabInfoOutOfRange">{range}</td>',
									'</tr>',
								'</tpl>',
								'<tpl if="true !== OutOfRange">',
									'<tr><td>{name}</td>',
										'<td>{result}</td>',
										'<td>{units}</td>',
										'<td>{range}</td>',
									'</tr>',
								'</tpl>',
							'</tpl>',
						'</table>',
					'</td></tr>',

					'<tr><th class="leftBrdr">Reference</th>',
					'<td class="rightBrdr">{ref}</td></tr>',
					'<tr><th class="bottomLeftBrdr">Site</th><td class="bottomRightBrdr">{site}</td></tr>',
		
					'<tr class="dblBorder"><th>Comments:</th><td>{comment}</td></tr>',
				'</tpl>',
				'</table>'
			]
		},


		{ xtype : "NursingDocs_PatientID"},
		{ xtype : "NursingDocs_PatientTeaching"},
		{ xtype : "NursingDocs_DualDosingVerification"},

		{ xtype : "NursingDocs_VitalSigns"},
		{ xtype : "container", layout : "hbox", defaults : {margin: "5 0 0 20"}, items : [ 
			{ xtype : "button", text : "Save", action : "save" }, 
			{ xtype : "button", text : "Cancel"  } 
		]},
		{ xtype : "fieldset", title : "Vital Signs - Historical", items : [ { xtype : "VitalSignsHistory" } ]}
	]
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.MedInstructions", {
	"extend": "Ext.container.Container",
	"alias": "widget.MedInstructions",
	"id": "CTOS.ND.MedInstructions",
	"hidden": true,
	"defaults": { "labelAlign": "right", "labelWidth": 200, "labelClsExtra": "NursingDocs-label" },
	"items": [

	]
});









Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.MedsInfoDisplay" ,{
	extend : "Ext.container.Container",
    alias : "widget.MedsInfoDisplay",
	name : "NursingDocs.MedsInfoDisplay",
	autoScroll : true,

	tpl : new Ext.XTemplate(
		"<section>",
		"<div class=\"SelectedSiteCommonInstructions\">",
		"<tpl for=\".\">",
			"{[this.tempCalc(values)]}",
			"<p><h3>{Medication}</h3>",
			"{Documentation}",
			"</p>",
		"</tpl>",
		"</div></section>",
		{
				// XTemplate Configuration
			disableFormats: true,
			tempCalc: function (data) {
				// debugger;
			}
		}
	)
});







Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.ClinicInfoDisplay" ,{
	extend : "Ext.container.Container",
    alias : "widget.ClinicInfoDisplay",
	name : "NursingDocs.ClinicInfoDisplay",
	autoScroll : true,

	tpl : new Ext.XTemplate(
		"<h2>Clinic --- Information:</h2><section>",
		"<div class=\"SelectedSiteCommonInstructions\">",
		"<tpl for=\".\">",
			"<p><h3>{Label}</h3>",
			"{Details}",
			"</p>",
		"</tpl>",
		"</div></section>"
	)
});
Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.SpclInstrDisplay" ,{
	extend : "Ext.container.Container",
    alias : "widget.SpclInstrDisplay",
	name : "NursingDocs.SpclInstrDisplay",
	autoScroll : true,

	tpl : new Ext.XTemplate(
		"<h2>Discharge Instructions:</h2><section>",
		"<div class=\"SelectedSiteCommonInstructions\">",
		"<tpl for=\".\">",
			"<p><h3>{Label}</h3>",
			"{Details}",
			"</p>",
		"</tpl>",
		"</div></section>"
	)
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.MedSpecificInfoDisplay" ,{
	extend : "Ext.container.Container",
    alias : "widget.MedSpecificInfoDisplay",
	name : "NursingDocs.MedSpecificInfoDisplay",
	autoScroll : true,
	html : "<hr>None Available<hr>",

	tpl : new Ext.XTemplate(
		"<h2>Medication Information:</h2><section>",
		"<div class=\"SelectedSiteCommonInstructions\">",
		"<tpl for=\".\">",
			"<p><h3>{Medication}</h3>",
			"{Documentation}",
			"</p>",
		"</tpl>",
		"</div></section>"
	)
});







Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.PatientEducationDetails", {
	"extend": "Ext.container.Container",
	"alias": "widget.PatientEducationDetails",
	"id": "PatientEducationDetails",
	"hidden": true,
	"name": "PatientEduDetails",
	"defaults": { "labelAlign": "right", "labelWidth": 200, "labelClsExtra": "NursingDocs-label" },
	"items": [
		{
			"xtype": "fieldset",
			"title": "Who Was Taught",
			"defaultType": "checkbox",
			"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
			"items": [{
				"name": "taught_Patient",
				"fieldLabel": "Patient"
			}, {
				"name": "taught_Spouse",
				"fieldLabel": "Spouse"
			}, {
				"name": "taught_SignificantOther",
				"fieldLabel": "Significant Other"
			}, {
				"xtype": "CkBoxTArea",
				"defaults": { "labelAlign": "right", "labelWidth": 200, "labelClsExtra": "NursingDocs-label" },
				"name": "taught_Other",
				"fieldLabel": "Other (Please designate)"
			}]
		},
		{
			"xtype": "fieldset",
			"title": "Pre Education Needs",
			"items": [{
				"xtype": "radiogroup",
				"columns": 1,
				"vertical": true,
				"defaultType": "radio",
				"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
				"items": [{
					"name": "Pre_Edu",
					"inputValue": "1",
					"fieldLabel": "Already knows well"
				}, {
					"name": "Pre_Edu",
					"inputValue": "2",
					"fieldLabel": "Needs review"
				}, {
					"name": "Pre_Edu",
					"inputValue": "3",
					"fieldLabel": "New material"
				}]
			}]
		},
		{
			"xtype": "fieldset",
			"title": "Barriers to Learning",
			"name" : "Barriers",
			"defaultType": "checkbox",
			"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
			"items": [{
				"fieldLabel": "None",
				"name" : "Barrier_None"
			}, {
				"fieldLabel": "Desire/motivation",
				"name" : "Barrier_Desire"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Barrier_Physical",
				"fieldLabel": "Physical"
			}, {
				"fieldLabel": "Hearing",
				"name": "Barrier_Hearing"

			}, {
				"fieldLabel": "Vision",
				"name": "Barrier_Vision"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Barrier_Cognition",
				"fieldLabel": "Cognition"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Barrier_Religious_Cultural",
				"fieldLabel": "Religious/Cultural"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Barrier_Emotional",
				"fieldLabel": "Emotional"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Barrier_Language",
				"fieldLabel": "Language Barriers"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Barrier_Communication",
				"fieldLabel": "Communication"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Barrier_Financial",
				"fieldLabel": "Financial"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Barrier_Other",
				"fieldLabel": "Other"
			}]
		}, {
			"xtype": "fieldset",
			"title": "Patient's Learning Style Preference",
			"defaultType": "checkbox",
			"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
			"items": [{
				"fieldLabel": "Verbal",
				"name": "LearningPreference_Verbal"
			}, {
				"fieldLabel": "Written",
				"name": "LearningPreference_Written"
			}, {
				"fieldLabel": "Demonstration",
				"name": "LearningPreference_Demo"
			}, {
				"fieldLabel": "Audio-Visual",
				"name": "LearningPreference_AudioVisual"
			}, {
				"xtype": "CkBoxTArea",
				"name": "LearningPreference_Other",
				"fieldLabel": "Other"
			}]
		},
		{
			"xtype": "fieldset",
			"title": "Teaching Methods",
			"defaultType": "checkbox",
			"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
			"items": [{
				"fieldLabel": "Verbal",
				"name": "Teaching_Verbal"
			}, {
				"fieldLabel": "One to One",
				"name": "Teaching_1_to_1"
			}, {
				"fieldLabel": "Group",
				"name": "Teaching_Group"
			}, {
				"fieldLabel": "Telephone",
				"name": "Teaching_Phone"
			}, {
				"xtype": "CkBoxTArea",
				"name": "Teaching_Demo",
				"fieldLabel": "Demonstration/<br>Return Demonstration"
			}]
		},
		{
			"xtype": "fieldset",
			"title": "Chemotherapy Discharge Instructions/Materials",
			"defaultType": "checkbox",
			"name" : "DischargeInstructionsMaterials",
			"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
			"items": [
				{
					"xtype": "radiogroup",
					"columns": 2,
					"defaultType": "radio",
					"fieldLabel": "Patient was given Chemotherapy discharge instructions.",
					"labelWidth": 370,
					"width": 20,
					"defaults": {
						"labelAlign": "right",
						"labelWidth": 30,
						"labelClsExtra": "NursingDocs-label"
					},
					"items": [{
						"name": "DischargeInstructions_Given",
						"inputValue": "1",
						"fieldLabel": "Yes"
					}, {
						"name": "DischargeInstructions_Given",
						"inputValue": "0",
						"fieldLabel": "No"
					}]
				},
				{ 
					"xtype" : "container",
					"name" : "DischargeInstructionsDetails",
					"id" : "DischargeInstructionsDetails",
					"hidden" : true,
					"defaultType": "checkbox",
					"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
					"items" : [
						{
							"xtype" : "container",
							"layout" : "fit",
							"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
							"items" : [{
								"xtype": "textarea",
								"grow": true,
								"fieldLabel": "Materials",
								"name": "DischargeInstructions_Materials"
							}]
						},
						{
							"fieldLabel": "Krames on Demand",
							"name": "Teaching_Krames"
						}, {
							"fieldLabel": "HealtheVet ",
							"name": "Teaching_HealtheVet"
						}, {
							"xtype": "CkBoxTArea",
							"name": "Teaching_InfoSheets",
							"fieldLabel": "Drug info sheet/<br>Food-drug/<br>Drug-drug interaction"
						}, {
							"xtype": "CkBoxTArea",
							"name": "Teaching_VABrochure",
							"fieldLabel": "VA Brochure/<br>Handout"
						}, {
							"xtype": "CkBoxTArea",
							"name": "Teaching_OtherWritten",
							"fieldLabel": "Other written material given"
						}, {
							"xtype": "CkBoxTArea",
							"name": "Teaching_Mailed",
							"fieldLabel": "Mailed"
						}, {
							"xtype": "CkBoxTArea",
							"name": "Teaching_Video",
							"fieldLabel": "Videotape"
						}, {
							"xtype": "CkBoxTArea",
							"name": "Teaching_Other",
							"fieldLabel": "Other"
						},
/*************
						{
							"xtype": "CheckCombo",
							// "noDataText" : "",
							"value" : "",		// If a CheckCombo is not initialized with a value of "" the form shows up as Dirty
							"fieldLabel": "Select Clinic Information",
							"name": "ND_E_SelectClinicInfo",
							"width": 450,
							"margin" : "5 0 10 0",
							"store" : "ClinicInfo",
							"displayField": "Label",
							"valueField": "ID"
						}, 

						{
							"xtype": "ClinicInfoDisplay"
						},
************/
						{
							"xtype": "CheckCombo",
							// "noDataText" : "",
							"value" : "",
							"fieldLabel": "Select Discharge Instructions",
							"name": "ND_E_SelectDischargeInstr",
							"width": 450,
							"margin" : "5 0 10 0",
							"store" : "DischargeInstruction",
							"displayField": "Label",
							"valueField": "ID"
						}, 
						{
							"xtype": "SpclInstrDisplay"
						},

						{ "xtype" : "box", "name" : "MedSpecificInfoHeader", "html" : "Medication Specific Information:", "style": {"textAlign" : "right"}, "width": 200, "componentCls": "NursingDocs-label" },
						{ "xtype" : "MedSpecificInfoDisplay" },
						{
							"xtype" : "container",
							"layout" : "fit",
							"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
							"items" : [{
								"xtype": "textarea",
								"grow": true,
								"fieldLabel": "Comments",
								"name": "DischargeInstructions_Comments"
							}]
						}
					]
				}
			]
		},

		{
			"xtype": "fieldset",
			"title": "Patient/Caregiver Response",
			"defaultType": "checkbox",
			"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
			"items": [{
				"fieldLabel": "Verbalizes understanding"
			}, {
				"fieldLabel": "Demonstrates accurately"
			}, {
				"xtype": "CkBoxTArea",
				"name": "PResponse_NeedsMoreInstrution",
				"fieldLabel": "Needs additional instruction/practice",
				"labelWidth": 200,
				"defaults": {
					"labelWidth": 200,
					"labelClsExtra": "NursingDocs-label"
				}
			}, {
				"xtype": "CkBoxTArea",
				"name": "PResponse_NeedsAssistance",
				"fieldLabel": "Needs assistance",
				"defaults": {
					"labelWidth": 200,
					"labelClsExtra": "NursingDocs-label"
				}
			}, {
				"xtype": "CkBoxTArea",
				"name": "PResponse_Unable2Learn",
				"fieldLabel": "Unable to learn",
				"defaults": {
					"labelWidth": 200,
					"labelClsExtra": "NursingDocs-label"
				}
			}, {
				"xtype": "CkBoxTArea",
				"name": "PResponse_NoParticipate",
				"fieldLabel": "Does not participate",
				"defaults": {
					"labelWidth": 200,
					"labelClsExtra": "NursingDocs-label"
				}
			}]
		}, {
			"xtype" : "container",
			"layout" : "fit",
			"defaults": {"labelAlign": "right","labelWidth": 200,"labelClsExtra": "NursingDocs-label"},
			"items" : [{
				"xtype": "textarea",
				"grow": true,
				"fieldLabel": "Additional Comments",
				"name": "PE_AdditionalComments"
			}]
		}
	]
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.PreTreatment" ,{
	extend: "Ext.panel.Panel",
	alias : "widget.NursingDocs_PreTreatment",
	name : "Nursing Documentation Pre Treatment Tab",
	title: "IV Site",

	items : [
		{ xtype : "fieldset",
			padding : "10",
			defaultType : "fieldset",
			defaults : { labelClsExtra : "NursingDocs-label" },
			items : [
				{ 
					title : "<abbr title=\"Intravenous\">IV</abbr> Access",
					name : "ND_PT_IVAccess",
					defaults : { labelAlign : "right", labelWidth: 95, labelClsExtra : "NursingDocs-label" },
					items : [
						{ xtype : "datefield", fieldLabel : "Date Accessed", width: 200, name: "ND_PT_IVA_Date" },

						// MWB - 28 Feb 2012 - Currently this is static data but will eventually be replaced by a SQL Based Store
						{ xtype : "combo",
							fieldLabel : "Device",
							name : "ND_PT_IVA_Device",
							width : 180,
							store : { fields : [ "name", "value" ], data : [
							{name : "Peripheral IV", value : 1},
							{name : "Port", value : 2},
							{name : "PICC", value : 4},
							{name : "Central Catheter", value : 5}
						] }, displayField : "name", valueField : "value" },

						// MWB - 28 Feb 2012 - Currently this is static data but will eventually be replaced by a SQL Based Store
						{ xtype : "combo",
							fieldLabel : "Gauge",
							name : "ND_PT_IVA_Gauge",
							width : 210,
							store : { fields : [ "name", "value" ], data : [
							{name : "18g", value : 1},
							{name : "18g Non-Coring", value : 2},
							{name : "20g", value : 3},
							{name : "20g Non-Coring", value : 4},
							{name : "22g", value : 5},
							{name : "22g Non-Coring", value : 6},
							{name : "24g", value : 7},
							{name : "24g Non-Coring", value : 8}
						] }, displayField : "name", valueField : "value" },

						// MWB - 28 Feb 2012 - Currently this is static data but will eventually be replaced by a SQL Based Store
						{ xtype : "combo",
							fieldLabel : "Location",
							name : "ND_PT_IVA_Location",
							width : 310,
							store : {fields : [ "name", "value" ], data : [
							{name : "Left Ventral Proximal Forearm", value : 1},
							{name : "Right Ventral Proximal Forearm", value : 2},
							{name : "Left Ventral Distal Forearm", value : 3},
							{name : "Right Ventral Distal Forearm", value : 4},
							{name : "Left Dorsal Proximal Forearm", value : 5},
							{name : "Right Dorsal Proximal Forearm", value : 6},
							{name : "Left Dorsal Distal Forearm", value : 7},
							{name : "Right Dorsal Distal Forearm", value : 8},
							{name : "Left Dorsum of hand", value : 9},
							{name : "Right Dorsum of hand", value : 10},
							{name : "Left side of Chest", value : 11},
							{name : "Right side of Chest", value : 12}
							] }, displayField : "name", valueField : "value" },
						{ xtype : "combo",
							fieldLabel : "Delivery Mechanism",
							name : "ND_PT_IVA_DeliveryMechanism",
							width : 310,
							store : "DeliveryMechanism",
                        labelClsExtra : "NursingDocs-label",
                        valueField: 'name',
                        displayField: 'name',
                        triggerAction: 'all',
                        editable: false

                        }
					]
				},

				{ 
					title : "Site Appearance",
					name : "ND_PT_SiteAppearance",
					defaults : { labelAlign : "right", labelWidth: 60, labelClsExtra : "NursingDocs-label" },
					items : [ {
						xtype : "container",
						margin: "0 0 0 100", 
						layout : "hbox",
						defaultType: "checkboxfield",
						defaults : { margin : "5 10 5 0", labelAlign : "right", labelWidth: 60, labelClsExtra : "NursingDocs-label" },
						items : [
							{ boxLabel : "Absence of symptoms", name : "ND_PT_SA_Absence", id : "ckSymptomAbsence" },
							{ boxLabel : "Pain", name : "ND_PT_SA_Pain" },
							{ boxLabel : "Swelling", name : "ND_PT_SA_Swelling" },
							{ boxLabel : "Erythema", name : "ND_PT_SA_Redness" },
							{ boxLabel : "Line Disconnected/Port De Accessed", name : "ND_PT_SA_Removed" }
						]
					},
					{ xtype : "textarea", grow : true, labelWidth: 95, fieldLabel : "Comments", name : "ND_PT_SA_Comments", width: 850 }
					]
				},

				{ 
					title : "Brisk blood return verified",
					name : "ND_PT_BloodReturn",
					defaultType : "fieldcontainer",
					defaults : { labelAlign: "right", labelWidth : 120, labelClsExtra : "NursingDocs-label"  },
					items : [ 
						{ 
							fieldLabel : "Pre treatment",  defaultType : "radiofield", layout : "hbox",
							defaults : { labelAlign: "right", labelWidth : 30, width : 50 },
							items : [ { name : "ND_PT_BR_PreTreatment", fieldLabel : "Yes"},  { name : "ND_PT_BR_PreTreatment", fieldLabel : "No"}  ]
						},
						{ 
							fieldLabel : "During treatment",  defaultType : "radiofield", layout : "hbox",
							defaults : { labelAlign: "right", labelWidth : 30, width : 50 },
							items : [ { name : "ND_PT_BR_Treatment", fieldLabel : "Yes"},  { name : "ND_PT_BR_Treatment", fieldLabel : "No"}  ]
						},
						{ 
							fieldLabel : "Post treatment",  defaultType : "radiofield", layout : "hbox",
							defaults : { labelAlign: "right", labelWidth : 30, width : 50 },
							items : [ { name : "ND_PT_BR_PostTreatment", fieldLabel : "Yes"},  { name : "ND_PT_BR_PostTreatment", fieldLabel : "No"}  ]
						},
						{ xtype : "textarea", grow : true, labelWidth: 95, labelAlign: "right", fieldLabel : "Comments", name : "ND_PT_BR_Comments", width: 850 }
					]
				},

				{ xtype : "textarea", grow : true, labelWidth: 95, labelAlign: "right", fieldLabel : "Comments", name : "ND_PT_SA_Comments", width: 850 },
				{ xtype : "container", layout : "hbox", defaults : {margin: "5 0 0 20"}, items : [ { xtype : "button", text : "Save", action : "save" }, { xtype : "button", text : "Cancel"  } ]}
			]
		}
	]
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.RASection" ,{
	extend: "Ext.form.RadioGroup",
	alias : "widget.NursingDocs_RASection",
	columns : 2,
	labelClsExtra : "NursingDocs-label", 
	labelAlign: "right",
	labelWidth: 150,
	width: 300,
	defaults : {
		labelAlign: "right",
		labelWidth : 30,
		width : 50
	}
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.RAFieldset" ,{
	extend: "Ext.form.FieldSet",
	alias : "widget.NursingDocs_RAFieldset",
	collapsible : true,
	collapsed : true,
	defaultType : "NursingDocs_RASection"
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.RATextarea" ,{
	extend: "Ext.form.field.TextArea",
	alias : "widget.NursingDocs_RATextarea",
	labelAlign: "top", 
	labelWidth: 95, 
	width: 850, 
	height: 70, 
	grow : true,
	hidden : true,
	labelClsExtra : "NursingDocs-label"
});









Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.React_Assess" ,{
	extend: "Ext.form.Panel",
	alias : "widget.NursingDocs_React_Assess",
	name : "Nursing Documentation Reaction/Assess Tab",
	title: "Infusion Reactions",
	items : [
		//------------------------------------------------------------------------------------
		//
		//	Extravasation
		//
		{
			xtype : "NursingDocs_RAFieldset", collapsed : false,
			title : "Extravasation",
			items : [
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Heat",
					boxLabel : " Topical heating applied"
				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_Xtrav_HeatFreq",
					fieldLabel : "Frequency"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Cool",
					boxLabel : " Topical cooling applied"

				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_Xtrav_CoolFreq",
					fieldLabel : "Frequency"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Interventions",
					boxLabel : " Interventions"
				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_Xtrav_InterventionsGiven",
					fieldLabel : "Enter Interventions given"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Antidotes",
					boxLabel : " Antidotes"
				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_Xtrav_AntidotesGiven",
					fieldLabel : "Enter Antidotes given"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Measurements",
					boxLabel : " Measurements", labelAlign: "top"
				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_Xtrav_MeasurementsDetails",
					fieldLabel : "Enter Bi-Dimensional Measurements"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Edema",
					boxLabel : " Edema"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Erythema",
					boxLabel : " Erythema"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Discomfort",
					boxLabel : " Discomfort with movement"
				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_Xtrav_DiscomfortDetails",
					fieldLabel : "Enter Range of motion and describe discomfort felt"					
				},

				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_Xtrav_Other",
					boxLabel : " Other"
				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_Xtrav_OtherDetails",
					fieldLabel : "Enter description"					
				}
			]
		},





		//------------------------------------------------------------------------------------
		//
		//	Cytokine-Release Syndrome
		//

		{
			xtype : "NursingDocs_RAFieldset", collapsed : false,
			title : "Cytokine-Release Syndrome",
			items : [
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Fever",
					boxLabel : " Fever", xxwidth: 100
				},
				{ 
					xtype : "textfield", labelAlign: "right", labelClsExtra : "NursingDocs-label", hidden : true,
					name : "ND_RA_CRS_Temperature",
					fieldLabel : " - Temperature", xxlabelWidth: 110
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Chills", 
					boxLabel : " Chills"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Rigors", 
					boxLabel : " Rigors"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Nausea", 
					boxLabel : " Nausea"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Hypotension", 
					boxLabel : " Hypotension", XXwidth: 100
				},

				{ xtype : "fieldcontainer", name: "ND_RA_CRS_HypotensionBP", hidden : true,
					fieldLabel : " - Blood Pressure", labelWidth: 130, 
					labelClsExtra : "NursingDocs-label",  defaults: { hideLabel : true }, layout : "hbox", items : [
					{ xtype : "textfield", name : "ND_RA_CRS_Systolic", width: 60 },
					{ xtype : "displayfield", value : " / " },
					{ xtype : "textfield", name : "ND_RA_CRS_Diastolic", width: 60 },
					{ xtype : "displayfield", value : " (Lowest value)" }
				]},

				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Tachycardia", 
					boxLabel : " Tachycardia", xxwidth: 100
				},

				{ xtype : "fieldcontainer", name: "ND_RA_CRS_TachycardiaPulse", hidden : true,
					fieldLabel : " - Pulse", labelWidth: 110, 
					labelClsExtra : "NursingDocs-label",  defaults: { hideLabel : true }, layout : "hbox", items : [
					{ xtype : "textfield", name : "ND_RA_CRS_Pulse", width: 150 },
					{ xtype : "displayfield", value : " (Highest value)" }
				]},

				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Asthenia", 
					boxLabel : " Asthenia"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Headache", 
					boxLabel : " Headache"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Rash", 
					boxLabel : " Rash", xxwidth: 100
				},
				{ 
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_CRS_RashDesc", 
					fieldLabel : "Enter description"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_TongueEdema", 
					boxLabel : " Tongue and Laryngeal Edema"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CRS_Dyspnea", 
					boxLabel : " Dyspnea"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_CRS_Other",
					boxLabel : " Other"
				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_CRS_OtherDetails",
					fieldLabel : "Enter description"
				}
			]
		},

		//------------------------------------------------------------------------------------
		//
		//	Hypersensitivity or Anaphylaxis
		//

		{
			xtype : "NursingDocs_RAFieldset", collapsed : false,
			title : "Hypersensitivity or Anaphylaxis",
			items : [
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Uneasiness", 
					boxLabel : " Uneasiness or Agitation"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_ChestTightness", 
					boxLabel : " Chest Tightness"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Hypotension", 
					boxLabel : " Hypotension"
				},

				{ xtype : "fieldcontainer", name: "ND_RA_HorA_HypotensionBP", hidden : true,
					fieldLabel : " - Blood Pressure", labelWidth: 130, 
					labelClsExtra : "NursingDocs-label",  defaults: { hideLabel : true }, layout : "hbox", items : [
					{ xtype : "textfield", name : "ND_RA_HorA_Systolic", width: 60 },
					{ xtype : "displayfield", value : " / " },
					{ xtype : "textfield", name : "ND_RA_HorA_Diastolic", width: 60 },
					{ xtype : "displayfield", value : " (Lowest value)" }
				]},

				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Dyspnea", 
					boxLabel : " Dyspnea"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Wheezing", 
					boxLabel : " Wheezing"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Urticaria", 
					boxLabel : " Urticaria"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_PeriorbitalEdema", 
					boxLabel : " Periorbital or facial edema"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Abdominal", 
					boxLabel : " Abdominal"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Cramping", 
					boxLabel : " Cramping"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Diarrhea", 
					boxLabel : " Diarrhea"
				},
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_HorA_Nausea", 
					boxLabel : " Nausea"
				},
				// -----------------------------------------------------
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name: "ND_RA_HorA_Other",
					boxLabel : " Other"
				},
				{
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_HorA_OtherDetails",
					fieldLabel : "Enter description"					
				}
			]
		},

		//------------------------------------------------------------------------------------
		//
		//	Chemotherapy Reaction
		//
		{ 
			xtype : "NursingDocs_RAFieldset", collapsed : false,
			title : "Other",
			name : "ND_RA_ChemoReaction",
			items : [ 
				{
					xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-label", inputValue : true,
					name : "ND_RA_CR_Reaction", 
					boxLabel : " Other"
				},
				{ 
					xtype : "NursingDocs_RATextarea",
					name : "ND_RA_CR_Comments",
					fieldLabel : "Comments", xxlabelWidth: 110
				}
			]
		},



		{ xtype : "checkbox", boxLabelCls : "x-form-cb-label NursingDocs-boxLabel", inputValue : true, name : "ND_InfusReact_None", boxLabel : "No Adverse Reaction" },
		{ xtype : "container", layout : "hbox", defaults : {margin: "5 0 0 20"}, items : [ { xtype : "button", text : "Save", action : "save" }, { xtype : "button", text : "Cancel"  } ]}
	]
});



Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.Treatment_Meds", {
    extend: "Ext.grid.Panel",
    alias : "widget.NursingDocs_Treatment_Meds",
    store : "ND_Treatment",
    autoScroll : true,
    columnLines : true,
    sortableColumns : false,
    enableColumnHide : false,
    enableColumnMove : false,
    features: [{ftype:'grouping'}],
    viewConfig:{ markDirty: false },
    selType: "cellmodel",
    plugins: [ Ext.ND_cellEditing ],
	columns : [
		{ header : "", dataIndex : "typeOrder", hidden : true, renderer: Ext.ND_TreatmentTypeOrderRenderer },
		{ header : "Medication", dataIndex : "drug", width : 120 },
		{ header : "Dose", dataIndex : "dose", width : 50, editor: { allowBlank: false } },
		{ header : "Units", dataIndex : "unit", width : 70},
		{ header : "Route", dataIndex : "route", width : 50},
		{ header : "Start Time", dataIndex : "StartTime", renderer : Ext.ND_TreatmentTimeRenderer, 
			editor : new Ext.form.field.Time({
				increment : 1, 
				snapToIncrement : true, 
				format : "h:i A",
				id : "startTimeEditor"
			})
		},
		{ header : "End Time", dataIndex : "EndTime", renderer : Ext.ND_TreatmentTimeRenderer, 
			editor : new Ext.form.field.Time({
				increment : 1, 
				snapToIncrement : true, 
				format : "h:i A",
				id : "endTimeEditor"
			})
		},
		{ header : "Comments", dataIndex : "Comments", width : 250, 
			renderer : Ext.ND_CommentRenderer, 
			editor : { xtype : "textfield" } 
		},
		{ header : "Signature", dataIndex : "Treatment_User", width : 200, renderer : Ext.ND_TreatmentSignature },
		{ header : "", width : 40, xtype: 'actioncolumn', hideable: false, 
			handler: function (grid, rowIndex, colIndex, node, e, record, rowNode) {
				var AmmendTreatment = Ext.widget("puWinTreatmentAmmend", { record : record, scope : this });
			},
			getClass: function(v, meta, rec, row, col, store) {
				if ("Administered" === rec.get("orderstatus")) {
					this.items[0].tooltip = "Make addendum";
					return "EditCell";
				}
				this.items[0].tooltip = "";
				return "";
			}
		}
	]
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.Treatment" ,{
    extend: "Ext.panel.Panel",
    alias : "widget.NursingDocs_Treatment",
    name : "Nursing Documentation Treatment Tab",
    title: "Administration",
    items : [
        { xtype : "fieldset",
            padding : "10",
            defaultType : "fieldset",
            items : [
                {
                    title : "Medication Given",
                    name : "ND_T_Meds",
                    defaults : { margin : "5 0 30 0" },
                    items : [
						{ xtype : "box", html : "Items marked with a <em class=\"required-field\">*</em> have an addendum", margin : "0", style : { "textAlign" : "center", "fontWeight" : "bold" }},
						{ xtype : "NursingDocs_Treatment_Meds", title : "Treatment Administered", name : "AdministeredMedsGrid" }
                    ]
                },
                { xtype : "button", text : "Administration Complete", hidden : true }
            ]
        }
    ]
});


Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.VitalSignsEntryForm", {
	extend: "Ext.form.Panel",
    alias: "widget.VitalSignsEntryForm",
    name: "NursingDocs.VitalSignsEntryForm",
    cls : "VitalSignsEntryForm",
		height : 100,
		border: false,

    layout: {
        type: "table",
        tableAttrs: {
            border: 1
        },
        columns: 4
    },
    defaults: {
        labelAlign: "right",
        labelWidth: 60,
        cellCls : "InformationTable"
    },
    items: [
        // Row 1 - Col 1
        {
            xtype: "container",
            layout: "hbox",
            defaults: {
                labelAlign: "right"
            },
            width: 370,
            margin: "3 0 0 0",
            items: [{
                    xtype: "textfield",
                    maskRe: /[0-9\.]/,
                    name: "ndVitalsTempF",
                    fieldLabel: "Temp.",
                    labelWidth: 60,
                    width: 100,
                    labelClsExtra: "NursingDocs-label"
                }, {
                    xtype: "container",
                    html: "&deg;F",
                    margin: "4 5 0 4"
                }, {
                    xtype: "displayfield",
                    name: "ndVitalsTempC",
                    labelSeparator: "",
                    value: "",
                    labelWidth: 5,
                    width: 60
                },
                {
                    xtype: 'combo',
                    width: 170,
                    name: "ndVitalsTempLoc",
                    fieldLabel: "Taken",
                    labelWidth: 45,
                    margin: "0 0 0 5",
                    labelClsExtra: "NursingDocs-label",
                    store: "TemperatureLocation",
                    valueField: 'name',
                    displayField: 'name',
                    triggerAction: 'all',
                    editable: false
                }
            ]
        },
        // Row 1 - Col 2
        {
            xtype: "textfield",
            maskRe: /[0-9]/,
            name: "ndVitalsPulse",
            fieldLabel: "Pulse",
            labelWidth: 50,
            width: 90,
            margin: "0 10 0 0",
            labelClsExtra: "NursingDocs-label"
        },

        // Row 1 - Col 3
        {
            xtype: "fieldcontainer",
            name: "ndVitalsBP",
            width: 170,
            margin: "5 0 0 0",
            fieldLabel: "<abbr title=\"Blood Pressure\">BP</abbr>",
            labelWidth: 50,
            labelClsExtra: "NursingDocs-label",
            defaults: {
                hideLabel: true
            },
            layout: "hbox",
            items: [{
                xtype: "textfield",
                maskRe: /[0-9]/,
                name: "ndVitalsSystolic",
                width: 30
            }, {
                xtype: "displayfield",
                value: " / "
            }, {
                xtype: "textfield",
                maskRe: /[0-9]/,
                name: "ndVitalsDiastolic",
                width: 30
            }]
        },

        // Row 1 - Col 4
        {
            xtype: "displayfield",
            name: "ndVitalsGender",
            fieldLabel: "Patient Gender",
            labelWidth: 110,
            labelClsExtra: "NursingDocs-label",
            labelAlign: "right",
            width: 160,
            margin: "0 10 4 0"
        },
        // Row 2 ----------------------------------------------------------------------------------
        {
            xtype: "container",
            layout: "hbox",
            defaults: {
                labelAlign: "right"
            },
            // width : 280,
            margin: "3 0 0 0",
            items: [{
                xtype: "textfield",
                maskRe: /[0-9\.]/,
                name: "ndVitalsHeightIN",
                fieldLabel: "Height",
                labelWidth: 60,
                width: 105,
                labelClsExtra: "NursingDocs-label"
            }, {
                    xtype: "container",
                    html: "inches",
                    margin: "4 5 0 4"
                }, {
                xtype: "displayfield",
                name: "ndVitalsHeightCM",
                labelSeparator: "",
                value: "",
                width: 90
            }]
        }, {
            xtype: "textfield",
            maskRe: /[0-9]/,
            name: "ndVitalsResp",
            fieldLabel: "<abbr title=\"Respiration - in Breaths per minute\">Resp</abbr>",
            labelWidth: 50,
            width: 90,
            margin: "0 10 0 0",
            labelClsExtra: "NursingDocs-label"
        }, {
            xtype: "numberfield",
            name: "ndVitalsO2Level",
            fieldLabel: "<abbr title=\"Saturation of Peripheral Oxygen\">SP O<sub>2</sub>%</abbr>",
            labelWidth: 60,
            width: 100,
            hideTrigger: true,
            margin: "0 10 0 0",
            minValue: 0,
            maxValue: 100,
            labelClsExtra: "NursingDocs-label"
        }, {
            xtype: "displayfield",
            name: "ndVitalsAge",
            fieldLabel: "Age",
            labelWidth: 50,
            width: 90,
            margin: "0 10 0 0",
            labelClsExtra: "NursingDocs-label"
        },

        // Row 3 ----------------------------------------------------------------------------------
        {
            xtype: "container",
            layout: "hbox",
            defaults: {
                labelAlign: "right"
            },
            // width : 280,
            margin: "3 0 0 0",
            items: [{
                xtype: "textfield",
                maskRe: /[0-9\.]/,
                name: "ndVitalsWeightP",
                fieldLabel: "Weight",
                labelWidth: 60,
                width: 105,
                labelClsExtra: "NursingDocs-label"
            }, 
                {
                    xtype: "container",
                    html: "lbs",
                    margin: "4 5 0 4"
                },
            {
                xtype: "displayfield",
                name: "ndVitalsWeightKG",
                labelSeparator: "",
                value: "",
                width: 90
            }]
        }, {
            xtype: "numberfield",
            maxValue: 10,
            minValue: 0,
            name: "ndVitalsPain",
            fieldLabel: "Pain",
            labelWidth: 50,
            width: 100,
            margin: "0 50 0 0",
            hideTrigger: true,
            labelClsExtra: "NursingDocs-label"
        }, {
            xtype: "container",
            layout: "hbox",
            colspan: 2,
            defaults: {
                labelAlign: "right"
            },
            items: [
				{
					xtype: "displayfield",
					name: "ndVitalsBSA",
					fieldLabel: "<abbr title=\"Body Surface Area\">BSA</abbr>",
					labelWidth: 60,
					width: 105,
					margin: "0 5 0 0",
					labelClsExtra: "NursingDocs-label"
				}, 
				{ "xtype" : "button", "baseCls" : "anchor", "name" : "AddVitals_PatientInfoPanel", "text" : "Calculations" }
			]
		}
	]
});

Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.puWinViewInfusionReactions", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.puWinViewInfusionReactions",
	"title" : "Infusion Reactions",
	"closeAction" : "destroy",
	"width" : 820,
	"height" : 220,
	"minHeight" : 220,
	"autoShow" : true,
	"resizable" : true,
	"modal" : true,
	"items" : [ { "xtype" : "selInfusionReaction" } ]
});



Ext.define("COMS.view.NewPlan.CTOS.NursingDocs.selDischargeInstructions" ,{
	"extend" : "Ext.form.field.ComboBox",
	"alias" : "widget.selDischargeInstructions",
	"labelWidth" : 350,
	"labelAlign" : "right",
	"width" : 450,
	"labelClsExtra" : "NursingDocs-label", 
	"margin" : "0 10 5 10",
	"emptyText" : "Select Date",
	"displayField" : "date",
	"valueField" : "DischargeID",
	"fieldLabel" : "Select Date of Discharge Instructions to view",
	"store" : Ext.create("Ext.data.Store", {
		"fields" : ["date", "DischargeID", "PatientID"],
		"proxy" : {
			"type" : 'rest',
			"url" : Ext.URLs.PatientDischarge,
			"reader" : {
				"type" : 'json',
				"root" : 'records'
			}
		}
	})
});



/*globals Ext */
// Note: Controller for this widget is the "NewPlan.OEM" controller ("app\controller\NewPlan\OEM.js")
// Check out the "handleGoal_CTrial()" function which is attached via the "displayOEM_Record_Data()" function

Ext.define("COMS.view.NewPlan.CTOS.OEMClinicalTrial", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.OEMClinicalTrial",

	"title" : "Regimen Clinical Trial",
	"layout" : "fit",
	"autoShow" : true,
	"width" : 250,

	"items" : [
		{
			"xtype" : "form",
			"items" : [
				{ "xtype" : "container", "margin" : "10 10 0 10", "html" : "<strong>Specify the type of Clinical Trial</string>" },

				{
					"xtype" : "fieldcontainer",
					"defaults" : {
						"labelAlign" : "right",
						"margin" : "0 15"
					},
					"layout" : "hbox",
					"defaultType" : "radiofield",
					"items": [
						{
							"boxLabel" : "Yes",
							"name" : "trial",
							"inputValue" : true
						},
						{
							"boxLabel" : "No",
							"name" : "trial",
							"inputValue" : false
						}
					]
				},
				{ "xtype" : "textfield", "fieldLabel" : "Type of Trial" },
				{ "xtype" : "button", "text" : "Save", "action" : "save", "margin" : "10 30"  },
				{ "xtype" : "button", "text" : "Cancel", "margin" : "10 0"  }
			]
		}
	]
});


// Note: Controller for this widget is the "NewPlan.OEM" controller ("app\controller\NewPlan\OEM.js")
// Check out the "handleGoal_CTrial()" function which is attached via the "displayOEM_Record_Data()" function
Ext.define("COMS.view.NewPlan.CTOS.OEMGoal", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.OEMGoal",

	"title" : "Regimen Goal",
	"layout" : "fit",
	"autoShow" : true,
	"width" : 250,
	"url" : Ext.URLs.Edit_OEMRecord,

	"items" : [
		{
			"xtype" : "form",
			"items" : [
				{ "xtype" : "container", "margin" : "10 10 0 10", "html" : "<strong>Select the goal for this Regimen</strong>" },

				{
					"xtype" : "fieldcontainer",
					"defaults" : {
						"labelAlign" : "right", 
						"margin" : "0 15"
					},
					"defaultType" : "radiofield",
					"items": [
						{
							"boxLabel" : "Curative",
							"name" : "goal",
							"inputValue" : "Curative"
						},
						{
							"boxLabel" : "Palliative",
							"name" : "goal",
							"inputValue" : "Palliative"
						}
					]
				},
				{ "xtype" : "button", "text" : "Save", "action" : "save", "margin" : "10 30"  },
				{ "xtype" : "button", "text" : "Cancel", "margin" : "10 0"  }
			]
		}
	]
});

// Note: Controller for this widget is the "NewPlan.OEM" controller ("app\controller\NewPlan\OEM.js")
Ext.define("COMS.view.NewPlan.CTOS.OEMPerformanceStatus", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.OEMPerformanceStatus",

	"title" : "Regimen Performance Status",
	"layout" : "fit",
	"autoShow" : true,
	"width" : 400,

	initComponent : function() {
		this.items = [ {
			"xtype" : "form",
			"items" : [
				{
					xtype: 'radiogroup',
					name: 'perfStatusRadio',
					labelAlign: 'top',
					fieldLabel: 'Select the Performance Status',
					id: 'performanceRadios',
					margin: '5 5 25 5',
					columns: 1,
					items: this.itemsInGroup
				}
			]
		}];
		this.buttons = [
			{ text: 'Save', action: 'save' },
			{ text: 'Cancel', scope: this, handler: this.close }
		];

		this.callParent(arguments);
	}


});

Ext.define("COMS.view.NewPlan.CTOS.FluidVol" ,{
	extend: "Ext.form.field.Text",
	alias : "widget.FluidVol",
	"fieldLabel": "Fluid Volume <em class=\"required-field\">*</em>",
	"maskRe" : /[0-9\.]/,
	"labelWidth": 95,
	"width": 210,
	"allowBlank": false
});

Ext.define("COMS.view.NewPlan.CTOS.FlowRate" ,{
	extend: "Ext.form.field.Text",
	alias : "widget.FlowRate",
	fieldLabel : "Flow Rate",
	width : 140,
	labelWidth : 70
});

Ext.define("COMS.view.NewPlan.CTOS.AdminDay" ,{
	extend: "Ext.form.field.Text",
	alias : "widget.AdminDay",
	"fieldLabel": "Administration Day(s) <em class=\"required-field\">*</em>",
	"maskRe" : /^[-,0-9 ]+$/,
	"width": 250,
	"labelWidth": 140,
	"allowBlank": false
});

Ext.define("COMS.view.NewPlan.CTOS.DossageAmt" ,{
	extend: "Ext.form.field.Text",
	alias : "widget.DossageAmt",
	maskRe  :	/[0-9\.]/,
	fieldLabel : "Dosage Amount <em class=\"required-field\">*</em>",
	width : 200,
	labelWidth : 115
});

Ext.define("COMS.view.NewPlan.CTOS.AdminTime" ,{
	extend: "Ext.form.field.Time",
	alias : "widget.AdminTime",
    "fieldLabel": "Administration Time",
	"width": 290,
	"labelWidth": 130
});


Ext.define("COMS.view.NewPlan.CTOS.SelectFluidType" ,{
	extend : "Ext.form.field.ComboBox",
	alias : "widget.SelectFluidType",
	"fieldLabel": "Select Fluid Type <em class=\"required-field\">*</em>",
	"labelWidth": 115,
	"width": 200,
	"store" : "FluidType",
	"displayField": "name",
	"valueField": "id"
});


Ext.define("COMS.view.NewPlan.CTOS.SelectDrug" ,{
	extend : "Ext.form.field.ComboBox",
	alias : "widget.SelectDrug",
	"fieldLabel": "Select Drug <em class=\"required-field\">*</em>",
	"labelWidth": 115,
	"width": 300,
	"store": "DrugStore",
	"allowBlank": false,
	"displayField": "name",
	"valueField": "id"
});

Ext.define("COMS.view.NewPlan.CTOS.DrugUnits" ,{
	extend : "Ext.form.field.ComboBox",
	alias : "widget.DrugUnits",
	"fieldLabel": "Units <em class=\"required-field\">*</em>",
	"labelWidth": 95,
	"width": 210,
	"store": "DrugUnitsStore",
	"displayField" : "name",
	"valueField" : "name"
});

Ext.define("COMS.view.NewPlan.CTOS.InfusionMethod" ,{
	extend : "Ext.form.field.ComboBox",
	alias : "widget.InfusionMethod",

	"fieldLabel": "Route <em class=\"required-field\">*</em>",
	"width": 140,
	"labelWidth": 70,
	"store": "InfusionStore",
	"displayField": "name",
	"valueField": "name"
});

Ext.define("COMS.view.NewPlan.CTOS.SelectReason" ,{
	extend : "Ext.form.field.ComboBox",
	alias : "widget.SelectReason",
	fieldLabel: "Select Reason <em class=\"required-field\">*</em>",
	labelWidth: 115,
	width: 300,
	store: "ReasonStore",
	allowBlank: false,
	displayField: "value",
	valueField: "id"
});



Ext.define("COMS.view.NewPlan.CTOS.OEM_Edit" ,{
	extend: "Ext.window.Window",
	alias : "widget.EditOEMRecord",

	title: "Edit Drug Record",
	layout: "fit",
	autoShow: true,
	width: 900,
	modal: true,

	items : [
		{
			"xtype": "form",
			"items": [
				{"xtype": "RequiredInstr"},

				{
					"xtype": "container",
					defaults: {
						labelAlign: "right",
						margin: "0"
					},
					"items": [
						// Row 1 - Drug
						{
							xtype: 'container',
							layout: 'hbox',
							defaults: {
								labelAlign: 'right',
								margin: '0 0 5 0'
							},
							items: [
								{ xtype: "container",  width: 20, "html": "<span style=\"font-weight: bold;\">&nbsp;&nbsp;&nbsp;</span>" },
								{ xtype: "SelectDrug", "name": "Med", colspan : 2, margin: "2 2 2 2" },
								{ xtype: "SelectReason", name:"Reason", colspan: 2, margin: "2"}
							]
						},

						// Row 2 - Dosing
						{
							xtype: 'container',
							layout: 'hbox',
							defaults: {
								labelAlign: 'right',
								margin: '0 0 5 0'
							},
							items: [
								{ xtype: "container",  width: 20, "html": "<span style=\"font-weight: bold;\">&nbsp;&nbsp;&nbsp;</span>" },
								{ xtype: "DossageAmt", name : "Dose", margin: "2 2 2 2" },
								{ xtype: "DrugUnits", name : "Units", margin: "2 2 2 2" },
								{ xtype: "InfusionMethod", name : "InfusionMethod",  colspan : 2, margin: "2 2 2 2" }
							]
						},

						// Row 3 - Fliud Info - "FluidInfoSpacer", "FluidType", "FluidInfoVol", "FluidInfoRate", "InfusionTime"
						{
							xtype: 'container',
							layout: 'hbox',
							name: 'fluidInfo',
							hidden: true,
							defaults: {
								labelAlign: 'right',
								margin: '0 0 5 0'
							},
							items: [
								{ xtype: "container",  width: 30, html: "<span style=\"font-weight: bold;\">&nbsp;&nbsp;&nbsp;</span>", name : "FluidInfoSpacer" },
								{ xtype: "SelectFluidType", name : "FluidType", margin: "2 2 2 2" },
								{ xtype: "container", layout : "hbox", width :270, margin: "2 0 0 0", "defaults": { labelAlign: "right" }, items : [
									{ xtype: "FluidVol", name : "FluidVol", margin: "0 0 2 1" },
									{ xtype: "container", width: 20, html : "ml", margin: "3 0 2 2"}
								], name : "FluidInfoVol" },
								{ xtype: "container", layout : "hbox", width :180, margin: "2 0 0 0", "defaults": { labelAlign: "right" }, items : [
									{ xtype: "FlowRate", name : "FlowRate", margin: "0 0 2 1" },
									{ xtype: "container", html : "ml/hr", margin: "3 0 2 2"}
								], name : "FluidInfoRate" },
								{ xtype: "displayfield", fieldLabel: "Infusion Time", name : "InfusionTime", margin: "2 0 0 0", width: 200 }
							]
						},
						{
							xtype : "textfield",
							labelAlign : "right",
							colspan : 5,
							margin : "2 0 0 2",
							labelWidth : 75,
							width : 805,
							fieldLabel : "Instructions",
							name : "Instructions"
						},
						{ xtype: "hiddenfield", colspan: 5, name : "Order_ID" }
					]
				},
				{ xtype : "button", text : "Save", action : "save", margin : "10 30"  },
				{ xtype : "button", text: "Cancel", margin : "10 0"  }
			]
		}
	]
});


Ext.define("COMS.view.NewPlan.CTOS.OtherInfoPanel" ,{
	"extend" : "Ext.panel.Panel",
	"alias" : "widget.OtherInfoPanel",
	"title" : "Additional General Information",
	"name" : "OtherInfoPanel",
	"collapsible" : true, 
	"collapsed" : true, 
	"margin" : "0 0 10 0", 
	"bodyPadding" : "10",
	"autoEl" : { "tag" : "section" },
	"cls" : "Tab", 
	"tpl" : new Ext.XTemplate(
		"<tpl for=\"records\">",
			"<tpl if=\"Other != ''\">",
				"<table border=\"1\" width=\"100%\" class=\"FlowsheetTable\" id=\"OIPanel-{AdminDate}-{xindex}\">",
				"	<thead><tr><th><a name=\"OI_{AdminDate}\" id=\"OI_{AdminDate}\">Other Information for date - {AdminDate}</a></th></tr></thead>",
				"	<tr><td>{[this.formatData(values.Other, xindex)]}</td></tr>",
				// "	<tr><td>{Other}</td></tr>",
				"</table>",
			"</tpl>",
		"</tpl>",
		{
			disableFormats: true,
			formatData : function(data, idx) {
				return Ext.util.Format.htmlDecode(data);
			}
		}
	)
});

Ext.define("COMS.view.NewPlan.CTOS.OtherPUWin", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.OtherPUWin",

	"title" : "Other",
	"layout" : "fit",
	"autoShow" : true,
	"width" : 500,
	"height" : 300,
	"closeAction" : "destroy",
	// "url" : Ext.URLs.Edit_OEMRecord,

	"items" : [
		{
			"xtype" : "form",
			"margin" : "10",
			"autoScroll" : true,
			"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
			"items" : [
				{ "xtype" : "textareafield", "grow" : true, "width" : 430, "height" : 180, "margin" : "10", "name" : "Data", "fieldLabel" : "Comments"}
			],
			"buttons" : [
				{ "xtype" : "button", "text" : "Save",   "margin" : "10 30"},
				{ "xtype" : "button", "text" : "Cancel", "margin" : "10 0"}
			]
		}
	]

});

Ext.define("COMS.view.NewPlan.CTOS.PSummary_Overview", {
//	extend : "Ext.form.FieldSet",
	extend : "Ext.container.Container",
	alias : "widget.PSummary_Overview",
	name : "PSummary_Overview", 
//	autoEl : { tag : "section" },
	
	title : "Chemotherapy Template Summary",
//	collapsible : true,
//	frame : true,
	margin: "10",

	tpl : new Ext.XTemplate(
		"<table border=\"1\" width=\"100%\" class=\"Therapy InformationTable\">",
			"<colgroup width=12%></colgroup>",
			"<colgroup width=15%></colgroup>",
			"<colgroup width=12%></colgroup>",
			"<colgroup width=61%></colgroup>",

		"	<thead><tr><th colspan=\"4\" class=\"large\">Patient Summary Information <span style=\"font-weight: normal;\">- for Patient: {PatientName}</span></th></tr></thead>",

		"	<tr><th align=\"right\">Regimen:</th><td colspan=\"3\">{RegimenName}</td></tr>",
		"	<tr><th align=\"right\">Description</th><td colspan=\"3\">{RegimenDescription}</td></tr>",
		"	<tr><th align=\"right\">Treatment Start:</th><td colspan=\"3\">{TreatmentStart}</td></tr>",
		"	<tr><th align=\"right\">Treatment End:</th><td colspan=\"3\">{TreatmentEnd}</td></tr>",
		"	<tr class=\"MultiLineRow\">",
		"		<th>Neutropenia&nbsp;Risk:</th>",
		"		<td>{FNRisk}%</td>",
		"		<th>Recommendation:</th>",
		"		<td>{NeutropeniaRecommendation} (Note: Need to add recommendations to Lookup Table for FN)</td>",
		"	</tr>",
		"	<tr class=\"MultiLineRow\">",
		"		<th>Emesis Risk:</th>",
		"		<td>{ELevelName}</td>",
		"		<th>Recommendation:</th>",
		"		<td>",
		"			<abbr title=\"American Society of Clinical Oncology\">ASCO</abbr><p>{ELevelRecommendationASCO}</p>",
		"			<abbr title=\"National Comprehensive Cancer Network\">NCCN</abbr><p>{ELevelRecommendationNCCN}</p>",
		"		</td>",
		"	</tr>",

		"	<tr><th>Goal</th><td colspan=\"5\">{[this.goalLink( values )]}</td></tr>",
		"	<tr><th>Clinical Trial</th><td colspan=\"5\">{[this.ctLink( values )]}</td></tr>",
		"	{[this.ctData( values )]}",
		"	<tr><th>Performance&nbsp;Status</th><td colspan=\"5\">{[this.PS( values )]}</td></tr>",
		"</table>",
		{
				// XTemplate Configuration
			disableFormats: true,
			goalLink : function ( current ) {
				if (current.Goal){
					return (current.Goal);
				}
				return ("No Goal Specified");
			},
			ctLink : function ( current ) {
				if (current.ClinicalTrial ) {
					return (current.ClinicalTrial);
				}
				return ("Clinical Trial Not Specified");
			},
			ctData : function ( current ) {
				if (current.ClinicalTrial) {
					return ("<tr><th>Type of Trial</th><td colspan=\"5\">" + current.ClinicalTrialType + "</td></tr>");
				}
				return ("");
			},
			PS : function ( current ) {
				var buf = current.PerformanceStatus;
				return (buf);
			}
		}
	)
});


Ext.define("COMS.view.NewPlan.CTOS.PatientSummary" ,{
	extend: "Ext.panel.Panel",
	alias : "widget.PatientSummary",

	name : "Patient Summary Tab",
	margin : "0 0 20 0",

	autoEl : { tag : "section" },
	title: "Patient Summary",
	items : [
//		{ xtype : "container", name : "heading", margin: "5 0 0 10", tpl : "<h2>Patient Summary for {PatientName}</h2>" },
		{ xtype : "PSummary_Overview" }
/******************
	{ xtype : "container", name : "body",
			html : ["<table>",
//				"<tr><td><b>Patient Summary</b><br><i>This page can contain lab results as well.</i></td></tr>",
//				"<tr><td>&nbsp;</td></tr><tr><td colspan=\"6\"><b>Description:</b></td></tr>",
//				"<tr><td colspan=\"6\">SGleevec 400mg PO q day</td></tr>",
//				"<tr><td colspan=\"6\">Neutropenia Risk: Low: &lt; 17%<br /><b>Recommendation:</b> No Cycle1 preemptive therapy indicated </td></tr>",
//				"<tr><td>&nbsp;</td></tr>",
//				"<tr><td colspan=\"6\"><b>Emesis Risk:</b> Low <br /><b>Recommendation:</b> Routine use of antiemetics is not standard </td></tr>",
//				"<tr><td>&nbsp;</td></tr>",
				"<tr><td colspan=\"6\">C1D1 Instructions: (See Order Sheet For Future Days and   Cycles) </td></tr>",
				"<tr><td colspan=\"6\"><table width=\"600\" border=\"2\"><tr><td>Drug Name</td><td>Drug Dose</td><td>Instructions</td></tr>",
				"<tr><td colspan=\"3\">&nbsp;</td></tr><tr><td>Gleevec (400 mg)</td><td>400 mg</td><td>PO daily; Provide script to patient</td></tr>",
				"</table></td></tr>",
				"<tr><td>&nbsp;</td></tr>",
				"<tr><td colspan=\"6\"><span class=\"style6\">Alerts<br />",
				"<input name=\"alert\" type=\"text\" class=\"style6\" id=\"alert\" value=\"Consider ESA for HB&lt;10, HCt&lt;30 in solid tumors, lymphoma, myeloma and MDS.\" size=\"90\" /> </td></tr>",
				"<tr><td>&nbsp;</td></tr><tr><td colspan=\"6\"><b>Information:</b></td></tr>",
				"<tr><td>&nbsp;</td></tr><tr><td colspan=\"6\">",
				"<p>Understanding of the molecular pathophysiology of chronic myelogenous leukemia (CML) has led to targeted therapies for this ",
				"disease.  Imatinib mesylate (Gleevec) is a potent inhibitor of the BCR-ABL tyrosine kinase which offers 82% complete cytogenetic ",
				"remission and 86% overall survival at 7 years for patients diagnosed in chronic phase1.  Second generation tyrosine kinase ",
				"inhibitors (dasatinib, nilotinib) are effective for imatinib-resistant disease, and are being evaluated for front line therapy2.</p>",
				"<br><p>Although allogeneic hematopoietic-cell transplantation is the only proven curative treatment for CML, the procedure is an ",
				"option in only about 25 percent of patients and carries substantial risks. On the basis of the high early mortality rate associated with bone marrow transplantation and the promising results with Imatinib, early transplantation is not recommended</p><ol><li>  ASH 2009 Annual Meeting, abstract 186.</li><li>  N Engl J Med 2006 354:2531-2541        </li><li>  Mayo Clin Proc 81:973-988, 2006</li></ol></td></tr>",
				"<tr><td colspan=\"6\"></td></tr><tr><td>&nbsp;</td></tr>",
				"<tr><td colspan=\"6\"><b>Reference:</b>    </td></tr>",
				"<tr><td colspan=\"6\">N Eng J Med 2001; 344:1038<br />N Eng J Med 2003; 348:994 <br />N Eng J Med 2006; 355:2408</td></tr>",
				"</table>"
			]
		}
***************/
	],

	initComponent: function() {
		wccConsoleLog("Patient Summary Tab View - Initialization");
		this.callParent(arguments);
	}
});

Ext.define("COMS.view.NewPlan.CTOS.ToxicitySideEffectsPanel" ,{
	"extend" : "Ext.panel.Panel",
	"alias" : "widget.ToxicitySideEffectsPanel",
	"title" : "Toxicity / Side Effects",
	"name" : "ToxicitySideEffectsPanel",
	"collapsible" : true, 
	"collapsed" : true, 
	"margin" : "0 0 10 0", 
	"bodyPadding" : "10",
	"autoEl" : { "tag" : "section" },
	"cls" : "Tab", 
	"tpl" : new Ext.XTemplate(
		"<tpl for=\"records\">",
			"<tpl if=\"ToxicityInstr != ''\">",
				"<table border=\"1\" width=\"100%\" class=\"FlowsheetTable\" id=\"ToxPanel-{AdminDate}-{xindex}\">",
				"	<thead><tr><th><a name=\"Tox_{AdminDate}\" id=\"Tox_{AdminDate}\">Toxicity Information for date - {AdminDate}</a></th></tr></thead>",
				"	<tr><td>{[this.formatData(values.ToxicityInstr)]}</td></tr>",
				"	<tr><td>{[this.formatData(values.ToxicityDetails)]}</td></tr>",
				"	<tr><td>{[this.formatData(values.Toxicity)]}</td></tr>",
				"</table>",
			"</tpl>",
		"</tpl>",
		{
			disableFormats: true,
			formatData : function(data) {
				return Ext.util.Format.htmlDecode(data);
			}
		}
	)
});

Ext.define("COMS.view.NewPlan.ConfirmPatient" ,{
	extend: "Ext.container.Container",
	alias : "widget.ConfirmPatient",
	name : "Confirm Patient Control",

	html: "Click on Patient from <abbr title=\"Computerized Patient Record System\">CPRS</abbr>",
	hidden : true
});

Ext.define('COMS.view.NewPlan.DiagImage' ,{
    extend: 'Ext.panel.Panel',
    alias : 'widget.DiagImage',
	name : 'Patient Diagnostic Imaging History',

	autoEl : { tag : 'section' },
	cls : 'xPandablePanel',

	collapsible : true,
	collapsed : true,
	title : 'Diagnostic Imageing',
	html: '<h2 class=\'Development\'>To Be Developed</h2>'
});


Ext.define('COMS.view.NewPlan.EndTreatmentSummary', {
	extend: 'Ext.window.Window',
	alias : 'widget.EndTreatmentSummary',
	buttonAlign: 'center',
	name : "End of Treatment Summary",
	title : "End of Treatment Summary",

	autoEl : { tag : "section" },
	autoShow: true,
	width: 950,
	height: 800,
	cls : "Report",
	// defaults : { layout : "fit", autoScroll : true  },
	items : [
		{ xtype : "container", html : "<h1>End of Treatment Summary</h1>" },


		{ xtype : "container", margin: "0 26 10 10", // Margin is "weird" because the scroll bar in the following container shows up and 26px is the width of the scroll bar.
			items : [
			{ xtype : "container", name : "Reason4EOTSHead", html : "<h2>Reason for generating End of Treatment Summary</h2>" },

			{ xtype : "radiogroup", name : "Reason4EOTSAnswer", width: 200, hideLabel : true, columns : 1, vertical : true,
				items : [
					{ boxLabel : "Completed Prescribed Course", name : "EOTS_Reason", inputValue : "Completed Prescribed Course"},
					{ boxLabel : "Treatment Change", name : "EOTS_Reason", inputValue : "Treatment Change"},

					// { xtype : "container", name : "Reason4EOTS_Change", hidden : true, items : [
						{ xtype : "radiogroup", name : "Reason4EOTS_TCReason", width: 200, hidden : true, hideLabel : true, margin: "0 10 0 20", columns : 1, vertical : true, items : [
							{ boxLabel : "Toxicity", name : "EOTS_TChange", inputValue : "Toxicity"},
							{ boxLabel : "Progression of the Disease", name : "EOTS_TChange", inputValue : "Progression of the Disease"},
							{ boxLabel : "Patient Refusal", name : "EOTS_TChange", inputValue : "Patient Refusal"},
							{ boxLabel : "Other", name : "EOTS_TChange", inputValue : "Other"},
							{ xtype : "textfield", margin: "0 10 0 20", hidden : true, name : "EOTS_TChangeOther", hideLabel : true }
						]},
					// ]},// 
					{ boxLabel : "Patient Discontinuation", name : "EOTS_Reason", inputValue : "Patient Discontinuation"},

					// { xtype : "container", name : "Reason4EOTS_PD", hidden : true, items : [
						{ xtype : "radiogroup", name : "Reason4EOTS_PDReason", width: 200, hideLabel : true, hidden : true, margin: "0 10 0 20", columns : 1, vertical : true, items : [
							{ boxLabel : "Patient Terminated Regimen", name : "EOTS_PDChange", inputValue : "Patient Terminated Regimen"},
							{ boxLabel : "Patient Left VA System", name : "EOTS_PDChange", inputValue : "Patient Left VA System"},
							// { boxLabel : "Patient Refusal", name : "EOTS_PDChange", inputValue : "Patient Refusal"},
							{ boxLabel : "Other", name : "EOTS_PDChange", inputValue : "Other"},
							{ xtype : "textfield", margin: "0 10 0 20", hidden : true, name : "EOTS_PDChangeOther", hideLabel : true }
						]},
					// ]},

					{ boxLabel : "Other ", name : "EOTS_Reason", inputValue : "Other"},
					{ xtype : "textfield", margin: "0 10 0 20", hidden : true, name : "EOTS_ReasonOther", hideLabel : true }
				]
			}
		]},


		{ xtype: "container", name: "PatientInfoTableHeader", hidden : true, margin: "0 10 10 10", tpl: 
			new Ext.XTemplate(
				"<h2>Patient Information for - {Name}</h2>",
				"<table border=\"1\" class=\"InformationTable\">",
					"<tr>",
						"<th>Gender:</th><td>{Gender}</td>",
						"<th>Age:</th><td>{Age}</td>",
						"<th>Amputee:</th><td>{[this.Amputee(values.Amputations)]}</td>",
					"</tr>",

					"<tr>",

						"<th>Template:</th><td colspan=\"5\">{TemplateName} - {TemplateDescription}</td>",
					"</tr>",

					"<tr>",
						"<th>Regimen Status:</th><td>{TreatmentStatus}</td>",
						"<th>Regimen Start Date:</th><td>{TreatmentStart}</td>",
						"<th>Regimen End Date:</th><td>{TreatmentEnd}",
							"<tpl if=\"''!== TreatmentOriginalEnd\">",
								"&nbsp;<em>(Original Scheduled End Date - {TreatmentOriginalEnd})</em>",
							"</tpl>",
						"</td>",
					"</tr>",
				"</table>",
				{
					// XTemplate Configuration
					disableFormats: true,
					Amputee : function(a) {
						// Amputee info is now an array of descriptions
						var i, len = a.length, buf = "";
						if (0 === len) {
							return ("None");
						}

						for (i =0; i < len; i++) {
							buf += a[i].description + "<br>";
						}
						return (buf);					
					}
				}
			)
		},


		{ xtype : "container", name: "PatientInfoTableBody", hidden : true,
			autoScroll : true, 
			height : 590, 
			// layout : "fit",
			// defaults : { layout : "fit" },
			margin: "0 10 10 10", 
			items : [		// EOTS Section
				{ xtype: "container", name: "EoTS_PatientInfoTable", hidden : true, tpl: 
					new Ext.XTemplate(
						"<table border=\"1\" class=\"InformationTable\">",
							"<tr><th>Type(s) of Cancer: </th><td colspan=3>",
								"<tpl for=\"Disease\">",
									"<div>{Type}&nbsp;-&nbsp;{Stage}</div>",
								"</tpl>",
							"</td>",
							"<th>Regimen Goal:</th><td>{Goal}</td>",
							"</tr>",
							"<tr><th>Allergies: </th><td colspan=3>",
								"<table width=\"100%\" class=\"centerHead\"><tr><th>Name</th><th>Type</th><th>Comment</th></tr>",
								"<tpl for=\"Allergies\">",
									"<tr><td>{name}</td><td>{type}</td><td>{comment}</td>",
								"</tpl>",
								"</table>",
							"</td>",

							"</tr>",
							"<tr><th>Clinical Trial: </th><td colspan=3>{Trial}</td></tr>",
							"<tr><th colspan=\"4\" style=\"text-align: center\">Initial Vital Signs</th></tr>",
							"<tr><td colspan=\"4\">",
								"<table width=\"100%\" class=\"centerHead\">",
									"<tr>",
										"<th>Date Vitals Taken</th>",
										"<th>Height</th>",
										"<th>Weight</th>",
										"<th>Blood Pressure</th>",
										"<th>Temperature</th>",
										"<th>Pain</th>",
										"<th>Pulse</th>",
										"<th>Respiration</th>",
										"<th><abbr title=\"Oxygen %\">SPO2</abbr></th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight Method</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Formula</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr></th>",
									"</tr>",
									"<tr>",
										"<td>{FirstVitals.DateTaken}</td>",
										"<td>{FirstVitals.Height}</td>",
										"<td>{FirstVitals.Weight}</td>",
										"<td>{FirstVitals.BP}</td>",
										"<td>{FirstVitals.Temperature}</td>",
										"<td>{FirstVitals.Pain}</td>",
										"<td>{FirstVitals.Pulse}</td>",
										"<td>{FirstVitals.Respiration}</td>",
										"<td>{FirstVitals.SPO2}</td>",
										"<td>{FirstVitals.WeightFormula}</td>",
										"<td>{FirstVitals.BSA_Weight}</td>",
										"<td>{FirstVitals.BSA_Method}</td>",
										"<td>{FirstVitals.BSA}</td>",
									"</tr>",
									"<tr><th style=\"text-align: right\">Performance Status:</th>",
									"<td colspan=\"12\">{FirstVitals.PSID} - {FirstVitals.PS}</td></tr>",
								"</table>",
							"</td></tr>",
							"<tr><th colspan=\"4\" style=\"text-align: center\">Final Vital Signs</th></tr>",
							"<tr><td colspan=\"4\">",
								"<table width=\"100%\" class=\"centerHead\">",
									"<tr>",
										"<th>Date Vitals Taken</th>",
										"<th>Height</th>",
										"<th>Weight</th>",
										"<th>Blood Pressure</th>",
										"<th>Temperature</th>",
										"<th>Pain</th>",
										"<th>Pulse</th>",
										"<th>Respiration</th>",
										"<th><abbr title=\"Oxygen %\">SPO2</abbr></th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight Method</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Formula</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr></th>",
									"</tr>",
									"<tr>",
										"<td>{LastVitals.DateTaken}</td>",
										"<td>{LastVitals.Height}</td>",
										"<td>{LastVitals.Weight}</td>",
										"<td>{LastVitals.BP}</td>",
										"<td>{LastVitals.Temperature}</td>",
										"<td>{LastVitals.Pain}</td>",
										"<td>{LastVitals.Pulse}</td>",
										"<td>{LastVitals.Respiration}</td>",
										"<td>{LastVitals.SPO2}</td>",
										"<td>{LastVitals.WeightFormula}</td>",
										"<td>{LastVitals.BSA_Weight}</td>",
										"<td>{LastVitals.BSA_Method}</td>",
										"<td>{LastVitals.BSA}</td>",
									"</tr>",
									"<tr><th style=\"text-align: right\">Performance Status:</th>",
									"<td colspan=\"12\">{LastVitals.PSID} - {LastVitals.PS}</td></tr>",
								"</table>",
							"</td></tr>",
						"</table>",
						{
							disableFormats: true,
							DebuggerFcn : function ( values ) {
								// debugger;
							}
						}
					)
				},

//				{ xtype : "container", html : "<h2>Treatment Report</h2><div style=\"margin-left: 2em;\">To be obtained from...</div>" },

					// These grids are built on the fly in the app\controller\NewPlan\EndTreatmentSummary.js createFlowsheet() 
					// (Search for: theGrid = Ext.create)
//				{ xtype : "container", name : "AdministeredMedsGrid", html : "<h2>Medication Administered</h2>" },
//				{ xtype : "container", name : "DiseaseResponseGrid", html : "<h2>Patient Disease Response</h2>" },
//				{ xtype : "container", name : "ToxicityGrid", html : "<h2>Toxicity Side Effects</h2>" },
//				{ xtype : "container", name : "OtherGrid", html : "<h2>Other Comments</h2>" },


				{ xtype : "container", name : "AdministeredMedsGrid" },
				{ xtype : "container", name : "DiseaseResponseGrid" },
				{ xtype : "container", name : "ToxicityGrid" },
				{ xtype : "container", name : "OtherGrid" },


				{ xtype : "container", html : "<h2 style=\"margin-top: 2em;\">Provider Report</h2>" },
				{ xtype : "htmleditor", name : "ProviderReport", width: 880, height: 200, autoScroll : true, margin : "0 30 0 0" },

				{ xtype : "container", html : "<h2 style=\"margin-top: 2em;\">Follow-Up Appointments</h2>" },
				{ xtype : "htmleditor", name : "FollowUpAppointments", width: 890, height: 200, autoScroll : true, margin : "0 30 0 0" }
			]
		}
	],
	buttons : [
		{ text: "Save", hidden : true, action: "save" },
		{ text: "Cancel", hidden : true, action: "cancel" }
	],
	initComponent : function() {
		wccConsoleLog("End of Treatment Summary View - Initialization");
        Ext.apply(arguments, { widget : this.widget , itemsInGroup: this.itemsInGroup, ChangeTemplate: this.ChangeTemplate });
		this.callParent(arguments);
	}
});


Ext.define("COMS.view.NewPlan.KnownProblems" ,{
	extend: "Ext.grid.Panel",
	alias : "widget.KnownProblems",
	name : "Patient Existing Conditions",

	autoEl : { tag : "section" },
	cls : "xPandablePanel",
	collapsible : true,
	collapsed : true,

	title : "Existing Conditions",
	height: 300,

	store: Ext.create("Ext.data.Store", {
		fields:["DateEntered", "DateOfOnset", "DateUpdated", "Problem", "serviceConnected", "statusName", "unverified"],
		proxy: {
			type: "memory",
			reader: {
				type: "json",
				root: "items"
			}
		}
	}),

	columns : [
		{ header: "Date", dataIndex : "DateEntered" },
		{ header: "Date Of Onset", dataIndex : "DateOfOnset" },
		{ header: "Date Updated", dataIndex : "DateUpdated" },
		{ header: "Problem", dataIndex : "Problem", flex:1},
		{ header: "Service Connected", dataIndex : "serviceConnected" },
		{ header : "Status", dataIndex : "statusName" },
		{ header : "Unverified", dataIndex : "unverified" }
	]
});


Ext.define('COMS.view.NewPlan.LabInfo' ,{
    extend: 'Ext.grid.Panel',
    alias : 'widget.LabInfo',
	name : 'Patient Laboratory Information',

	autoEl : { tag : 'section' },
	cls : 'xPandablePanel',
	collapsible : true,
	collapsed : true,

	title : "Laboratory Information",
	height: 300,

	store: Ext.create("Ext.data.Store", {
		fields:["date", "name", "comment", "result", "sample", "specimen", "units"],
		groupField: "date",
		proxy: {
			type: "memory",
			reader: {
				type: "json",
				root: "items"
			}
		}
	}),
	
	features: [ 
		{
			ftype: "grouping",
			groupHeaderTpl: [
				"{name} : ({[values.children.length]}) Lab{[values.children.length> 1 ? 's' : '']}"
			],
			startCollapsed: true
		}
	],
	columns : [
		// { header: 'Date', dataIndex : 'date' },
		{ header: "Name", dataIndex : "name", width : 50 },
		// { header: 'Collection Date', dataIndex : 'specColDate' },
		// { header: 'Lab Tech', dataIndex : 'author' },
		{ header: 'Specimen', dataIndex : 'specimen' },
		{ header: 'Sample', dataIndex : 'sample' },
		// { header: 'Info', dataIndex : 'specInfo' },
		{ header: "Result", dataIndex : "result", 
			renderer: function(value, p, record) {
				return (value + " " + record.getData().units);
			}
		},
		// { header: "Units", dataIndex : "units" },
		// { header: "Acceptable Range", dataIndex : "acceptRange" },
		// { header: "OUT of Range", dataIndex : "outOfRange" },
		{ header: 'comment', dataIndex : 'comment', flex : 1 }
	]
});


Ext.define("COMS.view.NewPlan.MedRemindersPanel" ,{
	"extend" : "Ext.panel.Panel",
	"alias" : "widget.MedRemindersPanel",
	"title" : "Medication Reminders", 
	"collapsible" : true, 
	"collapsed" : true, 
	"margin" : "0 0 10 0", 

	"autoEl" : { "tag" : "section" },
	"cls" : "xPandablePanel",

	"resizable" : true,
	"autoScroll" : true,
	"autoHeight" : true,

	"layout" : {
		"type" : "vbox",
		"align" : "stretch"
	},

	"defaults" : {
		"margin" : "5 10 5 10"
	},
	"items" : [
			{ "xtype" : "MedRemindersGrid" },
			{ "xtype" : "MedRemindersForm" }
	]
});


Ext.define("COMS.view.NewPlan.NewPlanTab" ,{
	extend: "Ext.container.Container",
	alias : "widget.NewPlanTab",
	name : "New Patient Plan Tab",

	autoEl : { tag : "section" },
	title : "<h2>Patient Information</h2>",
	margin : "10",

	items : [
		{ "xtype" : "PatientSelection" },
		{
			"xtype" : "component",
			"hidden" : true, "name" : "CumulativeDosingWarning", 
			"autoEl" :  {
				"tag" : "section",
				"cls" : "TCDWarning"
			},
			"html" : "This is a warning of the Total Cumulative Dosing"
		},
		{ "xtype" : "ProgrammerBtns" },
		{ "xtype" : "PatientInfo" }
	],

	initComponent: function() {
		wccConsoleLog("New Plan Tab View - Initialization");
		this.callParent(arguments);
	}
});

Ext.define("COMS.view.OEM.selAppliedTemplate" ,{
	extend: "Ext.form.field.ComboBox",
	alias : "widget.selAppliedTemplate",
	name : "Select Applied Template",

	store : "Templates",

	width: 600,
	size : 60,
	labelWidth: 150,
	fieldLabel: "Select a Template",
	labelAlign: "right",
	displayField: "description",
	valueField: "id",
	hidden : true
});


Ext.define("COMS.view.OEM.OEM_Level1", {
	extend : "Ext.container.Container",
	alias : "widget.OEM_Level1",
	name : "OEM_Level1", 
	autoEl : { tag : "section" },
	cls : "Tab", 
	tpl : new Ext.XTemplate(
		"<tpl for=\"Patient\">",
			"{[this.debuggerFcn( values, parent )]}",
			"<a href=\"Patient/PrintOrders/{id}\" target=\"PrintWin\">Print</a> Orders (opens new window)&nbsp;",
			"<a href=\"Fsheet/?PID={id}&PAT_ID={PAT_ID}&PName={name}\" target=\"FlowsheetWin\">Flowsheet</a> (opens new window)",
		"</tpl>",
		"<table border=\"1\" width=\"100%\" class=\"Therapy InformationTable\">",
			"<colgroup width=12%></colgroup>",
			"<colgroup width=15%></colgroup>",
			"<colgroup width=12%></colgroup>",
			"<colgroup width=61%></colgroup>",

		"	<thead><tr><th colspan=\"4\" class=\"large\">Order Entry Management (<abbr title=\"Order Entry Management\">OEM</abbr>) Information <span style=\"font-weight: normal;\">- for Patient: {PatientName}</span></th></tr></thead>",

		"	<tr><th align=\"right\">Regimen:</th><td colspan=\"3\">{RegimenName}</td></tr>",
		"	<tr><th align=\"right\">Description</th><td colspan=\"3\">{RegimenDescription}</td></tr>",
		"	<tr><th align=\"right\">Treatment Start:</th><td colspan=\"3\">{TreatmentStart}</td></tr>",
		"	<tr><th align=\"right\">Treatment End:</th><td colspan=\"3\">{TreatmentEnd}</td></tr>",
		"	<tr class=\"MultiLineRow\">",
		"		<th>Febrile Neutropenia&nbsp;Risk:</th>",
		"		<td>{FNRisk}%</td>",
		"		<th>Recommendation:</th>",
		"		<td>{NeutropeniaRecommendation}</td>",
		"	</tr>",
		"	<tr class=\"MultiLineRow\">",
		"		<th>Emesis Risk:</th>",
		"		<td>{ELevelName}</td>",
		"		<th>Recommendation:</th>",
		"		<td>{ELevelRecommendation}</td>",
		"	</tr>",

		"	<tr><th>Goal</th><td colspan=\"3\">{[this.goalLink( values )]}</td></tr>",
		// "	<tr><th>Clinical Trial</th><td colspan=\"3\">{[this.ctLink( values )]}</td></tr>",
		// "	{[this.ctData( values )]}",
		"	<tr><th>Performance&nbsp;Status</th><td colspan=\"3\">{[this.PS( values )]}</td></tr>",
		"</table>",
			{
					// XTemplate Configuration
				disableFormats: true,
				debuggerFcn : function ( current, prev ) {
					// debugger;
				},
				goalLink : function ( current ) {
					return (current.Goal || "No Goal Specified - <button name=\"AddGoal\" class=\"anchor\">Add Goal</button>");
				},
				ctLink : function ( current ) {
					return (current.ClinicalTrial || "Clinical Trial Not Specified - <button name=\"AddClinicalTrial\" class=\"anchor\">Add Clinical Trial</button>");
				},
				ctData : function ( current ) {
					return "";
				},
				PS : function ( current ) {
					var buf = current.PerformanceStatus + " <button name=\"EditPerformanceStatus\" class=\"anchor EditPerformanceStatus\">Change Performance Status</button>";
					return (buf);
				}

			}
		)
});



// MWB - 18 Jan 2012 - Contents of this container are updated by an XTemplate in the controller file (app/controller/NewPlan/OEM.js)
Ext.define("COMS.view.OEM.dspOEMTemplateData" ,{
	extend : "Ext.container.Container",
	alias : "widget.dspOEMTemplateData",
	name : "Display Applied Template Data",

	hidden : false,
	autoEl : { tag : "section" },

	tpl : new Ext.XTemplate(
		"<section name=\"OEM_Data\">",
		
"<tpl for=\"OEMRecords\">",
	"<section {[this.SaveIdx(xindex, values.Cycle, values.Day, values, parent)]} id=\"Section_{[this.CalcName(values)]}\" class=\"OEMRecord\" {[ this.CalcStyle(values) ]}>",
		"<a href=\"#\" id=\"{[this.CalcName(values)]}\" name=\"{[this.CalcName(values)]}\"></a>",
		"<h2>Cycle {Cycle} (of {[parent.numCycles]}); Admin Day: {Day}</h2>",
		"<div>Date: {AdminDate}{[this.CalcEditAdminDate(values)]}</div>",

"{[this.debuggerFcn( values, parent )]}",

		"<table border=\"1\" class=\"Therapy InformationTable\">",
			"<colgroup width=30%></colgroup>",
			"<colgroup width=50%></colgroup>",
			"<colgroup width=20%></colgroup>",




/************************* PRE-THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(PreTherapy)\">",
				"<tr class=\"TherapyType\"><th colspan=\"3\">Pre Therapy <span>{PreTherapyInstr}</span></th></tr>",
				"<tr class=\"header\">",
					"<th>Drug</th><th>Dosing</th><th>Administration Time</th>",
				"</tr>",

				"<tpl for=\"PreTherapy\">",
					"<tr>",
						"<th style=\"vertical-align: top;\">",
							"{Med} ({Dose1} {DoseUnits1})",
							"<div style=\"font-weight: normal; font-style: italic;\">{Instructions}</div>",
							"{[this.CalcAnchor( \"Pre\", xindex, values, parent )]}",
							"{[this.showReason(values, parent)]}",
							"<div style=\"text-align: left;\">Order Status : <span>{Order_Status}</span></div>",
						"</th>",
						"<td>",

							"<table class=\"OEMRecord_Element InformationTable\">",
								"<colgroup width=30%></colgroup>",
								"<colgroup width=20%></colgroup>",
								"<colgroup width=20%></colgroup>",
								"<colgroup width=20%></colgroup>",

								"<tr class=\"header\">",
									"<th>Drug</th>",
									"<th>Dose</th>",
									"<th>Calculated Dose </th>",
									"<th>Administration</th>",
								"</tr>",

								"<tr>",
									"<td>{Med}</td>",
									"<td>{Dose1} {DoseUnits1}</td>",
									"<td>{[this.CalculateBSA_Dosing(values, false)]}</td>",
									/* "<td>{AdminMethod1}</td>", */
									"<td>{[this.calcRoute(values)]}</td>",
								"</tr>",

								"<tpl if=\"this.ShowFluid(AdminMethod1, FluidType1, FluidVol1, FlowRate1)\">",
									"<tr class=\"header\">",
										"<th>Fluid Type</th><th>Fluid Volume</th><th>Flow Rate</th><th>Infusion Time</th>",
									"</tr>",

									"<tr>",
										"<td>{FluidType1}</td>",
										"<td>{FluidVol1} ml</th>",
										"<td>{FlowRate1} ml/hr</td>",
										"<td>{[this.CalcInfusionTime(values.FluidVol1, values.FlowRate1)]}</td>",
									"</tr>",
								"</tpl>",
							"</table>",

						"</td>",
						"<td style=\"vertical-align: top; padding-left: 1em;\">{AdminTime}</td>",
					"</tr>",


				"</tpl>",		// END PreTherapy Loop TPL
			"</tpl>",		// END IF Has PreTherapy TPL



/************************* THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(Therapy)\">",
					"<tr><td colspan=\"3\" style=\"border-left: 1px solid white; border-right: 1px solid white;\">&nbsp;</td></tr>",
					"<tr class=\"TherapyType\">",
						"<th class=\"BorderTLR\" colspan=\"3\">Therapy <span>{TherapyInstr}</span></th>",
					"</tr>",
					"<tr class=\"header\">",
						"<th class=\"BorderLeft\">Drug</th>",
						"<th>Dosing</th>",
						"<th class=\"BorderRight\">Administration Time</th>",
					"</tr>",

				"<tpl for=\"Therapy\">",
					"<tr>",
						"<th class=\"BorderLeft BorderBottom\" style=\"vertical-align: top;\">",
							"{Med} ({Dose} {DoseUnits})",

							"<div style=\"font-weight: normal; font-style: italic;\">{Instructions}</div>",
							"{[this.CalcAnchor( \"Therapy\", xindex, values, parent )]}",
							"{[this.showReason(values, parent)]}",
							"<div style=\"text-align: left;\">Order Status : <span>{Order_Status}</span></div>",

                        "</th>",
						"<td class=\"BorderBottom\">",
							"<table class=\"OEMRecord_Element InformationTable\">",
								"<colgroup width=40%></colgroup>",
								"<colgroup width=20%></colgroup>",
								"<colgroup width=20%></colgroup>",
								"<colgroup width=20%></colgroup>",

								"<tr class=\"header\">",
									"<th>Drug</th>",
									"<th>Dose</th>",
									"<th>Calculated Dose </th>",
									"<th>Administration</th>",
								"</tr>",

								"<tr>",
									"<td>{Med}</td>",
									"<td>{Dose} {DoseUnits}</td>",
									"<td>{[this.CalculateBSA_Dosing(values, true)]}</td>",
									"</td>",
									/* "<td>{AdminMethod}</td>", */
									"<td>{[this.calcRoute(values)]}</td>",
								"</tr>",

								"<tpl if=\"this.ShowFluid(AdminMethod, FluidType, FluidVol, FlowRate)\">",
									"<tr class=\"header\">",
										"<th>Fluid Type</th><th>Fluid Volume</th><th>Flow Rate</th><th>Infusion Time</th>",
									"</tr>",

									"<tr>",
										"<td>{FluidType}</td>",
										"<td>{FluidVol} ml</th>",
										"<td>{FlowRate} ml/hr</td>",
										"<td>{[this.CalcInfusionTime(values.FluidVol, values.FlowRate)]}</td>",
									"</tr>",
								"</tpl>",
							"</table>",
						
						"</td>",
						"<td class=\"BorderBottom BorderRight\" style=\"vertical-align: top; padding-left: 1em;\">{AdminTime}</td>",
					"</tr>",
				"</tpl>",		// END Therapy Loop TPL
				"<tr><td colspan=\"3\" style=\"border-left: 1px solid white; border-right: 1px solid white;\">&nbsp;</td></tr>",
			"</tpl>",		// END IF Has Therapy TPL

/************************* END THERAPY SECTION *************************************************/






/************************* POST-THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(PostTherapy)\">",
			"<tr class=\"TherapyType\"><th colspan=\"3\">Post Therapy <span>{PostTherapyInstr}</span></th></tr>",
				"<tr class=\"header\">",
					"<th>Drug</th><th>Dosing</th><th>Administration Time</th>",
				"</tr>",

				"<tpl for=\"PostTherapy\">",
					"<tr>",
						"<th style=\"vertical-align: top;\">",
							"{Med} ({Dose1} {DoseUnits1})",
							"<div style=\"font-weight: normal; font-style: italic;\">{Instructions}</div>",
							"{[this.CalcAnchor( \"Post\", xindex, values, parent )]}",
							"{[this.showReason(values, parent)]}",
							"<div style=\"text-align: left;\">Order Status : <span>{Order_Status}</span></div>",

						"</th>",
						"<td>",
							"<table class=\"OEMRecord_Element InformationTable\">",
								"<colgroup width=30%></colgroup>",
								"<colgroup width=20%></colgroup>",
								"<colgroup width=20%></colgroup>",
								"<colgroup width=20%></colgroup>",

								"<tr class=\"header\">",
									"<th>Drug</th>",
									"<th>Dose</th>",
									"<th>Calculated Dose </th>",
									"<th>Administration</th>",
								"</tr>",

								"<tr>",
									"<td>{Med}</td>",
									"<td>{Dose1} {DoseUnits1}</td>",
									"<td>{[this.CalculateBSA_Dosing(values, false)]}</td>",
									/* "<td>{AdminMethod1}</td>", */
									"<td>{[this.calcRoute(values)]}</td>",

								"</tr>",

								"<tpl if=\"this.ShowFluid(AdminMethod1, FluidType1, FluidVol1, FlowRate1)\">",
									"<tr class=\"header\">",
										"<th>Fluid Type</th><th>Fluid Volume</th><th>Flow Rate</th><th>Infusion Time</th>",
									"</tr>",

									"<tr>",
										"<td>{FluidType1}</td>",
										"<td>{FluidVol1} ml</th>",
										"<td>{FlowRate1} ml/hr</td>",
										"<td>{[this.CalcInfusionTime(values.FluidVol1, values.FlowRate1)]}</td>",
									"</tr>",
								"</tpl>",
							"</table>",

						"</td>",
						"<td style=\"vertical-align: top; padding-left: 1em;\">{AdminTime}</td>",
					"</tr>",
				"</tpl>",		// END PostTherapy Loop TPL
			"</tpl>",		// END IF Has PostTherapy TPL

			"<tr><th colspan=\"3\" style=\"padding: 0.5em 0; text-align:left;\" >Digital Signature: Doctor</th></tr>",
			"<tr><th colspan=\"3\" style=\"padding: 0.5em 0; text-align:left;\" >Digital Signature: Co-Signer (Optional)</th></tr>",
			"<tr><th colspan=\"3\" style=\"padding: 0.5em 0; text-align:left;\" >Digital Signature: Pharmacist</th></tr>",
		"</table>",
		"<hr />",
	"</section>",
"</tpl>",	// End TPL for AdminDay
		"</section>",

			{
					// XTemplate Configuration
				disableFormats: true,
				Patient : {},
				pIndex : 0,
				curCycle : 0,
				curDay : 0,
                SiteConfig : {},
				debuggerFcn : function ( current, prev ) {
					// debugger;
				},

                showReason : function(values, parent) {
                    if ("" !== values.Reason) {
                        return "<div style=\"text-align: left;\">Medication Changed from Template: <span>" + values.Reason + "</span></div>";
                    }
                    return "";
                },

				calcRoute : function(data) {
					var route = data.AdminMethod1 ? data.AdminMethod1 : data.AdminMethod;
					if (route.indexOf(" : ") > 0) {
						route = route.split(" : ")[0];
					}
					return route;
				},


				HasBSADose : function(units) {
					var du = units.toUpperCase();
					var r1 = du.search("M2");
					var r2 = du.search("KG");
					var r3 = du.search("AUC");
					if (r1 > 0 || r2 > 0 || r3 >= 0 ) {
						return true;
					}
					return false;
				},

				CalculateBSA_Dosing : function (values, therapy) {
					var du, duuc, calcDose, BSA_Dose, dspCalcDose, WeightInKilos, Dose, Units, ret = "N/A";
					if (therapy) {
						du = values.DoseUnits;
						Dose = values.Dose;
						BSA_Dose = values.BSA_Dose;
					}
					else {
						du = values.DoseUnits1;
						Dose = values.Dose1;
						BSA_Dose = values.BSA_Dose1;
					}
					if (!BSA_Dose) {
						BSA_Dose = "";
					}
					duuc = du.toUpperCase();
					calcDose = du.substr(0, du.search("/"));
					if (duuc.search("M2") > 0) {
						BSA_Dose = Dose * this.Patient.BSA;
						BSA_Dose = Ext.FormatNumber("" + BSA_Dose);
						dspCalcDose = BSA_Dose + " " + calcDose;
					}
					else if (duuc.search("KG") > 0) {
						// BSA_Dose = Dose * this.Patient.BSA_Weight;		// Get most recent Vitals Weight
						WeightInKilos = Ext.Pounds2Kilos(this.Patient.Weight);
						BSA_Dose = Dose * WeightInKilos;		// Get most recent Vitals Weight
						BSA_Dose = Ext.FormatNumber("" + BSA_Dose);
						dspCalcDose = BSA_Dose + " " + calcDose;
					}
					else if (duuc.search("AUC") >= 0) {
						BSA_Dose = Ext.CalcAUCDose(this.Patient, Dose);
						dspCalcDose = BSA_Dose;
					}

					if ("" !== BSA_Dose || calcDose) {
						ret = "<button class=\"anchor dspOEMDoseCalcs\" " +
							"dose=\"" + Dose + "\" " + 
							"doseUnits=\"" + du + "\" " + 
							"units=\"" + Units + "\" " + 
							"calcDose=\"" + BSA_Dose + "\" " +
							"name=\"dspOEMDoseCalcs\" " + 
							"title=\"Show Dosage Calculation\">" + dspCalcDose + "</button>";
					}
					return (ret);
				},


				hasData: function (instr) {
					return ("" !== instr);
				},
				hasNOData: function (instr) {
					return ("" === instr);
				},
				hasDrug : function (therapy) {
					if (therapy) {
						return (null !== therapy[0].Med);
					}
					return (false);
				},

				SaveIdx : function (xindex, Cycle, Day, values, parent) {
					if (parent.Patient) {
						this.Patient = parent.Patient;
					}
                    if (parent.SiteConfig) {
                        this.SiteConfig = parent.SiteConfig;
                    }
					this.pIndex = xindex;
					this.curCycle = Cycle;
					this.curDay = Day;
				},

				ShowFluid : function(AdminMethod, FluidType, FluidVol, FlowRate) {
					var lineNo = 0;
					var a2, flg = true;
					a2 = FluidType;		// + FluidVol + FlowRate;
					flg = ("" !== a2.trim());
					return flg;
/*******************
					try {
						if ("" === AdminMethod) {
							return false;
						}
						if ("IV" !== AdminMethod.substr(0,2)) {
							return false;
						}
						a2 = FluidType + FluidVol + FlowRate;
						try {
							flg = ("" !== a2.trim());							
						}
						catch (e) {
						}
						return( flg );
					}
					catch (err) {
						return( false );
					}
 *******************/
				},

				CalcInfusionTime : function (vol, rate) {
					return (Ext.CalcInfusionTime(vol, rate, true));
				},

				CalcStyle : function ( current ) {
					if (1 === current.Cycle && 1 === current.Day) {
						return "style=\"display:block;\"";
					}
					return ("style=\"display:hidden;\"");
				},

				CalcName : function ( current ) {
					return ("Cycle_" + current.Cycle + "_Day_" + current.Day);
				},
				CalcAnchor : function ( type, idx, current, parent ) {
					// Anchor onClick handler located in the OEM.js controller
					// var Cycle = parent[idx-1].Cycle;
					var AdminDate = parent.AdminDate;
					var today = new Date();
                    today.setHours(0, 0, 0, 0);
					var aDate = new Date(AdminDate);
					if (aDate < today) {
						return "";	// No Edit link if the Admin Date is before today
					}
					if ("Cancelled" == current.Order_Status || 
						"Cancel" == current.Order_Status || 
						"Dispensed" == current.Order_Status || 
						"Finalized" == current.Order_Status || 
						"Administered" == current.Order_Status ) {
						return "";	// No links if Order has been dispensed or Finalized
					}

					var Cycle = this.curCycle;
					var Day = this.curDay;
					var Type = type;
					var TypeIdx = idx;
					var pIndex = this.pIndex;

					var buf = "href=\"#Cycle_" + Cycle + "_Day_" + Day + "_Med_" + idx + "\" " + 
						"cycle=\"" + Cycle + "\" " + 
						"day=\"" + Day + "\" " + 
						"type=\"" + Type + "\" " + 
						"medidx=\"" + idx + "\" " + 
						"typeidx=\"" + pIndex + "\"" ;
                    var buf2 = "med=\"" + current.Med + "\" " + 
                        "medID=\"" + current.MedID + "\" " + 
                        "OrderID=\"" + current.Order_ID + "\" " + buf;

                    var btn1 = "",
                        btn2 = "",
                        btn3 = "",
                        StatusMsg = "";

                    if (this.SiteConfig.MedHold === "1") {
                        if ("Hold" == current.Status) {
                            StatusMsg = "Release from Hold";
                        }
                        else {
                            StatusMsg = "Hold";
                        }
                        btn2 = "<button class=\"anchor OEM_RecordMedHold\" " + buf2 + " id=\"Hold_" + Type + "_" + Cycle + "_" + Day + "_" + idx + "\" " + ">" + StatusMsg + "</button>";
                    }
					// else {
						// console.log("Med Hold NOT Available");
					// }
                    btn1 = "<button class=\"anchor EditOEM_Record\" " + buf + " name=\"Edit_" + Type + "_" + Cycle + "_" + Day + "_" + idx + "\" id=\"Edit_" + Type + "_" + Cycle + "_" + Day + "_" + idx + "\" " + ">Edit</button>";
                    btn3 = "<button class=\"anchor OEM_RecordMedCancel\" " + buf2 + " id=\"Cancel_" + Type + "_" + Cycle + "_" + Day + "_" + idx + "\" " + ">Cancel</button>";

                    var btns = "<table style=\"width:100%; margin: 5px 0; border:none;\"><tr>" + 
                        "<th style=\"text-align:center; border:none;\">" + btn3 + "</th>" + 
                        "<th style=\"text-align:center; border:none;\">" + btn1 + "</th>" + 
                        "<th style=\"text-align:center; border:none;\">" + btn2 + "</th></tr></table>";

					// return "<br />" + btn1 + btn2 + btn3; //  + "<br /><button class=\"anchor EditOEM_Record\" " + buf + ">Remove Medication</button>";
                    return btns;

				},
				CalcEditAdminDate : function( current ) {
					var AdminDate = current.AdminDate;
					var today = new Date();
                    today.setHours(0, 0, 0, 0);
					var aDate = new Date(AdminDate);
					if (aDate < today) {
						return ("");	// No Edit link if the Admin Date is before today
					}
					var buf = "AdminDate=\"" + AdminDate + "\"";
					return " - <button class=\"anchor ChangeOEM_AdminDate\" " + buf + ">Change Admin Date</button>";
				}
			}
	)
});



/*
 *	MWB - 01/16/2012
 *	Order Entry Management Tab
 *	This view maintains all the controls for the Order Entry Management for a specific Patient
 *	It is rendered in the New Plan Tab the CTOS Tabset once a patient has been selected.
 *	This view is managed by the "OEM" Control
 */
Ext.define("COMS.view.NewPlan.OEM", {
	extend: "Ext.panel.Panel",
	alias : "widget.OEM",

	name : "OEM Tab",
	margin : "0 0 20 0",
	autoEl : { tag : "section" },

	title: "Order Entry Management",
	items : [ 
		{ xtype : "OEM_Level1"},
		{ xtype : "combo", name : "SelectAdminDay2View",
			fieldLabel : "Select Admin Day to view",
			labelWidth : 150,
			queryMode : "local",
			displayField : "date",
			valueField : "LinkName",
			store : { 
                fields : [ "date", "LinkName" ], 
                data : [
                    { date : "day1", LinkName : "Cycle_1-Day_1" }, 
                    { date : "day2", LinkName : "Cycle_1-Day_2" }, 
                    { date : "day3", LinkName : "Cycle_1-Day_3" }
                ]
            }
		},
		{ xtype : "dspOEMTemplateData"}
	]
});



Ext.define("COMS.view.NewPlan.PatientHistory" ,{
	extend: "Ext.panel.Panel",
	alias : "widget.PatientHistory",
	name : "Patient Vitals",
	title : "Patient Vitals",

	autoEl : { tag : "section" },
	cls : "xPandablePanel",
	collapsible : true,
	collapsed : true,

	items : [
        { xtype : "button", text : "&nbsp;&nbsp;&nbsp;&nbsp;Add Vitals&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", name : "Show_Hide_Add_Vitals", margin: "5 0 0 20", 
            listeners: {
                click : {
                    element : 'el', 
                    fn : function() {
                        var thePanel = Ext.ComponentQuery.query("PatientHistory container[name=\"AddVitals\"]")[0];
						var theVitalSignsForm = Ext.ComponentQuery.query("PatientHistory VitalSignsEntryForm")[0];
                        var theButton = Ext.ComponentQuery.query("PatientHistory button[name=\"Show_Hide_Add_Vitals\"]")[0];

                        if (thePanel.hidden) {
                            thePanel.show();
							theVitalSignsForm.show();
                            theButton.setText("Hide Add Vitals");
                        } else {
                            thePanel.hide();
							theVitalSignsForm.hide();
                            theButton.setText("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add Vitals&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
                        }
                    },
                    scope: this
                }
            }
        },
		{ xtype : "container", name : "AddVitals", hidden : true, items : [
			{ xtype : "VitalSignsEntryForm" },
			{ xtype : "container", layout : "hbox", defaults : {margin: "5 0 0 20"}, items : [ 
				{ xtype : "button", text : "Save", scope : this }, 
				{ xtype : "button", text : "Cancel" }
			]}
		]},
		{ xtype : "VitalSignsHistory" }
	],

	initComponent: function() {
		wccConsoleLog("Patient History View - Initialization");
		this.callParent(arguments);
	}
});


Ext.define("COMS.view.NewPlan.PatientInfo" ,{
	extend: "Ext.form.FieldSet",
	alias : "widget.PatientInfo",
	name : "Patient Information",

	cls : "xPandablePanel",

	collapsed : true,

	resizable : true,
	autoScroll : true,
	autoHeight: true,
	layout: {
		type: "vbox",
		align: "stretch"
	},
	defaults : {
		margin: "5 0 5 10"
	},

items : [
		{ xtype : "container", hidden : true, name : "UpdateMDWSDataContainer", html : "<button class=\"anchor\" name=\"UpdateMDWSData\">Update</button> Patient Info from <abbr title=\"Computerized Patient Record System\">CPRS</abbr>" },
		{ xtype : "container", hidden : true, name : "DisplayMDWSDataContainer", html : "<button class=\"anchor\" name=\"DisplayMDWSData\">Show</button> Updated Patient Info from <abbr title=\"Computerized Patient Record System\">CPRS</abbr>" },
		{ xtype : "container", hidden : true, name : "MDWSStatus", html : "Updating Patient Info from <abbr title=\"Computerized Patient Record System\">CPRS</abbr>" },
		{ xtype : "PatientInfoTable" },

		{ xtype : "MedRemindersPanel" },
		{ xtype : "AdverseEventsHistory" },
		{ xtype : "PatientTemplates" },
		{ xtype : "PatientHistory" },		// Panel Title = "Patient Vitals"
		{ xtype : "LabInfo" },
		{ xtype : "KnownProblems", hidden: true },
		{ xtype : "CTOS" }
	]
});


Ext.define("COMS.view.NewPlan.PatientInfoTable", {
	extend: "Ext.panel.Panel",
	alias: "widget.PatientInfoTable",
	name: "Patient Information Table",
	title : "Patient Information",
	
	autoEl : { tag : "section" },
	cls : "xPandablePanel",
	collapsible : true,
	collapsed : true,

	items: [		// Patient Information Table
		{ xtype: "container", name: "PatientInfoTable", cls: "PI_PatientInformationTable", tpl: 
			new Ext.XTemplate(
				"{[this.DebuggerFcn(values)]}",
				"{[this.CalcBSA(values)]}",		// Needed to calculate the BSA Value if none retrieved.
				"<table border=\"1\" class=\"InformationTable\">",
					"<tr>",
						"<th style=\"width:15em\">Gender:</th><td>{Gender}</td>",
						"<th>Age:</th><td>{Age}</td>",
						"<th>{[this.AddEditBtns(\"Amputation\", values, parent)]}Amputee:</th><td id=\"PatientInformationTableAmputations\">{[this.Amputee(values.Amputations)]}</td>",
					"</tr>",


					"<tr>",
						"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight Method:</th><td>{WeightFormula}</td>",
						"<th><abbr title=\"Body Surface Area\">BSA</abbr> Formula:</th><td>{BSA_Method}</td>",
						"<th>",
						"{[this.AddEditBtns(\"BSA\", values, parent)]}<abbr title=\"Body Surface Area\">BSA</abbr>:",
                        "</th><td>{[this.BSA_Cell(values, parent)]}</td>",
					"</tr>",

					"<tr>",
						"<th>Template:</th><td colspan=\"5\">{[this.TemplateName(values.TemplateName)]}",
						"<tpl if=\"this.hasData(TemplateDescription)\">",
							"<br />{TemplateDescription}",
						"</tpl>",
						"{[this.Links(values.TemplateName, values.TemplateID)]}",
						"</td>",
					"</tr>",

					"<tr>",
						"<th>Regimen Status:</th><td>{TreatmentStatus}</td>",
						"<th>Regimen Start Date:</th><td>{TreatmentStart}</td>",
						"<th>Regimen End Date:</th><td>{TreatmentEnd}</td>",
					"</tr>",

					"<tr>",
						"<th>Regimen Goal:</th><td>{Goal}</td>",
						"<th>Concurrent Radiation:</th><td>",
							"{[this.ConcurRadTherapy(values.ConcurRadTherapy)]}",
						"</td>",
						"<td colspan=2>&nbsp;</td>",
					"</tr>",

					"<tr>",
						"<th>",
						"{[this.AddEditBtns(\"Cancer\", values, parent)]}",
						"Type(s) of Cancer: </th>",
						"<td colspan=5>",
							"<table class=\"DataTable\"><tr><th>Disease</th><th>Stage</th><th>Recorded on</th><th>User</th><th>Delete</th></tr>",
							"<tpl for=\"Disease\">",
								"{[this.DebuggerFcn(values)]}",
								"<tr><td>{DiseaseName}</td><td>{DiseaseStage}</td><td>{date}</td><td>{Author}</td><td>",
									"{[this.DeleteCancer(out, values, parent, xindex, xcount)]}",
								"</td></tr>",
							"</tpl>",
							"</table>",
						"</td>",
					"</tr>",

					"<tr>",
						"<th>Allergies: </th>",
						"<td colspan=5>",

							"<tpl if=\"this.Allergies(values)\">",
								"<table class=\"DataTable\">",
									"<tr>",
										"<th>Name</th>",
										// "<th>Type</th>",
										"<th>Comment</th>",
									"</tr>",
									"<tpl for=\"Allergies\">",
										"<tr><td>{name}</td>",
										// "<td>{type}</td>",
										"<td>{reaction}</td></tr>",
									"</tpl>",
								"</table>",
							"</tpl>",
							"<tpl if=\"this.Allergies(values) == false\">",
								"No Known Allergies",
							"</tpl>",
						"</td>",
					"</tr>",

					"<tr>",
						"<th>Clinical Trial: </th>",
						"<td colspan=5>",
							"{[this.clinicalTrial(values)]}",
						"</td>",
					"</tr>",

					"<tr>",
						"<th style=\"vertical-align: top;\">Medication Cumulative Dose Tracking: <br><button class=\"anchor AddCumulativeMedication\" tabType=\"AddCumulativeMedication\" name=\"AddCumulativeMedication\">Add Medication</button></th>",
						"<td colspan=5>",
							"<table class=\"DataTable\">",
								"<tr>",
									"<th>Medication / Maximum</th>",
									"<th>Lifetime Total / %</th>",
									"<th>Received / %</th>",
									"<th>Source</th>",
								"</tr>",
								"{[this.buildCumDoseMedInfo(values)]}",
							"</table>",
						"</td>",
					"</tr>",


				"</table>",
				{
					// XTemplate Configuration
					disableFormats: true,
					DebuggerFcn : function ( values ) {
						// debugger;
					},

					ConcurRadTherapy : function (ConcurRadTherapy) {
						if ('0' === ConcurRadTherapy) {
							return "No";
						}
						else if ('' === ConcurRadTherapy) {
							return "";
						}
						else {
							return "Yes";
						}
					},

					DeleteCancer : function (out, values, parent, xindex, xcount) {
						var ci = xindex-1;
						return "<button class=\"anchor DeleteCancerType\" tabType=\"DeleteCancerType\" CancerIdx=\"" + ci + "\" name=\"DeleteCancerType\">Delete</button>";
					},

					clinicalTrial : function ( values ) {
						if ("" === values.TemplateID) {
							return "";
						}
						var x = values.ClinicalTrial || "NOT a clinical trial";
						return x;
					},

					BSA_Cell : function (data) {
						var NAMsg = "<abbr title='Not Available'>N/A</abbr>";
						var btnBuf = "<button style=\"margin-left: .25em;\" class=\"anchor DoBSACalcs\" tabType=\"DoBSACalcs\" name=\"DoBSACalcs\">Update BSA</button> " + 
								"<span style=\"margin-left: .25em; font-weight: bold;\">Show</span><button class=\"anchor ShowBSACalcs\" tabType=\"ShowBSACalcs\" name=\"ShowBSACalcs\">Calculations</button>";
						if (
							(data.hasOwnProperty("BSA")           && "" !== data.BSA           ) && 
							(data.hasOwnProperty("BSA_Method")    && "" !== data.BSA_Method    && 0 !== data.BSA_Method) && 
							(data.hasOwnProperty("BSA_Weight")    && "" !== data.BSA_Weight    && 0 !== data.BSA_Weight) && 
							(data.hasOwnProperty("WeightFormula") && "" !== data.WeightFormula && 0 !== data.WeightFormula) && 
							(data.hasOwnProperty("Height")        && "" !== data.Height        && 0 !== data.Height) && 
							(data.hasOwnProperty("Weight")        && "" !== data.Weight        && 0 !== data.Weight)
						) {
							var BSA = Ext.BSA_Calc(data);
							if ("" !== BSA && 0 !== BSA && "0.00" !== BSA) {
								data.BSA = BSA;
								return "<span id=\"PatientInfoTableBSA_Display\">" + BSA +  " m<sup>2</sup></span>" + btnBuf;
							}
						}
						data.BSA = "N/A";
						return "<span id=\"PatientInfoTableBSA_Display\"><abbr title='Not Available'>N/A</abbr></span>";
					},

					AddEditBtns : function (btnName, values, parent) {
						var Pre = "<button class=\"anchor AddEdit" + btnName + "\" tabType=\"AddEdit" + btnName + "\" ";
						var Mid = "name=\"AddEdit" + btnName + "\" ";
						var Post = ">Add/Edit</button>&nbsp;&nbsp;";
						if ("Cancer" == btnName) {
							Post = ">Add</button>&nbsp;&nbsp;";
						}
						
						return Pre + Mid + Post;
					},

					Allergies : function ( values ) {
						// debugger;
						if (values.Allergies.length > 0) {
							return true;
						}
						return false;
					},
					buildCumDoseMedInfo : function ( data ) {
						var key, buf = "",
							CurCumDoseAmt,
							Pct2,
							CurCumDoseList = data.CumulativeDoseTracking,
							CurCumDoseAmtNum, CumulativeDoseAmt,
							MedName, Units,
							MedMaxDoseNum,
							MaxCumDose4PatientAmt,
							MedMaxDose,
							innerArray,
							i, len, MaxCumDose4Patient, MaxCumDosePct4Patient,
							InnerArrayBuf;
						for (key in CurCumDoseList) {
							if (CurCumDoseList.hasOwnProperty(key)) {
								MedName = CurCumDoseList[key].MedName;
								Units = CurCumDoseList[key].MaxCumulativeDoseUnits;
								MedMaxDoseNum =("" + CurCumDoseList[key].MaxCumulativeDoseAmt).replace(",", "");
								// MedMaxDose = Ext.util.Format.number(MedMaxDoseNum, "0,0");
								MedMaxDose = Ext.FormatNumber(MedMaxDoseNum);
								innerArray = CurCumDoseList[key].Patient;
								len = innerArray.length;
								MaxCumDose4Patient = 0;
								MaxCumDosePct4Patient = 0;
								InnerArrayBuf = "";

								buf += "<tr>";
								buf += "<td style=\"vertical-align: top; text-align: center;\" rowspan=\"" + innerArray.length + "\">" + MedName + "<div class=\"cdtEm\"> ";
								buf += MedMaxDose + " " +  Units + "</div></td>";
								buf += "<td style=\"vertical-align: top; text-align: right;\" rowspan=\"" + innerArray.length + "\">";
								for (i = 0; i < len; i++) {
									CurCumDoseAmtNum = 1 * ("" + innerArray[i].Amt).replace(",", "");
									MaxCumDose4Patient += CurCumDoseAmtNum;
									// CurCumDoseAmt = Ext.util.Format.number(CurCumDoseAmtNum, "0,0");
									CurCumDoseAmt = Ext.FormatNumber(CurCumDoseAmtNum);
									Pct2 = (( CurCumDoseAmtNum / MedMaxDoseNum ) * 100);
									// Pct2 = Ext.util.Format.number(Pct2, "0,0.0");
									Pct2 = Ext.FormatNumber(Pct2);
									if (i > 0) {
										InnerArrayBuf += "<tr>";
									}
									// CumulativeDoseAmt = Ext.util.Format.number(("" + innerArray[i].Amt).replace(",", ""), "0,0");
									CumulativeDoseAmt = Ext.FormatNumber(("" + innerArray[i].Amt).replace(",", ""));
									InnerArrayBuf += "<td style=\"vertical-align: top; text-align: right;\">" + CumulativeDoseAmt + " " + Units + " / " + Pct2 + "% </td>";
									InnerArrayBuf += "<td style=\"vertical-align: top;\">" + innerArray[i].Src + "</td>";
									InnerArrayBuf += "</tr>";
								}
								MaxCumDosePct4Patient = MaxCumDose4Patient / MedMaxDoseNum;
								// MaxCumDose4PatientAmt = Ext.util.Format.number(MaxCumDose4Patient, "0,0");
								MaxCumDose4PatientAmt = Ext.FormatNumber(MaxCumDose4Patient);
								Pct2 = (MaxCumDosePct4Patient * 100);
								// Pct2 = Ext.util.Format.number(Pct2, "0,0.0");
								Pct2 = Ext.FormatNumber(Pct2);
								buf += MaxCumDose4PatientAmt + " " + Units + " / " + Pct2 + "% </td>" + InnerArrayBuf;
							}
						}
						return buf;
					},

					hasData : function (data) {
						if ("" === data) {
							return false;
						}
						return true;
					},

					TemplateName : function (name) {
						if ("" === name) {
							return "None at this time";
						}
						return name;
					},

					Links : function (name, id) {
						var buf1 = "";

						try {
							if ("" === name) {
								return "&nbsp;";
							}

							// This is the link which appears at the end of the "Calculate BSA" table.
							// This was formerly an anchor
							Ext.ComponentQuery.query("NewPlanTab PatientInfo PatientInfoTable container[name=\"BSA_OEM_Link\"]")[0].el.dom.innerHTML = 
								"&nbsp;<button class=\"anchor\" " + 
								"name=\"Open Order Entry Management Tab\" " + 
								"title=\"Open Order Entry Management Tab\" " + 
								"tabType=\"OEM\" " + 
								"templateName=\"" + name + "\" " + 
								"templateID=\"" + id + "\" " + 
								">Open</button> " +
								"Order Entry Management (<abbr title=\"Order Entry Management\">OEM</abbr>) Tab using this Body Surface Area (<abbr title=\"Body Surface Area\">BSA</abbr>) Value";

							// This was formerly an anchor
							buf1 = 
								"&nbsp;<button class=\"anchor\" " + 
								"name=\"Open Template in CTOS Tab\" " +
								"title=\"Open Template in CTOS Tab\" " +
								"tabType=\"CTOS\" " +
								"templateName=\"" + name + "\" " +
								"templateID=\"" + id + "\" " +
								">Open Template</button> " + 
								"in Chemotherapy Template Order Source (<abbr title=\"Chemotherapy Template Order Source\">CTOS</abbr>) Tab";
						}
						catch (e) {
							return "";
						}
						return buf1;
					},

					Amputee : function(a) {
						// Amputee info is now an array of descriptions
						try {
							var i, len = a.length, buf = "";
							if (0 === len) {
								return "None";
							}

							for (i =0; i < len; i++) {
								buf += a[i].description + "<br>";
							}
							return buf;
						}
						catch (e) {
							return "";
						}
					},

					CalcBSA : function( data, parent ) {
						try {
							if ("" === data.BSA || "<abbr title='Not Available'>N/A</abbr>" === data.BSA) {
								data.BSA = Ext.BSA_Calc(data);
								data.Vitals[0].BSA = data.BSA;
							}
						}
						catch (e) {
							return "";
						}
					}
				}
			)
		}
	]
});

Ext.define("COMS.view.NewPlan.PatientSelection" ,{
	extend: "Ext.panel.Panel",
	alias : "widget.PatientSelection",
	name : "PatientSelection",

	cls : "xPandablePanel",

	collapsible : true,
	collapsed : false,
	title : "Patient Selection",
    resizable : true,
    autoScroll : true,
    autoHeight: true,
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    defaults : {
        margin: "5 0 5 10"
    },


	items : [
	{ xtype: 'box', cls : "x-form-item-label", html : "Enter a range of Administration Dates to search" },
		{ xtype : "container", layout : "hbox", items : [
			{
				xtype : "datefield",
				width: 320,
				labelWidth : 220,
				labelAlign : "right",
				labelClsExtra : "NursingDocs-label",
				fieldLabel: "From",
				name: "from_date",
				value : new Date(),
				minValue: new Date()  // limited to today or greater
			},
			{
				xtype : "datefield",
				width: 150,
				labelWidth : 40,
				labelAlign : "right",
				fieldLabel: "To",
				labelClsExtra : "NursingDocs-label",
				name: "to_date",
				minValue: new Date()  // limited to today or greater
			},
			{ 
				xtype : "container", 
				name : "PatientSelectionDate", 
				html : "&nbsp;<button type=\"button\" class=\"anchor\" name=\"SelectPatientAdminRange\">Select Patient by Administration Date(s)</button>" 
			}
		]},

		{ xtype: 'box', html: "<div class=\"NursingDocs-label\">OR</div><div class=\"x-form-item-label\">Enter Patient Identification (SSN) to query <abbr title=\"Computerized Patient Record System\">CPRS</abbr></div>" },
		{ xtype : "container", layout : "hbox", items : [
			{
			    xtype: 'textfield',
				width: 320,
				labelWidth : 220,
				labelAlign : "right",
				labelClsExtra : "NursingDocs-label",
				fieldLabel: "Patient Identification (SSN)",
				name: 'CPRS_QueryString'
			},
			{ 
				xtype : "container", 
				name : "PatientQuery", 
				html : "&nbsp;<button type=\"button\" class=\"anchor QueryCPRS4Patient\" name=\"QueryCPRS4Patient\">Query CPRS for Patient</button>" 
			}
		]},
			/* style: "background: #EFEFEF; padding: 0.5em; border: thin solid navy;" */
        // { xtype: 'box', cls: "coms-section-emphasis", margin: "10 60 10 60", autoEl: { tag: 'div', html: '(Note: For testing purposes, there are hundreds of patients available between 0010 and 0603. To search for a patient, use the spelling of the number for a last name and the number. For example: <b>FiveHundredTwenty, Patient</b> would be <b>f0520</b> or <b>OneHundredThirty, Patient</b> would be <b>o0130</b>).' } },
        { xtype: 'box', cls: "coms-section-emphasis", margin: "10 60 10 60", autoEl: { tag: 'div', html: 
		"<p>Note: The Innovations Sandbox/Future Technology Lab contains hundreds of available patients with a numeric last name and \"Patient\" first name. " +
		"To search for a patient, use the first letter from the spelling of the number, a zero, and the three digit number itself.</p>" +
		"<p>For example, <br><b>\"ThreeHundredTwenty, Patient\"</b> is available as t0320 or T0320; <br><b>\"OneHundredThirty, Patient\"</b> is available as o0130 or O0130 " +
		"(where the first character is the letter \"Oh\" as opposed to the number \"Zero\".)</p>" +
		"<p>Due to multiple users accessing patients throughout the COMS Enhancement Period, patients will be allocated as follows:" +
		"<ul>"+
			"<li>VHA/OI&T Stakeholders may use the 100, 200, 300 and 400 series</li> " + 
			"<li>Development Team may use the 500 series</li>" +
		"</ul>" } },
		{ xtype : "SelectPatient" }
	]
});

Ext.define("COMS.view.NewPlan.PatientTemplates" ,{
	extend: "Ext.panel.Panel",
	alias : "widget.PatientTemplates",
	name : "Patient Templates Table",
	title : "Treatment Regimens & Summaries",

	autoEl : { tag : "section" },
	cls : "xPandablePanel",
	collapsible : true,
	collapsed : true,


	/**
	 * Data Format passed to this template:
	 *
	 * {
	 *     DateStarted : "11/11/2013",
	 *     ScheduledEndDate,
	 *     TemplateID,
	 *     TemplateName,
	 *     Historical : [
	 *         {
	 *             DateApplied,
	 *             DateEnded,
	 *             DateEndedActual,
	 *             DtateStarted,
	 *             EotsID,
	 *             TemplateID,
	 *             TemplateName,
	 *             id
	 *         }
	 *     ]
	 * }
	 **/


	tpl : new Ext.XTemplate(
		"<table border=\"1\" style=\"margin: 10px auto;\" class=\"PatHistResults InformationTable\">",
			"<tr>",
				"<th>&nbsp;</th>",
				"<th>Template Name</th>",
				"<th>Start Date</th>",
				"<th>End Date</th>",
				"<th>&nbsp;</th><th>&nbsp;</th>",
			"</tr>",

				"<tpl for=\"Current\">",
					"{[this.debuggerFcn( values, parent )]}",
					"<tr>",
						"<th>Current Template:</th>",
						"<tpl if=\"null === TemplateDescription || ''=== TemplateDescription\">",
							"<td>{TemplateName}</td>",
						"</tpl>",
						"<tpl if=\"null !== TemplateDescription && '' !== TemplateDescription\">",
							"<td>{TemplateDescription}</td>",
						"</tpl>",
						"<td>{DateStarted}</td>",
						"<td>{[this.dspDateEnded(values)]}</td>",
						"<tpl if=\"'' === ApprovedByUser && '' !== AssignedByUser && '1' === SessionPreceptee\">",
							"<td colspan='2'>Template pending approval by cosigner</td>",
						"</tpl>",

						"<tpl if=\"'' === ApprovedByUser && '' !== AssignedByUser && '1' !== SessionPreceptee\">",
							"<td colspan='2'><button class=\"anchor\" name=\"ApproveRequest2ApplyTemplate\" templateName=\"{TemplateName}\" templateID=\"{TemplateID}\">Approve Regimen</button></td>",
						"</tpl>",
						"<tpl if=\"'' !== ApprovedByUser && '' !== AssignedByUser\">",
							"<td><button class=\"anchor\" name=\"ShowTemplateDetails\" EotsID=\"{EotsID}\" templateName=\"{TemplateName}\" templateID=\"{TemplateID}\">Show Details</button></td>",
							"<td>",
								"<tpl if=\"null === EotsID || ''=== EotsID\">",
									"<button class=\"anchor\" name=\"GenerateEoTS\" ",
										"templateName=\"{TemplateName}\" templateID=\"{TemplateID}\">", 
											"Stop Treatment", 
									"</button>",
								"</tpl>",
								"<tpl if=\"null !== EotsID && ''!== EotsID\">",
									"<button class=\"anchor\" templateName=\"{TemplateName}\" EotsID=\"{EotsID}\" templateID=\"{TemplateID}\" name=\"ShowEoTS\">",
										"Show End of Treatment Summary",
									"</button>",
								"</tpl>",
							"</td>",
						"</tpl>",



					"</tr>",
				"</tpl>",

				"<tpl for=\"Historical\">",
					"<tr>",
						"<th>Historical Template:</th>",
						"<tpl if=\"null === TemplateDescription || ''=== TemplateDescription\">",
							"<td>{TemplateName}</td>",
						"</tpl>",
						"<tpl if=\"null !== TemplateDescription && '' !== TemplateDescription\">",
							"<td>{TemplateDescription}</td>",
						"</tpl>",
						"<td>{DateStarted}</td>",
						"<td>{[this.dspDateEnded(values)]}</td>",
						"<td><button class=\"anchor\" name=\"ShowTemplateDetails\" EotsID=\"{EotsID}\" templateName=\"{TemplateName}\" templateID=\"{TemplateID}\">Show Details</button></td>",
						"<td>",
							"<tpl if=\"null === EotsID || ''=== EotsID\">",
								"<button class=\"anchor\" templateName=\"{TemplateName}\" templateID=\"{TemplateID}\" name=\"GenerateEoTS\">",
									"Generate End of Treatment Summary",
								"</button>",
							"</tpl>",
							"<tpl if=\"null !== EotsID && ''!== EotsID\">",
								"<button class=\"anchor\" templateName=\"{TemplateName}\" EotsID=\"{EotsID}\" templateID=\"{TemplateID}\" name=\"ShowEoTS\">",
									"Show End of Treatment Summary",
								"</button>",
							"</tpl>",
						"</td>",
					"</tr>",
				"</tpl>",

		"</table>",
		{
			dspDateEnded : function(data) {
				if ("" !== data.DateEndedActual) {
					return data.DateEndedActual;
				}
				return data.DateEnded;
			},
			fnc1 : function(data) {
				return "";
			},
			debuggerFcn : function ( current, prev ) {
				// debugger;
				if ("1" === SessionPreceptee) {
					var assign = current.AssignedByUser;
				}
				else {
					var apprvd = current.ApprovedByUser;
				}
			}
		}
	)
});

Ext.define('COMS.view.NewPlan.Pharmacy' ,{
    extend: 'Ext.panel.Panel',
    alias : 'widget.Pharmacy',
	name : 'Patient Pharmacological History',

	autoEl : { tag : 'section' },
	cls : 'xPandablePanel',

	collapsible : true,
	collapsed : true,
	title : 'Pharmacy',
	html: '<h2 class=\'Development\'>To Be Developed</h2>'
});

Ext.define('COMS.view.NewPlan.Reason4EOTSAnswer', {
    extend: 'Ext.form.RadioGroup',
    alias : 'widget.Reason4EOTSAnswer',
    width: 200, 
    hideLabel : true, 
    columns : 1, 
    vertical : true, 
    items : [
    // hidden: !(this.ChangeTemplate), 
        { boxLabel : "Completed Prescribed Course", name : "EOTS_Reason", inputValue : "Completed Prescribed Course"},
        { boxLabel : "Treatment Change", name : "EOTS_Reason", inputValue : "Treatment Change"},
        { xtype : "radiogroup", name : "Reason4EOTS_TCReason", width: 200, hidden : true, hideLabel : true, margin: "0 10 0 20", columns : 1, vertical : true, 
            items : [
                { boxLabel : "Toxicity", name : "EOTS_TChange", inputValue : "Toxicity"},
                { boxLabel : "Progression of the Disease", name : "EOTS_TChange", inputValue : "Progression of the Disease"},
                { boxLabel : "Patient Refusal", name : "EOTS_TChange", inputValue : "Patient Refusal"},
                { boxLabel : "Other", name : "EOTS_TChange", inputValue : "Other"},
                { xtype : "textfield", margin: "0 10 0 20", hidden : true, name : "EOTS_TChangeOther", hideLabel : true }
            ]
        },
        { boxLabel : "Patient Discontinuation", name : "EOTS_Reason", inputValue : "Patient Discontinuation"},
        { xtype : "radiogroup", name : "Reason4EOTS_PDReason", width: 200, hideLabel : true, hidden : true, margin: "0 10 0 20", columns : 1, vertical : true, 
            items : [
                { boxLabel : "Patient Terminated Regimen", name : "EOTS_PDChange", inputValue : "Patient Terminated Regimen"},
                { boxLabel : "Patient Left VA System", name : "EOTS_PDChange", inputValue : "Patient Left VA System"},
                { boxLabel : "Other", name : "EOTS_PDChange", inputValue : "Other"},
                { xtype : "textfield", margin: "0 10 0 20", hidden : true, name : "EOTS_PDChangeOther", hideLabel : true }
            ]
        },

        { boxLabel : "Other ", name : "EOTS_Reason", inputValue : "Other"},
        { xtype : "textfield", margin: "0 10 0 20", hidden : true, name : "EOTS_ReasonOther", hideLabel : true }
    ]
});

Ext.define("COMS.view.NewPlan.SelectPatient" ,{
	extend: "Ext.container.Container",
	alias : "widget.SelectPatient",
	name : "Select Patient Control",
	hidden : true,
	items : [
		{ xtype : "container", name : "Confirm", tpl : "Please click here to confirm this is the patient you want : <tpl for=\".\"><button class=\"anchor\" name=\"PatientConfirm\" pid=\"{Patient_ID}\" pn=\"{Patient_Name}\">{Patient_Name}</button>{NoPatientFound}</tpl>", hidden : true},
		{ xtype : "box", name : "NoPatient", html : "<div style=\"text-align: center; font-weight:bold; font-size:larger\">No Patient by that ID can be found in <abbr title=\"Computerized Patient Record System\">CPRS</abbr></div>", hidden : true},
		{ xtype : "combobox", 
			name : "Select", 
			hidden : true,
			store : "Patients", 
			labelWidth: 150,
			fieldLabel: "Select Patient from <abbr title=\"Computerized Patient Record System\">CPRS</abbr>",
			displayField: "name",
			valueField: "id"
		}
	]
});

/**
 *
 * Based on ViewEndTreatmentSummary.js
 *
 **/
Ext.define('COMS.view.NewPlan.TreatmentDetails', {
	extend: 'Ext.window.Window',
	alias : 'widget.TreatmentDetails',
	buttonAlign: 'center',
	name : "Treatment Details",
	title : "Treatment Details",

	autoEl : { tag : "section" },
	autoShow: true,
	width: 950,
	height: 800,
	layout : "fit",
	cls : "Report",
	items : [
		{ xtype: "container", name: "PatientInfoTableHeader", margin: "0 10 10 10", autoScroll: true, tpl:
			new Ext.XTemplate(
				"{[this.Check(values)]}",
				"<h1>Treatment Details</h1>",
				"<h2 style=\"margin-top: 1em;\">Patient Information for - {name}</h2>",
				"<table border=\"1\" class=\"InformationTable\">",
					"<tr>",
						"<th>Gender:</th><td>{Gender}</td>",
						"<th>Age:</th><td>{Age}</td>",
						"<th>Amputee:</th><td>{[this.Amputee(values)]}</td>",
					"</tr>",

					"<tr>",
						"<th>Template:</th><td colspan=\"5\">{TemplateName} - {TemplateDescription}</td>",
					"</tr>",

					"<tr>",
						"<th>Regimen Status:</th><td>{TreatmentStatus}</td>",
						"<th>Regimen Start Date:</th><td>{TreatmentStart}</td>",
						"<th>Regimen End Date:</th><td>{TreatmentEnd}",
						"</td>",
					"</tr>",

					"<tr><th colspan=\"2\">Type(s) of Cancer: </th><td colspan=\"4\">",
						"<tpl for=\"Disease\">",
							"<div>{Type}&nbsp;-&nbsp;{Stage}</div>",
						"</tpl>",
					"</td></tr>",
					"<tr><th colspan=\"2\">Allergies: </th><td colspan=\"4\">",
						"<table width=\"100%\" class=\"centerHead\"><tr><th>Name</th><th>Type</th><th>Comment</th></tr>",
						"<tpl for=\"Allergies\">",
							"<tr><td>{name}</td><td>{type}</td><td>{comment}</td>",
						"</tpl>",
						"</table>",
					"</td></tr>",
					"<tr><th colspan=\"2\">Clinical Trial: </th><td colspan=\"4\">{ClinicalTrial}</td></tr>",

					"<tr><th colspan=\"6\" style=\"text-align: center;\">Patient Vitals</th></tr>",
					"<tr><td colspan=\"6\" style=\"padding:0;\">",

						"<table style=\"margin:0 auto; width:100%;\" class=\"PatHistResults InformationTable\">",

							"<tr>",		// Pulse, BP, Respiration, 
								"<th rowspan=\"2\">Date</th>",
								"<th rowspan=\"2\">Temp</th>",
								"<th rowspan=\"2\">Pulse</th>",
								"<th rowspan=\"2\"><abbr title=\"Blood Pressure\">BP</abbr></th>",
								"<th rowspan=\"2\"><abbr title=\"Respiration in breaths per minute\">Resp</abbr></th>",
								"<th rowspan=\"2\">Pain</th>",
								"<th rowspan=\"2\"><abbr title=\"Saturation of Peripheral Oxygen\">SP O<sub>2</sub></abbr></th>",
								"<th rowspan=\"2\"><abbr title=\"Performance Status - Using the ECOG (Eastern Cooperative Oncology Group) Scale\">PS</abbr></th>",
								"<th rowspan=\"2\">Height<br />in Inches</th>",
								"<th rowspan=\"2\">Weight<br />in lbs.</th>",
								"<th colspan=\"4\"><abbr title=\"Body Surface Area\">BSA</abbr></th>",
							"</tr>",
							"<tr>",		// Pulse, BP, Respiration, 
								"<th ><abbr title=\"Body Surface Area Weight Formula\">Weight Form.</abbr></th>",
								"<th ><abbr title=\"Body Surface Area Weight \">Weight</abbr> in KG</th>",
								"<th ><abbr title=\"Body Surface Area Formula\">Method</abbr></th>",
								"<th ><abbr title=\"Body Surface Area Formula\">BSA</abbr></th>",
							"</tr>",
							"<tpl for=\"Vitals\">",
								"<tr>",
									"<td>{DateTaken}</td>",
									"<td>{Temperature}</td>",
									"<td>{Pulse}</td>",
									"<td>{BP}</td>",
									"<td>{Respiration}</td>",
									"<td>{Pain}</td>",
									"<td>{SPO2}</td>",
									"<td><abbr title=\"{PS}\">{PSID}</abbr></td>",
									"<td>{Height}</td>",
									"<td>{Weight}</td>",
									"<td>{WeightFormula}</td>",
									"<td>{BSA_Weight}</td>",
									"<td>{BSA_Method}</td>",
									"<td>{[this.BSACalc(values, parent)]}</td>",
								"</tr>",
							"</tpl>",
						"</table>",
					"</td></tr>",

				"</table>",

				"<br /><br />",
				{
					// XTemplate Configuration
					disableFormats: true,
					DebuggerFcn : function ( values ) {
						 // debugger;
					},
					name : function(v, p) {
						return (v.name);
					},
					admin : function(v, p) {
						return ("<tr><th>" + v.day + "</th><td>" + v.date + "</td><td colspan=\"2\">" + v.dosage + "</td></tr>");
					},
					Check : function( v ) {
					},
					Check1 : function( v, p ) {
						var buf = "";
						buf = "<tr><th style=\"text-align: left;\" colspan=\"4\">" + v.name + "</th></tr>";
						var i, aLen = v.administered.length, aBuf;
						if (0 === aLen) {
							buf += "<tr><td colspan=\"4\">No " + v.name + " administered</td></tr>";
						}
						else {
							for (i = 0; i < aLen; i++) {
								aBuf = v.administered[i];
								buf += "<tr><th style=\"width:10em;\">" + aBuf.day + "</th><td style=\"width:10em;\">" + aBuf.date + "</td><td colspan=\"2\">" + aBuf.dosage + "</td></tr>";
							}
						}
						return(buf);
					},
					Amputee : function(a) {
						// Amputee info is now an array of descriptions
						var retBuf = "None";
						if (a.Amputations) {
							var ampu = a.Amputations;
							var i, len = ampu.length, buf = "";
							if (len > 0) {
								for (i =0; i < len; i++) {
									buf += ampu[i].description + "<br>";
								}
								return (buf);
							}
						}
						return(retBuf);
					},
				BSACalc: function (data, pData) {
					data.Amputations = pData.Amputations;
					var BSA = Ext.BSA_Calc(data);
					if ("" !== BSA && 0 !== BSA) {
						return ("<button class=\"anchor dspVSHDoseCalcs\" name=\"dspVSHDoseCalcs\" title=\"Show Dosage Calculation\" " + 
							"weight=\"" + data.Weight + "\" " + 
							"height=\"" + data.Height + "\" " + 
							"weightFormula=\"" + data.WeightFormula + "\" " + 
							"bsa_Weight=\"" + data.BSA_Weight + "\" " + 
							"bsa_Method=\"" + data.BSA_Method + "\" " + 
						">" + BSA + "</button> m<sup>2</sup>");
					}
					return ("");
				}
				}
			)
		}
	],
	buttons : [
		{ text: "Close", action: "cancel" }
	],
	initComponent: function() {
		wccConsoleLog("Treatment Details View - Initialization");
		this.callParent(arguments);
	}
});


Ext.define('COMS.view.NewPlan.ViewEndTreatmentSummary', {
	extend: 'Ext.window.Window',
	alias : 'widget.ViewEndTreatmentSummary',
	buttonAlign: 'center',
	name : "End of Treatment Summary",
	title : "End of Treatment Summary",

	autoEl : { tag : "section" },
	autoShow: true,
	width: 950,
	height: 800,
	layout : "fit",
	cls : "Report",
	items : [
		{ xtype: "container", name: "PatientInfoTableHeader", margin: "0 10 10 10", autoScroll: true, tpl: 
			new Ext.XTemplate(
				"{[this.Check(values)]}",
				"<h1>End of Treatment Summary</h1>",
				"<h2>Reason for generating End of Treatment Summary {EoTS.EndReason}</h2>",
				"<h2 style=\"margin-top: 1em;\">Patient Information for - {name}</h2>",
				"<table border=\"1\" class=\"InformationTable\">",
					"<tr>",
						"<th>Gender:</th><td>{Gender}</td>",
						"<th>Age:</th><td>{Age}</td>",
						"<th>Amputee:</th><td>{[this.Amputee(values)]}</td>",
					"</tr>",

					"<tr>",

						"<th>Template:</th><td colspan=\"5\">{EoTS.TemplateName} - {EoTS.TemplateDescription}</td>",
					"</tr>",

					"<tr>",
						"<th>Regimen Status:</th><td>{EoTS.TreatmentStatus}</td>",
						"<th>Regimen Start Date:</th><td>{EoTS.TreatmentStart}</td>",
						"<th>Regimen End Date:</th><td>{EoTS.TreatmentEnd}",
//							"<tpl if=\"''!== EoTS.TreatmentOriginalEnd\">",
//								"&nbsp;<em>(Original Scheduled End Date - {EoTS.TreatmentOriginalEnd})</em>",
//							"</tpl>",
						"</td>",
					"</tr>",
				"</table>",



						"<table border=\"1\" class=\"InformationTable\">",
							"<tr><th>Type(s) of Cancer: </th><td colspan=3>",
								"<tpl for=\"Disease\">",
									"<div>{Type}&nbsp;-&nbsp;{Stage}</div>",
								"</tpl>",
							"</td></tr>",
							"<tr><th>Allergies: </th><td colspan=3>",
								"<table width=\"100%\" class=\"centerHead\"><tr><th>Name</th><th>Type</th><th>Comment</th></tr>",
								"<tpl for=\"Allergies\">",
									"<tr><td>{name}</td><td>{type}</td><td>{comment}</td>",
								"</tpl>",
								"</table>",
							"</td></tr>",
							"<tr><th>Clinical Trial: </th><td colspan=3>{ClinicalTrial}</td></tr>",
						"</table>",

						"<h2 style=\"margin-top: 1em; text-align: left;\">Initial Vital Signs</h2>",
						"<table border=\"1\" class=\"InformationTable\">",
							"<tr><td colspan=\"4\">",
								"<table width=\"100%\" class=\"centerHead\">",
									"<tr>",
										"<th>Date Vitals Taken</th>",
										"<th>Height</th>",
										"<th>Weight</th>",
										"<th>Blood Pressure</th>",
										"<th>Temperature</th>",
										"<th>Pain</th>",
										"<th>Pulse</th>",
										"<th>Respiration</th>",
										"<th><abbr title=\"Oxygen %\">SPO2</abbr></th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight Method</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Formula</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr></th>",
									"</tr>",
									"<tr>",
										"<td>{EoTS.FirstVitals.DateTaken}</td>",
										"<td>{EoTS.FirstVitals.Height}</td>",
										"<td>{EoTS.FirstVitals.Weight}</td>",
										"<td>{EoTS.FirstVitals.BP}</td>",
										"<td>{EoTS.FirstVitals.Temperature}</td>",
										"<td>{EoTS.FirstVitals.Pain}</td>",
										"<td>{EoTS.FirstVitals.Pulse}</td>",
										"<td>{EoTS.FirstVitals.Respiration}</td>",
										"<td>{EoTS.FirstVitals.SPO2}</td>",
										"<td>{EoTS.FirstVitals.WeightFormula}</td>",
										"<td>{EoTS.FirstVitals.BSA_Weight}</td>",
										"<td>{EoTS.FirstVitals.BSA_Method}</td>",
										"<td>{EoTS.FirstVitals.BSA}</td>",
									"</tr>",
									"<tr><th style=\"text-align: right\">Performance Status:</th>",
									"<td colspan=\"12\">{EoTS.FirstVitals.PSID} - {EoTS.FirstVitals.PS}</td></tr>",
								"</table>",
							"</td></tr>",
						"</table>",

						"<h2 style=\"margin-top: 1em; text-align: left;\">Final Vital Signs</h2>",
						"<table border=\"1\" class=\"InformationTable\">",
							"<tr><td colspan=\"4\">",
								"<table width=\"100%\" class=\"centerHead\">",
									"<tr>",
										"<th>Date Vitals Taken</th>",
										"<th>Height</th>",
										"<th>Weight</th>",
										"<th>Blood Pressure</th>",
										"<th>Temperature</th>",
										"<th>Pain</th>",
										"<th>Pulse</th>",
										"<th>Respiration</th>",
										"<th><abbr title=\"Oxygen %\">SPO2</abbr></th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight Method</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Weight</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr> Formula</th>",
										"<th><abbr title=\"Body Surface Area\">BSA</abbr></th>",
									"</tr>",
									"<tr>",
										"<td>{EoTS.LastVitals.DateTaken}</td>",
										"<td>{EoTS.LastVitals.Height}</td>",
										"<td>{EoTS.LastVitals.Weight}</td>",
										"<td>{EoTS.LastVitals.BP}</td>",
										"<td>{EoTS.LastVitals.Temperature}</td>",
										"<td>{EoTS.LastVitals.Pain}</td>",
										"<td>{EoTS.LastVitals.Pulse}</td>",
										"<td>{EoTS.LastVitals.Respiration}</td>",
										"<td>{EoTS.LastVitals.SPO2}</td>",
										"<td>{EoTS.LastVitals.WeightFormula}</td>",
										"<td>{EoTS.LastVitals.BSA_Weight}</td>",
										"<td>{EoTS.LastVitals.BSA_Method}</td>",
										"<td>{EoTS.LastVitals.BSA}</td>",
									"</tr>",
									"<tr><th style=\"text-align: right\">Performance Status:</th>",
									"<td colspan=\"12\">{EoTS.LastVitals.PSID} - {EoTS.LastVitals.PS}</td></tr>",
								"</table>",
							"</td></tr>",
						"</table>",

						"<h2 style=\"margin-top: 1em; text-align: left;\">Medications</h2>",
						"<table border=\"1\" class=\"InformationTable\">",
								"<tpl for=\"EoTS.Meds\">",
									"{[this.Check1(values, parent)]}",
								"</tpl>",
						"</table>",

						"<h2 style=\"margin-top: 1em; text-align: left;\">Disease Response</h2>",
						"<table border=\"1\" class=\"InformationTable\">",
								"<tpl for=\"EoTS.DiseaseResponse\">",
									"<tpl if=\"''!== day\">",
										"<tr><th style=\"width:10em;\">{day}</th><td style=\"width:10em;\">{date}</td><td>{desc}</td></tr>",
									"</tpl>",
									"<tpl if=\"''=== day\">",
										"<tr><td colslan=\"4\">No Disease Responses Recorded</td></tr>",
									"</tpl>",
//									"<tr><th style=\"width:10em;\">{day}</th><td style=\"width:10em;\">{date}</td><td>{desc}</td></tr>",
								"</tpl>",								
						"</table>",

						"<h2 style=\"margin-top: 1em; text-align: left;\">Toxicity Response</h2>",
						"<table border=\"1\" class=\"InformationTable\">",
								"<tpl for=\"EoTS.Toxicity\">",
									"<tpl if=\"''!== day\">",
										"<tr><th style=\"width:10em;\">{day}</th><td style=\"width:10em;\">{date}</td><td>{desc}</td></tr>",
									"</tpl>",
									"<tpl if=\"''=== day\">",
										"<tr><td colslan=\"4\">No Toxicity Side Effects Recorded</td></tr>",
									"</tpl>",
//									"<tr><th style=\"width:10em;\">{day}</th><td style=\"width:10em;\">{date}</td><td>{desc}</td></tr>",
								"</tpl>",								
						"</table>",

						"<h2 style=\"margin-top: 1em; text-align: left;\">Other Comments</h2>",
						"<table border=\"1\" class=\"InformationTable\">",
								"<tpl for=\"EoTS.Other\">",
									"<tpl if=\"''!== day\">",
										"<tr><th style=\"width:10em;\">{day}</th><td style=\"width:10em;\">{date}</td><td>{desc}</td></tr>",
									"</tpl>",
									"<tpl if=\"''=== day\">",
										"<tr><td colslan=\"4\">No Other Comments Recorded</td></tr>",
									"</tpl>",
//									"<tr><th style=\"width:10em;\">{day}</th><td style=\"width:10em;\">{date}</td><td>{desc}</td></tr>",
								"</tpl>",								
						"</table>",

						"<h2 style=\"margin-top: 1em; text-align: left;\">Provider Report</h2>",
						"<table border=\"1\" class=\"InformationTable\">",
							"<tpl if=\"''!== EoTS.ProviderReport\">",
								"<tr><td>{EoTS.ProviderReport}</td></tr>",
							"</tpl>",
							"<tpl if=\"''=== EoTS.ProviderReport\">",
								"<tr><td>No Provider Report listed</td></tr>",
							"</tpl>",
						"</table>",

						"<h2 style=\"margin-top: 1em; text-align: left;\">Follow-Up Appointments</h2>",
						"<table border=\"1\" class=\"InformationTable\">",
							"<tpl if=\"''!== EoTS.FollowUpAppointments\">",
								"<tr><td>{EoTS.FollowUpAppointments}</td></tr>",
							"</tpl>",
							"<tpl if=\"''=== EoTS.FollowUpAppointments\">",
								"<tr><td>No Follow-Up Appointments listed</td></tr>",
							"</tpl>",
						"</table>",

					"<br /><br />",
				{
					// XTemplate Configuration
					disableFormats: true,
					name : function(v, p) {
						return (v.name);
					},
					admin : function(v, p) {
						return ("<tr><th>" + v.day + "</th><td>" + v.date + "</td><td colspan=\"2\">" + v.dosage + "</td></tr>");
					},
					Check : function( v ) {
					},
					Check1 : function( v, p ) {
						// var Meds = v.EoTS.Meds;
						var buf = "";
						buf = "<tr><th style=\"text-align: left;\" colspan=\"4\">" + v.name + "</th></tr>";
						var i, aLen = v.administered.length, aBuf;
						if (0 === aLen) {
							buf += "<tr><td colspan=\"4\">No " + v.name + " administered</td></tr>";
						}
						else {
							for (i = 0; i < aLen; i++) {
								aBuf = v.administered[i];
								buf += "<tr><th style=\"width:10em;\">" + aBuf.day + "</th><td style=\"width:10em;\">" + aBuf.date + "</td><td colspan=\"2\">" + aBuf.dosage + "</td></tr>";
							}
						}
						return(buf);
					},
					Amputee : function(a) {
						// Amputee info is now an array of descriptions
						var retBuf = "None";
						if (a.Amputations) {
							var ampu = a.Amputations;
							var i, len = ampu.length, buf = "";
							if (len > 0) {
								for (i =0; i < len; i++) {
									buf += ampu[i].description + "<br>";
								}
								return (buf);
							}
						}
						return(retBuf);
					}
				}
			)
		}
	],
	buttons : [
		{ text: "Close", action: "cancel" }
	],
	initComponent: function() {
		wccConsoleLog("End of Treatment Summary View - Initialization");
		this.callParent(arguments);
	}
});


Ext.define('COMS.view.NewPlan.dspTemplateData' ,{
	extend: 'Ext.container.Container',
	alias : 'widget.dspTemplateData',
	name : 'dsp Template Data',

	margin : '10',
	cls : 'CCOrderSheet',
	autoEl : { tag : 'section' },
	hidden : true,
	tpl : new Ext.XTemplate(
		"<a href=\"LookUp/PrintTemplate/{id}\" target=\"_blank\">Print</a> Template",
		"{[this.debuggerFcn( values, parent )]}",
		"<h1>CANCER CHEMOTHERAPY IV ORDER SHEET</h1>",
		"<table class=\"NoWrapHeader\">",
			"<tr>",
				"<td colspan=\"2\">",
					"<table><tr>",
						"<th>Max Number of Cycles:</th>",
						"<td>{CourseNumMax}</td>",
						"<th>Cycle Length:</th>",
						"<td>{CycleLength} <tpl for=\"CycleLengthUnit\">{name}</tpl></td>",
					"</tr></table>",
				"</td>",
			"</tr>",
			"<tr><th>Chemotherapy Regimen Name:</th><td>{RegimenName}</td></tr>",
			"<tr><th>Description:</th><td>{Description}</td></tr>",
			"<tr><th>Emetogenic level:</th><tpl for=\"ELevel\"><td>{name}</td></tpl></tr>",
			"<tr><th>Febrile Neutropenia risk:</th><td>{FNRisk} %</td></tr>",
			"<tr><th>Reference:</th><td>",

				"<table><tpl for=\"References\">",
					"<tr><td>{Reference}</td></tr>",
					"<tpl if=\"''!== ReferenceLink\">",
						"<tr><td>(<a href=\"{ReferenceLink}\" title=\"Link to PMID\" target=\"_blank\">Link to PMID</a>)</td></tr>",
					"</tpl>",
				"</tpl></table>",
			"</td></tr>",

		"</table>",

		"<table border=\"1\" class=\"InformationTable\">",
			"<tr><th colspan=\"5\" style=\"text-align: left; border: none !important;\"><h2 style=\"text-align: left;\">Pre Therapy</h2></th><tr>",
			"<tr><th colspan=\"5\" style=\"text-align: left; border: none !important; font-weight: normal;\">Instructions: {PreMHInstructions}</th><tr>",
			"<tr class=\"TemplateHeader\">",
				"<th>Sequence #</th>",
				"<th>Drug</th>",
				"<th>Dose</th>",
				"<th>Route</th>",
				"<th>Administration Day</th>",
				/* "<th>Total Cumulative Dosing</th>", */
			"</tr>",
			"<tpl for=\"PreMHMeds\">",
				"<tr>",
					"<th rowspan=\"2\">{Sequence}</th>",
					"<td>{Drug}</td>",
					"<td>{Amt1} {Units1} {[this.optionalData(values.Amt2, values.Units2)]} </td>",
					"<td>{[this.calcRoute(values)]}</td>",
					"<td>{Day}</td>",
					/* "<td rowspan=\"2\">{CumDosePerCycle} {CumDosePerCycleUnits} <br>
					   over {NumAdminDays} Admin Days per Cycle <br> 
					   resulting in {CumDosePerRegimen} {CumDosePerCycleUnits} over the course of the Regimen</td>", 
					 */
				"</tr>",
				"<tr>",
					"<th class=\"NoBorder\">Fluid/Volume: </th><td class=\"NoBorder\">{[this.dspInfusionFluid(values)]}</td>",
					"<th class=\"NoBorder\">Infusion Time: </th><td class=\"NoBorder\">{InfusionTime1}</td>",
				"</tr>",
				"<tpl if=\"''!== Instructions\">",
					"<tr><td colspan=\"5\">{Instructions}</td></tr>",
				"</tpl>",
			"</tpl>",
		"</table>",


		"<table border=\"1\" class=\"InformationTable HighlightedInfoTable\">",
			"<tr><th colspan=\"5\" style=\"text-align: left; border: none !important;\"><h2 style=\"text-align: left;\">Therapy</h2></th><tr>",
			"<tr><th colspan=\"5\" style=\"text-align: left; border: none !important; font-weight: normal;\">Instructions: {RegimenInstruction}</th><tr>",

			"<tr class=\"TemplateHeader\">",
				"<th>Sequence #</th>",
				"<th>Drug</th>",
				"<th>Dose</th>",
				"<th>Route</th>",
				"<th>Administration Day</th>",
				/* "<th>Total Cumulative Dosing</th>", */
			"</tr>",

			"<tpl for=\"Meds\">",
				"<tr>",
					"<th rowspan=\"2\">{Sequence}</th>",
					"<td>{Drug}</td>",
					"<td>{Amt} {Units}</td>",
					"<td>{[this.calcRoute(values)]}</td>",
					"<td>{Day}</td>",
					/* "<td rowspan=\"2\">{CumDosePerCycle} {CumDosePerCycleUnits} <br>
					   over {NumAdminDays} Admin Days per Cycle <br> 
					   resulting in {CumDosePerRegimen} {CumDosePerCycleUnits} over the course of the Regimen</td>", 
					 */
				"</tr>",
				"<tr>",
					"<th class=\"NoBorder\">Fluid/Volume: </th><td class=\"NoBorder\">{[this.dspInfusionFluid(values)]}</td>",
					"<th class=\"NoBorder\">Infusion Time: </th><td class=\"NoBorder\">{InfusionTime}</td>",
				"</tr>",
				"<tpl if=\"''!== Instructions\">",
					"<tr><td colspan=\"5\">{Instructions}</td></tr>",
				"</tpl>",
			"</tpl>",
			"</table>",













		"<table border=\"1\" class=\"InformationTable\">",
			"<tr><th colspan=\"5\" style=\"text-align: left; border: none !important;\"><h2 style=\"text-align: left;\">Post Therapy</h2></th><tr>",
			"<tr><th colspan=\"5\" style=\"text-align: left; border: none !important; font-weight: normal;\">Instructions: {PostMHInstructions}</th><tr>",
			"<tr class=\"TemplateHeader\">",
				"<th>Sequence #</th>",
				"<th>Drug</th>",
				"<th>Dose</th>",
				"<th>Route</th>",
				"<th>Administration Day</th>",
				/* "<th>Total Cumulative Dosing</th>", */
			"</tr>",
			"<tpl for=\"PostMHMeds\">",
				"<tr>",
					"<th rowspan=\"2\">{Sequence}</th>",
					"<td>{Drug}</td>",
					"<td>{Amt1} {Units1} {[this.optionalData(values.Amt2, values.Units2)]} </td>",
					"<td>{[this.calcRoute(values)]}</td>",
					"<td>{Day}</td>",
					/* "<td rowspan=\"2\">{CumDosePerCycle} {CumDosePerCycleUnits} <br>over {NumAdminDays} Admin Days per Cycle <br> resulting in {CumDosePerRegimen} {CumDosePerCycleUnits} over the course of the Regimen</td>", */
				"</tr>",
				"<tr>",
					"<th class=\"NoBorder\">Fluid/Volume: </th><td class=\"NoBorder\">{[this.dspInfusionFluid(values)]}</td>",
					"<th class=\"NoBorder\">Infusion Time: </th><td class=\"NoBorder\">{InfusionTime1}</td>",
				"</tr>",
				"<tpl if=\"''!== Instructions\">",
					"<tr><td colspan=\"5\">{Instructions}</td></tr>",
				"</tpl>",
			"</tpl>",
		"</table>",

		"<table border=\"1\" class=\"InformationTable HighlightedInfoTable\">",
		"<tr><th>Cumulative Medications:</th><td>{[this.CumDoseMeds( values, parent )]}</td></tr>",
		"</table>",


		"<table border=\"1\" class=\"InformationTable\">",
		"<tr><th style=\"width:45%;\">Patients Currently Undergoing This Regimen:</th><td>{[this.PatientList( values )]}</td></tr>",
		"</table>",



		{
				// XTemplate Configuration
			disableFormats: true,
			debuggerFcn : function ( current, prev ) {
				// debugger;
			},
			optionalData: function (data, data2) {
				if ("" !== data) {
					return ("<br /><em>" + data + " " + data2 + "</em>");
				}
				return "";
			},
			calcRoute : function(data) {
				var route = data.Infusion1 ? data.Infusion1 : data.Route;
				if (route.indexOf(" : ") > 0) {
					route = route.split(" : ")[0];
				}
				return route;
			},
			dspInfusionFluid : function( data ) {
				if (data.FluidType && "" !== data.FluidType) {
					return data.FluidType + " " + data.FluidVol + " ml";
				}
				else if (data.FluidType1 && "" !== data.FluidType1) {
					return data.FluidType1 + " " + data.FluidVol1 + " ml";
				}
				return "";
			},
			PatientList : function (current) {
				return "<button class=\"anchor PatientList\">" + current.PatientListCount + "</button>";
			},
			CumDoseMeds : function ( current, prev ) {
				var i, msg, medStr, cdmir, cdmirList = current.CumulativeDoseMedsInRegimen, len = cdmirList.length;
				var cdt, cdtMed, exceeds, xxx, cdtLen, cdtAmt, cdmirAmt;
				msg = "No Cumulative Dose Tracked Medications in this Regimen";

				if (len > 0) {
					if (1 === len) {
						msg = "There is";
						medStr = "Medication";
					}
					else {
						msg = "There are";
						medStr = "Medications";
					}

					msg = " " + len + " Cumulative Dose Tracked " + medStr + " in this Regimen";
					msg += "<table class=\"InformationTable\">";
					// msg += "<tr class=\"TemplateHeader\"><th>Medication Name</th><th>Lifetime Max</th><th>Total / Cycle</th><th>Total / Regimen</th></tr>";
					msg += "<tr class=\"TemplateHeader\">";
					msg +=		"<th rowspan=\"2\">Medication Name</th>";
					msg +=		"<th rowspan=\"2\">Lifetime Max</th>";
					msg +=		"<th colspan=\"2\">For This Regimen</th>";
					msg +=		"<th colspan=\"2\">For This Patient</th>";
					msg += "</tr>";
					msg += "<tr class=\"TemplateHeader\">";
					
					msg +=		"<th>Total / Cycle</th>";
					msg +=		"<th>Total / Regimen</th>";
					msg +=		"<th>Lifetime Total</th>";
					msg +=		"<th>Exceeds Max</th>";
					msg +=	"</tr>";

					
					// debugger;
					for (i0 = 0; i0 < len; i0++) {
						cdmir = cdmirList[i0];
						var cdmirUnits = cdmir.CumulativeDoseUnits;
						var m0 = cdmir.MedName;

						// var m1 = Ext.util.Format.number(("" + cdmir.CumulativeDoseAmt).replace(",", ""), "0,0") + " " + cdmirUnits;
						// var m2 = Ext.util.Format.number(("" + cdmir.CumDosePerCycle).replace(",", ""), "0,0") + " " + cdmirUnits;
						// var m3 = Ext.util.Format.number(("" + cdmir.CumDosePerRegimen).replace(",", ""), "0,0") + " " + cdmirUnits;
						var m1 = Ext.FormatNumber(("" + cdmir.CumulativeDoseAmt).replace(",", "")) + " " + cdmirUnits;
						var m2 = Ext.FormatNumber(("" + cdmir.CumDosePerCycle).replace(",", "")) + " " + cdmirUnits;
						var m3 = Ext.FormatNumber(("" + cdmir.CumDosePerRegimen).replace(",", "")) + " " + cdmirUnits;

						msg += "<tr>";
						msg += "<td>" + m0 + "</td>";
						msg += "<td>" + m1 + "</td>";
						msg += "<td>" + m2 + "</td>";
						msg += "<td>" + m3 + "</td>";
						
						var MedNotTracked = true;
						if (COMS.Patient.CumulativeDoseTracking) {
							cdtLen = COMS.Patient.CumulativeDoseTracking.length;
							if (cdtLen > 0) {
								for (i = 0; i < cdtLen; i++) {
									cdt = COMS.Patient.CumulativeDoseTracking[i];
									cdtMed = cdt.MedName;
									if (cdtMed === cdmir.MedName) {
										MedNotTracked = false;
										if ("string" == typeof cdt.CurCumDoseAmt) {
											cdtAmt = cdt.CurCumDoseAmt.replace(",", "");
										}
										else {
											cdtAmt = cdt.CurCumDoseAmt;
										}
										// msg += "<td>" + Ext.util.Format.number(cdt.CurCumDoseAmt, "0,0") + " " + cdmirUnits + "</td>";
										msg += "<td>" + Ext.FormatNumber(cdt.CurCumDoseAmt) + " " + cdmirUnits + "</td>";
										
									

										if ("string" == typeof cdmir.CumulativeDoseAmt) {
											cdmirAmt = cdmir.CumulativeDoseAmt.replace(",", "");
										}
										else {
											cdmirAmt = cdmir.CumulativeDoseAmt;
										}

										exceeds = (1 * cdtAmt) + (1 * cdmir.CumDosePerRegimen);
										if (exceeds > (1 * cdmirAmt)) {
											var xeedsByAmt = (exceeds - (1 * cdmirAmt));
											var xceedsByPct = ((xeedsByAmt / (1 * cdmirAmt)) * 100) + 100;
											// msg += "<td>" + Ext.util.Format.number(xceedsByPct, "0,0") + "%</td>";
											msg += "<td>" + Ext.FormatNumber(xceedsByPct) + "%</td>";

											msg += "</tr><tr><td colspan=\"6\" class=\"smlTCDWarning\">";
											// msg += "Warning, Regimen will exceed Patient's Lifetime Cumulative Dose of " + cdmir.MedName + " by " + Ext.util.Format.number(xeedsByAmt, "0,0") + " " + cdmirUnits + " (" + Ext.util.Format.number(xceedsByPct, "0,0") + "%) ";
											   msg += "Warning, Regimen will exceed Patient's Lifetime Cumulative Dose of " + cdmir.MedName + " by " + Ext.FormatNumber(xeedsByAmt) + " " + cdmirUnits + " (" + Ext.FormatNumber(xceedsByPct) + "%) ";
											msg += "</td></tr>";
										}
										else {
											msg += "<td>&nbsp;.</td>";
											msg += "<td>&nbsp;.</td>";
											msg += "</tr>";
										}
									}
								}
							}
						}
						if (MedNotTracked) {
							msg += "<td>N/A</td>";
							msg += "<td>N/A</td>";
							msg += "</tr>";
						}
					}
					msg += "</table>";
				}
				return msg;
			}
		}
	)
});

// create reusable renderer
Ext.util.Format.comboRenderer = function (combo) {
	return function (value) {
		var record = combo.findRecord(combo.valueField, value);
		return record ? record.get(combo.displayField) : combo.valueNotFoundText;
	};
};

// create the combo instance
var combo = new Ext.form.ComboBox({
	typeAhead: true,
	triggerAction: "all",
	lazyRender: true,
	queryMode: "local",
	store: {
		fields: [{
			name: "orderstatus"
		}],
		data: [
			{orderstatus: "Ordered"}, 
			// {orderstatus: "In-Coordination"}, 
			{orderstatus: "Cleared"}, 
			{orderstatus: "Finalized"}, 
			{orderstatus: "Dispensed"}, 
			// {orderstatus: "Administered"}, 
			{orderstatus: "Cancelled"}
		]
	},
	displayField: "orderstatus"
});


Ext.define("COMS.view.Orders.OrdersTab", {
	extend: "Ext.grid.Panel",
	alias: "widget.OrdersTab", // Any references to this view should be for an xtype : "OrdersTab"
	name: "Orders Tab",
	margin: "0 10 10 10",
	autoScroll: "y",
	columnLines: true,
	width: 970, // Not used
	viewConfig: {
		stripeRows: true,
		height: 655,
		forceFit: true
	},
	store: "OrdersStore", // Since this is now a Grid, we need to get the name of our store
	features: [{
		ftype: "grouping", startCollapsed : true
	}],

	plugins: [
		Ext.create("Ext.grid.plugin.CellEditing", {
			clicksToEdit: 1
		})
	],

	selType: "cellmodel",

	columns: [{
		header: "Name",
		dataIndex: "Last_Name",
		// width: 180,
		flex: 3,
		sortable: true,
		align: "left",
		hidden: true
	}, {
		header: "<div>Patient</div>",
		dataIndex: "patientID",
		width: 60,
		sortable: true,
		align: "left",
		hidden: true
	}, {
		header: "<div>Template</div>",
		dataIndex: "templateID",
		width: 80,
		sortable: false,
		align: "left",
		editor: new Ext.form.TextField(),
		hidden: true
	}, {
		header: "<div>OrderID</div>",
		dataIndex: "orderid",
		width: 80,
		sortable: false,
		align: "left",
		editor: new Ext.form.TextField(),
		hidden: true
	}, {
		header: "<div class=\"multiLine\">Admin<br/>Day</div>",
		dataIndex: "adminDay",
		width: 45,
		sortable: true,
		align: "left",
		hidden: true
	}, {
		header: "<div>Admin Date</div>",
		dataIndex: "adminDate",
		width: 80,
		sortable: true,
		align: "left"
	}, {
		header: "<div>Type</div>",
		dataIndex: "type",
		// width: 75,
		// flex: 2,
		width: 80,
		sortable: false,
		align: "left"
	}, {
		header: "<div>Drug</div>",
		dataIndex: "drug",
		width: 200,
		sortable: true,
		align: "left"
	}, {
		header: "<div>Dosage</div>",
		dataIndex: "dose",
		xtype: "numbercolumn", 
		format:"0.00",
		renderer: function(v) {
			var fltValue = parseFloat(v);
			var intValue = parseInt(v);
			if (intValue == Number.NaN) {
				return("");
			}
			if (intValue == fltValue) {
			 return(intValue);
			}
			return(fltValue);
		},
		width: 60,
		sortable: false
	}, {
		header: "<div>Units</div>",
		dataIndex: "unit",
		width: 50,
		sortable: false,
		align: "left"
	}, {
		header: "<div>Route</div>",
		dataIndex: "route",
		width: 50,
		sortable: false,
		align: "left",
		renderer: function(v) {
			if (v.indexOf(" : ") > 0) {
				v = v.split(" : ")[0];
			}
			return v;
		}
	}, {
		header: "<div class=\"multiLine\">Fluid/<br/>Volume<br>ml</div>",
		dataIndex: "fluidVol",
		width: 50,
		sortable: false,
		align: "left"
	}, {
		header: "<div class=\"multiLine\">Flow<br/>Rate<br>ml/hr</div>",
		dataIndex: "flowRate",
		width: 40,
		sortable: false,
		align: "left"
	}, {
		header: "<div class=\"multiLine\">Fluid<br/>Type</div>",
		dataIndex: "fluidType",
		width: 40,
		sortable: false,
		align: "left"
	}, {
		header: "<div>Instructions</div>",
		dataIndex: "instructions",
		// width: 120,
		flex: 1,
		sortable: false,
		align: "left"
	}, {
		header: "<div>Order Status</div>",
		dataIndex: "orderstatus",
		width: 80,
		sortable: true,
		align: "left",
		editor: combo
	}
	],
	buttons: [{
		text: "Refresh"
	}, {
		text: "Edit",
		disabled: true
	}, {
		text: "Update Records"
	}],
	buttonAlign: "left"
});


Ext.define("COMS.view.ProgrammerBtns" ,{
	"extend" : "Ext.container.Container",
	"alias" : "widget.ProgrammerBtns",
	"name" : "ProgrammerBtns",
	"margin" : "10",
	"hidden" : (ShowProgrammerBtns === "" ? true : (ShowProgrammerBtns === "1" ? false : true)),
	
	"items" : [
		{ "xtype" : "container", "layout" : "hbox", "defaults" : { "margin" : 2 }, 
			items : [
				{ "xtype" : "button", "text" : "Debugger" },
				{ "xtype" : "button", "text" : "Demo Pop Up Window" },
			]
		},
		{ "xtype" : "container", "layout" : "hbox", "defaults" : { "margin" : 2 }, 
			items : [
				{ "xtype" : "button", "text" : "Patients List" },
				{ "xtype" : "button", "text" : "Change Admin Date" },
				
				{ "xtype" : "button", "text" : "Mask PI Table" },
				{ "xtype" : "button", "text" : "Load Vitals" },
				{ "xtype" : "button", "text" : " " },
				{ "xtype" : "button", "text" : "Load Treatment Data" },
				{ "xtype" : "button", "text" : "FS Optional Ques" },
				{ "xtype" : "button", "text" : "Infusion Reactions" },
				{ "xtype" : "button", "text" : "Refresh Cumulative Dosing" },
				{ "xtype" : "button", "text" : "Add Cumulative Dosing" }
			]
		}
	]
});


Ext.define("COMS.view.RequiredInstr", {
	"extend": "Ext.Component",
	"alias": "widget.RequiredInstr",
	"cls" : "RequiredInstr",
	"html": "Fields with an <em class=\"required-field\">*</em> are required fields"
});



Ext.define("COMS.view.TemplateList.TemplateListTab", {
	"extend" : "Ext.container.Container",
	"title" : "List of Active Templates",
	"header" : false,
	"alias" : "widget.TemplateListTab",
	"height" : "auto",
	"margin" : "10",
	"resizable" : true,
	"bodyStyle" : "padding:5px",
	"autoScroll" : true,

	"items" : [
		{"xtype" : "RequiredInstr", "hidden" : false },
		{ "xtype" : "selCTOSTemplate", "name" : "tltSelTemplateByStages" },
		{
			"xtype" : "grid", 
			"name" : "tltGrid",
			"store" : "TemplateListStore", 
			"features" : [ Ext.create("Ext.grid.feature.Grouping")],
			"columns" : [
				{ "text" : "Generated Template Name", "dataIndex" : "name" },
				{ "text" : "User-Friendly Name", dataIndex: "description", flex: 1 },
				{ "text" : "Disease Type", dataIndex: "DiseaseName", hidden: true },
				{ "text" : "# of Patients", "name" : "NumPatients", dataIndex: "PatientCount", "renderer" : 
					function(value) {
						var buf = "<div class=\"textAnchor\" style=\"text-align: center;\">" + value + "</div>";
						return buf;
					}
				},
				{ "text" : "", "hideable" : false, "sortable" : false, "name" : "ViewPrint", "groupable" : false, "dataIndex" : "id", "renderer" : 
					function(value) {
						var buf = "<a href=\"" + Ext.URLs.PrintTemplate + "/" + value + "\" target=\"print_template\">View/Print</a>";
						return buf;
					}
				}
			]
		}
	]
});

Ext.define("COMS.view.TemplateList.puWinListPatients", {
	"extend" : "Ext.window.Window",
	"alias" : "widget.puWinListPatients",
	"title" : "Patients Currently Undergoing Treatment",
	"closeAction" : "destroy",
	"width" : 820,
	"height" : 220,
	"minHeight" : 220,
	"autoShow" : true,
	"resizable" : true,
	"modal" : true,
	"defaults" : { "margin" : 10 },
	"items" : [
		{ "xtype" : "box", "name" : "gridInfo" },
		{
			"xtype" : "grid", 
			"name" : "patientsGrid",
			"store" : { "model" : "COMS.model.TemplateListPatients" },
			"columns" : [
				{ "text" : "Name", "dataIndex" : "Name", "flex" : 3 },
				{ "text" : "Regimen Start Date", "dataIndex" : "Date_Started", "flex" : 1 },
				{ "text" : "Projected End Date", "dataIndex" : "Est_End_Date", "flex" : 1 },

				{ "text" : "SSID", "dataIndex" : "SSID", "flex" : 1 }
			]
		}
	],
	"buttons" : [
		{ "text" : "Ok" }
	]
});



// create the combo instance
Ext.define("TemplateLocationModel", {
	extend: "Ext.data.Model",
	fields: [
		{name : "Name",type : "string"},
		{name : "id",type : "string"}
	]
});
var TemplateLocationStore = Ext.create("Ext.data.Store", {
	model : "TemplateLocationModel",
	proxy: {
		type: "ajax",
		method: "GET",
		url: "/LookUp/Locations",
		reader: {
			type: "json",
			root: "records"
		}
	},
	autoLoad: true
});
var TemplateLocationCombo = new Ext.form.ComboBox({
	typeAhead: true,
	triggerAction: "all",
	lazyRender: true,
	displayField: "Name",
	valueField: "id",
	store: TemplateLocationStore
});


Ext.define("COMS.view.TemplatePromotion.TemplatePromotionTab", {
	"extend" : "Ext.grid.Panel",
	"alias"  : "widget.TemplatePromotionTab",
	"name" : "ttmpProGrid",
	"title"  : "Template Promotion Management",
	"margin" : "0 10 10 10",
	"autoScroll" : "y",
	"columnLines" : true,
	width: 970, // Not used
	"viewConfig" : {
		"stripeRows" : true,
		"height" : 655,
		"forceFit" : true
	},

	"store" : "TemplateListStore", 
	"features" : [{
		"ftype" : "grouping", "startCollapsed" : true
	}],


	"plugins" : [
		Ext.create("Ext.grid.plugin.CellEditing", {
			clicksToEdit: 1
		})
	],

	selType: "cellmodel",

	"columns" : [
		{ "text" : "Generated Template Name", "dataIndex" : "name", flex: 1 },
		{ "text" : "User-Friendly Name", dataIndex: "description", flex: 1 },
		{ "text" : "Disease Type", dataIndex: "DiseaseName", hidden: true },
		{ "text" : "Location", dataIndex: "Location", editor: TemplateLocationCombo,
			renderer: function(v, a, b, c) {
				var Records = TemplateLocationStore.getRange();
				for (i = 0; i < Records.length; i++) {
					if (Records[i].getData().id == v) {
						return Records[i].getData().Name;
					}
				}
				return v;
			}
		},

		{ "text" : "# of Patients", "name" : "NumPatients", dataIndex: "PatientCount", "renderer" : 
			function(value) {
				if ("0" == value) {
					return "<div style=\"text-align: center;\">" + value + "</div>";
				}
				return "<div class=\"textAnchor\" style=\"text-align: center;\">" + value + "</div>";
			}
		},
		{ "text" : "", "hideable" : false, "sortable" : false, "name" : "ViewPrint", "groupable" : false, "dataIndex" : "id", "renderer" : 
			function(value) {
				var buf = "<a href=\"" + Ext.URLs.PrintTemplate + "/" + value + "\" target=\"print_template\">View/Print</a>";
				return buf;
			}
		}
	],
	buttons: [{
		text: "Refresh"
	}, {
		text: "Update Records"
	}],
	buttonAlign: "left"

});

Ext.define("COMS.view.Testing.TestTab" ,{
	extend: "Ext.tab.Panel",
	alias : "widget.TestTab",
	name : "Test Tab",
	padding : "10 10 5 10",
	defaults: {
		padding : "10 10 5 10",
		plain : true
	},
	plain : true,
	activeTab: 5,
	items : [
		{ xtype : "DischargeInstructions", title: "Patient Education" }
	]
});




// var tmpRecord; MWB - 28 Dec 2011; Eliminated need for global variable by using the "getSelectedRecord()" function below
// Also cleaned up code below to not require the tmpRecord variable
Ext.apply(Ext.data.validations, {
	regimenVal: function (config, value) {
		var druggrid = Ext.ComponentQuery.query('AuthoringTab TemplateDrugRegimen grid')[0];
		var drugstore = druggrid.getStore();

		if (0 == drugstore.count()) {
			return false;
		}
		return true;
	}
});


Ext.define('COMS.controller.Authoring.AuthoringTab', {
	extend: 'Ext.app.Controller',
	stores: [
		'TotalCoursesMax',
		'CycleLengthMax',
		'TimeFrameUnit',
		'EmetogenicLevel',
		'FebrileNeutropeniaRisk',
		'ReferencesStore',
		'LUReferences',
		'HydrationStore',
		'DrugStore',
		'DrugUnitsStore',
		'InfusionStore',
		'CTOS',
		'MedReminders'
		],
	views: [
		'Authoring.References',
		'Authoring.MedReminder',
		'Authoring.Hydration',
		'Authoring.DrugRegimen',
		'Authoring.AddReference',
		'Authoring.CreateNewTemplate',
		'Authoring.CycleLength',
		'Common.Search4Template',
		"Common.selCTOSTemplate",
		"Common.selDiseaseAndStage",
		"Common.selDisease",
		"Common.selDiseaseStage",
		"Common.selTemplate",
		"Common.selSequence",
		"Common.MedRemindersForm",
		"Common.EmeticInfo"
	],


	refs: [
		{
			ref: "AuthoringTab",
			selector: "AuthoringTab"
		},

		{ ref : "MedRemindersForm", selector : "AuthoringTab MedReminder MedRemindersForm" },
		{ ref : "MedRemindersGrid", selector : "AuthoringTab MedReminder grid" },
	 	{ ref : "AddReminderBtn", selector : "AuthoringTab MedReminder button[title=\"AddReminder\"]" },
		{ ref : "RemoveReminderBtn", selector : "AuthoringTab MedReminder button[title=\"RemoveReminder\"]" },
		{ ref : "EditReminderBtn", selector : "AuthoringTab MedReminder button[title=\"EditReminder\"]" },


// AuthoringTab TemplateReferences

		{
			ref: "ReqInstr",
			selector: "AuthoringTab RequiredInstr"
		},

		{
			ref: "NewTemplate",
			selector: "AuthoringTab CreateNewTemplate"
		},

		{
			ref: "CTOSTemplateSelection",
			selector: "AuthoringTab selCTOSTemplate"
		},


		{
		ref: "TemplateDiseaseAndStage",
		selector: "AuthoringTab container[name=\"selCTOSTemplate\"] selDiseaseAndStage"
		},

		{
		ref: "NewTemplateDiseaseAndStage",
		selector: "AuthoringTab selDiseaseAndStage[name=\"4CreateNewTemplate\"]"
		},


		{
		ref: "DiseaseStage",
		selector: "AuthoringTab selDiseaseAndStage[name=\"4CreateNewTemplate\"] selDiseaseStage"
		},

		{
		ref: "Disease",
		selector: "AuthoringTab selDiseaseAndStage[name=\"4CreateNewTemplate\"] selDisease"
		},
		{
		ref: "ExistingDiseaseStage",
		selector: "AuthoringTab container[name=\"selCTOSTemplate\"] selDiseaseAndStage selDiseaseStage"
		},

		{
		ref: "ExistingDisease",
		selector: "AuthoringTab container[name=\"selCTOSTemplate\"] selDiseaseAndStage selDisease"
		},

		{
		ref: "ExistingCourseInfo",
		selector: "AuthoringTab container[name=\"courseInfo\"]"
		},

		// Reference Buttons
	{
		ref: "RemoveReference",
		selector: "AuthoringTab TemplateReferences button[title=\"RemoveReference\"]"
	}, 

	{
		ref: 'EditReference',
		selector: 'AuthoringTab TemplateReferences button[title="EditReference"]'
	},

		// Reference Fields
	{
		ref: 'ReferenceName',
		selector: 'AddReference textfield[name="Reference"]'
	}, 
	{
		ref: 'ReferenceLink',
		selector: 'AddReference textfield[name="ReferenceLink"]'
	}, 
	{
		ref: 'ReferenceCombo',
		selector: 'AddReference combo[name="SelReference"]'
	},
	{
		ref: "CourseNum",
		selector: "AuthoringTab textfield[name=\"CourseNum\"]"
	},
	{
		ref: "CourseNumMax",
		selector: "AuthoringTab textfield[name=\"CourseNumMax\"]"
	},
		// Basic Fields (CycleLength, Regimen Name, Emetogenic Level, Febrile Neutropenia Risk)
	{
		ref: "CycleLength",
		selector: "AuthoringTab combo[name=\"CycleLength\"]"
	},
	{
		ref: "CycleLengthUnit",
		selector: "AuthoringTab combo[name=\"CycleLengthUnits\"]"
	},
	{
		ref: "RegimenName",
		selector: "AuthoringTab textfield[name=\"RegimenName\"]"
	},
	{
		ref: "TemplateAlias",
		selector: "AuthoringTab textfield[name=\"TemplateAlias\"]"
	},
	{
		ref: "EmetogenicLevel",
		selector: "AuthoringTab combo[name=\"EmetogenicLevel\"]"
		},
		{
		ref: "FebrileNeutropeniaRisk",
		selector: "AuthoringTab textfield[name=\"FebrileNeutropeniaRisk\"]"
		},
		{
		ref: "PreHydrationInstructions",
		selector: "TemplateHydration[title=\"Pre Therapy\"] textfield[name=\"HydrationInstructions\"]"
		},
		{
		ref: "PreHydrationGrid",
		selector: "TemplateHydration[title=\"Pre Therapy\"] grid"
		},

		{
		ref: "PostHydrationInstructions",
		selector: "TemplateHydration[title=\"Post Therapy\"] textfield[name=\"HydrationInstructions\"]"
		},
		{
		ref: "PostHydrationGrid",
		selector: "TemplateHydration[title=\"Post Therapy\"] grid"
		},
		{
		ref: "RegimenGrid",
		selector: "TemplateDrugRegimen grid"
		},
		{
		ref: "RegimenInstruction",
		selector: "TemplateDrugRegimen textfield[name=\"RegimenInstructions\"]"
		},
		{
		ref: "ReferencesGrid",
		selector: "AuthoringTab TemplateReferences"
		},
		{
		ref: "Active",
		selector: "AuthoringTab textfield[name=\"KeepActive\"]"
		},
	{
		ref: "PatientListCount",
		selector: "AuthoringTab displayfield[name=\"PatientListCount\"]"
	}
	],

	// Ext.ComponentQuery.query("AddReference combo[name=\"CycleLength\"]")[0].el.dom
	init: function () {
		wccConsoleLog('Initialized Authoring Tab Panel Navigation Controller!');
		this.control({


			"AuthoringTab MedReminder button[title=\"AddReminder\"]" : {
				click: this.ShowAddReminder
			},

			"AuthoringTab MedReminder button[title=\"RemoveReminder\"]" : {
				click: this.RemoveSelectedReminder
			},
			"AuthoringTab MedReminder button[title=\"EditReminder\"]" : {
				click: this.EditSelectedReminder
			},
			"AuthoringTab MedReminder grid" : {
				// itemclick: this.clickMedReminderGridCell,
				select: this.selectMedReminderGridRow,
				deselect: this.deSelectMedReminderGridRow
			},











			// Handlers for the contents within the tab panel itself
			"AuthoringTab fieldcontainer radiofield[name=\"Authoring_SelectTemplateType\"]": {
				change: this.TemplateTypeSelected
			},



			'AuthoringTab TemplateReferences': { // The References Grid Control
				itemclick: this.clickUpdateReference
			},
			'AuthoringTab TemplateReferences [title="AddReference"]': { // The "Add Reference" button on the grid control
				click: this.clickAddReference
			},
			'AuthoringTab TemplateReferences button[title="RemoveReference"]': {
				click: this.removeReference
			},
			'AuthoringTab TemplateReferences button[title="EditReference"]': {
				click: this.editReference
			},



			"AuthoringTab displayfield[name=\"PatientListCount\"]" : {
				render : function(c) {
					c.getEl().on('click', function(){ this.fireEvent('click', c); }, c);
				},
				click: this.ShowPatientListInfo
			},


			// Handlers for the "Reference" pop-up window
			'AddReference combobox': { // Pop-up window
				select: this.ReferenceSelected
			},
			'AddReference button[action="save"]': {
				click: this.clickSaveReference
			},
			'AddReference button[action="cancel"]': {
				click: this.clickCancelReference
			},
			'AuthoringTab CreateNewTemplate button[action="save"]': {
				click: this.saveTemplate
			},
			'AuthoringTab CreateNewTemplate button[action="saveAs"]': {
				click: this.saveTemplateAs
			},
			'AuthoringTab CreateNewTemplate button[action="clear"]': {
				click: this.clearTemplate
			}
		});
	},


	updateEmeticMedLevel : function( template ) {
		var HighestLevel = 0, HLName, HLMName, el, eln;
		var theData = template.getData();
		var theMeds = Ext.Array.merge(theData.Meds, theData.PreMHMeds, theData.PostMHMeds);
		var EmeticMedStore = Ext.getStore("EmeticMeds");
		var buf, i, aRec, aMed, medRec, medLen = theMeds.length;
		for (i = 0; i < medLen; i++) {
			aMed = theMeds[i];
			aRec = EmeticMedStore.findRecord("MedName", aMed.Drug, 0, false, false, true);
			if (aRec) {
				el = aRec.getData().EmoLevel;
				if (el > HighestLevel) {
					HighestLevel = el;
					HLName = aRec.getData().EmoLevelName;
					HLMName = aRec.getData().MedName;
				}
			}
		}
		if (HighestLevel > 0) {
			buf = "<span style=\"border: 3px solid red; padding: 1em;\">" + HLMName + " has a " + HLName + "</div>";
			var EmeticInfoCtl = this.getController("Common.EmeticInfo");
			EmeticInfoCtl.setEmeticInfoContent(buf);
		}
	},


	getCourseInfo : function( thisTab ) {
		return thisTab.down("[name=\"courseInfo\"]");
	},
	getNewTemplateForm : function( thisTab ) {
		return thisTab.down("CreateNewTemplate");
	},


	HideSelectedTemplateForm : function() {
		var thisTab = this.getAuthoringTab();
		this.getCourseInfo(thisTab).hide();
		this.getNewTemplateForm(thisTab).hide();
		// this.selTemplateChange(theTemplate);
	},

	ShowSelectedTemplateForm : function(theTemplate) {
		var thisTab = this.getAuthoringTab();
		this.getCourseInfo(thisTab).show();
		this.getNewTemplateForm(thisTab).show();
		if (theTemplate) {
			this.selTemplateChange(theTemplate);
		}
	},




	selTemplateChange : function (theTemplate) {
		// var CTOSModelParam = theTemplate.id;
		this.application.Template = theTemplate;
		// combo.hiddenValue = this.application.Template.description;
		this.application.loadMask();
		var mytemplate;
		var authoringCtl = this.getController("Authoring.AuthoringTab");

		this.getStore('CTOS').load({
			params: {
				URL: Ext.URLs.CTOS,
				id: theTemplate.id
			},
			callback: function (records, operation, success) {
				if (success) {
					mytemplate = this.getAt(0);
					authoringCtl.afterCTOSLoaded(mytemplate);
				} else {
					authoringCtl.application.unMask();
					Ext.MessageBox.alert('Failure', 'Load Template Failed: ' + operation.request.scope.reader.jsonData.frameworkErr);
				}

			}
		});
	},


	// User has selected what they want to do...
	TemplateTypeSelected: function (rbtn, newValue, oldValue, eOpts) {
		wccConsoleLog("User has selected what to do");
		var theController = this.getController("Common.selCTOSTemplate");
		var radioType = rbtn.inputValue;

		var selCTOSTemplate = this.getCTOSTemplateSelection();
		var lblReqFields = this.getReqInstr();
		lblReqFields.show();

		if (0 == radioType && newValue) {		// Select Existing Template
			selCTOSTemplate.show();
			theController.showInitialSelector(selCTOSTemplate);
			theController.resetTemplateSrc(selCTOSTemplate);
			this.clearTemplate(null);
			this.HideSelectedTemplateForm();
		}
		else if (1 == radioType && newValue) {	// Create New Template
			selCTOSTemplate.hide();
			this.clearTemplate(null);
			this.ShowSelectedTemplateForm(null);
			theController.hideInitialAndFilterSelector(selCTOSTemplate);
		}
	},



	clearTemplate: function (button) {

		// var NewTemplateObj = this.getNewTemplate();
		// var CTOSTemplateSelectionObj = this.getCTOSTemplateSelection();
		var courseNum = this.getCourseNum();
		var courseNumMax = this.getCourseNumMax();

		var lblReqFields = Ext.ComponentQuery.query("AuthoringTab RequiredInstr")[0];

		if (this.getExistingCourseInfo().hidden == false) {
			this.getExistingCourseInfo().hide();
			this.clearValue(courseNum);
			this.clearValue(courseNumMax);
		}
		lblReqFields.hide();
		var thisCtl = this.getController("NewPlan.NewPlanTab");
		thisCtl.clearCTOS();

		thisCtl = this.getController("Common.selCTOSTemplate");
		var CTOSTemplate = this.getCTOSTemplateSelection();
		thisCtl.resetTemplateSrc(CTOSTemplate);


		this.clearValue(this.getDisease());
		this.clearValue(this.getEmetogenicLevel());
		this.clearValue(this.getExistingDisease());
		this.clearValue(this.getDiseaseStage());
		this.clearValue(this.getExistingDiseaseStage());
		this.clearValue(this.getCycleLength());
		this.clearValue(this.getCycleLengthUnit());
		this.clearValue(this.getRegimenName());
		this.clearValue(this.getTemplateAlias());
		this.clearValue(this.getEmetogenicLevel());
		this.clearValue(this.getFebrileNeutropeniaRisk());
		this.clearValue(this.getPreHydrationInstructions());
		this.clearValue(this.getPostHydrationInstructions());
		this.clearValue(this.getRegimenInstruction());
		this.clearValue(this.getPatientListCount());

		this.RefreshReferencesGrid();
		this.RefreshMedRemindersGrid();

		var druggrid = Ext.ComponentQuery.query('AuthoringTab TemplateDrugRegimen grid')[0];
		var drugstore = druggrid.getStore();
		drugstore.removeAll(true);
		druggrid.getView().refresh(true);

		var preMHgrid = Ext.ComponentQuery.query('AuthoringTab TemplateHydration[title="Pre Therapy"] grid')[0];
		var preMhStore = preMHgrid.getStore();
		preMhStore.removeAll(true);
		preMHgrid.getView().refresh(true);

		var postMHgrid = Ext.ComponentQuery.query('AuthoringTab TemplateHydration[title="Post Therapy"] grid')[0];
		var postMhStore = postMHgrid.getStore();
		postMhStore.removeAll(true);
		postMHgrid.getView().refresh(true);
	},

	clearValue: function (field) {
		if (field && (field.getValue() || field.getRawValue())) {
			field.reset();
		}
	},

	// Used in both the Hydration and Refernce Grids
	getSelectedRecord: function (destroy, query) {
		var theGrid, theView, theSelModel, HasSelection = false,
			selRows, theRecord, theStore, theIndex;

		theGrid = Ext.ComponentQuery.query(query)[0];
		theView = theGrid.getView();
		theSelModel = theView.getSelectionModel();
		HasSelection = theSelModel.hasSelection();
		if (HasSelection) {
			selRows = theSelModel.getSelection();
			theRecord = selRows[0];
			theStore = theView.getStore();
			theIndex = theStore.indexOf(theRecord);
			if (destroy) {
				theStore.removeAt(theIndex);
				return {};
			}
		}
		return {
			hasRecord: HasSelection,
			record: theRecord,
			rowNum: theIndex
		};
	},


	ShowPatientListInfo: function () {
		var Temp = this.SelectedTemplate;
		var thePatients = Temp.getData().PatientList;
		var theTemplateDesc = Temp.getData().Description;
		var theController = this.getController("TemplateList.TemplateListTab");
		theController.showPatientListWidget(thePatients, theTemplateDesc);
	},


	afterCTOSLoaded: function (template) {
		wccConsoleLog("CTOS Loaded - Processing");
		this.SelectedTemplate = template;
		this.getAnyMedReminders4Template( template.internalId );
		this.getExistingCourseInfo().show();
		this.getNewTemplate().show();
		var disease = this.getExistingDisease();
		var diseaseRecord = disease.getStore().getById(template.data.Disease);
		if(null === diseaseRecord){
			var authorCtl = this.getController("Authoring.AuthoringTab");
			var SelectedDiseaseID = disease.getValue();
			if (!SelectedDiseaseID) {
				SelectedDiseaseID = template.data.Disease;
			}
			disease.getStore().load({
				params: {
						URL: Ext.URLs.DiseaseType + "/",
						ID: SelectedDiseaseID
				},
				callback: function (records, operation, success) {
						if (success) {
							diseaseRecord = disease.getStore().getById(disease.getValue());
							authorCtl.LoadFormWithExistingData(template);
						}else{
							this.application.unMask();
							Ext.MessageBox.alert('Failure', 'Cancer type could not be found for this template. ');
						}
				}
			});
		}
		else {
			this.LoadFormWithExistingData(template);
		}
		this.updateEmeticMedLevel(template);
	},

	/* Load Form with existing data */
	LoadFormWithExistingData : function (template){
		// 
		// var UserDefinedAlias = template.data.Description;
		this.getTemplateAlias().setValue(template.data.Description);
		this.getExistingDisease().setValue(template.data.Disease);
		this.getExistingDiseaseStage().setValue(template.data.DiseaseStage[0].name);
		this.getCourseNum().setValue(template.data.CourseNum);
		this.getCourseNumMax().setValue(template.data.CourseNumMax);
		this.getCycleLength().setValue(template.data.CycleLength);
		this.getCycleLengthUnit().setValue(template.data.CycleLengthUnit[0].name);
		this.getRegimenName().setValue(template.data.RegimenName);
		this.getEmetogenicLevel().setValue(template.data.ELevel[0].name);
		this.getFebrileNeutropeniaRisk().setValue(template.data.FNRisk);
		this.getPreHydrationInstructions().setValue(template.data.PreMHInstructions);
		this.getPostHydrationInstructions().setValue(template.data.PostMHInstructions);
		this.getRegimenInstruction().setValue(template.data.RegimenInstruction);
		this.getPatientListCount().setValue(template.data.PatientListCount);


		this.AddReferences2Store(template.data.References);
		// this.AddMedReminders2Store(template.data.MedReminders);




		var druggrid = Ext.ComponentQuery.query('AuthoringTab TemplateDrugRegimen grid')[0];
		var drugstore = druggrid.getStore();
		drugstore.removeAll();
		var preMHgrid = Ext.ComponentQuery.query('AuthoringTab TemplateHydration[title="Pre Therapy"] grid')[0];
		var preMhStore = preMHgrid.getStore();
		preMhStore.removeAll();
		var postMHgrid = Ext.ComponentQuery.query('AuthoringTab TemplateHydration[title="Post Therapy"] grid')[0];
		var postMhStore = postMHgrid.getStore();
		postMhStore.removeAll();
		preMhStore.add(template.data.PreMHMeds);
		
		drugstore.add(template.data.Meds);
		postMhStore.add(template.data.PostMHMeds);
		this.application.unMask();
},
















































	saveTemplateAs: function (button) {
		alert("Saving Template with new name...");
		var Template = this.PrepareTemplate2Save();
		this.SaveTemplate2DB(Template, button);
	},

    isDuplicateDescription: function(description, alias) {
        if (description === alias) {
            return true;
        }
        var patt = /Ver\s+\d+$/;    // If description ends in "Ver ###" then check to see if it's a duplicate version of another alias
        if (description.search(patt) > 0) {
            description = description.replace(patt, "").trim();
            return (description === alias);
        }
        return false;
    },
    
    saveTemplate: function (button) {
        var UserAlias = this.getTemplateAlias().getValue();
        var haveDuplicate = false;
        var patt = /Ver\s+\d+$/;    // If description ends in "Ver ###" then check to see if it's a duplicate version of another alias
        if (UserAlias.search(patt) > 0) {   // strip off any version # from the alias
            UserAlias = UserAlias.replace(patt, "").trim();
        }

        /* Get a list of all templates by alias */
        Ext.Ajax.request({
            url: Ext.URLs.TemplateAlias,
            scope: this,
            alias: UserAlias,
            success: function(response, opts) {
                var obj = Ext.decode(response.responseText);
                var Records = obj.records;
                var i, matchingRecord, record2Flag, Template,
                    alias = opts.alias, 
                    origAlias = this.getTemplateAlias().getValue(),
                    dupCount = 0;
                for (i = 0; i < obj.total; i++ ) {
                    if (this.isDuplicateDescription(Records[i].description, alias)) {
                        dupCount++;
                        if (Records[i].description === alias) {
                            matchingRecord = Records[i];
                        }
                        if (Records[i].description === origAlias) {
                            record2Flag = Records[i];
                        }
                    }
                }
                if (dupCount > 0) {
                    alias += " Ver " + (dupCount+1);
                    this.getTemplateAlias().setValue(alias);
                    var temp = this.getTemplateAlias().getValue();
                    this.haveDuplicate = true;
                }
                if (this.haveDuplicate) {
                    Ext.Msg.confirm("Saving Change of previous Template", "Do you wish to keep the original version of this template active?", function(btn) {
                        if ("yes" === btn) {
                            Ext.Msg.alert("Status", "Saving New Template, Old Template remains Active");
                            this.application.loadMask("Please wait; Saving Template");
                            Template = this.PrepareTemplate2Save(true);
							if (Template) {
								this.SaveTemplate2DB(Template, button);
							}
                        }
                        else {
                            Ext.Msg.alert("Status", "Saving New Template, Old Template Flagged as In-Active");
                            this.application.loadMask("Please wait; Saving Template");
                            Template = this.PrepareTemplate2Save(true);
							if (Template) {
								this.SaveTemplate2DB(Template, button);
							}
                            this.flagTemplateInactive(record2Flag.name);
                        }
                    }, this);
                }
				else {
                            this.application.loadMask("Please wait; Saving Template");
                            Template = this.PrepareTemplate2Save(true);
							if (Template) {
								this.SaveTemplate2DB(Template, button);
							}
				}

            },
            failure: function(response, opts) {
                wccConsoleLog('server-side failure with status code ' + response.status);
            }
        });
        return;
	},

    flagTemplateInactive: function (record2FlagID) {
        var id2LookFor = record2FlagID;
        Ext.Ajax.request({
            url: Ext.URLs.FlagTemplateInactive,
            method: "POST",
            jsonData: {
                id : id2LookFor
            },
            scope: this,
            success: function(response, opts) {
                var obj = Ext.decode(response.responseText);
                var Records = obj.records;
                var i, alias = opts.alias, dupCount = 0;
            },
            failure: function(response, opts) {
                wccConsoleLog('server-side failure with status code ' + response.status);
            }
        });
    },

	PrepareTemplate2Save: function (KeepAlive) {
		var diseaseId = null;
		var diseaseStageId = null;

		if (null == this.application.Cancer) {
			diseaseId = '';
			diseaseStageId = '';
		} else {
			diseaseId = this.application.Cancer.id;
			if (null == this.application.Cancer.Stage) {
				diseaseStageId = '';
			} else {
				diseaseStageId = this.application.Cancer.Stage.id;
			}

		}
		
		var Order_IDR = '00000000-0000-0000-0000-000000000000';

		var courseNum = this.getCourseNum().getValue();
		var courseNumMax = this.getCourseNumMax().getValue();

		var cycleLength = this.getCycleLength().getValue();
		var cycleLengthUnit = this.getCycleLengthUnit().getValue();

		if (null != cycleLengthUnit && null != cycleLengthUnit.id) {
			cycleLengthUnit = cycleLengthUnit.id;
		} else if (null == cycleLengthUnit) {
			cycleLengthUnit = '';
		}

		//var regimenName = this.getRegimenName().getValue();
		var templateAlias = this.getTemplateAlias().getValue();
		var emetogenicLevel = this.getEmetogenicLevel().getValue();

		if (null != emetogenicLevel && null != emetogenicLevel.id) {
			emetogenicLevel = emetogenicLevel.id;
		} else if (null == emetogenicLevel) {
			emetogenicLevel = '';
		}

		var fnRisk = this.getFebrileNeutropeniaRisk().getValue();

		var preMhInstructions = this.getPreHydrationInstructions().getValue();
		var postMhInstructions = this.getPostHydrationInstructions().getValue();
		var therapyInstructions = this.getRegimenInstruction().getValue();


		var druggrid = Ext.ComponentQuery.query('AuthoringTab TemplateDrugRegimen grid')[0];
		var drugstore = druggrid.getStore();

		var preMHgrid = Ext.ComponentQuery.query('AuthoringTab TemplateHydration[title="Pre Therapy"] grid')[0];
		var preMhStore = preMHgrid.getStore();

		var postMHgrid = Ext.ComponentQuery.query('AuthoringTab TemplateHydration[title="Post Therapy"] grid')[0];
		var postMhStore = postMHgrid.getStore();


		var drugArray = [], drug, drugModel;
		limitCount = drugstore.count();

		for (i = 0; i < limitCount; i++) {
			drugModel = drugstore.getAt(i);
			drug = Ext.create(Ext.COMSModels.Med, {
				Drug: drugModel.data.Drug,
				Amt: drugModel.data.Amt,
				Units: drugModel.data.Units,
				Route: drugModel.data.Route,
				Day: drugModel.data.Day,
				FluidVol: drugModel.data.FluidVol,
				InfusionTime: drugModel.data.InfusionTime,
				FlowRate: drugModel.data.FlowRate,
				Instructions: drugModel.data.Instructions,
				Sequence: drugModel.data.Sequence,
				AdminTime: drugModel.data.AdminTime,
				FluidType: drugModel.data.FluidType

			});

			drugArray.push(drug);
		}

		var preMHArray = [], postMHArray = [], preMhModel, postMhModel, preMH, postMH, infusionArray, infusion1, infusion2;
		limitCount = preMhStore.count();

		for (i = 0; i < limitCount; i++) {
			preMhModel = preMhStore.getAt(i);
			infusionArray = [];

			infusion1 = Ext.create(Ext.COMSModels.MHMedInfusion, {
				amt: preMhModel.data.Amt1,
				unit: preMhModel.data.Units1,
				type: preMhModel.data.Infusion1,
				flowRate: preMhModel.data.FlowRate1,
				fluidVol: preMhModel.data.FluidVol1,
				fluidType: preMhModel.data.FluidType1,
				infusionTime: preMhModel.data.InfusionTime1,
				instruction: preMhModel.data.Instructions
			});

			infusion2 = Ext.create(Ext.COMSModels.MHMedInfusion, {
				amt: preMhModel.data.Amt2,
				unit: preMhModel.data.Units2,
				type: preMhModel.data.Infusion2,
				flowRate: preMhModel.data.FlowRate2,
				fluidVol: preMhModel.data.FluidVol2,
				fluidType: preMhModel.data.FluidType2,
				infusionTime: preMhModel.data.InfusionTime2,
				instruction: preMhModel.data.Instructions
			});

			if ('' != preMhModel.data.Amt1 && '' != preMhModel.data.Units1 && '' != preMhModel.data.Infusion1) {
				infusionArray.push(infusion1);
			}
			if ('' != preMhModel.data.Amt2 && '' != preMhModel.data.Units2 && '' != preMhModel.data.Infusion2) {
				infusionArray.push(infusion2);
			}

			preMH = Ext.create(Ext.COMSModels.MHMed, {
				drugid: preMhModel.data.Drug,
				preporpost: 'Pre',
				description: preMhModel.data.Instructions,
				infusions: infusionArray,
				adminDay: preMhModel.data.Day,
				sequence: preMhModel.data.Sequence,
				adminTime: preMhModel.data.AdminTime
			});

			preMHArray.push(preMH);

		}

		limitCount = postMhStore.count();

		for (i = 0; i < limitCount; i++) {
			postMhModel = postMhStore.getAt(i);
			infusionArray = [];

			infusion1 = Ext.create(Ext.COMSModels.MHMedInfusion, {
				amt: postMhModel.data.Amt1,
				unit: postMhModel.data.Units1,
				type: postMhModel.data.Infusion1,
				flowRate: postMhModel.data.FlowRate1,
				fluidVol: postMhModel.data.FluidVol1,
				fluidType: postMhModel.data.FluidType1,
				infusionTime: postMhModel.data.InfusionTime1,
				instruction: postMhModel.data.Instructions
			});

			infusion2 = Ext.create(Ext.COMSModels.MHMedInfusion, {
				amt: postMhModel.data.Amt2,
				unit: postMhModel.data.Units2,
				type: postMhModel.data.Infusion2,
				flowRate: postMhModel.data.FlowRate1,
				fluidVol: postMhModel.data.FluidVol1,
				fluidType: postMhModel.data.FluidType1,
				infusionTime: postMhModel.data.InfusionTime1,
				instruction: postMhModel.data.Instructions
			});

			if ('' != postMhModel.data.Amt1 && '' != postMhModel.data.Units1 && '' != postMhModel.data.Infusion1) {
				infusionArray.push(infusion1);
			}
			if ('' != postMhModel.data.Amt2 && '' != postMhModel.data.Units2 && '' != postMhModel.data.Infusion2) {
				infusionArray.push(infusion2);
			}

			postMH = Ext.create(Ext.COMSModels.MHMed, {
				drugid: postMhModel.data.Drug,
				preporpost: 'Post',
				description: postMhModel.data.Instructions,
				infusions: infusionArray,
				adminDay: postMhModel.data.Day,
				sequence: postMhModel.data.Sequence,
				adminTime: postMhModel.data.AdminTime
			});
			postMHArray.push(postMH);
		}

		var template = Ext.create(Ext.COMSModels.CTOS, {
			Order_IDR: Order_IDR,
			CourseNum: courseNum,
			CourseNumMax: courseNumMax,
			RegimenName: templateAlias,
			CycleLength: cycleLength,
			CycleLengthUnit: cycleLengthUnit,
			ELevel: emetogenicLevel,
			FNRisk: fnRisk,
			References: this.getReferencesInArray(),
			PreMHInstructions: preMhInstructions,
			PostMHInstructions: postMhInstructions,
			RegimenInstruction: therapyInstructions,
			PreMHMeds: preMHArray,
			PostMHMeds: postMHArray,
			Meds: drugArray,
			Disease: diseaseId,
			DiseaseStage: diseaseStageId,
			KeepAlive: KeepAlive
		});
		return template;
	},


	SaveTemplate2DB: function (template, button) {
		template.save({
			scope: this,
			success: function (data) {
				wccConsoleLog("Saved Template ");
				// this.getNewPlanTemplate().getStore().removeAll(true);
				// this.getNewPlanTemplate().getStore().load();

				// this.getTemplate().getStore().removeAll(true);
				// this.getTemplate().getStore().load();

				this.saveAllMedReminders(data.data.id);

				this.clearTemplate(button);
				Ext.MessageBox.alert('Success', 'Template saved with name: ' + data.data.RegimenName);
				this.application.unMask();

			},
			failure: function (record, op) {
				wccConsoleLog("Save Template Failed");
				this.application.unMask();
				var ErrMsg = "Unknown Framework Error when attempting to save Template";
				if (op.request.scope.reader.jsonData.frameworkErr) {
					ErrMsg = op.request.scope.reader.jsonData.frameworkErr;
				}
				Ext.MessageBox.alert('Failure', 'Template was not saved: ' + ErrMsg);
			}
		});
	},



















	//--------------------------------------------------------------------------------
	//	Med Reminders Grid Handlers
	//
	ShowAddReminder : function (theBtn) {
		var theForm = this.getMedRemindersForm();
		if (theForm.isVisible()) {
			theForm.hide();
			theBtn.setText("Add Reminder");
		}
		else {
			theForm.show();
			theBtn.setText("Hide Reminder Form");
		}

	},

	selectMedReminderGridRow : function(theRowModel, record, index, eOpts) {
		var records = theRowModel.getSelection();
		var theForm = this.getMedRemindersForm();
		if (!theForm.isVisible()) {
			theForm.show();
			this.getAddReminderBtn().setText("Hide Reminder Form");
		}
		var theData = record.getData();
		var aForm = theForm.getForm();
		aForm.setValues({
			"ReminderWhenCycle" : theData.ReminderWhenCycle, 
			"ReminderWhenPeriod" : theData.ReminderWhenPeriod,
			"Title" : theData.Title,
			"Description" : theData.Description,
			"MR_ID" : theData.MR_ID,
			"TemplateID" : theData.TemplateID
		});

		var delBtn = this.getRemoveReminderBtn();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
	},

	deSelectMedReminderGridRow : function(theRowModel, record, index, eOpts) {
	},



	deleteRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.get("ID");
			var CMD = "DELETE";
			var URL = Ext.URLs.MedReminders + "/" + rID;
/**
			Ext.Ajax.request({
				url: URL,
				method : CMD,
				scope: this,
				records : theRecords,
				success: function( response, opts ){
					this.deleteRecord(opts.records);
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Delete Toxicity Record, Save Error - <br />" + resp.msg );
				}
			});
**/
		}

		else {
			this.application.unMask();
			//this.RefreshPanel();
			//this.CancelForm();
		}
	},

	RemoveSelectedReminder : function(arg1, arg2, arg3) {
	},
	
	EditSelectedReminder : function(arg1, arg2, arg3) {
	},

	getAnyMedReminders4Template : function(TemplateID) {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();
		MedRemindersStore.removeAll();
		MedRemindersStore.proxy.url = Ext.URLs.MedReminders + "/" + TemplateID;
		MedRemindersStore.load();
	},

	RefreshMedRemindersGrid : function() {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();
		MedRemindersStore.removeAll(true);
		MedRemindersGrid.getView().refresh(true);
	},

	AddMedReminders2Store : function(MedReminders) {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();
		MedRemindersStore.removeAll();
		MedRemindersStore.add(MedReminders);
	},
	AddMedReminder2GridStore : function(MedReminderRec) {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();
		var theData = MedReminderRec.getData();
		if ("" !== theData.MR_ID) {
			var ExistingRecIndex = MedRemindersStore.findExact("MR_ID", theData.MR_ID);
			if (ExistingRecIndex >= 0) {
				MedRemindersStore.removeAt(ExistingRecIndex);
			}
		}
		MedRemindersStore.add(MedReminderRec);
		MedRemindersGrid.getView().refresh();
	},


	getMedRemindersInArray : function() {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();

		var MedRemindersArray = [], MedRemindersRec, limitCount = MedRemindersStore.count(), i, MedRemindersModel;
		for (i = 0; i < limitCount; i++) {
			MedRemindersModel = MedRemindersStore.getAt(i);
			MedRemindersRec = Ext.create(Ext.COMSModels.MedReminder, {
				"MR_ID" : MedRemindersModel.data.MR_ID,
				"TemplateID" : MedRemindersModel.data.TemplateID, 
				"Title" : MedRemindersModel.data.Title,
				"Description" : MedRemindersModel.data.Description,
				"ReminderWhenCycle" : MedRemindersModel.data.ReminderWhenCycle,
				"ReminderWhenPeriod" : MedRemindersModel.data.ReminderWhenPeriod
			});
			MedRemindersArray.push(MedRemindersRec);
		}
		return MedRemindersArray;
	},

	RecordSaveSuccess : function(data) {
	},
	RecordSaveFailure : function(data) {
		alert("Failure to save Med Reminder");
	},

	saveAllMedReminders : function(TemplateID) {
		var MedReminders = this.getMedRemindersInArray();
		var rec, i, len = MedReminders.length;
		this.application.unMask();
		for (i = 0; i < len; i++)  {
			rec = MedReminders[i];
			rec.proxy.url = Ext.URLs.MedReminders + "/" + TemplateID;
			rec.save({
				scope : this,
				waitMsg: 'Saving Data...',
				success: this.RecordSaveSuccess,
				failure: this.RecordSaveFailure
			});
		}
	},





	//--------------------------------------------------------------------------------
	//	Reference Grid Handlers
	//
	RefreshReferencesGrid : function() {
			var refgrid = this.getReferencesGrid();
			var refstore = refgrid.getStore();
			refstore.removeAll(true);
			refgrid.getView().refresh(true);
	},

	AddReferences2Store : function(References) {
		// template.data.References
			var refgrid = this.getReferencesGrid();
			var refstore = refgrid.getStore();
			refstore.removeAll();
			refstore.add(References);
	},


	getReferencesInArray : function() {
			var refgrid = this.getReferencesGrid();
			var refstore = refgrid.getStore();

			var referencesArray = [], ref, limitCount = refstore.count(), i, referenceModel;
			for (i = 0; i < limitCount; i++) {
				referenceModel = refstore.getAt(i);
				ref = Ext.create(Ext.COMSModels.CTOS_References, {
					RefID: referenceModel.data.id,
					Ref: referenceModel.data.Reference,
					RefURI: referenceModel.data.ReferenceLink
				});
				referencesArray.push(ref);
			}
			return referencesArray;
	},

	ReferenceSelected: function (combo, recs, eOpts) {
		wccConsoleLog('Reference Selected - ' + recs[0].data.name);
		var piData = recs[0].data;
		this.getReferenceName().setValue(piData.name);
		this.getReferenceLink().setValue(piData.description);
	},

	removeReference: function (button) {
		var ckRec = this.getSelectedRecord(false, 'AuthoringTab TemplateReferences');
		if (ckRec.hasRecord) {
			wccConsoleLog('Remove Reference - ' + ckRec.record.get('Reference') + ' - ' + ckRec.record.get('ReferenceLink'));
			var reference = Ext.create('COMS.model.LookupTable', {
				id: '9',
				value: ckRec.record.get('Reference'),
				description: ckRec.record.get('ReferenceLink'),
				lookupid: ckRec.record.get('id')
			});

			reference.destroy({
				scope: this,
				success: function (data) {
					this.getSelectedRecord(true, 'AuthoringTab TemplateReferences'); // remove the selected record from the current store
					this.getRemoveReference().disable();
					this.getEditReference().disable();
				}
			});
		} else {
			Ext.MessageBox.alert('Invalid', 'Please select a Row in the References Grid.');
		}
	},

	editReference: function (grid, record) {
		var ckRec = this.getSelectedRecord(false, 'AuthoringTab TemplateReferences');
		if (ckRec.hasRecord) {
			wccConsoleLog('Editing Reference - ' + ckRec.record.get('Reference') + ' - ' + ckRec.record.get('ReferenceLink'));
			var view = Ext.widget('AddReference'); // Creates an instance of the "Add Reference" pop-up window
			view.setTitle("Edit Reference");
			view.down('form').loadRecord(ckRec.record);
			this.getReferenceCombo().setValue(ckRec.record.get('Reference'));
		} else {
			Ext.MessageBox.alert('Invalid', 'Please select a Row in the References Grid.');
		}
	},

	clickAddReference: function (button) {
		var view = Ext.widget('AddReference'); // Creates an instance of the "Add Reference" pop-up window
		view.setTitle("Add Reference");
	},

	clickUpdateReference: function (grid, record) {
		this.getRemoveReference().enable();
		this.getEditReference().enable();
	},

	clickCancelReference: function (button) {
		var win = button.up('window');
		this.getRemoveReference().disable();
		this.getEditReference().disable();
		win.close();

	},

	clickSaveReference: function (button) {
		// Click on the "Save" button in the Reference PopUp window.
		// var grid = Ext.widget('TemplateReferences');		// Note: this gets a new instance of a particular widget by it's xtype, NOT an existing instance
		var grid = Ext.ComponentQuery.query('AuthoringTab TemplateReferences')[0]; // Get's a specific existing instance of the widget by it's CSS style reference
		var store = grid.getStore();
		var win = button.up('window');
		var form = win.down('form');
		var values = form.getValues();

		var record = form.getRecord();
		var rowNum = store.indexOf(record);
		var reference;
		var existingRecord = null;

		if (this.getSelectedRecord(false, 'AuthoringTab TemplateReferences').hasRecord) {
			existingRecord = this.getSelectedRecord(false, 'AuthoringTab TemplateReferences').record;
		}
		//KD - 12/28/11 - Check to ensure a record is not being edited or selected from drop down
		if (!record && !existingRecord) {
			reference = Ext.create('COMS.model.LookupTable', {
				id: '9',
				value: values.Reference,
				description: values.ReferenceLink,
				lookupid: ''
			});

			//KD - 12/28/11 - Check to ensure a record is not being edited but is selected from drop down
		} else if (!record && existingRecord) {
			reference = Ext.create('COMS.model.LookupTable', {
				id: '9',	// "9" is a "Magic Number" for the type of record being stored in the Lookup Table
				value: this.getReferenceName().getValue(),
				description: this.getReferenceLink().getValue()
			});

			//KD - 12/28/11 - Record is being edited
		} else {
			reference = Ext.create('COMS.model.LookupTable', {
				id: '9',	// "9" is a "Magic Number" for the type of record being stored in the Lookup Table
				value: values.Reference,
				description: values.ReferenceLink,
				lookupid: record.get('id')
			});
		}

		this.application.loadMask("Please wait; Saving Reference");
		reference.save({
			scope: this,
			waitMsg: 'Saving Data...',
			success: function (data) {
				wccConsoleLog("Saved Lookup Type ID " + data.getId() + " lookupid " + data.data.lookupid);
				var ref = Ext.create(Ext.COMSModels.References, {
					id: data.data.lookupid,
					Reference: data.data.value,
					ReferenceLink: data.data.description
				});

				var comboReference = Ext.create(Ext.COMSModels.LUReferences, {
					id: data.data.lookupid,
					name: data.data.value,
					description: data.data.description
				});

				if (-1 === rowNum) {
					store.insert(0, ref);
				} else {
					store.removeAt(rowNum);
					store.insert(rowNum, ref);
				}

				this.getReferenceCombo().getStore().insert(0, comboReference);
				this.getRemoveReference().disable();
				this.getEditReference().disable();
				win.close();
				this.application.unMask();
			},
			failure: function (record, op) {
				var thisCtl = this.getController('Authoring.AuthoringTab');
				var comboStore = this.getReferenceCombo().getStore();

				var recordIndex = comboStore.findBy(

				function (record, id) {
					if (record.get('name') === thisCtl.getReferenceName().getValue() && record.get('description') === thisCtl.getReferenceLink().getValue()) {
						return true;
					}
					return false;
				});

				var ref;
				var existingRowNum = -1;
				if (recordIndex !== -1) {
					var comboRecord = comboStore.getAt(recordIndex);
					ref = Ext.create(Ext.COMSModels.References, {
						id: comboRecord.get('id'),
						Reference: comboRecord.get('name'),
						ReferenceLink: comboRecord.get('description')
					});
					existingRowNum = store.find('id', comboRecord.get('id'));
				} else {
					try {
						ref = Ext.create(Ext.COMSModels.References, {
							id: op.request.scope.reader.jsonData.lookupid,
							Reference: record.data.value,
							ReferenceLink: record.data.description
						});
					}
					catch (e) {
					}
				}
				if (-1 === existingRowNum) {
					store.insert(0, ref);
					this.getRemoveReference().disable();
					this.getEditReference().disable();
					win.close();
					this.application.unMask();
				} else {
					Ext.MessageBox.alert('Invalid', 'This reference already exists.');
				}
			}
		});
	}
});


Ext.StdRouteValidation = function (config, value) {
	var drugRegimen = Ext.ComponentQuery.query("AddDrugRegimen")[0];
	var form = drugRegimen.down("form");
	var values = form.getValues();
	var route = values.Route;

	if (Ext.routeRequiresFluid(route)) {
		if ("" == value) {
			return false;
		}
	}
	return true;
};
Ext.routeRequiresFluid = function (route) {
	route = route.toUpperCase();
	if ("IVPB" == route) {
		return true;
	}
	if ("IV" == route) {
		return true;
	}
	if ("INTRAVENOUS" == route) {
		return true;
	}

	if ("INTRATHECAL" == route) {
		return true;
	}
	if ("INTRA-ARTERIAL" == route) {
		return true;
	}
	if ("INTRA-HEPATIC" == route) {
		return true;
	}
	if ("PERITONEAL" == route) {
		return true;
	}
	if ("INTRAVESICULAR" == route) {
		return true;
	}
	if ("INTRAOCULAR" == route) {
		return true;
	}
	if ("INTRAVITREAL" == route) {
		return true;
	}
	return false;
};

Ext.apply(Ext.data.validations, {
	fluidVolregimen: function (config, value) {
		return Ext.StdRouteValidation(config, value);
	},

	adminTimeregimen: function (config, value) {
		return Ext.StdRouteValidation(config, value);
	},

	flowRateregimen: function (config, value) {
		return Ext.StdRouteValidation(config, value);
	},

	fluidTyperegimen: function (config, value) {
		return Ext.StdRouteValidation(config, value);
	}
});

Ext.define("COMS.controller.Authoring.DrugRegimen", {
	extend: "Ext.app.Controller",
	stores: ["DrugRegimenStore", "DrugStore", "DrugUnitsStore", "InfusionStore"],
	views: ["Authoring.AddDrugRegimen", "Management.EditLookup", "Authoring.HydrationSequence"],
	refs: [
		{
			ref: "AddDrugPUWindow",
			selector: "AddDrugRegimen"
		}, 
		{
			ref: "DrugPUWindow_DoseRouteFields",
			selector: "AddDrugRegimen [name=\"Dose_RouteFields\"]"
		},

        // Drug Regimen Buttons
		{
			ref: "RemoveDrugRegimen",
			selector: "AuthoringTab TemplateDrugRegimen button[text=\"Remove Drug\"]"
        }, {
			ref: "EditDrugRegimen",
			selector: "AuthoringTab TemplateDrugRegimen button[text=\"Edit Drug\"]"
        },

        // Drug Regimen Fields
		{
			ref: "DrugRegimenAdminDay",
			selector: "AddDrugRegimen textfield[name=\"Day\"]"
        }, {
			ref: "DrugRegimenDrug",
			selector: "AddDrugRegimen combo[name=\"Drug\"]"
        }, {
			ref: "DrugRegimenSequence",
			selector: "AddDrugRegimen combo[name=\"Sequence\"]"
        }, {
			ref: "DrugRegimenAmt",
			selector: "AddDrugRegimen textfield[name=\"Amt\"]"
        }, {
			ref: "DrugRegimenUnits",
			selector: "AddDrugRegimen combo[name=\"Units\"]"
        }, {
			ref: "DrugRegimenRoute",
			selector: "AddDrugRegimen combo[name=\"Route\"]"
        }, {
			ref: "DrugRegimenFluidVol",
			selector: "AddDrugRegimen textfield[name=\"FluidVol\"]"
        }, {
			ref: "DrugRegimenInfusionTime",
			selector: "AddDrugRegimen textfield[name=\"InfusionTime\"]"
        }, {
			ref: "DrugRegimenFlowRate",
			selector: "AddDrugRegimen textfield[name=\"FlowRate\"]"
        }, {
			ref: "DrugRegimenFluidType",
			selector: "AddDrugRegimen textfield[name=\"FluidType\"]"
        }, {
			ref: "DrugRegimenInstructions",
			selector: "AddDrugRegimen textfield[name=\"Instructions\"]"
        }, {
			ref: "DrugRegimenGrid",
			selector: "AuthoringTab TemplateDrugRegimen grid"
        }, {
			ref: "FluidInfo",
			selector: "AddDrugRegimen container[name=\"fluidInfo\"]"
        }, {
			ref: "DrugRegimenAdminTime",
			selector: "AddDrugRegimen textfield[name=\"AdminTime\"]"
        }, {
			ref: "DoseSpacer",
			selector: "AddDrugRegimen container[name=\"dosespacer\"]"
        }, {
			ref: "PatientType",
			selector: "AddDrugRegimen radiogroup[name=\"patientRadio\"]"
        },
		{
			ref: "DrugRoute",
			selector: "AddDrugRegimen [name=\"Route\"]"
		}


    ],

	// Ext.ComponentQuery.query("AuthoringTab TemplateDrugRegimen grid")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Drug Regimen Controller!");
		this.control({
			"AddDrugRegimen" : {
				"activate" : this.ShowFields
			},
			// MWB 30 Dec 2011 - Added the Drug Regimen functionality...
			"AuthoringTab TemplateDrugRegimen button": {
				click: this.DrugRegimenBtns
			},
			"AuthoringTab TemplateDrugRegimen grid": {
				itemclick: this.clickDrugRegimenGrid,
				itemcontextmenu: this.onCtxHandler
			},
			"AddDrugRegimen button[text=\"Save\"]": { // Pop-up window
				click: this.SaveDrugRegimen
			},
			"EditLookup button[action=\"save\"]": {
				click: this.clickSaveDrug
			},
			"EditLookup button[action=\"cancel\"]": {
				click: this.clickCancelDrug
			},

			"AdminTab EditLookup button[action=\"cancel\"]": {
				click: this.clickCancelDrug
			},
			"HydrationSequence[title=\"Therapy Sequence\"] button[text=\"Save\"]": {
				click: this.SaveSequence
			},
			"AddDrugRegimen combo[name=\"Route\"]": {
				select: this.routeSelected
			},
			"AddDrugRegimen textfield[name=\"FlowRate\"]": {
				blur: this.calcInfusionTime
			},
			"AddDrugRegimen textfield[name=\"FluidVol\"]": {
				blur: this.calcInfusionTime
			},
			"AddDrugRegimen combo[name=\"Drug\"]": {
				select: this.drugSelected,
				expand: this.loadCombo
			},
			"AddDrugRegimen combo[name=\"FluidType1\"]": {
				beforequery: function (queryEvent) {
					delete queryEvent.combo.lastQuery;
				},
				expand: this.FluidTypeRouteSelected
			}
		});
	},

	ShowFields : function( theWin, eOpts ) {
		var RouteInfoFields = this.getDrugPUWindow_DoseRouteFields();
		var theRouteField = this.getDrugRoute();
		var v = theRouteField.getValue();
		var d = theRouteField.getDisplayValue();
		if (v) {
			RouteInfoFields.show();
		}
	},

	getDrugInfoFromVistA : function (drugName, fnc) {
		var URL = Ext.URLs.DrugInfo + "/" + encodeURIComponent(drugName.toLowerCase());
		var theWin = this.getAddDrugPUWindow();
		if (theWin) {
			theWin.setLoading( "Loading Drug Information");
		}
		Ext.Ajax.request({
			url: URL,
			scope: this,
			fnc : fnc,
			success: function(response, opts) {
				var respObj = Ext.decode(response.responseText);
				opts.fnc(respObj, this);
			},
			failure: function(response, opts) {
				var theWin = this.getAddDrugPUWindow();
				if (theWin) {
					theWin.setLoading( false );
				}
				wccConsoleLog('server-side failure with status code ' + response.status);
			}
		});
	},
		
	AddDrugInfoFromVistA2Store : function(respObj, theScope) {
		var theWin = theScope.getAddDrugPUWindow();
		if (theWin) {
			theWin.setLoading( false );
		}
		var RouteCombo = theScope.getDrugRoute();
		var RouteStore = RouteCombo.getStore();
		var theRoutes = respObj.MedInfo.Routes;
		var RoutesData4Store = [];
		var aRoute;
		var i, rLen = theRoutes.length;
		for (i = 0; i < rLen; i++ ) {
			aRoute = {};
			aRoute.id = theRoutes[i].ien;
			aRoute.name = theRoutes[i].name;
			aRoute.description = theRoutes[i].ien;
			RoutesData4Store.push(aRoute);
		}
		RouteStore.loadData(RoutesData4Store);
		theScope.getDrugPUWindow_DoseRouteFields().show();
	},

	drugSelected : function(combo, recs, eOpts){
		this.getDrugPUWindow_DoseRouteFields().hide();
		var drugName;
		if(null !== recs){
			drugName = recs[0].data.name;
		}else{
			drugName = combo.getValue();
		}
		this.getDrugInfoFromVistA(drugName, this.AddDrugInfoFromVistA2Store);
	},

//	collapseCombo: function (picker, eOpts) {
//		if (picker.getValue() == null && picker.hiddenValue != null) {
//			picker.setRawValue(picker.hiddenValue); // MWB 15 Feb 2012 - Added missing ";" as per JSLint
//		}
//	},

	loadCombo: function (picker, eOpts) {

		if (picker.getStore()) { // MWB - 6/19/2012 - Added to remove the filter added to the store
			picker.getStore().clearFilter();
		}


		var originalHiddenVal = null;
		picker.hiddenValue = picker.getRawValue();
		picker.clearValue();

		var URI, id;
		var patientType = this.getPatientType().getValue().PatientType;

		if (picker.name == "Drug") {
			URI = Ext.URLs.Drugs + "/";
			id = patientType;
		}

		picker.getStore().load({
			params: {
				URL: URI,
				ID: id
			},
			callback: function (records, operation, success) {
				if (success) {
					if (null != originalHiddenVal) {
						picker.setRawValue(originalHiddenVal);
					}
				}
			}
		});

	},
	calcInfusionTime: function (field, eOpts) {
		var fluidVol = this.getDrugRegimenFluidVol().getValue();
		var flowRate = this.getDrugRegimenFlowRate().getValue();
		if ("" != flowRate && "" != fluidVol) {
			this.getDrugRegimenInfusionTime().setValue(Ext.CalcInfusionTime(fluidVol, flowRate, true));
		}

	},

	/* Determine fluid Type allowed based on Medication selected */
	FluidTypeRouteSelected: function (combo, recs, eOpts) {
		var theDrug = combo.up("form").down("combo[name=\"Drug\"]").valueModels[0].data;
		var theDrugID = theDrug.id;

		this.getStore("LookupStore").load({
			params: {
				URL: Ext.URLs.LookupIVFluidType4Med,
				id: theDrugID
			}
		});
	},



	routeSelected: function (combo, recs, eOpts) {
		var route = null;

		if (null != recs) {
			route = recs[0].data.name;
		} else {
			route = combo.getValue();
		}

		if (null != route && "" != route) {
			if (Ext.routeRequiresFluid(route)) {
				this.getFluidInfo().show();
				this.getDoseSpacer().hide();
				this.getDrugRegimenAdminTime().show();
			} else if ("IVP" === route) {
				this.getDrugRegimenAdminTime().show();
			} else {
				this.getDoseSpacer().show();
				this.getDrugRegimenAdminTime().hide();
				this.getFluidInfo().hide();
			}
		}



	},

	SaveSequence: function (button) {

		var drugRegimen = Ext.ComponentQuery.query("AddDrugRegimen")[0];

		var win = button.up("window");
		var theForm = win.down("form");
		var values = theForm.getValues();
		var query = "AuthoringTab TemplateDrugRegimen grid";
		var theGrid = Ext.ComponentQuery.query(query)[0];
		var theStore = theGrid.getStore();
		var hydrationForm = drugRegimen.down("form");
		var regimenValues = hydrationForm.getValues();
		var numRecords = theStore.count();

		var newRecord = this.validateRecord(regimenValues);

		if (null == newRecord) {
			return;
		}

		if (0 == values.ApplySequence) {

			regimenValues.Sequence = numRecords + 1;
			newRecord.data.Sequence = regimenValues.Sequence;
			this.addRecord(drugRegimen, newRecord, regimenValues, theStore);

			win.close();
			drugRegimen.close();


		} else if (1 == values.ApplySequence) {

			var records = [];
			var index = regimenValues.Sequence - 1;
			var replacedRecord = theStore.getAt(index);
			var i, tmpModel;

			replacedRecord.data.Sequence++;
			records.push(replacedRecord);

			theStore.removeAt(index);
			theStore.insert(index++, newRecord);

			for (i = index; i <= numRecords; i++) {
				tmpModel = theStore.getAt(i);

				theStore.removeAt(i);
				theStore.insert(i, records.pop());

				if (null != tmpModel) {
					tmpModel.data.Sequence++;
					records.push(tmpModel);
				}
			}
			win.close();
			drugRegimen.close();
		}
	},

	onCtxHandler: function onCtxHandler(grid, record, item, index, event) {
		event.stopEvent();
		var menu = new Ext.menu.Menu({
			items: [{
				id: "inc",
				text: "Increase Sequence",
				handler: function () {
					var theStore = grid.getStore();
					var currRecord = theStore.getAt(index); // SelectionModel might not give you one single row!
					var prevRecord = theStore.getAt(index - 1);

					var desiredSequence = prevRecord.data.Sequence;
					var currSequence = currRecord.data.Sequence;

					currRecord.data.Sequence = desiredSequence;
					prevRecord.data.Sequence = currSequence;

					theStore.removeAt(index);
					theStore.removeAt(index - 1);

					theStore.insert(index - 1, currRecord);
					theStore.insert(index, prevRecord);
				}
            }, {
				id: "dec",
				text: "Decrease Sequence",
				handler: function () {
					var theStore = grid.getStore();
					var currRecord = theStore.getAt(index); // SelectionModel might not give you one single row!
					var nextRecord = theStore.getAt(index + 1);

					var desiredSequence = nextRecord.data.Sequence;
					var currSequence = currRecord.data.Sequence;

					currRecord.data.Sequence = desiredSequence;
					nextRecord.data.Sequence = currSequence;

					theStore.removeAt(index + 1);
					theStore.removeAt(index);

					theStore.insert(index, nextRecord);
					theStore.insert(index + 1, currRecord);
				}
            }]
		});


		if (0 == index) {
			menu.items.get("inc").disabled = true;
		} else if (index == grid.getStore().count() - 1) {
			menu.items.get("dec").disabled = true;
		}
		menu.showAt(event.xy);
	},


	clickSaveDrug: function (button) {
		var win = button.up("window");
		var form = win.down("form");
		var values = form.getValues();

		var lookupRecord = Ext.create(Ext.COMSModels.LookupTable, {
			id: "26",
			value: values.name,
			description: values.description
		});

		lookupRecord.save({
			scope: this,
			waitMsg: "Saving Data...",
			success: function (data) {
				wccConsoleLog("Saved Lookup Type ID " + data.getId() + " lookupid " + data.data.lookupid);
				win.close();
			},
			failure: function (err) {

				Ext.MessageBox.alert("Invalid", "This Drug already exists.");

			}
		});
	},

	clickCancelDrug: function (button) {
		var win = button.up("window");
		win.close();
	},

	getSelectedRecord: function (destroy) {
		var i, theGrid, theView, theSelModel, HasSelection = false,
			selRows, theRecord, theStore, theIndex, currRecord, prvRecord;

		theGrid = this.getDrugRegimenGrid();
		theView = theGrid.getView();
		theSelModel = theView.getSelectionModel();
		HasSelection = theSelModel.hasSelection();
		if (HasSelection) {
			selRows = theSelModel.getSelection();
			theRecord = selRows[0];
			theStore = theView.getStore();
			theIndex = theStore.indexOf(theRecord);
			if (destroy) {
				for (i = theStore.count() - 1; i > theIndex; i--) {
					currRecord = theStore.getAt(i);
					prvRecord = theStore.getAt(i - 1);
					currRecord.data.Sequence = prvRecord.data.Sequence;
					theStore.removeAt(i);
					theStore.insert(i, currRecord);
				}
				theStore.removeAt(theIndex);
				return;
			}
		}
		return {
			hasRecord: HasSelection,
			selModel: theSelModel,
			record: theRecord,
			rowNum: theIndex
		};
	},

	insertNewDrugRegimenRecord: function (win, theStore, recNum, data) {
		var newRecord;
		var dupRecord = -1;
		var dupSequence = -1;
		var existingRecord = win.recIndex;
		var addDrugRegimen = Ext.ComponentQuery.query("AddDrugRegimen")[0];
		var title = addDrugRegimen.title;

		newRecord = this.validateRecord(data);

		if (recNum > 0 && null !== newRecord) {
			/*
			 * Check if there is a duplicate. 
			 * If editing a record then duplicate drug should be a different sequence number
			 * If adding a record then duplicate drug can be any record
			 */
			dupRecord = theStore.findBy(

				function (record, id) {
					if (null == existingRecord && record.data.Drug === data.Drug) {
						return true;
					}
					if (record.data.Drug === data.Drug && record.data.Sequence - 1 != existingRecord) {
						return true;
					}
					return false;
				});


			var isDup = false;
			/*
			 * If the duplicate was found check if duplicate is on the same admin day(s).
			 */
			if (-1 !== dupRecord) {
				var tmpRecord = theStore.getAt(dupRecord);
				var adminDays = tmpRecord.data.Day;
				adminDays = adminDays.split(",");
				var newAdminDays = data.Day.split(",");
				var day;


				for (day in newAdminDays) {
					if (newAdminDays.hasOwnProperty(day)) {
						if (Ext.Array.contains(adminDays, newAdminDays[day])) {
							isDup = true;
						}
					}
				}

			}

			if (true === isDup) {
				var DrugRegimenCtl = this.getController("Authoring.DrugRegimen");

				var msg = "A duplicate medication for the same administration day exists. Would you like to continue?";

				Ext.MessageBox.show({
					title: "Information",
					msg: msg,
					width: 300,
					buttons: Ext.MessageBox.YESNO,
					fn: function (buttonId) {
						if ("no" === buttonId) {
							win.close();
							return;
						}
						dupSequence = theStore.find("Sequence", data.Sequence, 0, true, false, true);
						if (-1 !== dupSequence && dupSequence !== existingRecord && title.substring(0, "Edit".length) !== "Edit") {
							Ext.widget("HydrationSequence", {
								title: "Therapy Sequence"
							});
							return;
						}
						DrugRegimenCtl.addRecord(existingRecord, newRecord, data, theStore);
						win.close();
					}
				});

			} else {
				dupRecord = -1;
				dupSequence = theStore.find("Sequence", data.Sequence, 0, true, false, true);
				if (-1 !== dupSequence && dupSequence !== existingRecord && title.substring(0, "Edit".length) !== "Edit") {
					Ext.widget("HydrationSequence", {
						title: "Therapy Sequence"
					});
					return;
				}
				//if(dupSequence == dupSequence){
				dupSequence = -1;
				//}
				win.close();
			}

		} else {
			win.close();
		}

		if (-1 == dupRecord && -1 == dupSequence) {
			this.addRecord(existingRecord, newRecord, data, theStore);
		}

	},
	addRecord: function (existingRecord, newRecord, data, theStore) {


		if ((data.Sequence - 1) == existingRecord) {
			theStore.removeAt(existingRecord);
			theStore.insert(existingRecord, newRecord);
		} else if ((data.Sequence - 1) < theStore.count()) {

			var desiredSequence = data.Sequence - 1;
			var currRecord = theStore.getAt(desiredSequence);
			currRecord.data.Sequence = existingRecord + 1;

			theStore.removeAt(desiredSequence);
			theStore.insert(desiredSequence, newRecord);

			theStore.removeAt(existingRecord);
			theStore.insert(existingRecord, currRecord);

		} else {
			theStore.insert((data.Sequence - 1), newRecord);
		}

	},

	validateRecord: function (data) {

		var newRecord = Ext.create(Ext.COMSModels.DrugRegimen, {
			Drug: data.Drug,
			Amt: data.Amt,
			Units: data.Units,
			Route: data.Route,
			Day: data.Day,
			FluidVol: data.FluidVol,
			InfusionTime: data.InfusionTime,
			FlowRate: data.FlowRate,
			Instructions: data.Instructions,
			Sequence: data.Sequence,
			AdminTime: data.AdminTime,
			FluidType: data.FluidType
		});

		var errors = newRecord.validate();
		if (errors.length > 0) {
			var msg = "";

			errors.each(function (error) {
				//msg += "field: " + error.field + " message: " + error.message + "<br/>";
				msg += " message: " + error.message + "<br/>";
			});

			Ext.MessageBox.alert("Invalid", "Validation Errors:<br/>" + msg);
			return null;
		}
		return newRecord;
	},

	addToSequenceStore: function (combo, theQuery, addSequence) {
		var i, tmpModel, store;
		var theGrid = Ext.ComponentQuery.query(theQuery)[0];
		var theStore = theGrid.getStore();
		var sequenceCnt = theStore.count();

		if (sequenceCnt == 0) {
			sequenceCnt++;
			tmpModel = Ext.create(Ext.COMSModels.GenericLookup, {
				id: sequenceCnt
			});
			combo.getStore().add(tmpModel);
		} else {
			if (addSequence) {
				sequenceCnt++;
			}

			store = combo.getStore();
			for (i = 1; i <= sequenceCnt; i++) {
				tmpModel = Ext.create(Ext.COMSModels.GenericLookup, {
					id: i
				});
				store.add(tmpModel);
			}
		}
	},

	//--------------------------------------------------------------------------------
	//	Drug Regimen Grid Handlers
	//
	RemoveSelectedDrug: function (btn, text) {
		if ("yes" === btn) {
			this.getSelectedRecord(true); // bool param will either destroy (true) or return (false) the selected record
		} else {
			var record = this.getSelectedRecord(false); // get the record and deselect it
			if (record.hasRecord) {
				record.selModel.deselectAll();
			}
		}
	},
	DrugRegimenBtns: function (button) { // Handles the onclick event of all the buttons for the Drug Regimen grid
		var ckRec = this.getSelectedRecord(false);
		var theQuery = "AuthoringTab TemplateDrugRegimen grid";
		var exist, view, puWin;
		if ("Add Drug" === button.text) {

			//KD - 03/09/2012 - This is done to prevent multiple instances (windows) to be created everytime the "Add Drug" button is clicked
			exist = Ext.ComponentQuery.query("AddDrugRegimen")[0];
			if (!exist) {
				puWin = Ext.widget("AddDrugRegimen"); // Creates an instance of the "Add Drug Regimen" pop-up window
			} else {
				puWin = exist;
			}
			//KD
			this.addToSequenceStore(this.getDrugRegimenSequence(), theQuery, true);
		} else if ("AddNonForma" === button.title) {

			//KD - 03/09/2012 - This is done to prevent multiple instances (windows) to be created everytime the "Add Drug" button is clicked
			exist = Ext.ComponentQuery.query("EditLookup")[0];
			if (!exist) {
				view = Ext.widget("EditLookup");
			} else {
				view = exist;
			}
			//KD
			view.setTitle("Add Non-Formulary Drug");
		} else if ("Edit Drug" === button.text) {
			if (ckRec.hasRecord) {
				var record = Ext.create(Ext.COMSModels.DrugRegimen, ckRec.record.data);
				var drugName = record.getData().Drug;
				wccConsoleLog("Edit Drug Regimen for - " + ckRec.record.get("Drug"));
				puWin = Ext.widget("AddDrugRegimen"); // Creates an instance of the "Add Drug Regimen" pop-up window
				puWin.setTitle("Edit Drug Regimen");

				this.addToSequenceStore(this.getDrugRegimenSequence(), theQuery, false);

				puWin.recIndex = ckRec.rowNum; // Used in dup drug check on saving
				this.getDrugRegimenSequence().setValue(record.data.Sequence);
				this.getDrugRegimenAdminDay().setValue(record.data.Day);
				this.getDrugRegimenDrug().setValue(record.data.Drug);
				this.getDrugRegimenAmt().setValue(record.data.Amt);
				this.getDrugRegimenUnits().setValue(record.data.Units);
				this.getDrugRegimenRoute().setValue(record.data.Route);
				this.getDrugRegimenFluidVol().setValue(record.data.FluidVol);
				this.getDrugRegimenInfusionTime().setValue(record.data.InfusionTime);
				this.getDrugRegimenFlowRate().setValue(record.data.FlowRate);
				this.getDrugRegimenInstructions().setValue(record.data.Instructions);
				this.getDrugRegimenAdminTime().setValue(record.data.AdminTime);
				this.getDrugRegimenFluidType().setValue(record.data.FluidType);

				this.routeSelected(this.getDrugRegimenRoute(), null, null);

		var RouteInfoFields = this.getDrugPUWindow_DoseRouteFields();
		this.getDrugInfoFromVistA(drugName, this.AddDrugInfoFromVistA2Store);
		RouteInfoFields.show();


			}

		} else if ("Remove Drug" === button.text) {
			wccConsoleLog("Remove Drug Regimen for - " + ckRec.record.get("Drug"));
			Ext.Msg.confirm("Remove Drug", "Are you sure you want to remove this drug from this template?", this.RemoveSelectedDrug, this);
		}
		this.getRemoveDrugRegimen().disable();
		this.getEditDrugRegimen().disable();
	},

	clickDrugRegimenGrid: function (grid, record) {
		this.getRemoveDrugRegimen().enable();
		this.getEditDrugRegimen().enable();
	},

	SaveDrugRegimen: function (button) { // Called when clicking on the "Save" button in the Pop-Up Window
		var win = button.up("window");
		wccConsoleLog("Adding new Drug Regimen");
		var theGrid = this.getDrugRegimenGrid(); // Ext.ComponentQuery.query(query)[0];
		var theStore = theGrid.getStore();
		var theForm = win.down("form");
		var values = theForm.getValues();

		/* MWB - 3/9/2015 Change in Drug Route methods due to VistA requirements means we need the name AND id (aka IEN) */
		theRouteField = this.getDrugRoute();
		values.Route = theRouteField.getDisplayValue() + " : " + theRouteField.getValue();


		var numRecords = theStore.count();
		this.insertNewDrugRegimenRecord(win, theStore, numRecords, values);
	}
});

/*global Ext */
Ext.getHydrationFormValues = function(config, value) {
	var addHydrationDrug = Ext.ComponentQuery.query('AddHydrationDrug')[0];
	var hydrationForm = addHydrationDrug.down('form');
	return hydrationForm.getValues();
};
Ext.HydrationRouteValidation = function(config, value){
	var values = Ext.getHydrationFormValues(config, value);
	var route = values.Infusion1;

	if (Ext.routeRequiresFluid(route)) {
		if('' === value){
			return false;
		}
	}
	return true;
};
Ext.apply(Ext.data.validations,{
			amt1hydration: function(config, value) {
				var values = Ext.getHydrationFormValues(config, value);
				if(('' === values.Amt1) && ('' === value)){
					return false;
				}
				if(('' === value) && ((values.Units1 && ('' !== values.Units1)) || (values.Infusion1 && ('' !== values.Infusion1)))) {
					return false;
				}
				return true;
			},

			unit1hydration: function(config, value){
				var values = Ext.getHydrationFormValues(config, value);
				if('' === value && ('' !== values.Amt1 || values.Infusion1 && '' !== values.Infusion1)){
					return false;
				}else{
					return true;
				}
			},

			route1hydration: function(config, value){
				var values = Ext.getHydrationFormValues(config, value);
				if('' === value && ('' !== values.Amt1 || values.Units1 && '' !== values.Units1)){
					return false;
				}else{
					return true;
				}
			},
			fluidVol1hydration: function(config, value){
				return Ext.HydrationRouteValidation(config, value);
			},
			adminTimehydration: function(config, value){
				return Ext.HydrationRouteValidation(config, value);
			},
			flowRate1hydration: function(config, value){
				return Ext.HydrationRouteValidation(config, value);
			},
			fluidType1hydration: function(config, value){
				return Ext.HydrationRouteValidation(config, value);
			}
		});

Ext.define('COMS.controller.Authoring.Hydration', {
	extend: 'Ext.app.Controller',
	stores: [
		'TotalCoursesMax',
		'CycleLengthMax',
		'TimeFrameUnit',
		'EmetogenicLevel',
		'FebrileNeutropeniaRisk',
		'ReferencesStore',
		'LUReferences',
		'HydrationStore',
		'DrugStore',
		'DrugUnitsStore',
		'InfusionStore'
	],
	views: [
		'Authoring.Hydration',
		'Authoring.AddHydrationDrug',
		'Authoring.HydrationSequence'
	],


	refs: [
		{
			ref: "AddDrugPUWindow",
			selector: "AddHydrationDrug"
		}, 
		{
			ref: "DrugPUWindow_DoseRouteFields",
			selector: "AddHydrationDrug [name=\"Dose_RouteFields\"]"
		},
		// Hydration Buttons
		{
			ref: 'RemovePreHydration',
			selector: 'AuthoringTab TemplateHydration[title="Pre Therapy"] button[text="Remove Drug"]'
		}, {
			ref: 'EditPreHydration',
			selector: 'AuthoringTab TemplateHydration[title="Pre Therapy"] button[text="Edit Drug"]'
		}, {
			ref: 'RemovePostHydration',
			selector: 'AuthoringTab TemplateHydration[title="Post Therapy"] button[text="Remove Drug"]'
		}, {
			ref: 'EditPostHydration',
			selector: 'AuthoringTab TemplateHydration[title="Post Therapy"] button[text="Edit Drug"]'
		},

		// Hydration Fields
		{
			ref: 'HydrationDrugCombo',
			selector: 'AddHydrationDrug combo[name="Drug"]'
		}, {
			ref: 'HydrationSequenceCombo',
			selector: 'AddHydrationDrug combo[name="Sequence"]'
		}, {
			ref: 'HydrationAmt1',
			selector: 'AddHydrationDrug textfield[name="Amt1"]'
		}, {
			ref: 'HydrationUnits1',
			selector: 'AddHydrationDrug combo[name="Units1"]'
		}, {
			ref: 'HydrationInfusion1',
			selector: 'AddHydrationDrug combo[name="Infusion1"]'
		}, {
			ref: "DrugRoute",
			selector: "AddHydrationDrug [name=\"Infusion1\"]"
		}, {
			ref: 'HydrationInstructions',
			selector: 'AddHydrationDrug textfield[name="Instructions"]'
		}, {
			ref: 'HydrationFluidVol1',
			selector: 'AddHydrationDrug textfield[name="FluidVol1"]'
		}, {
			ref: 'HydrationFlowRate1',
			selector: 'AddHydrationDrug textfield[name="FlowRate1"]'
		}, {
			ref: 'HydrationInfusionTime1',
			selector: 'AddHydrationDrug textfield[name="InfusionTime1"]'
		}, {
			ref: 'HydrationFluidType1',
			selector: 'AddHydrationDrug textfield[name="FluidType1"]'
		}, {
			ref: 'HydrationDay',
			selector: 'AddHydrationDrug textfield[name="Day"]'
		}, {
			ref: 'HydrationGrid',
			selector: 'AuthoringTab TemplateHydration grid'
		}, {
			ref: 'FluidInfo',
			selector: 'AddHydrationDrug container[name="fluidInfo"]'
		}, {
			ref: 'FluidInfo1',
			selector: 'AddHydrationDrug container[name="fluidInfo1"]'
		}, {
			ref: 'HydrationAdminTime',
			selector: 'AddHydrationDrug textfield[name="AdminTime"]'
		}, {
			ref: 'Dose1Spacer',
			selector: 'AddHydrationDrug container[name="dosespacer"]'
		}, {
			ref: "PatientType",
			selector: "AddHydrationDrug radiogroup[name=\"patientRadio\"]"
		}
	],


	// Ext.ComponentQuery.query('TemplatePreHydration button[text="Add Drug"]')[0].el.dom
	init: function () {
		wccConsoleLog('Initialized Authoring Tab Panel Navigation Controller!');
		this.control({
			"AddHydrationDrug" : {
				"activate" : this.ShowFields
			},
			// MWB 28 Dec 2011 - Added the Pre/Post Hydration Add Drug functionality...
			'AuthoringTab TemplateHydration button': {
				click: this.HydrationBtns
			},
			'AuthoringTab TemplateHydration grid': { // The Hydration Grid Control
				itemclick: this.clickUpdateHydration,
				itemcontextmenu: this.onCtxHandler
			},
			'AddHydrationDrug button[text="Save"]': { // Pop-up window
				click: this.SaveHydrationDrug
			},
			'HydrationSequence[name=\"Hydration Sequence\"] button[text="Save"]' : {
				click: this.SaveSequence
			},
			'AddHydrationDrug combo[name="Infusion1"]' : {
				select: this.routeSelected
			},
			'AddHydrationDrug textfield[name="FlowRate1"]' : {
				blur: this.calcInfusionTime
			},
			'AddHydrationDrug textfield[name="FluidVol1"]' : {
				blur: this.calcInfusionTime
			},
			'AddHydrationDrug combo[name="Drug"]' : {
				select: this.drugSelected,
				// collapse: this.collapseCombo,
				expand : this.loadCombo
			},
			"AddHydrationDrug combo[name=\"FluidType1\"]" : {
				beforequery: function(queryEvent) {
					delete queryEvent.combo.lastQuery;
				},
				expand: this.FluidTypeRouteSelected
			}
		});
	},

	ShowFields : function( theWin, eOpts ) {
		var RouteInfoFields = this.getDrugPUWindow_DoseRouteFields();
		var theRouteField = this.getDrugRoute();
		var v = theRouteField.getValue();
		var d = theRouteField.getDisplayValue();
		if (v) {
			RouteInfoFields.show();
		}
	},


	getDrugInfoFromVistA : function (drugName, fnc) {
		var URL = Ext.URLs.DrugInfo + "/" + encodeURIComponent(drugName.toLowerCase());
		var theWin = this.getAddDrugPUWindow();
		if (theWin) {
			theWin.setLoading( "Loading Drug Information");
		}
		Ext.Ajax.request({
			url: URL,
			scope: this,
			fnc : fnc,
			success: function(response, opts) {
				var respObj = Ext.decode(response.responseText);
				opts.fnc(respObj, this);
			},
			failure: function(response, opts) {
				var theWin = this.getAddDrugPUWindow();
				if (theWin) {
					theWin.setLoading( false );
				}
				wccConsoleLog('server-side failure with status code ' + response.status);
			}
		});
	},

	AddDrugInfoFromVistA2Store : function(respObj, theScope) {
var theValue = theScope.getHydrationInfusion1().getValue();
		var theWin = theScope.getAddDrugPUWindow();
		if (theWin) {
			theWin.setLoading( false );
		}
		var RouteCombo = theScope.getDrugRoute();
		var RouteStore = RouteCombo.getStore();
		var theRoutes = respObj.MedInfo.Routes;
		var RoutesData4Store = [];
		var aRoute;
		var i, rLen = theRoutes.length;
		for (i = 0; i < rLen; i++ ) {
			aRoute = {};
			aRoute.id = theRoutes[i].ien;
			aRoute.name = theRoutes[i].name;
			aRoute.description = theRoutes[i].ien;
			RoutesData4Store.push(aRoute);
		}
		RouteStore.loadData(RoutesData4Store);


theScope.getHydrationInfusion1().setValue(theValue);

		theScope.getDrugPUWindow_DoseRouteFields().show();
	},

	drugSelected : function(combo, recs, eOpts){
		this.getDrugPUWindow_DoseRouteFields().hide();
		var drugName;
		if(null !== recs){
			drugName = recs[0].data.name;
		}else{
			drugName = combo.getValue();
		}
		this.getDrugInfoFromVistA(drugName, this.AddDrugInfoFromVistA2Store);
	},

//	collapseCombo : function(picker,eOpts){
//		if(picker.getValue() === null && picker.hiddenValue !== null){
//			picker.setRawValue(picker.hiddenValue);
//		}
//	},

	loadCombo: function (picker, eOpts) {
		if (picker.getStore()) {		// MWB - 6/19/2012 - Added to remove the filter added to the store
			picker.getStore().clearFilter();
		}
		var originalHiddenVal = null;
		picker.hiddenValue = picker.getRawValue();
		picker.clearValue();

		var URI, id;
		var patientType = this.getPatientType().getValue().PatientType;

		if (picker.name === "Drug") {
			URI = Ext.URLs.Drugs + "/";
			id = patientType;
		}

		picker.getStore().load({
				params: {
					URL: URI,
					ID: id
				},
				callback: function (records, operation, success) {
					if (success) {
						if (null !== originalHiddenVal) {
							picker.setRawValue(originalHiddenVal);
						}
					}
				}
		});
	},

	calcInfusionTime: function(field, eOpts){

		var index = field.name.length - 1;
		var lastChar = field.name.substring(index,field.name.length);
		var fluidVol,flowRate,infusionTime;

		if('1' === lastChar){
			fluidVol = this.getHydrationFluidVol1().getValue();
			flowRate = this.getHydrationFlowRate1().getValue();
			infusionTime = this.getHydrationInfusionTime1();
		}
		if('' !== flowRate && '' !== fluidVol){
			infusionTime.setValue(Ext.CalcInfusionTime(fluidVol,flowRate,true));
		}

	},

	FluidTypeRouteSelected: function(combo, recs, eOpts){
				/* MWB - 4/17/2014 - for new requirement (*IV Fluid Type Choices Issue #80) need to get the drug to determine which fluid types are allowable */
				// var theDrug = combo.up("form").down("combo[name=\"Drug\"]");
				var theDrug = combo.up("form").down("combo[name=\"Drug\"]").valueModels[0].data;
				var theDrugID = theDrug.id;

				this.getStore('LookupStore').load({
						params: {
						URL : Ext.URLs.LookupIVFluidType4Med,
						id  : theDrugID
					}
				});
	},

	routeSelected: function(combo, recs, eOpts){
		var route=null;
		if(null !== recs){
			route = recs[0].data.name;
		}else{
			route = combo.getValue();
		}

		if(null !== route && '' !== route){
			if(Ext.routeRequiresFluid(route)) {
				if('Infusion1' === combo.getName()){
					this.getFluidInfo().show();
				}
				this.getDose1Spacer().hide();
				this.getHydrationAdminTime().show();
			}
			else if("IVP" === route){
				this.getHydrationAdminTime().show();
			}
			else {
				if('Infusion1' === combo.getName()){
					this.getFluidInfo().hide();
					this.getDose1Spacer().show();
					this.getHydrationAdminTime().hide();
				}
			}
		}
	},

	SaveSequence: function(button, opts){		// MWB - 7/19/2012 - Changes...
		wccConsoleLog("SaveSequence()");
		var addHydrationDrug = Ext.ComponentQuery.query('AddHydrationDrug')[0];

		var win = button.up('window');
		var HydrationType = addHydrationDrug.type;
		var theForm = win.down('form');
		var values = theForm.getValues();
		var query = "AuthoringTab TemplateHydration[title=\"" + HydrationType + " Therapy\"] grid";
		var theGrid = Ext.ComponentQuery.query(query)[0];
		var theStore = theGrid.getStore();
		var hydrationForm = addHydrationDrug.down('form');
		var hydrationValues = hydrationForm.getValues();
		var numRecords = theStore.count();

		var newRecord = this.validateRecord(hydrationValues,HydrationType);

		if (null === newRecord){
			/* Record did not pass validation and an error message has been displayed */
			return;
		}

		if ("0" === values.ApplySequence){
			hydrationValues.Sequence = numRecords + 1;
			newRecord.data.Sequence = hydrationValues.Sequence;
			this.addRecord(addHydrationDrug,newRecord,hydrationValues,theStore);
		} else if ("1" === values.ApplySequence){
			var i,  
				records = [], 
				index = hydrationValues.Sequence - 1, 
				replacedRecord = theStore.getAt(index);

			replacedRecord.data.Sequence++;
			records.push(replacedRecord);

			theStore.removeAt(index);
			theStore.insert(index++, newRecord);

			for(i = index; i <= numRecords; i++){
				var tmpModel = theStore.getAt(i);
				theStore.removeAt(i);
				theStore.insert(i,records.pop());
				if(tmpModel){
					tmpModel.data.Sequence++;
					records.push(tmpModel);
				}
			}
		}
		win.close();
		addHydrationDrug.close();

	},

	onCtxHandler: function onCtxHandler(grid,record,item,index,event) {
		event.stopEvent();
		var menu = new Ext.menu.Menu({
			items: [{
				id: 'inc',
				text: 'Increase Sequence',
				handler: function() {

					var theStore = grid.getStore();
					var currRecord = theStore.getAt(index); // SelectionModel might not give you one single row!

					var prevRecord = theStore.getAt(index-1);


					var desiredSequence = prevRecord.data.Sequence;
					var currSequence = currRecord.data.Sequence;

					currRecord.data.Sequence = desiredSequence;
					prevRecord.data.Sequence = currSequence;

					theStore.removeAt(index);
					theStore.removeAt(index-1);

					theStore.insert(index-1,currRecord);
					theStore.insert(index,prevRecord);


				}
			}, {
				id: 'dec',
				text: 'Decrease Sequence',
				handler: function() {
					var theStore = grid.getStore();
					var currRecord = theStore.getAt(index); // SelectionModel might not give you one single row!

					var nextRecord = theStore.getAt(index+1);


					var desiredSequence = nextRecord.data.Sequence;
					var currSequence = currRecord.data.Sequence;

					currRecord.data.Sequence = desiredSequence;
					nextRecord.data.Sequence = currSequence;

					theStore.removeAt(index+1);
					theStore.removeAt(index);

					theStore.insert(index,nextRecord);
					theStore.insert(index+1,currRecord);

				}
			}]
		});


		if(0 === index){
			menu.items.get('inc').disabled = true;
		}else if(index === grid.getStore().count()-1){
			menu.items.get('dec').disabled = true;
		}

		menu.showAt(event.xy);

	},



	// Used in both the Hydration and Refernce Grids
	getSelectedRecord: function (destroy) {
		var theGrid, theView, theSelModel, HasSelection = false, selRows, theRecord, theStore, theIndex;

		theGrid = Ext.ComponentQuery.query(this.theQuery)[0];
		theView = theGrid.getView();
		theSelModel = theView.getSelectionModel();
		HasSelection = theSelModel.hasSelection();
		if (HasSelection) {
			selRows = theSelModel.getSelection();
			theRecord = selRows[0];
			theStore = theView.getStore();
			theIndex = theStore.indexOf(theRecord);
			if (destroy) {
				for(var i=theStore.count()-1;i>theIndex;i--){
					var currRecord = theStore.getAt(i);
					var prvRecord = theStore.getAt(i-1);
					currRecord.data.Sequence = prvRecord.data.Sequence;
					theStore.removeAt(i);
					theStore.insert(i,currRecord);
				}
				theStore.removeAt(theIndex);
				return {};
			}
		}
        return {
            hasRecord: HasSelection,
            selModel : theSelModel,
            record: theRecord,
            rowNum: theIndex
        };
	},


	insertNewHydrationRecord: function (win, theStore, HydrationType, recNum, data) {
		var newRecord;
		var dupRecord = -1;
		var dupSequence = -1;
		var existingRecord = win.recIndex;
		var addHydrationDrug = Ext.ComponentQuery.query('AddHydrationDrug')[0];
		var title = addHydrationDrug.title;
		wccConsoleLog("insertNewHydrationRecord()");

		newRecord = this.validateRecord(data,HydrationType);

		if (recNum > 0 && null !== newRecord) {
			/*
			 * Check if there is a duplicate.
			 * If editing a record then duplicate drug should be a different sequence number
			 * If adding a record then duplicate drug can be any record
			 */
			dupRecord = theStore.findBy(

			function (record, id) {
					if (null === existingRecord && record.data.Drug === data.Drug) {
						return true;
					}else if(record.data.Drug === data.Drug && record.data.Sequence -1 !== existingRecord){
						return true;
					}
					return false;
			});


			var isDup = false;
			/*
			 * If the duplicate was found check if duplicate is on the same admin day(s).
			 */
			if (-1 !== dupRecord) {
				var tmpRecord = theStore.getAt(dupRecord);
				var adminDays = tmpRecord.data.Day;
				adminDays = adminDays.split(",");
				var day, newAdminDays = data.Day.split(",");

				for(day in newAdminDays){
					if(Ext.Array.contains(adminDays, newAdminDays[day])){
						isDup = true;
					}
				}
			}

			if(true === isDup){
				var HyrdationCtl = this.getController("Authoring.Hydration");
				var msg = 'A duplicate medication for the same administration day exists. Would you like to continue?';

				Ext.MessageBox.show({
					title: 'Information',
					msg: msg,
					width:300,
					buttons: Ext.MessageBox.YESNO,
					fn: function(buttonId, Opts) {
						if("no" === buttonId) {
								return;
						}else{
							dupSequence = theStore.find("Sequence", data.Sequence, 0, true, false, true);
							if (-1 !== dupSequence && dupSequence !== existingRecord && title.substring(0,"Edit".length) !== "Edit") {
								Ext.widget('HydrationSequence', {title: HydrationType + ' Therapy Sequence', name: 'Hydration Sequence'});
								win.close();
								return;
							}else{
								HyrdationCtl.addRecord(existingRecord,newRecord,data,theStore);
							}
						}
					}
				});
			}
			else{
				dupRecord = -1;
				dupSequence = theStore.find("Sequence", data.Sequence, 0, true, false, true);
				if (-1 !== dupSequence && dupSequence !== existingRecord && title.substring(0,"Edit".length) !== "Edit") {
					Ext.widget('HydrationSequence', {title: HydrationType +' Therapy Sequence', name: 'Hydration Sequence'});
					return;
				}
				dupSequence = -1;
				win.close();
			}
		}
		if ( -1 === dupRecord && -1 === dupSequence) {
			this.addRecord(existingRecord,newRecord,data,theStore);
		}
		win.close();
	},

	validateRecord: function(data,HydrationType){
		var newRecord = Ext.create(Ext.COMSModels.Hydration, {
			hydrationType: HydrationType,
			Sequence: data.Sequence,
			Drug: data.Drug,
			Amt1: data.Amt1,
			Units1: data.Units1,
			Infusion1: data.Infusion1,
			Instructions: data.Instructions,
			FluidVol1: data.FluidVol1,
			FlowRate1: data.FlowRate1,
			InfusionTime1: data.InfusionTime1,
			FluidType1: data.FluidType1,
			Day: data.Day,
			AdminTime: data.AdminTime
		});

		var errors = newRecord.validate();
		if(errors.length > 0){
			var msg='';
			errors.each(function(error){
				msg += " message: " + error.message + "<br/>";
			});
			Ext.MessageBox.alert('Invalid', 'Validation Errors:<br/>' + msg);
			return null;
		}
		return newRecord;
	},

	addRecord: function(existingRecord,newRecord,data,theStore){
		if((data.Sequence-1) === existingRecord){
			theStore.removeAt(existingRecord);
			theStore.insert(existingRecord, newRecord);
		}else if((data.Sequence-1) < theStore.count()){
			var desiredSequence = data.Sequence - 1;
			var currRecord = theStore.getAt(desiredSequence);
			currRecord.data.Sequence = existingRecord+1;

			theStore.removeAt(desiredSequence);
			theStore.insert(desiredSequence,newRecord);

			theStore.removeAt(existingRecord);
			theStore.insert(existingRecord,currRecord);
		}else{
			theStore.insert((data.Sequence-1), newRecord);
		}
	},

	SaveHydrationDrug: function (button) { // Called when clicking on the "Save" button in the Hydration Drug Pop-Up Window

		wccConsoleLog("SaveHydrationDrug()");
		var win = button.up('window');
		var HydrationType = win.type;
		wccConsoleLog("Adding new Drug to the " + HydrationType + " Drug Section");

		var query = "AuthoringTab TemplateHydration[title=\"" + HydrationType + " Therapy\"] grid";
		var theGrid = Ext.ComponentQuery.query(query)[0];
		var theStore = theGrid.getStore();
		var theForm = win.down('form');
		var values = theForm.getValues();

		/* MWB - 3/9/2015 Change in Drug Route methods due to VistA requirements means we need the name AND id (aka IEN) */
		theRouteField = this.getDrugRoute();
		values.Infusion1 = theRouteField.getDisplayValue() + " : " + theRouteField.getValue();

		var numRecords = theStore.count();
		this.insertNewHydrationRecord(win, theStore, HydrationType, numRecords, values);
	},


	// MWB 28 Dec 2011 - Added the Pre/Post Hydration Add Drug functionality...
	clickUpdateHydration: function (grid, record) {
		var panel = grid.up("container").up("container");
		var type = panel.type;
		if ("Pre" === type) {
			this.getRemovePreHydration().enable();
			this.getEditPreHydration().enable();
		} else {
			this.getRemovePostHydration().enable();
			this.getEditPostHydration().enable();
		}
	},

	addToSequenceStore: function(combo,addSequence){
		var theGrid = Ext.ComponentQuery.query(this.theQuery)[0];
		var theStore = theGrid.getStore();
		var sequenceCnt = theStore.count();
		var tmpModel;

		if(sequenceCnt==0){
			sequenceCnt++;
			tmpModel = Ext.create(Ext.COMSModels.GenericLookup,{
				id: sequenceCnt
			});
			combo.getStore().add(tmpModel);
		}else{
			if(addSequence){
				sequenceCnt++;
			}

			var store = combo.getStore();
			for(var i=1;i<=sequenceCnt;i++){
				tmpModel = Ext.create(Ext.COMSModels.GenericLookup,{
					id: i
				});
				store.add(tmpModel);

			}
		}

	},

    RemoveSelectedHydrationDrug: function (btn, text) {
        var theQuery = this.theQuery;
        if ("yes" === btn) {
            wccConsoleLog("Remove " + this.panelType + " Therapy Drug - " + this.ckRec.record.get('Drug'));
            this.getSelectedRecord(true);
        }
        else {
            var record = this.getSelectedRecord(false);   // get the record and deselect it
            if (record.hasRecord) {
                record.selModel.deselectAll();
            }
        }
        delete this.panelType;
        delete this.ckRec;
        delete this.theQuery;
    },

	EditDrugGetDetails : function(record) {
		var drugName = record.getData().Drug;
		var hdPanel = Ext.widget('AddHydrationDrug'); // Creates an instance of the "Add Hydration Drug" pop-up window
		var RouteInfoFields = this.getDrugPUWindow_DoseRouteFields();
		RouteInfoFields.hide();

		hdPanel.type = this.panelType;
		hdPanel.setTitle("Edit " + this.panelType + " Therapy Drug");
		var theCombo = this.getHydrationSequenceCombo();
		this.addToSequenceStore(theCombo,false);
		hdPanel.recIndex = this.ckRec.rowNum;	// Used in dup drug check on saving

		this.getHydrationSequenceCombo().setValue(record.data.Sequence);
		this.getHydrationDrugCombo().setValue(record.data.Drug);
		this.getHydrationAmt1().setValue(record.data.Amt1);
		this.getHydrationUnits1().setValue(record.data.Units1);

var theRouteName, theRouteID, theRoute = record.data.Infusion1;

if (theRoute.indexOf(" : ") > 0) {
	theRoute = theRoute.split(" : ");
	theRouteID = theRoute[1];
	theRouteName = theRoute[0];
	this.getHydrationInfusion1().setValue(theRouteID);
	this.getHydrationInfusion1().setRawValue(theRouteID);
}
else {
	this.getHydrationInfusion1().setValue(theRoute);
}


		this.routeSelected(this.getHydrationInfusion1(),null,null);

		this.getHydrationInstructions().setValue(record.data.Instructions);
		this.getHydrationFluidVol1().setValue(record.data.FluidVol1);
		this.getHydrationFlowRate1().setValue(record.data.FlowRate1);
		this.getHydrationInfusionTime1().setValue(record.data.InfusionTime1);
		this.getHydrationFluidType1().setValue(record.data.FluidType1);

		this.getHydrationDay().setValue(record.data.Day);
		this.getHydrationAdminTime().setValue(record.data.AdminTime);

		this.getDrugInfoFromVistA(drugName, this.AddDrugInfoFromVistA2Store);
		RouteInfoFields.show();
	},

	HydrationBtns: function (button) { // Handles the onclick event of all the buttons for both the pre and post hydration grids
		var panel = button.up("panel").up("container");
		this.theQuery = "AuthoringTab TemplateHydration[title=\"" + panel.type + " Therapy\"] grid";
		if ("Add Drug" === button.text) {
			var view, exist = Ext.ComponentQuery.query('AddHydrationDrug')[0];
			if(!exist) {
				view = Ext.widget('AddHydrationDrug'); // Creates an instance of the "Add Hydration Drug" pop-up window
			}
			else {
				view = exist;
			}
			view.type = panel.type;
			view.setTitle("Add " + panel.type + " Therapy Drug");
			this.addToSequenceStore(this.getHydrationSequenceCombo(),true);
		} else {
			var ckRec = this.getSelectedRecord(false);
			if (ckRec.hasRecord) {
				this.panelType = panel.type;
				this.ckRec = ckRec;
				var record = Ext.create(Ext.COMSModels.Hydration, ckRec.record.data);
				if ("Remove Drug" === button.text) {
					Ext.Msg.confirm( "Remove Drug", "Are you sure you want to remove this drug from this template?", this.RemoveSelectedHydrationDrug, this);
				}
				else if ("Edit Drug" === button.text) {
					wccConsoleLog("Edit " + panel.type + " Therapy Drug - " + ckRec.record.get('Drug'));
					this.EditDrugGetDetails(record);
				}
			}
			else {
				Ext.MessageBox.alert('Invalid', 'Please select a Row in the Drug Regimen Grid.');
			}
		}
		if ("Pre" === panel.type) {
			this.getRemovePreHydration().disable();
			this.getEditPreHydration().disable();
		}
		else {
			this.getRemovePostHydration().disable();
			this.getEditPostHydration().disable();
		}
	}

});


Ext.define("COMS.controller.CkBoxTArea", {
	extend: "Ext.app.Controller",
	views: [
		"CkBoxTArea"
	],

	init: function () {
		this.control({
			"CkBoxTArea checkbox" : {
				"change" : this.ClickCheckbox
			},
			"CkBoxTArea" : {
				"afterrender" : this.setLabel
			}
		});
	},

	setLabel : function(theOBJ) {
		var theCkBoxName = theOBJ.name;
		var theCkBox = theOBJ.down("checkbox");
		var theTArea = theOBJ.down("textarea");
		theCkBox.setFieldLabel(theOBJ.fieldLabel);
		theCkBox.name = theCkBoxName + "_Ck";
		theTArea.name = theCkBoxName + "_Comment";
	},

	ClickCheckbox : function(theField, newV, oldV, eOpts) {
		var tArea = theField.up("CkBoxTArea").down("textarea");
		if (newV) {
			tArea.show();
		}
		else {
			tArea.hide();
		}
	}
});


Ext.define("COMS.controller.Common.DEMOpuWin", {
	extend : "Ext.app.Controller",
	views : [ "NewPlan.CTOS.FS_Toxicity", "Management.EmeticMeds" ]
});

Ext.define("COMS.controller.Common.EmeticInfo", {
	"extend" : "Ext.app.Controller",
	"views" : [
		"Common.EmeticInfo"
	],
	"refs" : [
		{ ref: "EmeticInfo",				selector: "EmeticInfo"}
	],
	init: function() {
		/**
		this.control({
			"scope" : this,
			"EmeticInfo": {
				afterrender : this.Render1
			}
		});
		**/
	},

	/**
	Render1 : function( theView, options) {
		var theEl = theView.getEl();
		var theContent = theEl.getHTML();
	},
	**/

	setEmeticInfoContent : function(data) {
		var theEl = this.getEmeticInfo().getEl();
		var theContent = theEl.getHTML();
		theEl.setHTML(data);
	}
});

/* http://alvinalexander.com/javascript/sencha-touch-extjs-json-encode-post-examples */
Ext.define("COMS.controller.Common.MedRemindersForm", {
	extend: "Ext.app.Controller",
	views : [ "Common.MedRemindersForm" ],
	refs: [
		{ ref : "MedRemindersForm", selector : "MedReminder MedRemindersForm" },
		{ ref : "MedRemindersGrid", selector : "MedReminder grid" }

	],

	init: function() {
		this.control({
			"MedRemindersForm button[text=\"Save\"]" : {
				click : this.SaveForm
			}
		});
	},



	clickCancel : function(theBtn, theEvent, eOpts) {
		theBtn.up('form').getForm().reset();
	},



	_formSubmit : function(form, URL, CMD) {
		var theData = form.getValues();
		theData = Ext.JSON.encode(theData);
		form.submit({
			headers: { "Content-Type": "application/json;charset=utf-8" },
			// params: theData,
			scope : this,
			clientValidation: true,
			url: URL,
			method : CMD,
			success: function(form, action) {
				// debugger;
				var MR_ID, results = Ext.JSON.decode(action.response.responseText);
				if (results.success) {
					MR_ID = results.records[0].MR_ID;
					if (!this.application.MedReminders) {
						this.application.MedReminders = [];
					}
					this.application.MedReminders.push(MR_ID);
					form.reset();
				}
				//this.RefreshPanel();
			},
			failure: function(form, action) {
				// debugger;
				var SaveTitle = "Saving Medication Reminder FAILED";
				//this.RefreshPanel();
				switch (action.failureType) {
					case Ext.form.action.Action.CLIENT_INVALID:
						Ext.Msg.alert(SaveTitle, 'Form fields may not be submitted with invalid values');
						break;
					case Ext.form.action.Action.CONNECT_FAILURE:
						Ext.Msg.alert(SaveTitle, 'Server communication failed');
						break;
					case Ext.form.action.Action.SERVER_INVALID:
						Ext.Msg.alert(SaveTitle, action.result.msg);
				}
			}
		});
	},



















		/* Cumulative Dosing Medications are stored in the Lookup Table with a Lookup_Type = "50" */
	SaveForm : function(theBtn, theEvent, eOpts) {
		var theGrid = this.getMedRemindersGrid();
		var theGridStore = theGrid.getStore();
		
		var AuthoringTabCtl = this.getController("Authoring.AuthoringTab");
		var form = theBtn.up('form').getForm();
		if (form.isValid()) {
			var theData = theBtn.up('form').getForm().getValues();
			var MedReminder = Ext.create(Ext.COMSModels.MedReminder, {
				"MR_ID" : theData.MR_ID,
				"TemplateID" : theData.TemplateID, 
				"Title" : theData.Title,
				"Description" : theData.Description,
				"ReminderWhenCycle" : theData.ReminderWhenCycle,
				"ReminderWhenPeriod" : theData.ReminderWhenPeriod
			});
			AuthoringTabCtl.AddMedReminder2GridStore(MedReminder);
			form.reset();
		}
	}




























/*****************
	RefreshPanel : function() {
		this.application.loadMask("Please wait; Loading Panel Information");
		var theGrid = this.getTheGrid();
		var theStore = theGrid.getStore();
		theStore.load();
		theGrid.getSelectionModel().deselectAll();
		var MedField = this.getMedication();
		MedField.getStore().load();
		var UnitsField = this.getUnits();
		UnitsField.getStore().load();

		var delBtn = this.getDeleteBtn();
		delBtn.setDisabled(true);
		delBtn.show();
		this.application.unMask();
	},




	deSelectGridRow : function(theRowModel, record, index, eOpts) {
	},
	
	selectGridRow : function(theRowModel, record, index, eOpts) {
		var records = theRowModel.getSelection();
		var delBtn = this.getDeleteBtn();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
		var theForm = this.getThePanel();

		var MedField = this.getMedication();
		MedField.setRawValue(record.getData().MedName);
		MedField.setValue(record.getData().MedID);

		var DoseField = this.getDose();
		DoseField.setValue(record.getData().CumulativeDoseAmt);

		var UnitsField = this.getUnits();
		UnitsField.setValue(record.getData().UnitsID);
		UnitsField.setRawValue(record.getData().CumulativeDoseUnits);

		// theForm.loadRecord(record);
	},




	deleteRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.get("ID");
			var CMD = "DELETE";
			var URL = Ext.URLs.CumulativeDosingMeds + "/" + rID;
				Ext.Ajax.request({
					url: URL,
					method : CMD,
					scope: this,
					records : theRecords,
					success: function( response, opts ){
						this.deleteRecord(opts.records);
					},
					failure : function( response, opts ) {
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						Ext.MessageBox.alert("Delete Error", "Delete Error", "Cumulative Dose Medication - Delete Record, Error - <br />" + resp.msg );
					}
				});
		}
		else {
			this.application.unMask();
			this.RefreshPanel();
		}
	},

	DeleteSelectedRecords : function() {
		var theGrid = this.getTheGrid();
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		Ext.MessageBox.confirm("Confirm Deletion", "Are you sure you want to delete the selected records?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Deleting Selected Records");
				this.deleteRecord(theRecords);
			}
		}, this);
	}

*******************/

});


Ext.define("COMS.controller.Common.SelectAdverseReactionAlerts", {
	"extend" : "Ext.app.Controller",
	"records" : [],

	"views" : [ "Common.SelectAdverseReactionAlerts" ],

	"refs" : [
		{ ref: "hiddenfield",		selector: "hiddenfield"},
		{ ref: "DiseaseStage",	selector: "selDiseaseStage"},
		{ ref: "DiseaseStageInput",	selector : "[name=\"Select Disease Stage Control\"]" }
	],

	"init" : function() {
		this.control({
			"SelectAdverseReactionAlerts button[text=\"Cancel\"]" : {
				click: this.CancelProc
			},
			"SelectAdverseReactionAlerts button[text=\"Save\"]" : {
				click: this.SaveAlerts
			},
			"SelectAdverseReactionAlerts" : {
				afterrender : this.WidgetRenderred
			}

		});
	},

	"SaveAlerts" : function(btn) {
		var theWin = btn.up("window");
		var theForm = btn.up("form").getForm();
		var PAT_ID = theWin.PAT_ID;
		var records = theWin.records;
		var theValues = theForm.getValues().AdverseReactions4Alert;
		theValues = theValues.split(",");
		var i, j, k, alertEvent, rec, rec1, len1 = theValues.length, len2 = records.Details.length, len3;
		for (i = 0; i < len1; i++) {
			alertEvent = theValues[i];
			for (j = 0; j < len2; j++) {
				rec = records.Details[j];
				rec.alertEvent = false;
				if (rec.sectionTitle) {
					if (alertEvent == rec.sectionTitle + " - " + rec.fieldLabel) {
						rec.alertEvent = true;
						break;
					}
				}
				else {
					if (alertEvent == rec.fieldLabel) {
						rec.alertEvent = true;
						break;
					}
				}
			}
		}




		theWin.fnc(records, this.application.Patient, this.application);

		theWin.close();
	},

	"CancelProc" : function(btn) {
		btn.up("window").close();
	},

	"WidgetRenderred" : function(theWindow, eOpts) {
		var theDetails = theWindow.initialConfig.records.Details;
		var theType = theWindow.initialConfig.type;
		theWindow.down("hiddenfield").setValue(theType);
		var theCombo = theWindow.down("checkcombo");
		var i, tmp, len = theDetails.length, dStore = [];
		for (i = 0; i < len; i++) {
			tmp = "";
			if (theDetails[i].sectionTitle) {
				tmp = theDetails[i].sectionTitle + " - ";
			}
			tmp += theDetails[i].fieldLabel;
			tmp = { "fieldLabel" : tmp };
			dStore.push( tmp );
		}
		var theStore = Ext.create('Ext.data.Store', {
			"fields" : ["fieldLabel"],
			"data" : dStore
		});
		theCombo.bindStore(theStore);
	}
});


Ext.define("COMS.controller.Common.puWinAddCumDose", {
	extend : "Ext.app.Controller",

	stores : [ "DiseaseType", "DiseaseStage" ],
	views : [ "Common.selDisease", "Common.selDiseaseStage" ],

	refs: [
		{ "ref" : "HistoricalDoseUnits",				selector: "puWinAddCumDose component[name=\"HistoricalDoseUnits\"]" },
		{ "ref" : "MedMaxAllowable",					selector: "puWinAddCumDose component[name=\"MedMaxAllowable\"]" },
		{ "ref" : "NewPlanTab",							selector: "NewPlanTab"}
	],

	init: function() {
		this.control({
			"puWinAddCumDose" : {
				"show" : function() {this.Saving=false;},
				"close" : this.Close
			},
			"puWinAddCumDose button[text=\"Cancel\"]" : {
				click: this.Cancel
			},
			"puWinAddCumDose button[text=\"Save\"]" : {
				click: this.Save
			},
			"puWinAddCumDose combobox[name=\"value\"]" : {
				"change" : this.ChangeSelection
			} 
		});
	},

	ClearWarning : function() {
		var msgSection = Ext.ComponentQuery.query("NewPlanTab")[0].query("[name=\"CumulativeDosingWarning\"]")[0];
		if (msgSection) {
			msgSection.update("");
			msgSection.hide();
		}
	},

	UpdateCumDoseInfo : function() {
		var cdInfo, appliedTemplate, len = 0, med2ckLen,  exceedsCount, WarningMsgBuf, curTemplateCumDoseTrackingMeds, i, j, med2Ck, med2ckFlg, rec, cur, max, WarningLimit, ExceedsWarningLimit;
		if (!this.application.Patient.AppliedTemplate || !this.application.Patient.CumulativeDoseTracking) {
			return;	// Template is not applied so no need to try for a warning msg
		}

		cdInfo = this.application.Patient.CumulativeDoseTracking;
		if (cdInfo) {
			len = cdInfo.length;
		}
		appliedTemplate = this.application.Patient.AppliedTemplate;
		curTemplateCumDoseTrackingMeds = appliedTemplate.CumulativeDoseMedsInRegimen;
		med2ckLen = curTemplateCumDoseTrackingMeds.length;

		exceedsCount = 0;
		WarningMsgBuf = "";

		// Walk tracked Meds for this patient
		for (i = 0; i < len; i++) {
			rec = cdInfo[i];
			med2ckFlg = false;

			var Amt = 0;
			for (j = 0; j < rec.Patient.length; j++) {
				Amt += rec.Patient[j].Amt.replace(",", "") * 1;
			}

			var MaxAmt = 1;
			if (rec.MedMaxDose) {
				MaxAmt = rec.MedMaxDose.replace(",", "") * 1;
			}
			var xx = Ext.GeneralRounding2Digits((Amt / MaxAmt)*100);
			xx= xx.replace(",", "") * 1;
			var Pct = xx;
			var MedName = rec.MedName;
			var Units = rec.MaxCumulativeDoseUnits;

				// Look for matching med in Current Template
			for (j = 0; j < med2ckLen; j++) {
				med2Ck = curTemplateCumDoseTrackingMeds[j];
				if (med2Ck.MedName === rec.MedName) {
					med2ckFlg = true;
					exceedsCount++;
					if ((Pct * 1) > 75) {
						WarningMsgBuf += "<tr><td>" + MedName + "</td>" + 
							"<td>" + Ext.GeneralRounding2Digits(MaxAmt) + " " + Units + "</td>" + 
							"<td>" + Ext.GeneralRounding2Digits(Amt) + " " + Units + "</td>" + 
							"<td>" + Pct + "%</td></tr>";
					}
					break;
/******************
					// cur = rec.CurCumDoseAmt || rec.MaxCumulativeDoseAmt;
					// cur = cur.replace(",", "") * 1;
					if (rec.MedMaxDose) {
						max = rec.MedMaxDose.replace(",", "") * 1;		// rec.MedMaxDose is string which may contain thousands separator
						ExceedsWarningLimit = Pct;
						// WarningLimit = 0.75 * max;
						if (Pct > 75) {
							exceedsCount++;
							// exceeds = Amt - WarningLimit;
							var maxNum = Ext.FormatNumber(("" + max).replace(",", ""));
							// var ExceedsNum = Ext.FormatNumber(("" + exceeds).replace(",", ""));
							// var CurDose = Ext.FormatNumber(("" + cur).replace(",", ""));
							var units = rec.MedMaxDoseUnits || rec.MaxCumulativeDoseUnits;
							// var pct = ((cur/max)*100);
							// pct = Ext.FormatNumber(pct);
							WarningMsgBuf += "<tr><td>" + rec.MedName + "</td>" + 
								"<td>" + Ext.GeneralRounding2Digits(maxNum) + " " + units + "</td>" + 
								"<td>" + Ext.GeneralRounding2Digits(Amt) + " " + units + "</td>" + 
								"<td>" + Pct + "%</td></tr>";
						}
					}
*******************/
				}
			}

		}
		var plural = (exceedsCount > 1 ? "s " : " ");
		var tmpBuf = "Warning! <br>Regimen Medication" + plural + "Approaching or Exceeding Recommended Maximum Dose" + plural + "<table border=\"1\">";
		tmpBuf += "<tr><th>Medication</th><th>Recommended Max</th><th>Patient Lifetime Total</th><th>Percentage</th></tr>";
		tmpBuf += WarningMsgBuf + "</table>";

		var parent = this.getNewPlanTab();
		var msgSection = Ext.ComponentQuery.query("NewPlanTab")[0].query("[name=\"CumulativeDosingWarning\"]")[0];
		if (msgSection) {
			if (exceedsCount > 0) {
				msgSection.update(tmpBuf);
				msgSection.show();
			}
			else {
				msgSection.update("");
				msgSection.hide();
			}
		}
	},

	// Used by internal COMS operations to save info on Administered Medications.
	SaveNewCumDoseInfo : function( Info ) {
		//Info : { MedID, UnitsID, Source, AdministeredDose }
		Ext.Ajax.request({
			"scope" : this,
			"url" : Ext.URLs.PatientCumulativeDosing + "/" + this.application.Patient.id,
			"method" :"POST",
			"params" : {
				"MedName" : Info.MedName,
				"UnitName" : Info.UnitName,
				"Source" : "Administered and tracked via COMS on " + Ext.Date.format(new Date(), "m/d/Y"),
				"value" : Info.MedID,
				"LifetimeDose" : Info.AdministeredDose,
				"Units" : Info.UnitsID,
				"CumulativeDoseUnits" : Info.UnitsID,
				"AdministeredByCOMS" : 1
			},
			"success" : this.RefreshPatientInfoDetails
		});
	},


	ChangeSelection : function(combo, nvalue) {
		var theStore = combo.getStore();
		var theRecord = theStore.findRecord("MedID", nvalue);
		if (theRecord) {
			this.theData = theRecord.getData();
			var theUnits = this.theData.CumulativeDoseUnits;
			var theAmt = this.theData.CumulativeDoseAmt;
			var theField = this.getHistoricalDoseUnits();
			var theInfo = this.getMedMaxAllowable();
			if (theField) {
				theField.update("&nbsp; in " + theUnits);
			}
			if (theInfo) {
				theInfo.update("Max Allowable Lifetime Cumulative Dosage is " + theAmt + " " + theUnits);
			}
		}
	},

	RefreshPatientInfoDetails : function() {
		Ext.Ajax.request({
			scope : this,
			url: Ext.URLs.PatientCumulativeDosing + "/" + this.application.Patient.id,
			success : function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (resp.success) {
					var recs;
					if (resp.records) {
						recs = resp.records; 
						this.application.Patient.CumulativeDoseTracking = recs;
						var thisCtl = this.getController("NewPlan.NewPlanTab");
						var piTableInfo = thisCtl.getPatientInfoTableInformation();
						piTableInfo.update( this.application.Patient );		//--//
						this.UpdateCumDoseInfo();
					}
				}
			}
		});
	},

	FormSubmitGood : function(form) {
		var theInfo = this.getMedMaxAllowable();
		if (theInfo) {
			theInfo.update("");
		}
		var theField = this.getHistoricalDoseUnits();
		if (theField) {
			theField.update("");
		}
		form.reset();
		if (form.owner.up("window")) {
			form.owner.up("window").close();
		}

		// Refresh the patient info table with latest data from DB
		this.RefreshPatientInfoDetails();

	},
	FormSubmitBad : function(form, action) {
		switch (action.failureType) {
			case Ext.form.action.Action.CLIENT_INVALID:
				Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
				break;
			case Ext.form.action.Action.CONNECT_FAILURE:
				Ext.Msg.alert('Failure', 'Ajax communication failed');
				break;
			case Ext.form.action.Action.SERVER_INVALID:
			   Ext.Msg.alert('Failure', action.result.msg);
		}
		// form.owner.up("window").close();
		// form.reset();
	},

	_submitForm : function(form) {
		form.url += "/" + this.application.Patient.id;
		form.setValues({
			"Units" : this.theData.UnitsID,
			"CumulativeDoseUnits" : this.theData.CumulativeDoseUnits
		});
		form.submit(
			{
				scope : this,
				success: function(form) {
					this.FormSubmitGood(form);
					this.Close();
				},
				failure: function(form, action) {
					this.FormSubmitBad(form, action);
					this.Close();
				}
			}
		);
	},

	Save : function(btn) {
		if (!this.Saving) {		// Prevents multiple saves by clicking the "Save" button more than once
			var theForm = btn.up('form').getForm();
			if (theForm.isValid()) {
				this.Saving = true;
				this._submitForm(theForm);
			}
		}
	},

	Cancel : function(btn) {
		btn.up('form').getForm().reset();
		btn.up('window').close();
		this.Close();
	},

	Close : function() {
		Ext.COMS_UnLockSection();
	}
});

Ext.define("COMS.controller.Common.puWinChangeAdminDate", {
	"extend" : "Ext.app.Controller",

	"views" : [
		"Common.puWinChangeAdminDate"
	],


	"refs" : [
		{ "ref" : "NewAdminDate",		"selector" : "puWinChangeAdminDate [name=\"NewAdminDate\"]"},
		{ "ref" : "CurAdminDate",		"selector" : "puWinChangeAdminDate [name=\"CurAdminDate\"]"},
		{ "ref" : "ChangeAdminDateOffsetMsg",		"selector" : "puWinChangeAdminDate [name=\"ChangeAdminDateOffsetMsg\"]"}
	],


	"init" : function() {
		this.application.on( { ProcAdminDateChange : this.ProcAdminDateChange, scope : this } );
		this.control({
			"scope" : this,
			"puWinChangeAdminDate" : {
				"beforerender" : this.setMinDate
			},
			"puWinChangeAdminDate [name=\"NewAdminDate\"]" : {
				"change" : this.updateNewDate,
				"expand" : this.InitNewDatePicker
			},
			"puWinChangeAdminDate combobox" : {
				"change" : this.Dates2Change
			},
			
			"puWinChangeAdminDate button[text=\"Cancel\"]" : {
				"click" : this.Cancel
			},
			"puWinChangeAdminDate button[text=\"Save\"]" : {
				"click" : this.Save
			}
		});
	},
	"offsetDays" : 0,
	"newDate" : "",
	"AcceptableChangeMsg" : "",
	"CurCycle" : 0,
	"Range2Change" : [],

	"getNextCycleIdx" : function ( curCycle, idx ) {
		var i, tmp, list = this.getOEMRecords(), len = list.length;
		for (i = idx+1; i < len; i++) {
			tmp = list[i];
			if (tmp.Cycle !== curCycle) {
				return i;
			}
		}
		return null;
	},

	"getIdx4AdminDate" : function(AdminDate) {
		var tmp, 
			i, 
			list = this.getOEMRecords(), 
			len = list.length;
		for (i = 0; i < len; i++) {
			tmp = list[i];
			if (tmp.AdminDate == AdminDate) {
				return i;
			}
		}
		return null;
	},

	"initializeCurAdminDate" : function(AdminDate) {
		var cur = this.getCurAdminDate();
		cur.setValue(AdminDate);
	},
	"InitNewDatePicker" : function(fld) {
		var cur = this.getCurAdminDate();
		var AdminDate = cur.getValue();
		fld.setValue(AdminDate);
	},

	"getMinDate" : function() {
		var newDate = new Date();
		return newDate;
	},

	"getOEMRecords" : function() {
		var OEMRecords = this.application.Patient.OEMRecords.OEMRecords;
		return OEMRecords;
	},

	"addDays2Date" : function(nDays, aDate) {
		var ms = nDays * 86400000;
		var aDateDate = new Date(aDate);
		var dt = Ext.Date.add(aDateDate, Ext.Date.MILLI, ms);
		var dt1 = Ext.Date.format(dt, "m/d/Y");
		return dt1;
	},

	"Dates2ChangeHandler" : function() {
		var nRange,
			NextCycleIdx,
			LastDayOfCycleRec,
			NewLastDateOfCycle,
			StartOfNextCycle,
			NewDateInList, 
			list, 
			CurDate, 
			CurAdminDayIdx,
			NextCycle,
			thisCycle;
		nRange = this.nRange;
		if (!nRange) {
			return;
		}
		this.AcceptableChangeMsg = "";
		this.Range2Change = [];
		list = this.getOEMRecords();
		CurDate = new Date(this.getCurAdminDate().getValue());
		CurDate = Ext.Date.format(CurDate, "m/d/Y");
		CurAdminDayIdx = this.getIdx4AdminDate(CurDate);

		NewDateInList = this.getIdx4AdminDate(this.newDate);
		// nRange == "This", "Cycle", "All"
		
		if ("This" == nRange) {
			if (NewDateInList) {
				this.AcceptableChangeMsg = "There is another administration day on this date";
			}
			else if (CurAdminDayIdx < list.length) {
				this.AcceptableChangeMsg = "The new date jumps over other Administration Days";
			}
			else {
				this.Range2Change[0] = CurAdminDayIdx;
			}
		}
		else if ("Cycle" == nRange) {
/*
 * get start of next cycle
 * get last date of this cycle
 * add offsetDays to last date of this cycle.
 * if offset of last day of this cycle > start of next cycle then error
 */
			this.CurCycle = 0;
			if (CurAdminDayIdx) {
				this.CurCycle = list[CurAdminDayIdx].Cycle;
				NextCycleIdx = this.getNextCycleIdx(this.CurCycle, CurAdminDayIdx);
				if (NextCycleIdx) {
					LastDayOfCycleRec = list[NextCycleIdx - 1];
					NewLastDateOfCycle = this.addDays2Date(this.offsetDays, LastDayOfCycleRec.AdminDate);
					StartOfNextCycle = list[NextCycleIdx];

					NextCycle = new Date(StartOfNextCycle.AdminDate);
					thisCycle = new Date(NewLastDateOfCycle);
					if (NextCycle <= thisCycle) {
						this.AcceptableChangeMsg = "Changes will overlap the next cycle";
					}
					else {
						this.Range2Change[0] = CurAdminDayIdx;
						this.Range2Change[1] = NextCycleIdx - 1;
					}
				}
				else {
					LastDayOfCycleRec = list.length;
					NewLastDateOfCycle = this.addDays2Date(this.offsetDays, LastDayOfCycleRec.AdminDate);
					thisCycle = new Date(NewLastDateOfCycle);
					this.Range2Change[0] = CurAdminDayIdx;
					this.Range2Change[1] = LastDayOfCycleRec;
				}
			}
		}
		else {
			this.Range2Change[0] = CurAdminDayIdx;
			this.Range2Change[1] = list.length-1;
		}
	},

	"Dates2Change" : function(fld, nRange) {
		this.nRange = nRange;
		this.Dates2ChangeHandler();
	},

	"updateNewDate" : function(fld, nDate) {
		var CurDate = new Date(this.getCurAdminDate().getValue());
		var MinDate = this.getMinDate();
		this.AcceptableChangeMsg = "";
		if (nDate) {
			/* Formula now takes into account Daylight Savings Time */
			var EndDateConverted = Date.UTC(nDate.getFullYear(), nDate.getMonth(), nDate.getDate());
			var StartDateConverted = Date.UTC(CurDate.getFullYear(), CurDate.getMonth(), CurDate.getDate());
			var nDays = ( EndDateConverted - StartDateConverted) / 86400000;

			var dt = Ext.Date.add(MinDate, Ext.Date.DAY, nDays);
			var dt1 = Ext.Date.format(dt, "m/d/Y");
			var m1 = "days";
			if (1 === nDays) {
				m1 = "days";
			}
			this.getChangeAdminDateOffsetMsg().update("New Administration Date(s) will be offset by <span style=\"font-weight:bold\";>" + nDays + "</span> " + m1);
			this.newDate = Ext.Date.format(nDate, "m/d/Y");
			this.offsetDays = nDays;
		}
		this.Dates2ChangeHandler();
	},

	"setMinDate" : function() {
		var dateFld = this.getNewAdminDate();
		dateFld.setMinValue( this.getMinDate() );
	},

	"Cancel" : function(btn) {
		btn.up('window').close();
	},

	"Save" : function(btn) {
		var range2change = this.Range2Change;
		var msg = this.AcceptableChangeMsg;
		var list = this.getOEMRecords(), len = list.length;

		var theController = this.getController("NewPlan.OEM");

		if ("" === this.AcceptableChangeMsg) {
			theController.MaskOEMData(true);
			if (1 === range2change.length) {
				this.application.fireEvent("ProcAdminDateChange", range2change[0], 0);
			}
			else {
				this.application.fireEvent("ProcAdminDateChange", range2change[0], range2change[1]);
			}
			btn.up('window').close();
			return;
		}
		Ext.MessageBox.alert('Warning', this.AcceptableChangeMsg + "<br>The requested date change will NOT be performed");
	},

	"ProcAdminDateChange" : function(idxOfFirstRec2Change, idxOfLastRec2Change, theScope) {
		var list = this.getOEMRecords();
		var listLen = list.length;
		var rec = list[idxOfFirstRec2Change];
		if (rec) {
			var OldDate = rec.AdminDate;
			var NewDate = this.addDays2Date(this.offsetDays, OldDate); 
			rec.AdminDate = NewDate;
			NewDate = Ext.Date.format(new Date(NewDate), "Y-m-d");
			// rec.id = Master_Template.Template_ID = ID of a particular Admin Day, containing all administrations (e.g. multiple Order records from Order_Status table).
			var URL = "/Patient/UpdateAdminDate/" + rec.id + "/" + NewDate;		// TemplateID/AdminDate = 21F92BED-7DA5-4CA2-92B3-4EE1FD5E601C; 2014-09-25
			var JSON_Data = {"Admin_Date" : NewDate, "Orders" : rec };

			Ext.Ajax.request({
				scope : this,
				url: URL,
				method : "PUT",
				jsonData : JSON_Data,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					if (resp.success) {
						if (idxOfFirstRec2Change < idxOfLastRec2Change) {
							idxOfFirstRec2Change++;
							this.application.fireEvent("ProcAdminDateChange", idxOfFirstRec2Change, idxOfLastRec2Change);
						}
						else {
							this.application.Patient.TreatmentStart = list[0].AdminDate;
							this.application.Patient.TreatmentEnd = list[listLen-1].AdminDate;
							var PatientInfo = this.application.Patient;
							PatientInfo.OEMDataRendered = false;
							var theController = this.getController("NewPlan.OEM");
							theController.DisplayOEMRecordData(PatientInfo);
						}
					}
					else {
						alert("load EoTS - Error");
					}
				},
				failure : function( response, opts ) {
					var theController = this.getController("NewPlan.OEM");
					var thePanel = theController.getOEM_Level1();
					theController.MaskOEMData(false);
					this.application.unMask();
					alert("EoTS Data Load Failed...");
				}
			});
		}
		else {
			this.application.Patient.TreatmentStart = list[0].AdminDate;
			this.application.Patient.TreatmentEnd = list[listLen-1].AdminDate;
			var PatientInfo = this.application.Patient;
			PatientInfo.OEMDataRendered = false;
			var theController = this.getController("NewPlan.OEM");
			theController.DisplayOEMRecordData(PatientInfo);
		}
	}
});

Ext.define("COMS.controller.Common.puWinSelAmputation", {
	extend : "Ext.app.Controller",
	init: function() {
		this.control({
			"puWinSelAmputation" : {
				"show" : this.ShowWindow,
				"close" : this.Close
			},
			"puWinSelAmputation button[text=\"Cancel\"]" : {
				click: this.Cancel
			},
			"puWinSelAmputation button[text=\"Save\"]" : {
				click: this.Save
			}
		});
	},

	

	ShowWindow : function() {
		// console.log("Show Window");
		var AmpuSelCtl = this.getController("NewPlan.AmputationSelection");
		AmpuSelCtl.renderAS();
	},

	Save : function(btn) {
		var theForm = btn.up('form').getForm();
		if (theForm.isValid()) {
			var theData = theForm.getValues();
			var patient_id, AmputationDisplay, params, postData = [], dataEl = [], patientAmputations = [];
			for (var key in theData) {
				if (theData.hasOwnProperty(key)) {
					var el = [];
					// el["description"] = key;
					el.description = key;
					patientAmputations.push(el);
					postData.push(key);
				}
			}
			params = {"Amputations" : postData };
			this.application.Patient.Amputations = patientAmputations;
			AmputationDisplay = Ext.get("PatientInformationTableAmputations");
			postData = postData.join("<br>");
			AmputationDisplay.setHTML(postData);

			patient_id = this.application.Patient.id;
			this.application.loadMask("Updating Patient Amputations");
			Ext.Ajax.request({
				url: Ext.URLs.Amputations + "/" + patient_id,
				method : "POST",
				jsonData : params,
				scope : this,
				success: function( response, opts ){
					this.application.unMask();
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					theForm.reset();
					btn.up('window').hide();
					this.Close();
					if (!resp.success) {
						Ext.MessageBox.alert("Amputation Selection Save Error", "NewPlanTab - AmputationSelection, Save Error - " + resp.msg );
						this.application.Patient.Amputations = "";
					}
					else {
						Ext.MessageBox.alert('Thank you!', 'Patient amputation records have been saved');
					}
				},
				failure : function( response, opts ) {
					this.application.unMask();
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.MessageBox.alert("Amputation Selection Save Error", "NewPlanTab - AmputationSelection, Save Error - " + "e.message" + "<br />" + resp.msg );
					theForm.reset();
					btn.up('window').hide();
					this.Close();
				}
			});
		}
	},
	Cancel : function(btn) {
		btn.up('form').getForm().reset();
		btn.up('window').hide();
		this.Close();
	},
	Close : function() {
		Ext.COMS_UnLockSection();
	}
});

Ext.define("COMS.controller.Common.puWinSelBSA", {
	extend : "Ext.app.Controller",
	init: function() {
		this.control({
			"puWinSelBSA" : {
				"close" : this.Close
			},
			"puWinSelBSA button[text=\"Cancel\"]" : {
				click: this.Cancel
			},
			"puWinSelBSA button[text=\"Save\"]" : {
				click: this.Save
			}
		});
	},

	Save : function(btn) {
		var theForm = btn.up('form').getForm();
		var thisCtl = this.getController("NewPlan.NewPlanTab");
		var Patient = this.application.Patient;
		if (theForm.isValid()) {
			var theData = theForm.getValues();
			var patient_id = this.application.Patient.id;
			Ext.Ajax.request({
				url: "/Patient/BSA/" + patient_id,
				method : "POST",
				jsonData : theData,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.COMS_UnLockSection();
					if (!resp.success) {
						Ext.MessageBox.alert("Saving Error", "NewPlanTab - BSA Selection, Save Error - " + resp.msg );
					}
					else {
						Patient.WeightFormula = theData.WeightFormula;
						Patient.BSAFormula = theData.BSAFormula;
						Patient.BSA_Method = theData.BSAFormula;
						var piTableInfo = thisCtl.getPatientInfoTableInformation();
						piTableInfo.update(Patient);
					}
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.COMS_UnLockSection();
					Ext.MessageBox.alert("Saving Error", "NewPlanTab - BSA Selection, Save Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
				theForm.reset();
				btn.up('window').hide();
				Ext.MessageBox.alert('Thank you!', 'Patient BSA Determination has been saved');
		}
	},
	Cancel : function(btn) {
		btn.up('form').getForm().reset();
		btn.up('window').hide();
		Ext.COMS_UnLockSection();
	},

	Close : function() {
		Ext.COMS_UnLockSection();
	}
});

Ext.define("COMS.controller.Common.puWinSelCancer", {
	extend : "Ext.app.Controller",

	stores : [ "DiseaseType", "DiseaseStage" ],
	views : [ "Common.selDisease", "Common.selDiseaseStage" ],

	init: function() {
		this.control({
			"puWinSelCancer" : {
				"close" : this.Close
			},
			"selDisease": {
				select: this.onDiseaseSelected
			},
			"selDiseaseStage": {
				select: this.onDiseaseStageChange
			},
			"puWinSelCancer button[text=\"Cancel\"]" : {
				click: this.CancelDiseaseType
			},
			"puWinSelCancer button[text=\"Save\"]" : {
				click: this.SaveDiseaseType
			}
		});
	},

	updatePITable : function(Patient) {
		var thisCtl = this.getController("NewPlan.NewPlanTab");
		var piTableInfo = thisCtl.updatePITable(this.application.Patient);
	},

	onDiseaseSelected: function (combo, recs, eOpts) {
		this.application.Cancer = recs[0].data;
		var stage = combo.next();
		var stageStore = stage.getStore();
		stage.reset();
		stageStore.removeAll();
		stageStore.load({
			scope : this,
			params : {
				URL : Ext.URLs.DiseaseStage + "/",
				ID  : this.application.Cancer.id
			}
		});
	},

	onDiseaseStageChange: function (combo, recs, eOpts) {
		this.application.Cancer.Stage = recs[0].data;
	},

	getDiseaseHistory : function(Patient) {
		var URL = Ext.URLs.CancerType + "/" + Patient.id;
		Ext.Ajax.request({
			url: URL,
			method : "GET",
			scope : this,
			success: function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (!resp.success) {
					Ext.MessageBox.alert("Saving Error", "Patient Information Type of Cancer, Save Error - " + resp.msg );
					this.application.Patient.Disease = null;
				}
				else {
					// Ext.MessageBox.alert('Thank you!', 'Patient Information Type of Cancer has been saved');
					this.application.Patient.Disease = resp.records;
					this.updatePITable(this.application.Patient);
				}
			},
			failure : function( response, opts ) {
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				Ext.MessageBox.alert("Saving Error", "Patient Information Type of Cancer, Save Error - " + "e.message" + "<br />" + resp.msg );
				theForm.reset();
				btn.up('window').hide();
			}
		});
	},

	delDiseaseHistory : function(Patient, PDH_ID) {
		var URL = Ext.URLs.CancerType + "/" + Patient.id + "/" + PDH_ID;
		Ext.Ajax.request({
			url: URL,
			method : "DELETE",
			scope : this,
			success: function( response, opts ){
				Ext.COMS_UnLockSection();
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (!resp.success) {
					Ext.MessageBox.alert("Delete Error", "Patient Information Type of Cancer, Delete Error - " + resp.msg );
				}
				else {
					this.application.Patient.Disease = resp.records;
					this.updatePITable(this.application.Patient);
				}
			},
			failure : function( response, opts ) {
				Ext.COMS_UnLockSection();
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				Ext.MessageBox.alert("Delete Error", "Patient Information Type of Cancer, Delete Error - " + "e.message" + "<br />" + resp.msg );
				theForm.reset();
				btn.up('window').hide();
			}
		});
	},

	SaveDiseaseType : function(btn) {
		var theForm = btn.up('form').getForm();
		if (theForm.isValid()) {
			var theData = theForm.getValues();
			var postData = [], dataEl = [], patientCancerTypes = [];

			var patient_id = this.application.Patient.id;
			var DiseaseID = theForm.findField("selDisease").getValue();
			var DiseaseStageID = theForm.findField("Select Disease Stage Control").getValue();

			var DiseaseName = theForm.findField("selDisease").getRawValue();
			var DiseaseStageName = theForm.findField("Select Disease Stage Control").getRawValue();
			var params = { Patient_ID : patient_id, "Disease_ID" : DiseaseID, "DiseaseStage_ID" : DiseaseStageID };

			Ext.Ajax.request({
				url: Ext.URLs.CancerType,
				method : "POST",
				jsonData : params,
				scope : this,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					theForm.reset();
					btn.up('window').hide();
					if (!resp.success) {
						Ext.MessageBox.alert("Saving Error", "Patient Information Type of Cancer, Save Error - " + resp.msg );
						this.application.Patient.ListOfDiseases = "";
					}
					else {
						// Ext.MessageBox.alert('Thank you!', 'Patient Information Type of Cancer has been saved');
						this.application.Patient.Disease = resp.records;
						this.updatePITable(this.application.Patient);
					}
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.MessageBox.alert("Saving Error", "Patient Information Type of Cancer, Save Error - " + "e.message" + "<br />" + resp.msg );
					theForm.reset();
					btn.up('window').hide();
				}
			});
			this.Close();
		}
	},
	CancelDiseaseType : function(btn) {
		btn.up('form').getForm().reset();
		btn.up('window').hide();
		this.Close();
	},

	Close : function() {
		Ext.COMS_UnLockSection();
	}
});

Ext.define("COMS.controller.Common.puWinTreatmentAmmend", {
	extend : "Ext.app.Controller",
	views : [ "NewPlan.CTOS.NursingDocs.Authenticate", "Common.puWinTreatmentAmmend" ],
	refs : [
		{ ref : "AddendumsHistory", selector : "puWinTreatmentAmmend [name=\"AddendumsHistory\"]"},
		{ ref : "Grid", selector : "puWinTreatmentAmmend [name=\"ModifyData\"]" }
	],
	init: function () {
		this.control({
			"puWinTreatmentAmmend" : { 
				scope : this,
				afterrender : this.AmmendRecordRendered,
				activate : this.ActivateWindow
			},
			"puWinTreatmentAmmend button[text=\"Cancel\"]" : {
				click: this.Cancel
			},

			"puWinTreatmentAmmend [name=\"ModifyData\"]" : { // Handles the Cell Edit (both start and end of edit cycle.
				cellclick : this.AssignVerify2SignHandler
//				beforeedit : this.beforeCellEdit,
//				edit : this.afterCellEdit,
			}

			/**
			"puWinTreatmentAmmend [name=\"ModifyData\"]" : {
				cellclick : this.AssignVerify2SignHandler

			}
			
			,
			"Authenticate[title=\"Authenticate\"] button[action=\"save\"]": {
				click: this.AuthenticateUser
			}
			**/
		});
	},


	Cancel : function(btn) {
		btn.up('window').close();
	},

	ActivateWindow : function( theWin, eOpts ) {
		var theGrid = this.getGrid();
		var theStore = theGrid.getStore();
		var theData = theWin.record.getData();
		theStore.loadRawData(theData);

		var AddendumsHistory = this.getAddendumsHistory();
		theStore = AddendumsHistory.getStore();
		theStore.loadRawData(theData);
	},
	AmmendRecordRendered : function() {
	},

	AssignVerify2SignHandler : function(tableView, cellElement, cellIdx, record, rowElement, rowIndex, evt, opts) {
		if (cellElement.innerHTML.search("Sign to Verify") > 0) {
			var StartTime = record.get("StartTime");
			if ("" === StartTime) {
				Ext.MessageBox.alert("Error", "You MUST specify at least a \"Start Time\" for this administration");
			}
			else if ("" === record.get("Comments")) {
				Ext.MessageBox.alert("Error", "You MUST make a comment on the reason for the addendum");
			}
			else {
				record.set("Treatment_User", "In Process...");
				var EditRecordWin = Ext.widget("Authenticate");
				EditRecordWin.curTreatmentRecord = record;
				var initialField = Ext.ComponentQuery.query('Authenticate [name=\"AccessCode\"]')[0];
				initialField.focus(true, true);
			}
		}
	}
});


Ext.define("COMS.controller.Common.selCTOSTemplate", {
	"extend" : "Ext.app.Controller",
	"views" : [
		"Common.selCTOSTemplate"
	],
	"refs" : [
		{ ref: "selCTOSTemplate",				selector: "selCTOSTemplate"}
	],
	init: function() {
		this.control({
			// "scope" : this,
			"selCTOSTemplate button[title=\"ResetFilter\"]" : {
				click : this.resetTemplateFilter
			},
			"selCTOSTemplate selTemplateSrc radiofield[name=\"SelectTemplateSrc\"]": {
				change : this.onTemplateSrcChange
			},
			"selCTOSTemplate selDisease" : {
				select : this.DiseaseSelected,
				"beforequery" : this.clearSelDiseaseComboStore
			},
			"selCTOSTemplate selTemplate" : {
				select : this.selTemplateChange,
				"beforequery" : this.clearSelTemplateComboStore
			}
		});
	},

	clearSelTemplateComboStore : function(queryEvent) {
		var selTemplateCombo = queryEvent.combo;
		var selCTOSTemplateObj = selTemplateCombo.up("selCTOSTemplate");
		delete queryEvent.combo.lastQuery;
		var selDiseaseCombo = this.getDiseaseObj(selCTOSTemplateObj);
		var theProxy = selTemplateCombo.getStore().proxy;
		var DiseaseType = selDiseaseCombo.getValue();
		if (DiseaseType) {
			theProxy.api.read = Ext.URLs.Templates + "/Cancer/" + selDiseaseCombo.getValue();
		}
		else {
			theProxy.api.read = Ext.URLs.Templates;
		}
	},

	clearSelDiseaseComboStore : function(queryEvent) {
		var selCTOSTemplateObj = queryEvent.combo.up("selCTOSTemplate");

		delete queryEvent.combo.lastQuery;

		var TemplateSrc = this.getTemplateSrc(selCTOSTemplateObj);

		var selDiseaseCombo = this.getDiseaseObj(selCTOSTemplateObj);
		var theProxy = selDiseaseCombo.getStore().proxy;
		theProxy.url = Ext.URLs.DiseaseType + "/Source/" + TemplateSrc;

		var selTemplateCombo = this.getSelTemplateCombo(selCTOSTemplateObj);
		delete selTemplateCombo.lastQuery;
	},

	getTemplateSrcObj : function(selCTOSTemplateObj) {
		return selCTOSTemplateObj.down("selTemplateSrc");
	},
	getDiseaseObj : function(selCTOSTemplateObj) {
		return selCTOSTemplateObj.down("selDisease");
	},
	getDiseaseStageObj : function(selCTOSTemplateObj) {
		return selCTOSTemplateObj.down("selDiseaseStage");
	},
	getSelTemplateCombo : function(selCTOSTemplateObj) {
		return selCTOSTemplateObj.down("selTemplate[name=\"AllTemplates\"]");
	},
	getResetFilterBtn : function(selCTOSTemplateObj) {
		return selCTOSTemplateObj.down("button[title=\"ResetFilter\"]");
	},
	getDiseaseAndStageObj : function(selCTOSTemplateObj) {
		return selCTOSTemplateObj.down("selDiseaseAndStage");
	},
	getMsg : function(selCTOSTemplateObj) {
		return selCTOSTemplateObj.down("[name=\"AllTemplatesShownMsg\"]");
	},


	resetCombos : function(selCTOSTemplateObj) {
		var i, rLen, aCombo, Combos = Ext.ComponentQuery.query("combobox", selCTOSTemplateObj);
		rLen = Combos.length;
		for (i = 0; i < rLen; i++) {
			aCombo = Combos[i];
			aCombo.clearValue();
			aCombo.applyEmptyText();
			aCombo.getPicker().getSelectionModel().doMultiSelect([], false);
		}
	},

	resetTemplateSrc : function(selCTOSTemplateObj) {
		var TemplateSrcRadios = selCTOSTemplateObj.down("selTemplateSrc");
		var theRadios = TemplateSrcRadios.items.items;
		var i, rLen = theRadios.length;
		for (i = 0; i < rLen; i++) {
			theRadios[i].setRawValue(false);
			theRadios[i].setValue(false);
		}

		this.resetCombos(selCTOSTemplateObj);

		this.hideFilterSelector(selCTOSTemplateObj);
	},

	getTemplateSrc : function(selCTOSTemplateObj) {
		var TemplateSrcRadios = selCTOSTemplateObj.down("selTemplateSrc");
		var theRadios = TemplateSrcRadios.items.items;
		var i, aRadio, rLen = theRadios.length;
		for (i = 0; i < rLen; i++) {
			aRadio = theRadios[i];
			if (aRadio.rawValue) {
				return aRadio.inputValue;
			}
		}
		return "";
	},

	onTemplateSrcChange : function(rbtn, newValue, oldValue, eOpts) {
		var selCTOSTemplateObj = rbtn.up("selCTOSTemplate");
		this.showFilterSelector(selCTOSTemplateObj);

		if (this.application.Patient) {
			this.application.Patient.TemplateType = this.getTemplateSrc(selCTOSTemplateObj);
		}
	},

	
	DiseaseSelected : function(combo, recs, eOpts) {
		wccConsoleLog('Disease Type has been selected');
		var selCTOSTemplateObj = combo.up("selCTOSTemplate");
		var selDiseaseStage = this.getDiseaseStageObj(selCTOSTemplateObj);

		if (this.application.Cancer != recs[0].data) {
			this.application.ResetClicked = false;
			selDiseaseStage.reset();
		}
		this.application.Cancer = recs[0].data;

		var parent = combo.up("AuthoringTab");
		if (!parent) {
			this.getSelTemplateCombo(selCTOSTemplateObj).show();
		}
	},
	selTemplateChange : function(combo, recs) {
		var theController, theTemplate, parent, parentName;
		theTemplate = recs[0].data;
		parent = combo.up("AuthoringTab");
		parentName = "";
		if (parent) {
			parentName = "AuthoringTab";
			theController = this.getController("Authoring.AuthoringTab");
			theController.ShowSelectedTemplateForm(theTemplate);
		}
		else {
			parent = combo.up("NewPlanTab");
			if (parent) {
				parentName = "NewPlanTab";
				theController = this.getController("NewPlan.NewPlanTab");
				theController.ShowSelectedTemplate(theTemplate);
			}
			else {
				parent = combo.up("TemplateListTab");
				if (parent) {
					parentName = "TemplateListTab";
				}
				else {
					alert("Unknown parent to selCTOSTemplate");
				}
			}
		}
	},

	showSelCTOSGroup : function (selCTOSTemplateObj) {
		selCTOSTemplateObj.show();
		this.getDiseaseAndStageObj(selCTOSTemplateObj).show();
	},

	resetTemplateFilter : function(button){
		var selCTOSTemplateObj = button.up("selCTOSTemplate");
		this.hideFilterSelector(selCTOSTemplateObj);
		this.getMsg(selCTOSTemplateObj).show();
		this.resetCombos(selCTOSTemplateObj);
		this.getSelTemplateCombo(selCTOSTemplateObj).show();
	},

	showInitialSelector : function (selCTOSTemplateObj) {
		this.getTemplateSrcObj(selCTOSTemplateObj).show();
		this.hideFilterSelector(selCTOSTemplateObj);
	},

	showFilterSelector : function (selCTOSTemplateObj) {
		this.getResetFilterBtn(selCTOSTemplateObj).show();
		this.getMsg(selCTOSTemplateObj).hide();
		this.getDiseaseAndStageObj(selCTOSTemplateObj).show();
		this.getSelTemplateCombo(selCTOSTemplateObj).hide();
	},

	hideFilterSelector : function (selCTOSTemplateObj) {
		this.getResetFilterBtn(selCTOSTemplateObj).hide();
		this.getDiseaseAndStageObj(selCTOSTemplateObj).hide();
		this.getSelTemplateCombo(selCTOSTemplateObj).hide();
	},

	hideInitialAndFilterSelector : function (selCTOSTemplateObj) {
		this.getTemplateSrcObj(selCTOSTemplateObj).hide();
		this.hideFilterSelector(selCTOSTemplateObj);
		this.getDiseaseAndStageObj(selCTOSTemplateObj).show();
		this.showSelCTOSGroup(selCTOSTemplateObj);
	}

});


Ext.define('COMS.controller.ExistingPlan.ExistingPlanTab', {
	extend : 'Ext.app.Controller',
	views : [ 'ExistingPlan.ExistingPlanTab' ]
});

Ext.define('COMS.controller.KnowledgeBase.KnowledgeBaseTab', {
    extend : 'Ext.app.Controller',
	views : [ 'KnowledgeBase.KnowledgeBaseTab' ]
});

Ext.define("COMS.controller.Management.AddLookups", {
	extend : "Ext.app.Controller",
	views : [ "Management.AddLookups" ],
	stores : [ "GenericLookup" ],
	refs: [
		{ ref : "AddLookupsGrid", selector : "AddLookups grid" },
		{ ref : "AddLookupsNameField", selector : "AddLookups [name=\"value\"]" },
		{ ref : "AddLookupsDescField", selector : "AddLookups [name=\"description\"]" },
		{ ref : "AddLookupsGrid", selector : "AddLookups grid" },
		{ ref : "DeleteBtn", selector : "AddLookups button[text=\"Delete\"]" }

	],

	init: function() {
		this.control({
			"AddLookups" : {
				beforerender: this.RefreshPanel
			},

			"AddLookups SelectLookups" : {
				select : this.LookupSelected
			},
			"AddLookups grid" : {
					select: this.selectGridRow,
					deselect: this.deSelectGridRow
			},
			"AddLookups button[text=\"Cancel\"]" : {
				click: this.CancelForm
			},
			"AddLookups button[text=\"Save\"]" : {
				click: this.SaveForm
			},
			"AddLookups button[text=\"Refresh\"]" : {
				click: this.RefreshPanel
			},
			"AddLookups button[text=\"Delete\"]" : {
				click: this.DeleteSelectedRecords
			}
		});
	},

	theGridStore : null,
	theCurrentLookupURL : null,


	RefreshPanel : function() {
		var delBtn = this.getDeleteBtn();
		delBtn.setDisabled(true);
		delBtn.show();
	},

	
	// Load the grid"s store to see all the values for the selected type
	LookupSelected : function ( combo, recs, eOpts ) {
		var theData = recs[0].data.value;
		this.theGridStore = this.getAddLookupsGrid().getStore();
		this.theCurrentLookupURL = Ext.URLs.BaseView + "/" + theData;
		this.theGridStore.load({url:this.theCurrentLookupURL});
	},

	selectGridRow : function(theRowModel, record, index, eOpts) {
		var recID = record.get("id");
		var RecName = record.get("name");
		var RecDesc = record.get("description");
		this.CurrentGenericLookupRecID = recID;
		this.CurrentGenericLookupRecName = RecName;
		this.CurrentGenericLookupRecDesc = RecDesc;

		var theNameField = this.getAddLookupsNameField();
		var theDescField = this.getAddLookupsDescField();
		theNameField.setValue(RecName);
		theDescField.setValue(RecDesc);

		var records = theRowModel.getSelection();
		var delBtn = this.getDeleteBtn();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
	},

	deSelectGridRow : function(theRowModel, record, index, eOpts) {
	},

	deleteRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.getData();
			var recID = rID.id;
			var modelData = {};
			if (recID) {	// We are updating an existing record
				modelData.id = recID;				// This is the actual GUID or lookup_ID in the lookup table
			}
			var lookupRecord = Ext.create(Ext.COMSModels.LookupTable, modelData);
			lookupRecord.destroy(
				{
					scope : this,
					waitMsg : "Deleting Data...",
					success: function(data) {
						var theNameField = this.getAddLookupsNameField();
						var theDescField = this.getAddLookupsDescField();
						theNameField.setValue("");
						theDescField.setValue("");

						this.theGridStore.load({url:this.theCurrentLookupURL});
						this.application.unMask();
					},
					failure: function(err){
						Ext.MessageBox.alert("Invalid", "This reference has NOT been deleted.");
						this.application.unMask();
					}
				}
			);
		}
		else {
			this.application.unMask();
			this.CancelForm();
		}
	},

	DeleteSelectedRecords : function() {
		var theGrid = this.getAddLookupsGrid();
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		Ext.MessageBox.confirm("Confirm Deletion", "Are you sure you want to delete the selected Lookup records?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Deleting Selected Records");
				this.deleteRecord(theRecords);
			}
		}, this);
	},


	CancelForm : function(theBtn, theEvent, eOpts) {
		theBtn.up("form").getForm().reset();
	},

	SaveForm : function(theBtn, theEvent, eOpts) {
		var form = theBtn.up("form").getForm();
		if (form.isValid()) {
			var recID = this.CurrentGenericLookupRecID;
			var values = form.getValues();
			var Description = Ext.util.Format.htmlEncode(values.description);
			var Value = Ext.util.Format.htmlEncode(values.value);
			var modelData = {};
			modelData.lookupid = values.id;		// This is really the lookup_type in the lookup table (e.g. 29 for Drugs, etc)
			modelData.value = Value;
			modelData.description = Description;
			if (recID) {	// We are updating an existing record
				modelData.id = recID;				// This is the actual GUID or lookup_ID in the lookup table
			}
			var lookupRecord = Ext.create(Ext.COMSModels.LookupTable, modelData);

			lookupRecord.save({
				scope : this,
				waitMsg : "Saving Data...",
				success: function(data) {
					delete this.CurrentGenericLookupRecID;
					delete this.CurrentGenericLookupRecName;
					delete this.CurrentGenericLookupRecDesc;
					
					var theNameField = this.getAddLookupsNameField();
					var theDescField = this.getAddLookupsDescField();
					theNameField.setValue("");
					theDescField.setValue("");
					this.theGridStore.load({url:this.theCurrentLookupURL});
				},
				failure: function(err){
					Ext.MessageBox.alert("Invalid", "This reference already exists.");
					delete this.CurrentGenericLookupRecID;
					delete this.CurrentGenericLookupRecName;
					delete this.CurrentGenericLookupRecDesc;

					var theNameField = this.getAddLookupsNameField();
					var theDescField = this.getAddLookupsDescField();
					theNameField.setValue("");
					theDescField.setValue("");
				}
			});
		}
		else {
			var Msg = "";
			var Docs = "";
			var theData = form.getValues(false, false, false, true);
			if (!theData.description) {
				Msg += "<li>Missing Lookup Description</li>";
			}
			if ("" === theData.value) {
				Msg += "<li>Missing Lookup Name</li>";
			}
			if ("" !== Msg) {
				Ext.MessageBox.alert("Invalid", "Please fix the following errors:<ul>" + Msg + "</ul>");
			}
		}
	}
});



Ext.define('COMS.controller.Management.AdminTab', {
	extend : 'Ext.app.Controller',
	stores : [ 'Lockout', 'LookupStore', "GlobalStore", "UsersStore", "ActiveWorkflowsStore", 'IVFluidType', 'MedDocs', 'DischargeInstruction', 'ClinicInfo', 'MedRisks', 'DiseaseStaging', 'InventoryConsumption'],
	views : [ 
		'Management.AdminTab',
		'Management.SelectLookups',
		'Management.EditLookup',
		'Management.DeleteTemplate', 
		'Management.Globals',
		'Management.SelectGlobals',
		'Management.Users',
		'Management.ActiveWorkflows', 
		'Management.MedsNonRounded',
		'Management.RoundingRules',
		'Management.MedicationHolds',
		'Management.IV_Fluid_Types', 
		'Management.CheckCombo',
		'Management.Buttons',
		'Management.LockoutButtons',
		'Management.MedicationDocumentation',
		'Management.ClinicInfo',
		'Management.DischargeInstructionManagement',
		'Management.MedRisks',
		'Management.EmeticMedsTab',
		'Management.Lockout',
		'Management.LockoutTab',
		'Management.Inventory',
		'Management.PatternsOfCareTab',
		'Management.Roles',
		'Management.PharmacyManagement'
	],
	models : ['LookupTable','LookupTable_Templates', 'IVFluidType'],
	refs: [
	{
		ref: 'Lookup', 
		selector: 'AdminTab AddLookups'
	},
	{
		ref: 'LookupGrid', 
		selector: 'AdminTab AddLookups grid'
	},
	{
		ref: 'Globals', 
		selector: 'AdminTab Globals grid'
	},	
	{
		ref: 'MedsNonRounded', 
		selector: 'AdminTab MedsNonRounded grid'
	},
	{
		ref: 'RolesForm', 
		selector: 'AdminTab Roles'
	},
	{
		ref: 'RolesGrid', 
		selector: 'AdminTab Roles grid'
	},
	{
		ref: 'SelVistAUserNoMatch', 
		selector: 'AdminTab Roles [name=\"SelVistAUserNoMatch\"]'
	},
	{
		ref : "IV_Fluid_Types_DeleteBtn",
		selector : "form[name=\"IV_Fluid_Types\"] button[text=\"Delete\"]"
	},
	{
		ref : "RoleLastName",
		selector : "AdminTab Roles [name=\"LastName\"]"
	},
	{
		ref : "RoleFirstName",
		selector : "AdminTab Roles [name=\"FirstName\"]"
	},
	{
		ref : "RoleSelVistAUser",
		selector : "AdminTab Roles [name=\"SelVistAUser\"]"
	},
	{
		ref : "RoleUserRole",
		selector : "AdminTab Roles [name=\"Role\"]"
	},
	{
		ref : "RoleUserPreceptee",
		selector : "AdminTab Roles [name=\"Preceptee\"]"
	},
	{
		ref : "RoleUserTemplateAuthoring",
		selector : "AdminTab Roles [name=\"TemplateAuthoring\"]"
	},
	{
		ref : "RoleDeleteBtn",
		selector : "AdminTab Roles button[text=\"Delete\"]"
	},

	{
		ref : "RoleGetUsersBtn",
		selector : "AdminTab Roles button[name=\"GetUserList\"]"
	},

	{
		ref : "RoleGetUsersCombo",
		selector : "AdminTab Roles [name=\"SelVistAUser\"]"
	},
	{
		ref: 'ActiveWorkflows', 
		selector: 'AdminTab ActiveWorkflows grid'
	},
	{
		ref: 'RemoveLookup', 
		selector: 'AdminTab AddLookups button[title=\"RemoveLookup\"]'
	}, 
	{
		ref: 'EditLookup', 
		selector: 'AdminTab AddLookups button[title=\"EditLookup\"]'
	},

	{
		ref: 'Template', 
		selector: 'AdminTab DeleteTemplate'
	},
	{
		ref: 'TemplateGrid', 
		selector: 'AdminTab DeleteTemplate grid'
	},
	{
		ref: 'RemoveTemplate', 
		selector: 'AdminTab DeleteTemplate button[title=\"RemoveTemplate\"]'
	},
	{
		ref: 'ShowAllTemplates', 
		selector: 'AdminTab DeleteTemplate button[title=\"AllTemplates"]'
	},
	{
		ref: 'RoundingRulesForm', 
		selector: 'form[title=\"Rounding Rules\"]'
	},
	{
		ref: 'RBRoundingRules', 
		selector: 'form[title=\"Rounding Rules\"] radiogroup'
	},

	{
		ref: 'MedHoldForm', 
		selector: 'form[title=\"Medication Holds\"]'
	},
	{
		ref: 'RBMedHold', 
		selector: 'form[title=\"Medication Holds\"] radiogroup'
	},
	{
		ref : "IVFluidTypesGrid",
		selector : "form [name=\"IV_FluidTypesList\"]"
	},
	{
		ref : "IV_FluidTypeMulti",
		selector : "form [name=\"IV_FluidTypeMulti\"]"
	},
	{
		ref : "IV_Medication",
		selector : "form [name=\"IV_Medication\"]"
	},

	/* Medication Documentation */
	{
		ref : "MedDocsGrid",
		selector : "MedicationDocumentation grid"
	},
	{
		ref : "InPatient_MedicationCombo",
		selector : "MedicationDocumentation [name=\"InPatient_Medication\"]"
	},
	{
		ref : "MedDocs_Field",
		selector : "MedicationDocumentation [name=\"Documentation\"]"
	},

	/* Discharge Instruction */
	{
		ref : "DischargeInstructionGrid",
		selector : "DischargeInstructionManagement grid"
	},
	{
		ref : "DischargeInstruction_Instruction",
		selector : "DischargeInstructionManagement [name=\"Label\"]"
	},
	{
		ref : "DischargeInstruction_Documentation",
		selector : "DischargeInstructionManagement [name=\"Details\"]"
	},

	/* Clinic Info */
	{
		ref : "ClinicInfoGrid",
		selector : "ClinicInfo grid"
	},
	{
		ref : "ClinicInfo_Label",
		selector : "ClinicInfo [name=\"Label\"]"
	},
	{
		ref : "ClinicInfo_Details",
		selector : "ClinicInfo [name=\"Details\"]"
	},


	/* Med Risks Info */
	{
		ref : "MedRisksGrid",
		selector : "MedRisks grid"
	},
	{
		ref : "MedRisks_Label",
		selector : "MedRisks [name=\"Label\"]"
	},
	{
		ref : "MedRisks_Details",
		selector : "MedRisks [name=\"Details\"]"
	}
	],
	

	init: function() {
		wccConsoleLog('Initialized Admin Tab Panel Navigation Controller!');
		this.control({

			"AdminTab Roles [name=\"SelVistAUser\"]" : {
				"select" : this.selectVistAUser
			},
			"AdminTab Roles button[name=\"GetUserList\"]" : {
				click : this.GetUsersFromVistA
			},

			'form[title=\"Rounding Rules\"]' : {
				beforeshow : this.RoundingRulesFormRenderSetValues
			},
			'form[title=\"Medication Holds\"]' : {
				beforeshow : this.MedHoldFormRenderSetValues
			},

			'DeleteTemplate selDisease' : {
				select : this.TemplateSelected
			},
			'AdminTab Globals grid' : {
				itemclick: this.enableEditGlobal
			},
			'AdminTab DeleteTemplate grid' : {
				itemclick: this.enableRemoveTemplate
			},
			'AdminTab DeleteTemplate button[title=\"RemoveTemplate\"]': {
				click: this.removeTemplate
			},
			'AdminTab DeleteTemplate button[title=\"AllTemplates"]': {
				click: this.showAllTemplates
			},
			"form[title=\"Medication Holds\"] button[text=\"Save\"]" : {
				click: this.clickMedHoldSave
			},
			"form[title=\"Medication Holds\"] button[text=\"Cancel\"]" : {
				click: this.clickMedHoldCancel
			},
			"form[title=\"Rounding Rules\"] button[text=\"Save\"]" : {
				click: this.clickRoundingRuleSave
			},
			"form[title=\"Rounding Rules\"] button[text=\"Cancel\"]" : {
				click: this.clickRoundingRuleCancel
			},
			"form [name=\"IV_FluidTypesList\"]" : {
				select: this.selectIVFluidTypeGridRow,
				deselect: this.deselectIVFluidTypeGridRow
			},
			"form[name=\"IV_Fluid_Types\"]" : {
				beforerender: this.FluidTypeLoadGrid
			},
			"form[name=\"IV_Fluid_Types\"] button[text=\"Cancel\"]" : {
				click: this.clickFluidTypeCancel
			},
			"form[name=\"IV_Fluid_Types\"] button[text=\"Save\"]" : {
				click: this.clickFluidTypeSave
			},
			"form[name=\"IV_Fluid_Types\"] button[text=\"Refresh\"]" : {
				click: this.clickFluidTypeRefresh
			},
			"Roles grid" : {
				select: this.selectRolesGridRow,
				beforerender: this.RolesLoadGrid
			},
			"Roles button[text=\"Cancel\"]" : {
				click: this.clickRolesCancel
			},
			"Roles button[text=\"Save\"]" : {
				click: this.clickRolesSave
			},
			"Roles button[text=\"Delete\"]" : {
				click: this.clickRolesDelete
			},
			"Roles button[text=\"Refresh\"]" : {
				click: this.clickRolesRefresh
			},
			"Roles [name=\"Role\"]" : {
				select: this.selectRoleChange
			},
			"PharmacyManagement" : {
				afterrender: this.LoadLastSyncTime
			},
			"PharmacyManagement button[name=\"Submit\"]" : {
				click: this.SubmitPharmacyManagement
			},


/* Medication Documentation */
			"MedicationDocumentation " : {
				beforerender: this.MedicationDocsLoadGrid
			},
			"MedicationDocumentation [name=\"DocumentedInPatientMedsList\"]" : {
					select: this.selectMedDocsGridRow
			},

			"MedicationDocumentation [name=\"InPatient_Medication\"]" : {
				change : this.selectMed
			},

			"MedicationDocumentation button[text=\"Cancel\"]" : {
				click: this.clickMedDocCancel
			},
			"MedicationDocumentation button[text=\"Save\"]" : {
				click: this.clickMedDocSave
			},
			"MedicationDocumentation button[text=\"Refresh\"]" : {
				click: this.MedicationDocsLoadGrid
			},


/* Discharge Instruction */
			"DischargeInstructionManagement" : {
				beforerender: this.DischargeInstructionLoadGrid
			},
			"DischargeInstructionManagement grid" : {
				select: this.selectDischargeInstructionGridRow
			},
			"DischargeInstructionManagement button[text=\"Cancel\"]" : {
				click: this.clickDischargeInstructionCancel
			},
			"DischargeInstructionManagement button[text=\"Save\"]" : {
				click: this.clickDischargeInstructionSave
			},
			"DischargeInstructionManagement button[text=\"Refresh\"]" : {
				click: this.DischargeInstructionLoadGrid
			},

/* Clinic Info */
			"ClinicInfo" : {
				beforerender: this.ClinicInfoLoadGrid
			},
			"ClinicInfo grid" : {
					select: this.selectClinicInfoGridRow
			},
			"ClinicInfo button[text=\"Cancel\"]" : {
				click: this.clickClinicInfoCancel
			},
			"ClinicInfo button[text=\"Save\"]" : {
				click: this.clickClinicInfoSave
			},
			"ClinicInfo button[text=\"Refresh\"]" : {
				click: this.ClinicInfoLoadGrid
			},

/* Med Risks */
			"MedRisks" : {
				beforerender: this.MedRisksLoadGrid
			},
			"MedRisks grid" : {
					select: this.selectMedRisksGridRow
			},
			"MedRisks button[text=\"Cancel\"]" : {
				click: this.clickMedRisksCancel
			},
			"MedRisks button[text=\"Save\"]" : {
				click: this.clickMedRisksSave
			},
			"MedRisks button[text=\"Refresh\"]" : {
				click: this.MedRisksLoadGrid
			}
		});
	},

	LoadLastSyncTime : function(theForm) {

		theForm.getForm().setValues({"LastSyncTime" : "N/A"});
		theForm.setLoading("Checking for medication list last synchronization time", false);

		Ext.Ajax.request({
			url: "/LookUp/SyncMedsList",
			scope: this,
			theForm : theForm,
			
			success: function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				var LastSyncTime = resp.LastSyncTime;
				opts.theForm.getForm().setValues({"LastSyncTime" : LastSyncTime});
				theForm.setLoading(false, false);
			},
			failure : function( response, opts ) {
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				Ext.MessageBox.alert("Loading Error", "Loading Error", "Can't load last medication synchronization time - <br />" + resp.msg );
				theForm.setLoading(false, false);
			}
		});

	},

	SubmitPharmacyManagement : function(theBtn) {
		var pForm = theBtn.up("form");
		var form = pForm.getForm();
		var values = form.getValues();
		pForm.setLoading("Synchronizing Medication Lists", false);
		form.submit({
			clientValidation: true,
			url: "/LookUp/SyncMedsList",
			method: 'POST',
			scope: this,
			pForm : pForm,
			success: function(form, action) {
				var rt = Ext.JSON.decode(action.response.responseText);
				form.setValues({"LastSyncTime" : rt.LastSyncTime});
				action.pForm.setLoading(false, false);
				Ext.Msg.alert("Success", "Pharmacy medication lists successfully synchronized");
			},
			failure: function(form, action) {
				Ext.Msg.alert("Failure", "Pharmacy medication lists could not be synchronized");
				form.setLoading(false, false);
			}
		});
	},

	selectVistAUser : function(combo) {
		var msg = this.getSelVistAUserNoMatch();
		msg.hide();
	},

	UsersFromVistAStoreLoaded : function(records, operation, success) {
		this.getRolesForm().setLoading( false, false );
		var theCombo = this.getRoleGetUsersCombo();
		var theStore = theCombo.getStore();
		var theRecord = records[0].getData();
		var checkName = theRecord.name;
		var theURL = theStore.proxy.url.split("/");
		var theEnteredName = theURL[theURL.length-1];
		var theDUZ = theRecord.duz;
		if (checkName !== theEnteredName) {
			var msg = this.getSelVistAUserNoMatch();
			msg.show();
			theDUZ = "";
		}

		theStore.proxy.url = "";		// /LookUp/VistAUsers";
		theCombo.setValue(theDUZ);
		theCombo.show();
		this.getRoleUserRole().show();
		this.getRoleUserTemplateAuthoring().show();
		// If role is "Provider" or "All Roles" then show
		this.getRoleUserPreceptee().show();
	},

	GetUsersFromVistA : function(btn) {
		var theCombo = this.getRoleGetUsersCombo();
		theCombo.hide();
		this.getRoleUserRole().hide();
		this.getRoleUserTemplateAuthoring().hide();
		this.getRoleUserPreceptee().hide();

		this.getRolesForm().setLoading( "Getting User Data from VistA", false );
		var msg = this.getSelVistAUserNoMatch();
		msg.html = "";
		msg.hide();


		var theValues = btn.up("form").getForm().getValues();
		var UserName = theValues.LastName;
		if ("" !== theValues.FirstName) {
			UserName += "," + theValues.FirstName;
		}

		var theStore = theCombo.getStore();
		theStore.proxy.url = "/LookUp/VistAUsers/" + UserName;
		theStore.load({ scope : this, callback: this.UsersFromVistAStoreLoaded});
	},

	MedRisksLoadGrid : function(panel) {
		this.application.loadMask("Please wait; Loading Clinic Information");
		var theGrid = this.getMedRisksGrid();
		var theStore = theGrid.getStore();
		theStore.load();
		this.application.unMask();
		return true;
	},

	selectMedRisksGridRow : function(theRowModel, record, index, eOpts) {
		var recID = record.get("ID");
		var Label = record.get("Label");
		var Details = record.get("Details");

		this.CurrentMedRisksRecordID = recID;
		this.CurrentMedRisks = Label;

		var theLabelField = this.getMedRisks_Label();
		var theDetailsField = this.getMedRisks_Details();
		theLabelField.setValue(Label);
		theDetailsField.setValue(Details);
	},

	clickMedRisksCancel : function(theBtn, theEvent, eOpts) {
		theBtn.up('form').getForm().reset();
	},

	clickMedRisksSave : function(theBtn, theEvent, eOpts) {
		var form = theBtn.up('form').getForm();
		var theData = form.getValues(false, false, false, true);

		if (form.isValid()) {
			var Label = theData.Label;
			var Details = Ext.util.Format.htmlEncode(theData.Details);
			var recID = this.CurrentMedRisksRecordID;
			var URL = Ext.URLs.MedRisks;
			var CMD = "POST";
			if ("" !== recID && this.CurrentMedRisks === Label) {
				URL += "/" + recID;
				CMD = "PUT";
			}

			Ext.Ajax.request({
				url: URL,
				method : CMD,
				jsonData : {"Label" : Label, "Details" : Details },
				scope: this,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					this.CurrentMedRisksRecordID = "";
					this.CurrentMedRisks = "";
					var theLabelField = this.getMedRisks_Label();
					var theDetailsField = this.getMedRisks_Details();
					theLabelField.setValue("");
					theDetailsField.setValue("");

					if (!resp.success) {
						Ext.MessageBox.alert("Saving Error", "Site Configuration - Clinic Info, Save Error - " + resp.msg );
					}
					else {
						var thisCtl = this.getController("Management.AdminTab");
						var theGrid = thisCtl.getMedRisksGrid();
						theGrid.getStore().load();
					}
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					this.CurrentMedRisksRecordID = "";
					this.CurrentMedRisks = "";
					var theLabelField = this.getMedRisks_Label();
					var theDetailsField = this.getMedRisks_Details();
					theLabelField.setValue("");
					theDetailsField.setValue("");

					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Clinic Info, Save Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
		}
		else {
			var Msg = "";
			if ("" === theData.Label) {
				Msg += "<li>Missing Label Selection</li>";
			}
			if ("" === theData.Details) {
				Msg += "<li>Missing Details for Label</li>";
			}
			if ("" !== Msg) {
				Ext.MessageBox.alert('Invalid', 'Please fix the following errors:<ul>' + Msg + '</ul>');
			}
		}
	},


/************************************************************************************************************/

/** 
 * Clinic Info
 *
 * References:
 *		ClinicInfoGrid
 *		ClinicInfo_Label
 *		ClinicInfo_Details
 *
 **/
	ClinicInfoLoadGrid : function(panel) {
		this.application.loadMask("Please wait; Loading Clinic Information");
		var theGrid = this.getClinicInfoGrid();
		var theStore = theGrid.getStore();
		theStore.load();
		this.application.unMask();
		return true;
	},

	selectClinicInfoGridRow : function(theRowModel, record, index, eOpts) {
		var recID = record.get("ID");
		var Label = record.get("Label");
		var Details = record.get("Details");

		this.CurrentClinicInfoRecordID = recID;
		this.CurrentClinicInfo = Label;

		var theLabelField = this.getClinicInfo_Label();
		var theDetailsField = this.getClinicInfo_Details();
		theLabelField.setValue(Label);
		theDetailsField.setValue(Details);
	},

	clickClinicInfoCancel : function(theBtn, theEvent, eOpts) {
		theBtn.up('form').getForm().reset();
	},

	clickClinicInfoSave : function(theBtn, theEvent, eOpts) {
		var form = theBtn.up('form').getForm();
		var theData = form.getValues(false, false, false, true);

		if (form.isValid()) {
			var Label = theData.Label;
			var Details = Ext.util.Format.htmlEncode(theData.Details);
			var recID = this.CurrentClinicInfoRecordID;
			var URL = Ext.URLs.ClinicInfo;
			var CMD = "POST";
			if ("" !== recID && this.CurrentClinicInfo === Label) {
				URL += "/" + recID;
				CMD = "PUT";
			}

			Ext.Ajax.request({
				url: URL,
				method : CMD,
				jsonData : {"Label" : Label, "Details" : Details },
				scope: this,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					this.CurrentClinicInfoRecordID = "";
					this.CurrentClinicInfo = "";
					var theLabelField = this.getClinicInfo_Label();
					var theDetailsField = this.getClinicInfo_Details();
					theLabelField.setValue("");
					theDetailsField.setValue("");

					if (!resp.success) {
						Ext.MessageBox.alert("Saving Error", "Site Configuration - Clinic Info, Save Error - " + resp.msg );
					}
					else {
						var thisCtl = this.getController("Management.AdminTab");
						var theGrid = thisCtl.getClinicInfoGrid();
						theGrid.getStore().load();
					}
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					this.CurrentClinicInfoRecordID = "";
					this.CurrentClinicInfo = "";
					var theLabelField = this.getClinicInfo_Label();
					var theDetailsField = this.getClinicInfo_Details();
					theLabelField.setValue("");
					theDetailsField.setValue("");

					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Clinic Info, Save Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
		}
		else {
			var Msg = "";
			if ("" === theData.Label) {
				Msg += "<li>Missing Label Selection</li>";
			}
			if ("" === theData.Details) {
				Msg += "<li>Missing Details for Label</li>";
			}
			if ("" !== Msg) {
				Ext.MessageBox.alert('Invalid', 'Please fix the following errors:<ul>' + Msg + '</ul>');
			}
		}
	},


/* Discharge Instruction */
	DischargeInstructionLoadGrid : function(panel) {
		this.application.loadMask("Please wait; Loading Discharge Instructions");
		var theGrid = this.getDischargeInstructionGrid();
		var theStore = theGrid.getStore();
		theStore.load();
		this.application.unMask();
		return true;
	},

	selectDischargeInstructionGridRow : function(theRowModel, record, index, eOpts) {
		var recID = record.get("ID");
		var Label = record.get("Label");
		var Details = record.get("Details");

		this.CurrentDischargeInstructionRecordID = recID;
		this.CurrentDischargeInstruction = Label;

		var theInstructionField = this.getDischargeInstruction_Instruction();
		var theDocsField = this.getDischargeInstruction_Documentation();
		theInstructionField.setValue(Label);
		theDocsField.setValue(Details);
	},

	clickDischargeInstructionCancel : function(theBtn, theEvent, eOpts) {
		theBtn.up('form').getForm().reset();
	},

	clickDischargeInstructionSave : function(theBtn, theEvent, eOpts) {
		var form = theBtn.up('form').getForm();
		var theData = form.getValues(false, false, false, true);

		if (form.isValid()) {
			var Label = theData.Label;
			var Details = Ext.util.Format.htmlEncode(theData.Details);
			var recID = this.CurrentDischargeInstructionRecordID;
			var URL = Ext.URLs.DischargeInstruction;
			var CMD = "POST";
			if ("" !== recID && this.CurrentDischargeInstruction === Label) {
				URL += "/" + recID;
				CMD = "PUT";
			}

			Ext.Ajax.request({
				url: URL,
				method : CMD,
				jsonData : {"Label" : Label, "Details" : Details },
				scope: this,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					this.CurrentDischargeInstructionRecordID = "";
					this.CurrentDischargeInstruction = "";
					var theInstructionField = this.getDischargeInstruction_Instruction();
					var theDocsField = this.getDischargeInstruction_Documentation();
					theInstructionField.setValue("");
					theDocsField.setValue("");

					if (!resp.success) {
						Ext.MessageBox.alert("Saving Error", "Site Configuration - Discharge Instruction, Save Error - " + resp.msg );
					}
					else {
						var thisCtl = this.getController("Management.AdminTab");
						var theGrid = thisCtl.getDischargeInstructionGrid();
						theGrid.getStore().load();
					}
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					this.CurrentDischargeInstructionRecordID = "";
					this.CurrentDischargeInstruction = "";
					var theInstructionField = this.getDischargeInstruction_Instruction();
					var theDocsField = this.getDischargeInstruction_Documentation();
					theInstructionField.setValue("");
					theDocsField.setValue("");

					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Discharge Instruction, Save Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
		}
		else {
			var Msg = "";
			var Docs = "";
			if (!theData.Label) {
				Msg += "<li>Missing Instruction Selection</li>";
			}
			if ("" === theData.Details) {
				Msg += "<li>Missing Documentation for Discharge Instruction</li>";
			}
			if ("" !== Msg) {
				Ext.MessageBox.alert('Invalid', 'Please fix the following errors:<ul>' + Msg + '</ul>');
			}
		}
	},

/* Medication Documentation */
	selectMed : function(theCombo, nValue, oValue, eOpts) {
		var theRTE = theCombo.up("form").down("htmleditor");
		theRTE.reset();
	},

	selectMedDocsGridRow : function(theRowModel, record, index, eOpts) {

		var recID = record.get("ID");
		var MedID = record.get("Med_ID");
		var MedName = record.get("MedName");
		var MedDocumentation = record.get("Documentation");


		var theMedField = this.getInPatient_MedicationCombo();
		var theDocsField = this.getMedDocs_Field();
		theMedField.setValue(MedID);
		theDocsField.setValue(MedDocumentation);
	},

	MedicationDocsLoadGrid : function (panel) {
		this.application.loadMask("Please wait; Loading Medication Documentation");
		var theGrid = this.getMedDocsGrid();
		var theStore = theGrid.getStore();
		theGrid.getStore().load();

		var theMedField = this.getInPatient_MedicationCombo();
		theMedField.getStore().load();

		this.application.unMask();
		return true;
	},

	clickMedDocSave : function(theBtn, theEvent, eOpts) {
			var form = theBtn.up('form').getForm();
			var theData = form.getValues(false, false, false, true);

			if (form.isValid()) {
				var InPatient_Medication = theData.InPatient_Medication;
				var Documentation = Ext.util.Format.htmlEncode(theData.Documentation);
				var URL = "LookUp/MedDocs/" +  InPatient_Medication;

				Ext.Ajax.request({
					url: URL,
					method : "POST",
					jsonData : { "Documentation" : Documentation },
					scope: this,
					success: function( response, opts ){
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						if (!resp.success) {
							Ext.MessageBox.alert("Saving Error", "Site Configuration - Medications Documentation, Save Error - " + resp.msg );
						}
						else {
							var thisCtl = this.getController("Management.AdminTab");
							var theGrid = thisCtl.getMedDocsGrid();
							theGrid.getStore().load();
						}
					},
					failure : function( response, opts ) {
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Medications Documentation, Save Error - " + "e.message" + "<br />" + resp.msg );
					}
				});
			}
			else {
				var Msg = "";
				var Docs = "";
				if (!theData.InPatient_Medication) {
					Msg += "<li>Missing InPatient Medication Selection</li>";
				}
				if ("" === theData.Documentation) {
					Msg += "<li>Missing Documentation for InPatient Medication</li>";
				}
				if ("" !== Msg) {
					Ext.MessageBox.alert('Invalid', 'Please fix the following errors:<ul>' + Msg + '</ul>');
				}
			}
	},


	clickMedDocCancel : function(theBtn) {
		theBtn.up('form').getForm().reset();
	},

	selectRoleChange : function( combo, records, eOpts ) {
		var selectedRole = records[0].getData().name;
		if ("Provider" === selectedRole || "All Roles" == selectedRole) {
			this.getRoleUserPreceptee().show();
		}
		else {
			this.getRoleUserPreceptee().hide();
		}
	},

	RolesUserInfo : {},

	selectRolesGridRow : function(theRowModel, record, index, eOpts) {
		/* "rid", "username", "vcode", "role", "lastlogin", "DisplayName", "Email", "TemplateAuthoring", "Role_ID", "Last_SessionID" ], */
		this.RolesUserInfo = record.getData();
		var r = this.RolesUserInfo;
		var n = r.DisplayName.split(",");		// n[1] = First, n[0] = Last

/***
RolesUserInfo: {
DisplayName: "Tdnurse,Five"
Last_SessionID: null
Role_ID: "A802B9E4-ADCD-E411-9444-000C2935B86F"
TemplateAuthoring: 0
id: undefined		// ignore
lastlogin: null		// ignore
rid: 9		// pKey
role: "Nurse"
username: "10000000065"		// aka DUZ
vcode: null		// ignore
	}
	***/

		var LastNameField = this.getRoleLastName();
		LastNameField.setValue(n[0]);

		var FirstNameField = this.getRoleFirstName();
		FirstNameField.setValue(n[1]);

		var RoleSelVistAUser = this.getRoleSelVistAUser();
		RoleSelVistAUser.setValue(r.DisplayName);

		var RoleField = this.getRoleUserRole();
		RoleField.setValue(this.RolesUserInfo.role);

		var TAField = this.getRoleUserTemplateAuthoring();
		TAField.setValue(this.RolesUserInfo.TemplateAuthoring);

		var PrecepField = this.getRoleUserPreceptee();
		PrecepField.setValue(this.RolesUserInfo.Preceptee);

		var DelBtn = this.getRoleDeleteBtn();
		DelBtn.enable();
		DelBtn.show();

		this.getRoleGetUsersCombo().show();
		var theRoleCombo = this.getRoleUserRole();
		var theRole = theRoleCombo.value;
		theRoleCombo.show();
		TAField.show();

		if ("Provider" === theRole || "All Roles" === theRole) {
			PrecepField.show();
		}
		else {
			PrecepField.hide();
		}
	},

	RolesLoadGrid : function (panel) {
		delete this.RolesUserInfo;
		this.getRolesForm().getForm().reset();
		var DelBtn = this.getRoleDeleteBtn();
		DelBtn.disable();
		DelBtn.show();
		this.getRoleGetUsersCombo().hide();
		this.getRoleUserRole().hide();
		this.getRoleUserTemplateAuthoring().hide();
		this.getRoleUserPreceptee().hide();

		this.application.loadMask("Please wait; Loading User Roles");
		var theGrid = this.getRolesGrid();
		theGrid.getStore().load();
		this.application.unMask();
		return true;
	},

	clickRolesCancel : function ( theButton, eOpts) {
		delete this.RolesUserInfo;
		theButton.up('form').getForm().reset();
		this.getRoleGetUsersCombo().hide();
		this.getRoleUserRole().hide();
		this.getRoleUserTemplateAuthoring().hide();
		this.getRoleUserPreceptee().hide();
	},

	clickRolesSave : function ( theButton, eOpts) {
		var msg, theCombo, comboStore, duz, Name, theDUZ, theRec;

		this.application.loadMask("Please wait; Saving User Role Information");
		msg = this.getSelVistAUserNoMatch();
		msg.html = "";
		msg.hide();

		theCombo = this.getRoleGetUsersCombo();
		comboStore = theCombo.getStore();

		Name = theCombo.getRawValue();

		theRec = comboStore.findRecord("name", Name);
		if (theRec) {
			theDUZ = theRec.getData().duz;
			duz = theDUZ;
		}
		else {
			duz = this.RolesUserInfo.username;
		}

		theCombo.hide();
		this.getRoleUserRole().hide();
		this.getRoleUserTemplateAuthoring().hide();
		this.getRoleUserPreceptee().hide();


		var Role = this.getRoleUserRole().getValue();
		var TA = this.getRoleUserTemplateAuthoring().getValue();
		var Precep = this.getRoleUserPreceptee().getValue();
		var theGrid = this.getRolesGrid();
		var theStore = theGrid.getStore();
		var CMD = "POST";
		var rid = theStore.count(false);
		if (this.RolesUserInfo.rid) {
			CMD = "PUT";
			rid = this.RolesUserInfo.rid;
		}
		var RoleData = { "rid" : rid, "username" : duz, "role" : Role, "DisplayName" : Name, "TemplateAuthoring" : TA, "Preceptee" : Precep };

		delete this.RolesUserInfo;
		Ext.Ajax.request({
			url: "/Admin/UserRoles",
			method: CMD,
			scope : this,
			jsonData : RoleData,
			success: function(response, opts) {
				this.RolesLoadGrid();
				this.application.unMask();
			},
			failure: function(response, opts) {
				wccConsoleLog('server-side failure with status code ' + response.status);
				this.application.unMask();
			}
		});
	},

	clickRolesDelete : function ( theButton ) {
		var RoleData = this.RolesUserInfo;
		eOpts = {scope : this};
		Ext.MessageBox.show({
			title: "Information",
			msg: "You are about to delete User: " + RoleData.DisplayName + ". Would you like to delete this user from the system?",
			width:300,
			buttons: Ext.MessageBox.OKCANCEL,
			scope : this,
			fn: function(buttonId){
				if('ok'==buttonId){
					var RoleData = this.RolesUserInfo;
					delete this.RolesUserInfo;
					Ext.Ajax.request({
						url: "/Admin/UserRoles",
						method: "DELETE",
						scope : this,
						jsonData : RoleData,
						success: function(response, opts) {
							this.RolesLoadGrid();
							this.application.unMask();
						},
						failure: function(response, opts) {
							wccConsoleLog('server-side failure with status code ' + response.status);
							this.application.unMask();
						}
					});
				}
			}
		});
	},

	clickRolesRefresh : function ( theButton, eOpts) {
		theButton.up('form').getForm().reset();
		this.RolesLoadGrid();
	},

	clickFluidTypeRefresh : function (theButton, eOpts) {
		this.FluidTypeLoadGrid();
	},

	FluidTypeLoadGrid : function () {
		var theGrid = this.getIVFluidTypesGrid();
		theGrid.setLoading( "Please wait; Loading Fluid Types", false );
		theGrid.getStore().load();

		var theMedField = this.getIV_Medication();
		theMedField.getStore().load();

		var theFluidTypeField = this.getIV_FluidTypeMulti();
		theFluidTypeField.getStore().load();

		var DelBtn = this.getIV_Fluid_Types_DeleteBtn();
		DelBtn.disable();
		DelBtn.show();

		theGrid.setLoading( false, false );
		return true;
	},

	deselectIVFluidTypeGridRow : function(theRowModel, record, index, eOpts) {
		var DelBtn = this.getIV_Fluid_Types_DeleteBtn();
		DelBtn.disable();
		DelBtn.show();
	},

	selectIVFluidTypeGridRow : function(theRowModel, record, index, eOpts) {
		var Med = record.get("MedName");
		var MedID = record.get("Med_ID");
		var theMedField = this.getIV_Medication();
		theMedField.setValue(MedID);

		var Fluid = record.get("FluidType");
		var FluidID = record.get("FluidType_ID");
		var theFluidTypeField = this.getIV_FluidTypeMulti();
		theFluidTypeField.setValue(FluidID);

		var DelBtn = this.getIV_Fluid_Types_DeleteBtn();
		DelBtn.enable();
		// DelBtn.disable();
		DelBtn.show();
	},

	clickFluidTypeCancel : function ( theButton, eOpts) {
		theButton.up('form').getForm().reset();
		var DelBtn = this.getIV_Fluid_Types_DeleteBtn();
		DelBtn.disable();
		DelBtn.show();
	},

	clickFluidTypeSave : function ( theButton, eOpts) {
		var theForm = theButton.up('form').getForm();
		var thisCtl = this.getController("Management.AdminTab");
		var DelBtn = this.getIV_Fluid_Types_DeleteBtn();
		DelBtn.disable();
		DelBtn.show();

		if (theForm.isValid()) {
			var theData = theForm.getValues();
			Ext.Ajax.request({
				url: Ext.URLs.IVFluidType + theData.IV_Medication,
				method : "POST",
				jsonData : { "IV_FluidTypeMulti" : theData.IV_FluidTypeMulti },
				scope: this,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					if (!resp.success) {
						Ext.MessageBox.alert("Saving Error", "Site Configuration - Medications IV Fluid Type, Save Error - " + resp.msg );
					}
					else {
						var thisCtl = this.getController("Management.AdminTab");
						var theGrid = thisCtl.getIVFluidTypesGrid();
						theGrid.getStore().load();
					}
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Medications IV Fluid Type, Save Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
		}
		theForm.reset();
	},














	
	
	
	
	RoundingRulesFormRenderSetValues : function(scope, eOpts) {
		this.application.loadMask("Please wait; Loading Rounding Rules State");
		Ext.Ajax.request({
			url: Ext.URLs.RoundingRule,
			method: "GET",
			scope : this,
			success: function(response, opts) {
				var data = Ext.JSON.decode(response.responseText);
				var thisCtl = this.getController('Management.AdminTab');
				var rbGroup = thisCtl.getRBRoundingRules();
				rbGroup.setValue({"RoundingRule" : data.RoundingRule});
				this.application.unMask();
			},
			failure: function(response, opts) {
				wccConsoleLog('server-side failure with status code ' + response.status);
				this.application.unMask();
			}
		});
	},

	clickRoundingRuleSave: function() {
		var thisCtl = this.getController('Management.AdminTab');
		var rrButtons = thisCtl.getRBRoundingRules().getValue();
		var allowRounding = rrButtons.RoundingRule;
		this.application.loadMask("Please wait; Saving Rounding Rules State");
		this.application.SiteConfig.RoundingRule  = allowRounding;
		Ext.Ajax.request({
			url: Ext.URLs.RoundingRule,
			method: "POST",
			scope : this,
			jsonData : { "RoundingRule" : allowRounding },
			success: function(response, opts) {
				this.application.unMask();
			},
			failure: function(response, opts) {
				wccConsoleLog('server-side failure with status code ' + response.status);
				this.application.unMask();
			}
		});
	},

	clickRoundingRuleCancel: function(theBtn) {
		theBtn.up('form').getForm().reset();
	},

	MedHoldFormRenderSetValues : function(scope, eOpts) {
		this.application.loadMask("Please wait; Loading Medication Hold State");
		Ext.Ajax.request({
			url: Ext.URLs.MedHold,
			method: "GET",
			scope : this,
			success: function(response, opts) {
				var data = Ext.JSON.decode(response.responseText);
				var thisCtl = this.getController('Management.AdminTab');
				var rbGroup = thisCtl.getRBMedHold();
				var State = ("1" === data.MedHold);
				rbGroup.setValue({"AllowMedHolds" : State});
				this.application.unMask();
			},
			failure: function(response, opts) {
				wccConsoleLog('server-side failure with status code ' + response.status);
				this.application.unMask();
			}
		});
	},

	clickMedHoldSave: function() {
		var thisCtl = this.getController('Management.AdminTab');
		var mhButtons = thisCtl.getRBMedHold().getValue();
		var allowMedHold = mhButtons.AllowMedHolds;
		this.application.loadMask("Please wait; Saving Medication Hold State");
		this.application.SiteConfig.MedHold = allowMedHold;
		Ext.Ajax.request({
			url: Ext.URLs.MedHold,
			method: "POST",
			scope : this,
			jsonData : { "AllowMedHolds" : allowMedHold },
			success: function(response, opts) {
				this.application.unMask();
			},
			failure: function(response, opts) {
				wccConsoleLog('server-side failure with status code ' + response.status);
				this.application.unMask();
			}
		});
	},

	clickMedHoldCancel: function(theBtn) {
		theBtn.up('form').getForm().reset();
	},


	TemplateSelected: function(combo, recs, eOpts){
		wccConsoleLog('Admin Tab, Template Selected');
		var theData = recs[0].data.id;
		var thisCtl = this.getController('Management.AdminTab');
		var theStore = thisCtl.getTemplateGrid().getStore();
		var theURL = Ext.URLs.Templates + "/Cancer/" + theData;
		theStore.load({
			url:theURL
		});
			
	},
	showAllTemplates: function(combo, recs, eOpts){
		wccConsoleLog('Admin Tab, Template Selected');
		var thisCtl = this.getController('Management.AdminTab');
		var theStore = thisCtl.getTemplateGrid().getStore();
		theStore.removeAll();
		var theURL = Ext.URLs.Templates;
		theStore.load({
			url:theURL
		});
			
	},
	clickSaveLookup: function(button){
		var grid = Ext.ComponentQuery.query('AdminTab AddLookups grid')[0]; // Get's a specific existing instance of the widget by it's CSS style reference
		var store = grid.getStore();
		var win = button.up('window');
		var form = win.down('form');
		var values = form.getValues();

		var record = form.getRecord();
		var rowNum = store.indexOf(record);
		var existingRecord = null;

		if (this.getSelectedRecord(false, 'AdminTab AddLookups grid').hasRecord) {
			existingRecord = this.getSelectedRecord(false, 'AdminTab AddLookups grid').record;
		}
				
		if(existingRecord){
					
			var lookupRecord = Ext.create(Ext.COMSModels.LookupTable, {
				lookupid: existingRecord.get('id'),
				value: values.name,
				description: values.description
			});

			lookupRecord.save({
				scope: this,
				waitMsg: 'Saving Data...',
				success: function (data) {
					wccConsoleLog("Saved Lookup Type ID " + data.getId() + " lookupid " + data.data.lookupid);
					var ref = Ext.create(Ext.COMSModels.GenericLookup, {
						id: data.data.lookupid,
						name: data.data.value,
						description: data.data.description
					});
					if (-1 === rowNum) {
						store.insert(0, ref);
					} else {
						store.removeAt(rowNum);
						store.insert(rowNum, ref);
					}
					this.getRemoveLookup().disable();
					this.getEditLookup().disable();
					win.close();
				},
				failure: function (err) {

					this.getRemoveLookup().disable();
					this.getEditLookup().disable();
					win.close();
					Ext.MessageBox.alert('Invalid', 'This lookup already exists.');
									
				}
			});

		}


			
	},
	clickCancelLookup: function(button){
		var win = button.up('window');
		this.getRemoveLookup().disable();
		this.getEditLookup().disable();
		win.close();
	},
	// Used in both the Hydration and Refernce Grids
	getSelectedRecord: function (destroy, query) {
		var theGrid, theView, theSelModel, HasSelection = false, selRows, theRecord, theStore, theIndex, records;

		theGrid = Ext.ComponentQuery.query(query)[0];
		theView = theGrid.getView();
		theSelModel = theView.getSelectionModel();
		HasSelection = theSelModel.hasSelection();
		if (HasSelection) {
			selRows = theSelModel.getSelection();
			theRecord = selRows[0];
			records = selRows;
			theStore = theView.getStore();
			theIndex = theStore.indexOf(theRecord);
			if (destroy) {
				theStore.removeAt(theIndex);
				return {};
			}
		}
		return {
			hasRecord: HasSelection,
			record: theRecord,
			rowNum: theIndex,
			multiRecord: records
		};
	},

/**		
	enableEditLookup : function(grid, record){
		this.getRemoveLookup().enable();
		this.getEditLookup().enable();
	},
**/
	enableGlobalLookup : function(grid, record){
		this.getRemoveLookup().enable();
		this.getEditLookup().enable();
	},
	
	enableRemoveTemplate : function(grid, record){
		this.getRemoveTemplate().enable();
	},
		
/**
	removeLookup : function(button){
		var ckRec = this.getSelectedRecord(false, 'AdminTab AddLookups grid');
		if (ckRec.hasRecord) {
			wccConsoleLog('Remove Lookup - ' + ckRec.record.get('id') + ' - ' + ckRec.record.get('name') + ' - ' + ckRec.record.get('description'));
			var reference = Ext.create(Ext.COMSModels.LookupTable, {
				value: ckRec.record.get('name'),
				description: ckRec.record.get('description'),
				lookupid: ckRec.record.get('id')
			});

			reference.destroy({
				scope: this,
				success: function (data) {
					this.getSelectedRecord(true, 'AdminTab AddLookups grid'); // remove the selected record from the current store
					this.getRemoveLookup().disable();
					this.getEditLookup().disable();
				}
			});
		} else {
			Ext.MessageBox.alert('Invalid', 'Please select a Row in the References Grid.');
		}
	},
**/
	removeTemplate : function(button){
		var ckRec = this.getSelectedRecord(false, 'AdminTab DeleteTemplate grid');
		var mytemplate;
		if (ckRec.hasRecord) {
			var adminCtl = this.getController("Management.AdminTab");

			if(ckRec.multiRecord.length > 1){
				wccConsoleLog('Remove Template - ' + ckRec.multiRecord[0].get('id') + ' - ' + ckRec.multiRecord[0].get('description'));
				mytemplate = Ext.create(Ext.COMSModels.Templates, {
					id: ckRec.multiRecord[0].get('id'),
					description: ckRec.multiRecord[0].get('description'),
					force: 'false'
				});

				Ext.MessageBox.show({
					title: 'Information',
					msg: 'You are about to delete template: '+ ckRec.record.get('description') + '. Would you like to delete it and remove all references?',
					width:300,
					buttons: Ext.MessageBox.OKCANCEL,
					fn: function(buttonId){
						if('ok'==buttonId){
							adminCtl.deleteTemplateCall(mytemplate,ckRec);
						}
					}
				});
				
			}else{
				wccConsoleLog('Remove Template - ' + ckRec.record.get('id') + ' - ' + ckRec.record.get('description'));
				mytemplate = Ext.create(Ext.COMSModels.Templates, {
					id: ckRec.record.get('id'),
					description: ckRec.record.get('description'),
					force: 'false'
				});
				
				Ext.MessageBox.show({
					title: 'Information',
					msg: 'You are about to delete template: '+ ckRec.record.get('description') + '. Would you like to delete it and remove all references?',
					width:300,
					buttons: Ext.MessageBox.OKCANCEL,
					fn: function(buttonId){
						if('ok'==buttonId){
							adminCtl.deleteTemplateCall(mytemplate,ckRec);
						}
					}
				});
				
			}
			
		} 
			
	},
	
	deleteTemplateCall: function(mytemplate,ckRec){
		mytemplate.destroy({
			scope: this,
			success: function (record, op) {
				this.getSelectedRecord(true, 'AdminTab DeleteTemplate grid'); // remove the selected record from the current store
				this.getRemoveTemplate().disable();
				var adminCtl = this.getController("Management.AdminTab");
				//Ext.MessageBox.alert('Success', 'Template ' + ckRec.record.get('description') + ' was deleted from the system.');
				Ext.MessageBox.show({
					title: 'Success',
					msg:  'Template ' + ckRec.record.get('description') + ' was deleted from the system.',
					width:300,
					buttons: Ext.MessageBox.OK,
					fn: function(buttonId){
						if('ok'==buttonId){
							adminCtl.removeTemplate();
							
						}
					}
				});
				
			},
			failure: function (record, op) {
				wccConsoleLog("Delete Template Failed");
				this.getRemoveTemplate().disable();
				this.application.unMask();
				var adminCtl = this.getController("Management.AdminTab");
				Ext.MessageBox.show({
					title: 'Information',
					msg: 'Template was not deleted: ' + op.request.scope.reader.jsonData.frameworkErr + '. Would you like to delete it and remove all references?',
					width:300,
					buttons: Ext.MessageBox.OKCANCEL,
					fn: function(buttonId){
						if('ok'==buttonId){
							mytemplate.data.force = 'true';
							adminCtl.deleteTemplateCall(mytemplate,ckRec);
						}
					}
				});

				//Ext.MessageBox.alert('Failure', 'Template was not deleted: ' + op.request.scope.reader.jsonData["frameworkErr"]);
			}
		});
		
	}

/*************
	editLookup : function(button){
		var ckRec = this.getSelectedRecord(false, 'AdminTab grid');
		if (ckRec.hasRecord) {
			wccConsoleLog('Editing Lookup - ' + ckRec.record.get('id') + ' - ' + ckRec.record.get('name') + ' - ' + ckRec.record.get('description'));
			var view = Ext.widget('EditLookup'); // Creates an instance of the "Add Reference" pop-up window
			view.down('form').loadRecord(ckRec.record);
		} else {
			Ext.MessageBox.alert('Invalid', 'Please select a Row in the Lookup Grid.');
		}
	},


	// Load the grid's store to see all the values for the selected type
	LookupSelected : function ( combo, recs, eOpts ) {
		wccConsoleLog('Admin Tab, Lookup Selected');
		var theData = recs[0].data.value;
		var thisCtl = this.getController('Management.AdminTab');
		var theStore = thisCtl.getLookupGrid().getStore();
		var theURL = Ext.URLs.BaseView + "/" + theData;
		theStore.load({
			url:theURL
		});
	},

	updateLookup: function(button){
		wccConsoleLog('clicked Save button');
		var grid = Ext.ComponentQuery.query('AdminTab grid')[0]; // Get's a specific existing instance of the widget by it's CSS style reference
		var store = grid.getStore();

		var form = button.up('form');
			
		var values = form.form.getValues();
			
			
		var lookupRecord = Ext.create('COMS.model.LookupTable', {
			id: values.id,
			value: values.value,
			description: values.description
		});

		lookupRecord.save({
			scope : this,
			waitMsg : 'Saving Data...',
			success: function(data) {
				wccConsoleLog("Saved Lookup Type ID "+ data.getId() + " name " + data.data.value + " lookupid " + data.data.lookupid);
					
				var ref = Ext.create(Ext.COMSModels.GenericLookup, {
					id: data.data.lookupid,
					name: data.data.value,
					description: data.data.description
				});

				store.insert(0, ref);
					
				var thisCtl = this.getController('Management.AdminTab');
				var addLookups = thisCtl.getLookup();
				addLookups.form.findField('value').setValue('');
				addLookups.form.findField('id').setValue('');

				addLookups.form.findField('description').setValue('');
			},
			failure: function(err){
				Ext.MessageBox.alert('Invalid', 'This reference already exists.');
			}
		});
			
	}
***************/
});

Ext.define('COMS.controller.Management.CumulativeDosing', {
	extend : 'Ext.app.Controller',
	views : [ 'Management.CumulativeDosing' ],
	stores : [ 'CumulativeDosingMeds', 'DrugUnitsStore2' ],
	refs: [
		{
			ref : "Medication",
			selector : "CumulativeDosing [name=\"MedName\"]"
		},
		{
			ref : "Dose",
			selector : "CumulativeDosing [name=\"CumulativeDoseAmt\"]"
		},
		{
			ref : "Units",
			selector : "CumulativeDosing [name=\"CumulativeDoseUnits\"]"
		},
		{
			ref : "ThePanel",
			selector : "CumulativeDosing"
		},
		{
			ref : "TheGrid",
			selector : "CumulativeDosing grid"
		},
		{
			ref : "DeleteBtn",
			selector : "CumulativeDosing button[text=\"Delete\"]"
		}
	],

	init: function() {
		this.control({
			"CumulativeDosing" : {
				beforerender: this.RefreshPanel
			},
			"CumulativeDosing grid" : {
					select: this.selectGridRow,
					deselect: this.deSelectGridRow
			},
			"CumulativeDosing button[text=\"Cancel\"]" : {
				click: this.clickCancel
			},
			"CumulativeDosing button[text=\"Save\"]" : {
				click: this.SaveForm
			},
			"CumulativeDosing button[text=\"Refresh\"]" : {
				click: this.RefreshPanel
			},
			"CumulativeDosing button[text=\"Delete\"]" : {
				click: this.DeleteSelectedRecords
			}
		});
	},

	clickCancel : function(theBtn, theEvent, eOpts) {
		theBtn.up('form').getForm().reset();
		this.getTheGrid().getSelectionModel().deselectAll();
	},



	_formSubmit : function(form, URL, CMD) {
			form.submit({
				scope : this,
				clientValidation: true,
				url: URL,
				method : CMD,
				success: function(form, action) {
					this.RefreshPanel();
					//this.CancelForm();
				},
				failure: function(form, action) {
					var SaveTitle = "Saving Cumulative Dose Medication Configuration FAILED";
					this.RefreshPanel();
					//this.CancelForm();
					switch (action.failureType) {
						case Ext.form.action.Action.CLIENT_INVALID:
							Ext.Msg.alert(SaveTitle, 'Form fields may not be submitted with invalid values');
							break;
						case Ext.form.action.Action.CONNECT_FAILURE:
							Ext.Msg.alert(SaveTitle, 'Ajax communication failed');
							break;
						case Ext.form.action.Action.SERVER_INVALID:
							Ext.Msg.alert(SaveTitle, action.result.msg);
					}
				}
			});
	},
		/* Cumulative Dosing Medications are stored in the Lookup Table with a Lookup_Type = "50" */
	SaveForm : function(theBtn, theEvent, eOpts) {
		var form = this.getThePanel().getForm();
		var URL = Ext.URLs.CumulativeDosingMeds;
		var CMD = "POST";
		var theStore = this.getTheGrid().store;
		var theKey = form.getValues().MedName;
		var theRecord;
		if ("" !== theKey) {
			theRecord = theStore.findRecord("MedID", theKey);
		}

		if (theRecord) {
			var quesAnswer = Ext.Msg.show({
				"title" : "Duplicate Record", 
				"msg" : "A record already exsists for that medication, do you wish to overwrite the existing record?", 
				"buttons" : Ext.Msg.YESNO, 
				"icon" : Ext.Msg.QUESTION,
				"scope" : this,
				"fn" : function( btnID, txt, opt) {
					if ("yes" === btnID) {
						CMD = "PUT";
						URL += "/" + theKey;
						this._formSubmit(form, URL, CMD);
					}
				}
			});
		}
		else {
			// var bForm = form.form;
			this._formSubmit(form, URL, CMD);
		}
	},


	RefreshPanel : function() {
		this.application.loadMask("Please wait; Loading Panel Information");
		var theGrid = this.getTheGrid();
		var theStore = theGrid.getStore();
		theStore.load();
		theGrid.getSelectionModel().deselectAll();
		var MedField = this.getMedication();
		MedField.getStore().load();
		var UnitsField = this.getUnits();
		UnitsField.getStore().load();

		var delBtn = this.getDeleteBtn();
		delBtn.setDisabled(true);
		delBtn.show();
		this.application.unMask();
	},




	deSelectGridRow : function(theRowModel, record, index, eOpts) {
	},
	
	selectGridRow : function(theRowModel, record, index, eOpts) {
		var records = theRowModel.getSelection();
		var delBtn = this.getDeleteBtn();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
		var theForm = this.getThePanel();

		var MedField = this.getMedication();
		MedField.setRawValue(record.getData().MedName);
		MedField.setValue(record.getData().MedID);

		var DoseField = this.getDose();
		DoseField.setValue(record.getData().CumulativeDoseAmt);

		var UnitsField = this.getUnits();
		UnitsField.setValue(record.getData().UnitsID);
		UnitsField.setRawValue(record.getData().CumulativeDoseUnits);

		// theForm.loadRecord(record);
	},




	deleteRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.get("ID");
			var CMD = "DELETE";
			var URL = Ext.URLs.CumulativeDosingMeds + "/" + rID;
				Ext.Ajax.request({
					url: URL,
					method : CMD,
					scope: this,
					records : theRecords,
					success: function( response, opts ){
						this.deleteRecord(opts.records);
					},
					failure : function( response, opts ) {
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						Ext.MessageBox.alert("Delete Error", "Delete Error", "Cumulative Dose Medication - Delete Record, Error - <br />" + resp.msg );
					}
				});
		}
		else {
			this.application.unMask();
			this.RefreshPanel();
		}
	},

	DeleteSelectedRecords : function() {
		var theGrid = this.getTheGrid();
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		Ext.MessageBox.confirm("Confirm Deletion", "Are you sure you want to delete the selected records?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Deleting Selected Records");
				this.deleteRecord(theRecords);
			}
		}, this);
	}











});



Ext.define('COMS.controller.Management.DiseaseStaging', {
    extend : 'Ext.app.Controller',
    stores : ["DiseaseStaging"],
    views : [ 
		'Management.DiseaseStaging'
	],
	refs : [
		{
			ref : "DiseaseStaging",
			selector : "DiseaseStaging"
		},
		{
			ref : "DiseaseStagingGrid",
			selector : "DiseaseStaging grid"
		},
		{
			ref : "DiseaseStaging_Disease",
			selector : "DiseaseStaging selDisease"
		},
		{
			ref : "DiseaseStaging_DiseaseID",
			selector : "DiseaseStaging [name=\"DiseaseID\"]"
		},
		{
			ref : "DiseaseStaging_Stage",
			selector : "DiseaseStaging [name=\"Stage\"]"
		},
		{
			ref : "DiseaseStaging_Delete",
			selector : "DiseaseStaging button[text=\"Delete\"]"
		}
	],
	init: function() {
		wccConsoleLog('Initialized Disease Staging Elements Panel Navigation Controller!');
		this.control({
			"DiseaseStaging" : {
				beforerender: this.DiseaseStagingLoadPanelRequirements
			},
			"DiseaseStaging grid" : {
					select: this.selectDiseaseStagingGridRow,
					deselect: this.deSelectDiseaseStagingGridRow
			},
			"DiseaseStaging button[text=\"Cancel\"]" : {
				click: this.ResetDiseaseStagingPanel
			},
			"DiseaseStaging button[text=\"Save\"]" : {
				click: this.clickDiseaseStagingsSave
			},
			"DiseaseStaging button[text=\"Refresh\"]" : {
				click: this.DiseaseStagingLoadPanelRequirements
			},
			"DiseaseStaging button[text=\"Delete\"]" : {
				click: this.DiseaseStagingDeleteRecords
			}
		});
	},



	deleteSelectedRecords : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.get("ID");
			var CMD = "DELETE";
			var URL = Ext.URLs.DiseaseStaging + "/" + rID;
				Ext.Ajax.request({
					url: URL,
					method : CMD,
					scope: this,
					records : theRecords,
					success: function( response, opts ){
						this.deleteSelectedRecords(opts.records);
					},
					failure : function( response, opts ) {
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						Ext.MessageBox.alert("DELETE Error", "DELETE Error", "Site Configuration - Disease Staging, DELETE Error - <br />" + resp.msg );
					}
				});
		}
		else {
			this.application.unMask();
			this.DiseaseStagingLoadPanelRequirements();
		}
	},

	DiseaseStagingDeleteRecords : function(theBtn) {
		var theGrid = theBtn.up("form").down("grid");
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		Ext.MessageBox.confirm("Confirm Deletion", "Are you sure you want to delete the selected Disease Staging records?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Deleting Selected Records");
				this.deleteSelectedRecords(theRecords);
			}
		}, this);
	},

	DiseaseStagingLoadPanelRequirements : function() {
		this.application.loadMask("Please wait; Loading Disease Staging Information");

		var theGrid = this.getDiseaseStagingGrid();
		var theStore = theGrid.getStore();
		theStore.load();
		theGrid.getSelectionModel().deselectAll();

		var delBtn = this.getDiseaseStaging_Delete();
		delBtn.setDisabled(true);
		delBtn.show();
		var theDiseaseField = this.getDiseaseStaging_Disease();
		if (theDiseaseField.recID) {
			delete theDiseaseField.recID;
		}

		this.application.unMask();
		return true;
	},

	deSelectDiseaseStagingGridRow : function(theRowModel, record, index, eOpts) {
		var records = theRowModel.getSelection();
		var delBtn = this.getDiseaseStaging_Delete();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
	},
	
	selectDiseaseStagingGridRow : function(theRowModel, record, index, eOpts) {
		var records = theRowModel.getSelection();
		var delBtn = this.getDiseaseStaging_Delete();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}

		var recID = record.get("ID");
		var Disease = record.get("Disease");
		var DiseaseID = record.get("DiseaseID");
		var Stage = record.get("Stage");

		var theDiseaseField = this.getDiseaseStaging_Disease();
		// var theDiseaseIDField = this.getDiseaseStaging_DiseaseID();
		var theStageField = this.getDiseaseStaging_Stage();
		theDiseaseField.setValue(DiseaseID);
		// theDiseaseIDField.setValue(DiseaseID);
		theDiseaseField.recID = recID;
		theStageField.setValue(Stage);
	},

	ResetDiseaseStagingPanel : function() {
		this.getDiseaseStaging().getForm().reset();
		this.getDiseaseStagingGrid().getSelectionModel().deselectAll();
		delete this.getDiseaseStaging_Disease().recID;
	},
 
	clickDiseaseStagingsSave : function(theBtn, theEvent, eOpts) {
		var CMD = "POST";
		var URL = Ext.URLs.DiseaseStaging;

		var form = theBtn.up('form').getForm();
		var grid = theBtn.up("form").down("grid");
		var theStore = grid.getStore();
		var theData = form.getValues();
		theStore.clearFilter(true);
		var theDiseaseField = this.getDiseaseStaging_Disease();
		if (theDiseaseField.recID) {

			CMD = "PUT";
			URL += "/" + theDiseaseField.recID;
			delete theDiseaseField.recID;
		}
		else {
			var xx = theStore.filter([ {property: "Disease", value: theData.selDisease},{property: "Stage", value: theData.Stage}]);
			if (theStore.getCount() >= 1) {
				// This is a duplicate Record. It's now a PUT.
				var Disease = theStore.getRange()[0].get("DiseaseID");
				var ID = theStore.getRange()[0].get("ID");
				var Stage = theStore.getRange()[0].get("Stage");
				CMD = "PUT";
				URL += "/" + ID;
			}
			theStore.clearFilter(true);
		}

		form.submit({
			scope : this,
			clientValidation: true,
			url: URL,
			method : CMD,
			success: function(form, action) {
				this.DiseaseStagingLoadPanelRequirements();
				this.ResetDiseaseStagingPanel();
			},
			failure: function(form, action) {
				var SaveTitle = "Saving Disease Stage FAILED";
				this.DiseaseStagingLoadPanelRequirements();
				this.ResetDiseaseStagingPanel();
				switch (action.failureType) {
					case Ext.form.action.Action.CLIENT_INVALID:
						Ext.Msg.alert(SaveTitle, 'Form fields may not be submitted with invalid values');
						break;
					case Ext.form.action.Action.CONNECT_FAILURE:
						Ext.Msg.alert(SaveTitle, 'Ajax communication failed');
						break;
					case Ext.form.action.Action.SERVER_INVALID:
						Ext.Msg.alert(SaveTitle, action.result.msg);
				}
			}
		});
	}
});


Ext.define('COMS.controller.Management.EmeticMeds', {
	extend : 'Ext.app.Controller',
	views : [ 'Management.EmeticMeds' ],
	stores : ["EmeticMeds"],
	refs: [
		{ ref : "EmeticMedsGrid",           selector : "EmeticMeds grid" },
		{ ref : "PatientType",              selector : "EmeticMeds radiogroup[name=\"patientRadio\"]" },
		{ ref : "SelLevel",                 selector : "EmeticMeds combo[name=\"EmetogenicLevel\"]" },
		{ ref : "SelDrug",                  selector : "EmeticMeds combo[name=\"Drug\"]" },
		{ ref : "DeleteBtn",                selector : "EmeticMeds button[text=\"Delete\"]" }

	],

	init: function() {

		this.control({
			"EmeticMeds " : {
				beforerender: this.RefreshPanel
			},
			"EmeticMeds radiogroup[name=\"patientRadio\"]" : {
					change: this.selPatientType
			},
			"EmeticMeds combo[name=\"Drug\"]" : {
				select: this.selDrug
			},
			"EmeticMeds grid" : {
				select: this.selectGridRow
			},

			"EmeticMeds button[text=\"Cancel\"]" : {
				click: this.CancelForm
			},
			"EmeticMeds button[text=\"Save\"]" : {
				click: this.SaveForm
			},
			"EmeticMeds button[text=\"Refresh\"]" : {
				click: this.RefreshPanel
			},
			"EmeticMeds button[text=\"Delete\"]" : {
				click: this.DeleteSelectedRecords
			}
		});
	},

	initDrugStore : function() {
		var theDrugCombo = this.getSelDrug();
		theDrugCombo.lastQuery = null; 
		var theDrugStore = theDrugCombo.getStore();
		var pType = this.getPatientType().getValue().PatientType;
		theDrugStore.proxy.url = Ext.URLs.Drugs + "/" + pType;
	},

	RefreshPanel : function() {
		this.application.loadMask("Please wait; Loading Emetic Medications");
		this.initDrugStore();

		var theGrid = this.getEmeticMedsGrid();
		var theStore = theGrid.getStore();
		theStore.load();

		var delBtn = this.getDeleteBtn();
		delBtn.setDisabled(true);
		delBtn.show();

		this.application.unMask();
		return true;
	},

	selPatientType : function(rgroup, nValue, oValue, eOpts) {
		this.initDrugStore();
	},

	selDrug : function(theCombo, theRecord) {
		var DrugID = theCombo.getValue();
		var DrugName = theCombo.getRawValue();
		var theData = theRecord[0].getData();
		var rawData = theRecord[0].raw;
	},


	selectGridRow : function(theRowModel, record, index, eOpts) {
		var recID = record.get("id");
		var EmoLevel = record.get("EmoLevel");
		var PatientType = record.get("MedType");

		var thePTypeField = this.getPatientType();

		var MedID = record.get("MedID");
		var MedName = record.get("MedName");
		var Med = Ext.create(Ext.COMSModels.Drugs, {
			id : record.get("MedID"),
			name : record.get("MedName")
		});
		var theDrugField = this.getSelDrug();
		theDrugField.setValue(Med);

/* MWB - 3/13/2015 - The creation of a model and then assigning that to a field makes no sense ********************************
		EmoLevel = Ext.create(Ext.COMSModels.EmetogenicLevel, {
			name : record.get("EmoLevelName"),
			description : record.get("EmoLevel")
		});
*******************/
		var theLevelField = this.getSelLevel();
		theLevelField.setValue(EmoLevel);

		this.CurrentEmeticMedRecordID = recID;

		var records = theRowModel.getSelection();
		var delBtn = this.getDeleteBtn();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
	},

	CancelForm : function(theBtn, theEvent, eOpts) {
		theBtn.up('form').getForm().reset();
		delete this.CurrentEmeticMedRecordID;
	},

	SaveForm : function(theBtn, theEvent, eOpts) {
		var form = theBtn.up('form').getForm();
		var theData = form.getValues(false, false, false, true);
		var fData = {};
		fData.MedName = this.getSelDrug().getRawValue();
		fData.MedID = theData.Drug;
		fData.MedType = theData.PatientType;
		fData.EmoLevel = theData.EmetogenicLevel;

		var ValidForm = form.isValid();
		if (ValidForm) {
			var recID = this.CurrentEmeticMedRecordID;
			var URL = Ext.URLs.EmeticMeds;
			delete this.CurrentEmeticMedRecordID;

			var CMD = "POST";
			if (recID && "" !== recID) {
				URL += "/" + recID;
				CMD = "PUT";
			}

			Ext.Ajax.request({
				url: URL,
				method: CMD,
				jsonData : fData,
				scope: this,
				theForm: form,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					opts.theForm.reset();
					if (!resp.success) {
						Ext.MessageBox.alert("Saving Error", "Site Configuration - Emetic Medication, Save Error - " + resp.msg );
					}
					else {
						this.RefreshPanel();
					}
				},
				failure: function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					opts.theForm.reset();
					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Emetic Medication, Save Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
		}
		else {
			var Msg = "";
			var Docs = "";

			if (!theData.Drug) {
				Msg += "<li>Missing Drug</li>";
			}
			if (!theData.PatientType) {
				Msg += "<li>Missing Medication Type</li>";
			}
			if ("" === theData.EmetogenicLevel) {
				Msg += "<li>Missing Emetogenic Level</li>";
			}
			if ("" !== Msg) {
				Ext.MessageBox.alert('Invalid', 'Please fix the following errors:<ul>' + Msg + '</ul>');
			}

		}
	},

	deleteRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			// debugger;
			var rID = record.get("id");
			var CMD = "DELETE";
			var URL = Ext.URLs.EmeticMeds + "/" + rID;
			Ext.Ajax.request({
				url: URL,
				method : CMD,
				scope: this,
				records : theRecords,
				success: function( response, opts ){
					this.deleteRecord(opts.records);
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Delete Emetic Medication Record, Save Error - <br />" + resp.msg );
				}
			});
		}
		else {
			this.application.unMask();
			this.RefreshPanel();
			this.CancelForm();
		}
	},

	DeleteSelectedRecords : function() {
		var theGrid = this.getEmeticMedsGrid();
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		Ext.MessageBox.confirm("Confirm Deletion", "Are you sure you want to delete the selected Emetic Medication records?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Deleting Selected Records");
				this.deleteRecord(theRecords);
			}
		}, this);
	}
});


Ext.define('COMS.controller.Management.IntelligentDataElements', {
    extend : 'Ext.app.Controller',
    stores : ["IDEntry"],
    views : [ 
		'Management.IntelligentDataElements'
	],
	refs : [
		{
			ref : "ThePanel",
			selector : "IntelligentDataElements"
		},
		{
			ref : "TheGrid",
			selector : "IntelligentDataElements grid"
		},
		{
			ref : "DeleteBtn",
			selector : "IntelligentDataElements button[text=\"Delete\"]"
		}
    ],
    

    init: function() {
        wccConsoleLog('Initialized Intelligent Data Elements Panel Navigation Controller!');

        this.control({
			"IntelligentDataElements" : {
				beforerender: this.RefreshPanel
			},
			"IntelligentDataElements grid" : {
					select: this.selectGridRow,
					deselect: this.deSelectGridRow
			},
			"IntelligentDataElements button[text=\"Cancel\"]" : {
				click: this.CancelForm
			},
			"IntelligentDataElements button[text=\"Save\"]" : {
				click: this.SaveForm
			},
			"IntelligentDataElements button[text=\"Refresh\"]" : {
				click: this.RefreshPanel
			},
			"IntelligentDataElements button[text=\"Delete\"]" : {
				click: this.DeleteSelectedRecords
			}
		});

    },



	_formSubmit : function(form, URL, CMD) {
			form.submit({
				scope : this,
				clientValidation: true,
				url: URL,
				method : CMD,
				success: function(form, action) {
					this.RefreshPanel();
					this.CancelForm();
				},
				failure: function(form, action) {
					var SaveTitle = "Saving Intelligent Data Entry Configuration FAILED";
					this.RefreshPanel();
					this.CancelForm();
					switch (action.failureType) {
						case Ext.form.action.Action.CLIENT_INVALID:
							Ext.Msg.alert(SaveTitle, 'Form fields may not be submitted with invalid values');
							break;
						case Ext.form.action.Action.CONNECT_FAILURE:
							Ext.Msg.alert(SaveTitle, 'Ajax communication failed');
							break;
						case Ext.form.action.Action.SERVER_INVALID:
							Ext.Msg.alert(SaveTitle, action.result.msg);
					}
				}
			});
	},
	SaveForm : function(theBtn, theEvent, eOpts) {
		var form = this.getThePanel().getForm();
		var URL = Ext.URLs.IntelligentDataEntry;
		var CMD = "POST";
		var theStore = this.getTheGrid().store;
		var theKey = form.getValues().Vital2Check;
		var theRecord;
		if ("" !== theKey) {
			theRecord = theStore.findRecord("Vital2Check", theKey);
		}
		if (theRecord) {
			var quesAnswer = Ext.Msg.show({
				"title" : "Duplicate Record", 
				"msg" : "A " + theKey + " record already exsists, do you wish to overwrite the existing " + theKey + " record?", 
				"buttons" : Ext.Msg.YESNO, 
				"icon" : Ext.Msg.QUESTION,
				"scope" : this,
				"fn" : function( btnID, txt, opt) {
					if ("yes" === btnID) {
						CMD = "PUT";
						URL += "/" + theKey;
						this._formSubmit(form, URL, CMD);
					}
				}
			});
		}
		else {
			this._formSubmit(form, URL, CMD);
		}
	},

	CancelForm : function() {
		this.getThePanel().getForm().reset();
		this.getTheGrid().getSelectionModel().deselectAll();
	},


	deleteRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.get("Vital2Check");
			var CMD = "DELETE";
			var URL = Ext.URLs.IntelligentDataEntry + "/" + rID;
				Ext.Ajax.request({
					url: URL,
					method : CMD,
					scope: this,
					records : theRecords,
					success: function( response, opts ){
						this.deleteRecord(opts.records);
					},
					failure : function( response, opts ) {
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Delete IDE Record, Save Error - <br />" + resp.msg );
					}
				});
		}
		else {
			this.application.unMask();
			this.RefreshPanel();
			this.CancelForm();
		}
	},

	DeleteSelectedRecords : function() {
		var theGrid = this.getTheGrid();
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		Ext.MessageBox.confirm("Confirm Deletion", "Are you sure you want to delete the selected Intelligent Data Entry records?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Deleting Selected Records");
				this.deleteRecord(theRecords);
			}
		}, this);
	},

	RefreshPanel : function() {
		this.application.loadMask("Please wait; Loading Panel Information");
		var theGrid = this.getTheGrid();
		var theStore = theGrid.getStore();
		theStore.load();
		theGrid.getSelectionModel().deselectAll();

		/* This store is required for Vital Signs Validation and must be updated in the application variable pool */
		var rootCtrlr = this.getController("NewPlan.NewPlanTab");
		rootCtrlr.InitIntelligentDataElementStore();

		var delBtn = this.getDeleteBtn();
		delBtn.setDisabled(true);
		delBtn.show();
		this.application.unMask();
	},

	deSelectGridRow : function(theRowModel, record, index, eOpts) {
	},
	
	selectGridRow : function(theRowModel, record, index, eOpts) {
		var records = theRowModel.getSelection();
		var delBtn = this.getDeleteBtn();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
		var theForm = this.getThePanel();
		theForm.loadRecord(record);
	}
 
});



Ext.define('COMS.controller.Management.Inventory', {
	extend : 'Ext.app.Controller',
	views : [ 'Management.Inventory' ],
	stores : ["InventoryConsumption", "InventoryList"],
	refs: [
		{ ref : "SelInventoryReport",    selector : "Inventory [name=\"selInventory\"]" },
		{ ref : "SelInventoryError",     selector : "Inventory [name=\"selInvError\"]" },
		{ ref : "InvReportTitle",        selector : "Inventory [name=\"InvReportTitle\"]" },
		{ ref : "InventoryGrid",         selector : "Inventory grid" }
	],
	InvStore : null,

	init: function() {
		this.getStore("InventoryList").on("load", this.StoreLoaded, this);

		this.control({
			"AdminTab Inventory" : {
				activate : this.LoadPanel
			},
			"Inventory [name=\"selInventory\"]" : {
				select : this.ShowReport
			},
			"Inventory button[text=\"Generate New Report\"]" : {
				click: this.GenerateReport
			}
		});
	},

	LoadPanel : function(theTab, e, opts) {
		this.application.loadMask("Please wait; Loading list of reports");
		this.InvStore = this.getStore("InventoryList");
		this.InvStore.load();
	},

	StoreLoaded : function(theStore, records, successful, eOpts ) {
		// var invRptTitle = this.getInvReportTitle().getEl();
		// invRptTitle.setHTML("");

		var errLabel = this.getSelInventoryError().getEl();
		if (records.length === 0) {
			errLabel.setHTML("No Inventory reports are available");
		}
		else {
			errLabel.setHTML("");
		}
		this.application.unMask();
	},

	setReportTitle : function(record) {
		var Title;
		if ("01/01/1900 12:00AM" == record.StartDate || "" == record.StartDate) {
			Title = "Inventory Report as of " + record.Date;
		}
		else {
			Title = "Inventory Report from " + record.StartDate + " - " + record.Date;
		}
		var invRptTitle = this.getInvReportTitle().getEl();
		invRptTitle.setHTML(Title);
	},

	ShowReport : function(combo, records, opts) {
		var theRecord = records[0].getData();
		delete combo.lastQuery;
		var theReportID = theRecord.ID;
		this.setReportTitle(theRecord);
		var theGrid = this.getInventoryGrid();
		var theStore = theGrid.getStore();
		theStore.proxy.url = "/Reports/Inventory/" + theReportID;
		theStore.load();
	},

	GenerateReport : function() {
		this.application.loadMask("Please wait; Generating new report");
		var lastRecDate = "", lastRec = null, numRecs = this.InvStore.getCount();
		if (numRecs > 0) {
			lastRec = this.InvStore.getAt(numRecs-1);
			lastRecDate = lastRec.getData().Date;
		}
		var CMD = "POST";
		var URL = Ext.URLs.Inventory;
		var errLabel = this.getSelInventoryError().getEl();
		errLabel.setHTML("");

		Ext.Ajax.request({
			url: URL,
			method : CMD,
			scope: this,
			jsonData : { "LastInvDate" : lastRecDate },
			success: function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (resp.success) {
					if (resp.msg) {
						var invRptTitle = this.getInvReportTitle().getEl();
						invRptTitle.setHTML(resp.msg);
					}
					else {
						this.setReportTitle({StartDate : resp.StartDate, Date : resp.Date});
						var theGrid = this.getInventoryGrid();
						var theStore = theGrid.getStore();
						theStore.proxy.url = "/Reports/Inventory/" + resp.ReportID;
						theStore.load();
						var theCombo = this.getSelInventoryReport();
						theStore = theCombo.getStore();
						theStore.load();
					}
				}
				this.application.unMask();
			},
			failure : function( response, opts ) {
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Delete Emetic Medication Record, Save Error - <br />" + resp.msg );
				this.application.unMask();
			}
		});
	}
});


Ext.define('COMS.controller.Management.Lockout', {
	extend : 'Ext.app.Controller',
	views : [ 'Management.Lockout' ],
	stores : ["Lockout"],
	refs: [
		{ ref : "LockoutGrid",           selector : "Lockout grid" },
		{ ref : "UnlockBtn",             selector : "Lockout button[text=\"Unlock\"]" }
	],

	init: function() {
		this.control({
			"Lockout " : {
				beforerender: this.RefreshPanel
			},
			"Lockout grid" : {
				select: this.selectGridRow
			},
			"Lockout button[text=\"Unlock\"]" : {
				click: this.UnlockSelectedRecords
			},
			"Lockout button[text=\"Refresh\"]" : {
				click: this.RefreshPanel
			}
		});
	},

	RefreshPanel : function() {
		this.application.loadMask("Please wait; Loading Current Lockouts");

		var theGrid = this.getLockoutGrid();
		var theStore = theGrid.getStore();
		theStore.load();

		var UnlockBtn = this.getUnlockBtn();
		UnlockBtn.setDisabled(true);

		this.application.unMask();
		return true;
	},

	selectGridRow : function(theRowModel, record, index, eOpts) {
		var records = theRowModel.getSelection();
		var UnlockBtn = this.getUnlockBtn();
		if (records.length <= 0) {
			UnlockBtn.setDisabled(true);
		}
		else {
			UnlockBtn.setDisabled(false);
		}
	},

	UnlockRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.get("id");
			var CMD = "PUT";
			var URL = Ext.URLs.Lockout + "/" + rID;
			Ext.Ajax.request({
				url: URL,
				method : CMD,
				scope: this,
				records : theRecords,
				success: function( response, opts ){
					this.UnlockRecord(opts.records);
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Delete Emetic Medication Record, Save Error - <br />" + resp.msg );
				}
			});
		}
		else {
			this.application.unMask();
			this.RefreshPanel();
		}
	},

	UnlockSelectedRecords : function() {
		var theGrid = this.getLockoutGrid();
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		Ext.MessageBox.confirm("Confirm Unlock", "Are you sure you want to unlock the selected sections?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Unlocking selected Records");
				this.UnlockRecord(theRecords);
			}
		}, this);
	}
});


Ext.define('COMS.controller.Management.Toxicity', {
	extend : 'Ext.app.Controller',
	views : [ 'Management.Toxicity' ],
	stores : [ 'Toxicity'],
	refs: [
		{ ref : "ToxicityInstructionGrid",           selector : "Toxicity grid" },
		{ ref : "ToxicityInstruction_Instruction",   selector : "Toxicity [name=\"Label\"]" },
		{ ref : "ToxicityInstruction_Documentation", selector : "Toxicity [name=\"Details\"]" },
		{ ref : "ToxicityInstruction_Grade",         selector : "Toxicity [name=\"Grade_Level\"]" },
		{ ref : "DeleteBtn",                         selector : "Toxicity button[text=\"Delete\"]" }

	],

	init: function() {
		this.control({
			"Toxicity" : {
				beforerender: this.RefreshPanel
			},
			"Toxicity grid" : {
					select: this.selectGridRow,
					deselect: this.deSelectGridRow
			},
			"Toxicity button[text=\"Cancel\"]" : {
				click: this.CancelForm
			},
			"Toxicity button[text=\"Save\"]" : {
				click: this.SaveForm
			},
			"Toxicity button[text=\"Refresh\"]" : {
				click: this.RefreshPanel
			},
			"Toxicity button[text=\"Delete\"]" : {
				click: this.DeleteSelectedRecords
			}
		});
	},


	RefreshPanel : function(panel) {
		this.application.loadMask("Please wait; Loading Toxicity Instructions");
		var theGrid = this.getToxicityInstructionGrid();
		var theStore = theGrid.getStore();
		theStore.load();

		var delBtn = this.getDeleteBtn();
		delBtn.setDisabled(true);
		delBtn.show();

		this.application.unMask();
		return true;
	},

	selectGridRow : function(theRowModel, record, index, eOpts) {
		var recID = record.get("ID");
		var Label = record.get("Label");
		var Details = record.get("Details");
		var Grade_Level = record.get("Grade_Level");

		Details = Ext.util.Format.htmlDecode(Details);

		this.CurrentToxicityInstructionRecordID = recID;
		this.CurrentToxicityInstruction = Label;

		var theInstructionField = this.getToxicityInstruction_Instruction();
		var theDocsField = this.getToxicityInstruction_Documentation();
		var theGradeField = this.getToxicityInstruction_Grade();

		theInstructionField.setValue(Label);
		theDocsField.setValue(Details);
		theGradeField.setValue(Grade_Level);

		var records = theRowModel.getSelection();
		var delBtn = this.getDeleteBtn();
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
	},

	deSelectGridRow : function(theRowModel, record, index, eOpts) {
	},



	deleteRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.get("ID");
			var CMD = "DELETE";
			var URL = Ext.URLs.ToxicityInstruction + "/" + rID;
			Ext.Ajax.request({
				url: URL,
				method : CMD,
				scope: this,
				records : theRecords,
				success: function( response, opts ){
					this.deleteRecord(opts.records);
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Delete Toxicity Record, Save Error - <br />" + resp.msg );
				}
			});
		}
		else {
			this.application.unMask();
			this.RefreshPanel();
			this.CancelForm();
		}
	},

	DeleteSelectedRecords : function() {
		var theGrid = this.getToxicityInstructionGrid();
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		Ext.MessageBox.confirm("Confirm Deletion", "Are you sure you want to delete the selected Toxicity records?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Deleting Selected Records");
				this.deleteRecord(theRecords);
			}
		}, this);
	},

	CancelForm : function(theBtn, theEvent, eOpts) {
		theBtn.up('form').getForm().reset();
	},

	SaveForm : function(theBtn, theEvent, eOpts) {
		var form = theBtn.up('form').getForm();
		var theData = form.getValues(false, false, false, true);

		if (form.isValid()) {
			var Label = theData.Label;
			var Details = Ext.util.Format.htmlEncode(theData.Details);
			var Grade_Level = theData.Grade_Level;
			var recID = this.CurrentToxicityInstructionRecordID;
			var URL = Ext.URLs.ToxicityInstruction;
			var CMD = "POST";
			if (recID && "" !== recID) {
				URL += "/" + recID;
				CMD = "PUT";
			}

			Ext.Ajax.request({
				url: URL,
				method: CMD,
				jsonData: {"Label" : Label, "Details" : Details, "Grade_Level" : Grade_Level },
				scope: this,
				theForm: form,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					this.CurrentToxicityInstructionRecordID = "";
					this.CurrentToxicityInstruction = "";
					opts.theForm.reset();
					if (!resp.success) {
						Ext.MessageBox.alert("Saving Error", "Site Configuration - Toxicity Instruction, Save Error - " + resp.msg );
					}
					else {
						var theGrid = this.getToxicityInstructionGrid();
						theGrid.getStore().load();
					}
				},
				failure: function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					this.CurrentToxicityInstructionRecordID = "";
					this.CurrentToxicityInstruction = "";
					opts.theForm.reset();
					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Toxicity Instruction, Save Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
		}
		else {
			var Msg = "";
			var Docs = "";
			if (!theData.Label) {
				Msg += "<li>Missing Toxicity Instruction</li>";
			}
			if (!theData.Grade_Level) {
				Msg += "<li>Missing Grade Information</li>";
			}
			if ("" === theData.Details) {
				Msg += "<li>Missing Details for Toxicity Instruction</li>";
			}
			if ("" !== Msg) {
				Ext.MessageBox.alert('Invalid', 'Please fix the following errors:<ul>' + Msg + '</ul>');
			}
		}
	}
});



Ext.define("COMS.controller.Messages.MessagesTab", {
	extend : "Ext.app.Controller",
	views : [ "Messages.MessagesTab" ],
// INLINE FOR TESTING: 	models : ["Messages"],
// INLINE FOR TESTING: 	stores : ["Messages"],
    init: function () {
        wccConsoleLog('Initialized Messages Tab Panel Controller!');
	}
});

Ext.define('COMS.controller.Navigation', {
	extend: 'Ext.app.Controller',
	// Views can be referenced here before they are declared in 
	// app.js, but they DO need to be referenced here 
	// before they are listed in the NavigationTabs Controller
	// else a "namespace is undefined" error occurs
	views: [
		'NavigationTabs',
		'NewPlan.NewPlanTab',
		'Authoring.AuthoringTab',
		'TemplateList.TemplateListTab',
		'ExistingPlan.ExistingPlanTab',
		'KnowledgeBase.KnowledgeBaseTab',
		'Messages.MessagesTab',
		'Management.AdminTab',
		'Testing.TestTab'
	],

	// For this controller the following is mostly for debugging
	// It should be removed prior to releasing to production
	init: function () {
		wccConsoleLog('Initialized Navigation Controller!');
		this.control({
			'NavigationTabs': {
				render: this.onPanelRendered,
				beforetabchange: this.tabChanged
			}
		});

		Ext.Ajax.request({
			scope : this,
			url: Ext.URLs.SiteConfig,
			success: function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (resp.success) {
					this.application.SiteConfig = {};
					this.application.SiteConfig.MedHold = resp.MedHold;
					this.application.SiteConfig.RoundingRule  = resp.RoundingRule;
				}
				else {
					alert("load Site Configuration - Error");
				}
			},
			failure : function( response, opts ) {
				alert("load Site Configuration - FAILED");
			}
		});
	},

	tabChanged: function (tabPanel, newCard, oldCard, eOpts) {
		var editTemplate = this.application.btnEditTemplatClicked;
		var newPlanCtl = this.getController("NewPlan.NewPlanTab");
		var authoringCtl = this.getController("Authoring.AuthoringTab");
		var adminCtl = this.getController("Management.AdminTab");

		var existingTemplate;
		var template = null;

		if ("Orders" === newCard.title) {
			var Orders = this.getController("Orders.OrdersTab");
			Orders.LoadOrdersStore(false);
		}

		if (!editTemplate && "Template Authoring" == newCard.title && "Start New Plan" == oldCard.title) {
			if (Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[0].getValue()) {
				template = newPlanCtl.getMyTemplates();
			} else if (Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[1].getValue()) {
				template = newPlanCtl.getTemplate();
			}

			if (null != template) {
				template.clearValue();
				newPlanCtl.getDiseaseStage().clearValue();

				newPlanCtl.collapseCombo(template, null);
				newPlanCtl.collapseCombo(newPlanCtl.getDiseaseStage(), null);
			}

			existingTemplate = Ext.ComponentQuery.query('AuthoringTab fieldcontainer radiofield[name=\"Authoring_SelectTemplateType\"]')[0];
			if (existingTemplate.getValue()) {
				authoringCtl.getTemplate().clearValue();
				authoringCtl.getExistingDiseaseStage().clearValue();

				authoringCtl.collapseCombo(authoringCtl.getTemplate(), null);
				authoringCtl.collapseCombo(authoringCtl.getExistingDiseaseStage(), null);
			}
		}

		if (editTemplate && "Start New Plan" == newCard.title && "Template Authoring" == oldCard.title) {
			this.application.btnEditTemplatClicked = false;
		}

		if (!editTemplate && "Admin" == newCard.title) {
			template = null;

			if (Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[0].getValue()) {
				template = newPlanCtl.getMyTemplates();
			} else if (Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[1].getValue()) {
				template = newPlanCtl.getTemplate();
			}

			if (null != template) {
				template.clearValue();
				newPlanCtl.getDiseaseStage().clearValue();

				newPlanCtl.collapseCombo(template, null);
				newPlanCtl.collapseCombo(newPlanCtl.getDiseaseStage(), null);
			}

			existingTemplate = Ext.ComponentQuery.query('AuthoringTab fieldcontainer radiofield[name=\"Authoring_SelectTemplateType\"]')[0];
			if (existingTemplate.getValue()) {
				authoringCtl.getTemplate().clearValue();
				authoringCtl.getExistingDiseaseStage().clearValue();

				authoringCtl.collapseCombo(authoringCtl.getTemplate(), null);
				authoringCtl.collapseCombo(authoringCtl.getExistingDiseaseStage(), null);
			}
			adminCtl.getTemplateGrid().getStore().removeAll();
		}
	},

	onPanelRendered: function () {
		wccConsoleLog('Main Navigation Tab Panel has been rendered');
	}
});

Ext.define("COMS.controller.NewPlan.AdverseEventsHistory", {
	"extend" : "Ext.app.Controller",
	"views" : [
		"NewPlan.AdverseEventsHistory"
	],
	"refs" : [
		{ "ref" : "AdverseEventsHistory", "selector" : "AdverseEventsHistory"}
	],
	"init" : function() {
		wccConsoleLog("Initialized AdverseEventsHistory Controller!");
		// --- // console.log("AdverseEventsHistory PatientSelected Event");
		
		this.application.on({ PatientSelected : this.loadAdverseEventsHistory1, scope : this });
		// --- // console.log("AdverseEventsHistory loadAdverseEventsHistory Event");
		this.application.on({ loadAdverseEventsHistory : this.loadAdverseEventsHistory2, scope : this });
		this.control({
		});
	},

loadAdverseEventsHistory1 : function(recs, eOpts) {
	Ext.loadAdverseEventsHistoryLaunchLoc = "onPatientSelected from AdverseEventsHistory Controller";
	this.loadAdverseEventsHistory(recs, eOpts);
},

loadAdverseEventsHistory2 : function(recs, eOpts) {
	Ext.loadAdverseEventsHistoryLaunchLoc = "onloadAdverseEventsHistory from AdverseEventsHistory Controller";
	this.loadAdverseEventsHistory(recs, eOpts);
},

aSorter : function(a, b) {
		a = new Date(a.date);
		b = new Date(b.date);
		return a>b ? -1 : a<b ? 1 : 0;
},

MergeAssessmentAndReactionLists : function(assessments, reactions) {
	var today = Ext.util.Format.date(new Date());
	var i, j, dlLen, len, rec;
	var list = [];
	var x, y, data = [], obj;
	var link, DetailsList;
	var totalEvents2Record = 0;
	var numAlert = 0;
	len = assessments.length;
	for (i = 0; i < len; i++) {
		rec = assessments[i];
		if (rec.tdate == today) {
			this.application.Patient.AssessmentRecordID = rec.id;
		}

		if ("No Adverse Reaction" !== rec.Label) {
			totalEvents2Record++;
			numAlert += rec.Alert;
			obj = { "type" : "Assessment", "date" : rec.tDate, "Link" : rec };
			list.push(obj);
		}
	}

	len = reactions.length;
	for (i = 0; i < len; i++) {
		link = reactions[i].InfuseReactLink;
		DetailsList = link.Details;
		dlLen = DetailsList.length;
		PushData = true;
		if (link.date == today) {
			this.application.Patient.InfuseReactionRecordID = link.id;
		}

		for (j = 0; j < dlLen; j++) {
			numAlert += DetailsList[j].alertEvent;
			if ("No Adverse Reaction" == DetailsList[j].fieldLabel) {
				PushData = false;
			}
			else {
				totalEvents2Record++;
			}
		}
		if (PushData) {
			obj = { "type" : "Reaction", "date" : link.date, "Link" : link };
			list.push(obj);
		}
	}

	list.sort(function(a, b) {
		a = new Date(a.date);
		b = new Date(b.date);
		return a>b ? -1 : a<b ? 1 : 0;
	});
	data = {numAlerts : numAlert, totEvents : totalEvents2Record, list: list };
	return data;
},

	loadAdverseEventsHistory : function(recs, eOpts) {
		// console.log("Loading Adverse Events History from - " + Ext.loadAdverseEventsHistoryLaunchLoc);
		Ext.loadAdverseEventsHistoryLaunchLoc = "";
		var AdverseEventsHistoryPanel = this.getAdverseEventsHistory();

		AdverseEventsHistoryPanel.setTitle("Adverse Events History (No Adverse Events Recorded)");
		AdverseEventsHistoryPanel.update({});
		
		if ("" !== this.application.Patient.PAT_ID) {
			var URL = Ext.URLs.AdverseEventsHistory + "/" + this.application.Patient.PAT_ID;
			this.application.loadMask("Loading Adverse Events History Information...");

			Ext.Ajax.request({
				scope : this,
				url: URL,
				success : function( response, opts ){
					this.application.unMask();
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );

					if (resp.success) {
						if (resp.records) {
							var i, len, rec, alertText = "";
							this.application.Patient.Assessments = resp.records.Assessments;
							this.application.Patient.Reactions = resp.records.ReactAssessments;
							this.application.Patient.TotalAdverseEvents = resp.totalEvents;
							var data = this.MergeAssessmentAndReactionLists(resp.records.Assessments, resp.records.ReactAssessments);
							AdverseEventsHistoryPanel.update(data.list);
							if (data.numAlerts > 0) {
								alertText = " - <span style=\"color:red;\">" + data.numAlerts + " flagged to trigger an Alert</span>";
							}
							AdverseEventsHistoryPanel.setTitle("Adverse Events History - (" + data.totEvents + " Adverse Events Recorded" + alertText + ")");
						}
					}
					else {
						alert("load AdverseEventsHistory - Error");
					}
				},
				failure : function( response, opts ) {
					this.application.unMask();
					alert("AdverseEventsHistory Data Load Failed...");
				}
			});
		}
	}
});

Ext.define("COMS.controller.NewPlan.AmputationSelection", {
	"extend" : "Ext.app.Controller",
	"views" : [
		"NewPlan.AmputationSelection"
	],
	"refs" : [
		{ ref : "UpperLeftArm", selector: "[name=\"Upper Left Arm\"]"},
		{ ref : "LowerLeftArm", selector: "[name=\"Lower Left Arm\"]"},
		{ ref : "LeftHand", selector: "[name=\"Left Hand and Fingers\"]"},

		{ ref : "LeftThigh", selector: "[name=\"Left Thigh\"]"},
		{ ref : "LowerLeftLeg", selector: "[name=\"Lower Left Leg\"]"},
		{ ref : "LeftFoot", selector: "[name=\"Left Foot\"]"},

		{ ref : "UpperRightArm", selector: "[name=\"Upper Right Arm\"]"},
		{ ref : "LowerRightArm", selector: "[name=\"Lower Right Arm\"]"},
		{ ref : "RightHand", selector: "[name=\"Right Hand and Fingers\"]"},

		{ ref : "RightThigh", selector: "[name=\"Right Thigh\"]"},
		{ ref : "LowerRightLeg", selector: "[name=\"Lower Right Leg\"]"},
		{ ref : "RightFoot", selector: "[name=\"Right Foot\"]"}
	],
	"init" : function() {
		this.control({
			"checkbox" : {
				"change" : this.itemChecked
			}
		});
	},

	"resetField" : function(fldObj, state) {
		if (state) {
			fldObj.disable();
		}
		else {
			fldObj.enable();
		}
		fldObj.setValue(state);
	},

	"renderAS" : function() {
		var Amputations = this.application.Patient.Amputations;
		var ItemInWindow = Ext.ComponentQuery.query("AmputationSelection");

		var i, a, len = Amputations.length, theCkBox;
		for (i = 0; i < len; i++) {
			a = Amputations[i].description;
			switch(a) {
				case "Upper Left Arm":
					theCkBox = this.getUpperLeftArm();
					break;
				case "Lower Left Arm":
					theCkBox = this.getLowerLeftArm();
					break;
				case "Left Hand and Fingers":
					theCkBox = this.getLeftHand();
					break;
				case "Upper Right Arm":
					theCkBox = this.getUpperRightArm();
					break;
				case "Lower Right Arm":
					theCkBox = this.getLowerRightArm();
					break;
				case "Right Hand and Fingers":
					theCkBox = this.getRightHand();
					break;
				case "Left Thigh":
					theCkBox = this.getLeftThigh();
					break;
				case "Lower Left Leg":
					theCkBox = this.getLowerLeftLeg();
					break;
				case "Left Foot":
					theCkBox = this.getLeftFoot();
					break;
				case "Right Thigh":
					theCkBox = this.getRightThigh();
					break;
				case "Lower Right Leg":
					theCkBox = this.getLowerRightLeg();
					break;
				case "Right Foot":
					theCkBox = this.getRightFoot();
					break;
			}
			if ( theCkBox ) {
				theCkBox.setValue(true);
			}
		}
	},

	"itemChecked" : function(ckBox, nValue, oValue, opts) {
		var newState;
		if (nValue) {
			newState = true;
		}
		var theLabel = ckBox.name;
		var bodyPart1, bodyPart2;
		switch (theLabel) {
			case "Upper Left Arm":
				this.resetField(this.getLowerLeftArm(), nValue);
				this.resetField(this.getLeftHand(), nValue);
				break;

			case "Upper Right Arm":
				this.resetField(this.getLowerRightArm(), nValue);
				this.resetField(this.getRightHand(), nValue);
				break;

			case "Lower Left Arm":
				this.resetField(this.getLeftHand(), nValue);
				break;
			case "Lower Right Arm":
				this.resetField(this.getRightHand(), nValue);
				break;

			case "Left Thigh":
				this.resetField(this.getLowerLeftLeg(), nValue);
				this.resetField(this.getLeftFoot(), nValue);
				break;
			case "Right Thigh":
				this.resetField(this.getLowerRightLeg(), nValue);
				this.resetField(this.getRightFoot(), nValue);
				break;

			case "Lower Left Leg":
				this.resetField(this.getLeftFoot(), nValue);
				break;
			case "Lower Right Leg":
				this.resetField(this.getRightFoot(), nValue);
				break;
		}
	}
});

Ext.define("COMS.controller.NewPlan.AskQues2ApplyTemplate", {
	extend : "Ext.app.Controller",
	"views" : [
		"NewPlan.AskQues2ApplyTemplate"
		],
	refs: [ 
		{ ref: "TypeOfTrial",					selector: "AskQues2ApplyTemplate textfield[name=\"TypeOfTrial\"]"},
		{ ref: "Goal",						selector: "AskQues2ApplyTemplate form radiogroup[name=\"goalRadio\"]"},
		{ ref: "AmputeeType",					selector: "AskQues2ApplyTemplate form AmputationSelection"},
		{ ref: "AmputeeYes",					selector: "AskQues2ApplyTemplate form radiogroup[name=\"amputeeRadio\"] radio[boxLabel=\"Yes\"]"},
		{ ref: "AmputeeNo",					selector: "AskQues2ApplyTemplate form radiogroup[name=\"amputeeRadio\"] radio[boxLabel=\"No\"]"},
		{ ref: "CTOS_Tab",					selector: "NewPlan.CTOS form[name:\"NewPlan_CTOS_Form\"]"}
	],
	init: function() {
		// this.application.btnEditTemplatClicked=false;
		this.control({
			"AskQues2ApplyTemplate" : {
				"show" : this.ShowWindow,
				"scope" : this
			},
			"AskQues2ApplyTemplate button[text=\"Apply Template\"]": {
				click: this.ApplyTemplate
			},
			"AskQues2ApplyTemplate button[text=\"Cancel\"]": {
				click: this.cancelApply
			},
			"AskQues2ApplyTemplate radiogroup[name=\"ConcurRadTherapyRadio\"]":{
				change : this.ConcurRadTherapySelected
			},
			"AskQues2ApplyTemplate radiogroup[name=\"clinicalTrialRadio\"]":{
				change : this.ClinicalTrialTypeSelected
			},
			"AskQues2ApplyTemplate radiogroup[name=\"amputeeRadio\"]":{
				change : this.AmputeeSelected
			}
		});
	},
    cancelApply: function(button){
		button.up("window").close();
    },

	ShowWindow : function() {
		if (this.application.Patient.Amputations && this.application.Patient.Amputations.length > 0) {
			this.getAmputeeYes().setValue(true);
			this.AmputeeSelected("", { Amputee : true });
			var AmpuSelCtl = this.getController("NewPlan.AmputationSelection");
			AmpuSelCtl.renderAS();
		}
		else {
			this.getAmputeeNo().setValue(true);
			this.AmputeeSelected("", { Amputee : false });
		}
	},

    AmputeeSelected: function (rbtn, newValue, oldValue, eOpts ) {
        wccConsoleLog("User has selected Amputee Type");

        if (true === newValue.Amputee) {
            this.getAmputeeType().show();
        }
        else {
            this.getAmputeeType().hide();
        }
    },

	ConcurRadTherapySelected: function (rbtn, newValue, oldValue, eOpts ) {

	},

    ClinicalTrialTypeSelected: function (rbtn, newValue, oldValue, eOpts ) {
        wccConsoleLog("User has selected Clinical Trial Type");

        if (true === newValue.ClinicalTrial) {
            this.getTypeOfTrial().show();
        }
        else {
            this.getTypeOfTrial().hide();
        }
    },


	// Save button for the AskQues2ApplyTemplate Widget. This widget is for applying a new template to a patient
    ApplyTemplate: function(button){
        var win = button.up('window');
        var form = win.down('form');
        var values = form.getValues();
        var amputations = [];

        if('' === values.startdate){
            Ext.MessageBox.alert('Invalid', 'You must select a start date.');
            return;
        }

        if(null == values.BSA_FormulaWeight){
            Ext.MessageBox.alert('Invalid', 'You must select a Weight Formula.');
            return;
        }

        if(null == values.BSA_Formula){
            Ext.MessageBox.alert('Invalid', 'You must select a BSA Formula.');
            return;
        }

        if(null == values.Goal){
            Ext.MessageBox.alert('Invalid', 'You must select a Goal.');
            return;
        }

        if(null == values.PerfStatus){
            Ext.MessageBox.alert('Invalid', 'You must select a Performance Status.');
            return;
        }

        if(null == values.ClinicalTrial){
            Ext.MessageBox.alert('Invalid', 'Please select either Yes to specify a type of clinical trial or select No.');
            return;
        }

        if(true === values.ClincalTrial && '' === values.TypeOfTrial){
            Ext.MessageBox.alert('Invalid', 'Please enter the type of Clinical Trial.');
            return;
        }

        if(true === values.Amputee){
            var amputationsCB = Ext.ComponentQuery.query('AmputationSelection checkboxgroup[name=\"amputations\"]')[0];
            var checkedVals = amputationsCB.getChecked();
			var i;

            if(0 === checkedVals.length){
                Ext.MessageBox.alert('Invalid', 'You must select an Amputation Type.');
                return;
            }

            for(i=0;i<checkedVals.length;i++){
                amputations.push(checkedVals[i].boxLabel);
            }
        }

        var startDate = Ext.Date.dateFormat(new Date(values.startdate), 'Y-m-j');		// MWB 15 Feb 2012 - Added missing ";" as per JSLint
        var today = Ext.Date.dateFormat(new Date(), 'Y-m-j');

		// Is this template pending approval?
		var thePatient = this.application.Patient, 
			TemplatePending, 
			ExistingRecordID, 
			ApprovedByUser, 
			OriginalAppliedDate, 
			PAT_ID,
			theRecord;
		if (thePatient.CurrentTemplatesApplied2Patient && thePatient.CurrentTemplatesApplied2Patient.length >= 1) {
			TemplatePending = thePatient.CurrentTemplatesApplied2Patient[0];
			ExistingRecordID = TemplatePending.id;
			ApprovedByUser = TemplatePending.ApprovedByUser;
			OriginalAppliedDate = TemplatePending.DateApplied;
			PAT_ID = thePatient.PAT_ID;
			if ("" === ApprovedByUser) {
				today = OriginalAppliedDate;
			}
		}





		var TemplateInfo = this.application.CurrentTemplate.data;
		var MaxCycles = TemplateInfo.CourseNumMax;
		var CycleLength = TemplateInfo.CycleLength; // (need to convert to days... 8 == weeks...
		var CycleLengthUnit = TemplateInfo.CycleLengthUnit[0].name;
		switch (CycleLengthUnit) {
			case "Weeks":
				CycleLength = CycleLength * 7;
				break;
			case "Months" :
				CycleLength = CycleLength * 30;
				break;
			case "Years" :
				CycleLength = CycleLength * 365;
				break;
		}
		var RegimenDuration = CycleLength * MaxCycles;
		var future;

		win.close();
		Ext.ComponentQuery.query("form[name=\"NewPlan_CTOS_Form\"]")[0].setLoading("Applying template, please wait...", false);
		future = Ext.Date.dateFormat(Ext.Date.add(new Date(values.startdate), Ext.Date.DAY, RegimenDuration),'Y-m-j');
		var newCtl = this.getController("NewPlan.NewPlanTab");

	theRecord = {
			PatientID: thePatient.id,
			DateApplied : today,
			DateStarted : startDate,
			DateEnded : future,
			Goal : values.Goal,
			ConcurRadTherapy : values.ConcurRadTherapy,
			ClinicalTrial: values.TypeOfTrial,
			PerformanceStatus: values.PerfStatus,
			WeightFormula: values.BSA_FormulaWeight,
			BSAFormula: values.BSA_Formula,
			BSA_Method: values.BSA_Formula,
			Amputations: amputations
		};

		if (thePatient.TemplateID) {
			theRecord.TemplateID = thePatient.TemplateID;
		}
		else {
			theRecord.TemplateID = thePatient.Template.id;
		}

		if (ExistingRecordID) {
			theRecord.id = ExistingRecordID;
		}
		var patientTemplate = Ext.create(Ext.COMSModels.PatientTemplates, theRecord);
		patientTemplate.save({
			scope: this,
			success: function (data) {
				// wccConsoleLog("Apply Template SUCCESS" );
				// Ext.MessageBox.hide();
				Ext.ComponentQuery.query("form[name=\"NewPlan_CTOS_Form\"]")[0].setLoading(false, false);
				var thisCtl = this.getController("NewPlan.NewPlanTab");
				var PatientSelection = thisCtl.getPatientSelectionPanel();
				PatientSelection.collapse();
				thisCtl.resetPanels(thisCtl, "", "", "");

				/**********
				 *	data.data = {
				 *	Amputations :  []
				 *	BSAFormula :  "DuBois"
				 *	ClinicalTrial :  ""
				 *	DateApplied :  "2012-05-25"
				 *	DateEnded :  "2012-11-9"
				 *	DateStarted :  "2012-05-25"
				 *	Goal :  "Curative"
				 *	PatientID :  "B1781155-AAA6-E111-903E-000C2935B86F"
				 *	PerformanceStatus :  "72DA9443-FF74-E111-B684-000C2935B86F"
				 *	TemplateID :  "2C987ADB-F6A0-E111-903E-000C2935B86F"
				 *	WeightFormula :  "Actual Weight"
				 *	id :  "519C8379-AAA6-E111-903E-000C2935B86F" <-- TreatmentID for linking all records together
				 *	}
				 ***********/
				thisCtl.PatientModelLoadSQLPostTemplateApplied(data.data.PatientID, data.data.id);
				if ("1" == SessionPreceptee) {
					Ext.MessageBox.alert('Success', 'Template applied to Patient - Pending Cosigner Approval');
				}
				else {
					Ext.MessageBox.alert('Success', 'Template applied to Patient ');
				}
			},
			failure : function(record, op) {
				wccConsoleLog("Apply Template Failed");
				// Ext.MessageBox.hide();
				Ext.ComponentQuery.query("form[name=\"NewPlan_CTOS_Form\"]")[0].setLoading(false, false);
				Ext.MessageBox.alert('Failure', 'Template not applied to Patient. <br />' + op.error);     // op.request.scope.reader.jsonData["frameworkErr"]);
			}
		});

	}
});

Ext.define("COMS.controller.NewPlan.CTOS.ChronologyTab", {
	extend: "Ext.app.Controller",

	stores: [
	],

	views: [
	    "NewPlan.CTOS.Chronology"
	],

	refs: [
	    {
		    ref: "Chronology",
			selector: "Chronology"
	    },
	    {
		    ref: "ChronologyOverview",
			selector: "ChronologyOverview"
	    },
	    {
		    ref: "ChronologyBody",
			selector: "ChronologyBody"
	    }
	],


	// Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Chronology Tab Controller!");

		this.application.on( { PatientSelected : this.PatientSelected, scope : this } );

		this.control({
			"Chronology" : {
				beforeactivate : this.BeforeTabActivated,
				render : this.TabRendered
			}
		});
	},

	TabContentsCleared : true,



	DeliveredTemplate : function() {
		return (new Ext.XTemplate(

		"<table border=\"1\" class=\"Chronology InformationTable\">",
			"<colgroup width=30%></colgroup>",
			"<colgroup width=70%></colgroup>",

/************************* PRE-THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(PreTherapy)\">",
				"<tr class=\"TherapyType\">",
					"<th colspan=\"2\">Pre Therapy</th>",
				"</tr>",
				"<tr class=\"header\">",
					"<th>Drug</th>",
					"<th>Dosing</th>",
				"</tr>",

				"<tpl for=\"PreTherapy\">",
					"<tr>",
						"<th>",
							"{Med}",
						"</th>",
						"<td>",
							"{Dose1} {DoseUnits1}",
							"<tpl if=\"this.hasData(BSA_Dose1)\">",
								"({BSA_Dose1} {DoseUnits1})",
								"</tpl>",
								"&nbsp;-&nbsp;{AdminMethod1}",

								"<tpl if=\"this.ShowFluid(AdminMethod1, FluidType1, FluidVol1, FlowRate1)\">",
									"<br />{FluidType1} {FluidVol1} ml - {FlowRate1} ml/hr (Duration: ",
										"{[this.CalcInfusionTime(values.FluidVol1, values.FlowRate1)]})",
								"</tpl>",
						"</td>",
					"</tr>",
				"</tpl>",		// END PreTherapy Loop TPL
			"</tpl>",		// END IF Has PreTherapy TPL



/************************* THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(Therapy)\">",
				"<tr><th colspan=\"2\" class=\"TherapySpacer\">&nbsp;</th></tr>",
				"<tr class=\"TherapyType\">",
					"<th colspan=\"2\">Therapy</th>",
				"</tr>",
				"<tr class=\"header\">",
					"<th>Drug</th>",
					"<th>Dosing</th>",
				"</tr>",

				"<tpl for=\"Therapy\">",
					"<tr>",
						"<th>",
							"{Med}",
						"</th>",
						"<td>",
							"{Dose} {DoseUnits}",
							"<tpl if=\"this.hasData(BSA_Dose)\">",
								"({BSA_Dose} {DoseUnits})",
								"</tpl>",
								"&nbsp;-&nbsp;{AdminMethod}",

								"<tpl if=\"this.ShowFluid(AdminMethod, FluidType, FluidVol, FlowRate)\">",
									"<br />{FluidType} {FluidVol} ml - {FlowRate} ml/hr (Duration: ",
										"{[this.CalcInfusionTime(values.FluidVol, values.FlowRate)]})",
								"</tpl>",
						"</td>",
					"</tr>",

				"</tpl>",		// END Therapy Loop TPL
				"<tr><th colspan=\"2\" class=\"TherapySpacer\">&nbsp;</th></tr>",
			"</tpl>",		// END IF Has Therapy TPL

/************************* POST-THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(PostTherapy)\">",
				"<tr class=\"TherapyType\">",
					"<th colspan=\"2\">Post Therapy</th>",
				"</tr>",
				"<tr class=\"header\">",
					"<th>Drug</th>",
					"<th>Dosing</th>",
				"</tr>",
				"<tpl for=\"PostTherapy\">",
					"<tr>",
						"<th>",
							"{Med}",
						"</th>",
						"<td>",
							"{Dose1} {DoseUnits1}",
							"<tpl if=\"this.hasData(BSA_Dose1)\">",
								"({BSA_Dose1} {DoseUnits1})",
								"</tpl>",
								"&nbsp;-&nbsp;{AdminMethod1}",

								"<tpl if=\"this.ShowFluid(AdminMethod1, FluidType1, FluidVol1, FlowRate1)\">",
									"<br />{FluidType1} {FluidVol1} ml - {FlowRate1} ml/hr (Duration: ",
										"{[this.CalcInfusionTime(values.FluidVol1, values.FlowRate1)]})",
								"</tpl>",
						"</td>",
					"</tr>",
				"</tpl>",		// END PostTherapy Loop TPL
			"</tpl>",		// END IF Has PostTherapy TPL
/************************* END POST-THERAPY SECTION *************************************************/
			"</table>",
			{
					// XTemplate Configuration
				disableFormats: true,
				pIndex : 0,
				curCycle : 0,
				curDay : 0,
				hasData: function (instr) {
					return ("" !== instr);
				},
				hasNOData: function (instr) {
					return ("" === instr);
				},
				hasDrug : function (therapy) {
					if (therapy) {
						return (null !== therapy[0].Med);
					}
					return (false);
				},

				SaveIdx : function (xindex, Cycle, Day, values) {
					this.pIndex = xindex;
					this.curCycle = Cycle;
					this.curDay = Day;
				},

				ShowFluid : function(AdminMethod, FluidType, FluidVol, FlowRate) {
					var lineNo = 0;
					var a2, flg = true;
					try {
						if ("" === AdminMethod) {
							return false;
						}
						if ("IV" !== AdminMethod.substr(0,2)) {
							return false;
						}
						a2 = FluidType + FluidVol + FlowRate;
						try {
							flg = ("" !== a2.trim());							
						}
						catch (e) {
						}
						return( flg );
					}
					catch (err) {
						return( false );
					}
				},

				CalcInfusionTime : function (vol, rate) {
					return (Ext.CalcInfusionTime(vol, rate, true));
				},

				CalcStyle : function ( current ) {
					if (1 === current.Cycle && 1 === current.Day) {
						return "style=\"display:block;\"";
					}
					return ("style=\"display:hidden;\"");
				},

				CalcName : function ( current ) {
					return ("Cycle_" + current.Cycle + "_Day_" + current.Day);
				},
				CalcAnchor : function ( type, idx, current, parent ) {
					// Anchor onClick handler located in the OEM.js controller
					// var Cycle = parent[idx-1].Cycle;
					var AdminDate = parent.AdminDate;
					var today = new Date();
					var aDate = new Date(AdminDate);
					if (aDate < today) {
						return ("");	// No Edit link if the Admin Date is before today
					}

					var Cycle = this.curCycle;
					// var Day = parent[idx-1].Day;
					var Day = this.curDay;
					var Type = type;
					var TypeIdx = idx;
					var pIndex = this.pIndex;

					var buf = "href=\"#Cycle_" + Cycle + "_Day_" + Day + "_Med_" + idx + "\" " + 
						"name=\"Edit_" + Type + "_" + Cycle + "_" + Day + "_" + idx + "\" " + 
						"cycle=\"" + Cycle + "\" " + 
						"day=\"" + Day + "\" " + 
						"type=\"" + Type + "\" " + 
						"medidx=\"" + idx + "\" " + 
						"typeidx=\"" + pIndex + "\"" ;
					return "<br /><a class=\"EditOEM_Record\" " + buf + ">Edit</a>";
				},
				CalcEditAdminDate : function( current ) {
					var AdminDate = current.AdminDate;
					var today = new Date();
					var aDate = new Date(AdminDate);
					if (aDate < today) {
						return ("");	// No Edit link if the Admin Date is before today
					}
					var buf = "";
					return " - <button class=\"anchor EditOEM_Record\" " + buf + ">Change Admin Date</button>";
				}
			}

		)
		);
	},

	OrderTemplate : function() {
		return (new Ext.XTemplate(

		"<table border=\"1\" class=\"Chronology InformationTable\">",
			"<colgroup width=30%></colgroup>",
			"<colgroup width=50%></colgroup>",
			"<colgroup width=20%></colgroup>",

/************************* PRE-THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(PreTherapy)\">",
				"<tr class=\"TherapyType\">",
					"<th colspan=\"3\">Pre Therapy - <span>{PreTherapyInstr}</span></th>",
				"</tr>",
				"<tr class=\"header\">",
					"<th>Drug</th><th>Dosing</th><th>Administration Time</th>",
				"</tr>",

				"<tpl for=\"PreTherapy\">",
					"<tr>",
						"<th>",
							"{Med}",
						"</th>",
						"<td>",
							"{Dose1} {DoseUnits1}",
							"<tpl if=\"this.hasData(BSA_Dose1)\">",
								"({BSA_Dose1} {DoseUnits1})",
								"</tpl>",
								"&nbsp;-&nbsp;{AdminMethod1}",

								"<tpl if=\"this.ShowFluid(AdminMethod1, FluidType1, FluidVol1, FlowRate1)\">",
									"<br />{FluidType1} {FluidVol1} ml - {FlowRate1} ml/hr (Duration: ",
										"{[this.CalcInfusionTime(values.FluidVol1, values.FlowRate1)]})",
								"</tpl>",

								"<tpl if=\"this.hasData(Dose2)\">",
									"<div class=\"OptionalMarker\">",
									"	<span>",
									"		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
									"	</span>",
									"&nbsp;OR &nbsp;",
									"	<span>",
									"		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
									"	</span>",
									"</div>",

									"{Dose2} {DoseUnits2}",
										"<tpl if=\"this.hasData(BSA_Dose2)\">",
											"({BSA_Dose2} {DoseUnits2})",
										"</tpl>",
									"&nbsp;-&nbsp;{AdminMethod2}",
									"<tpl if=\"this.ShowFluid(AdminMethod2, FluidType2, FluidVol2, FlowRate2)\">",
											"<br />{FluidType2} {FluidVol2} ml - {FlowRate2} ml/hr (Duration: ",
											"{[this.CalcInfusionTime(values.FluidVol2, values.FlowRate2)]})",
									"</tpl>",	
								"</tpl>",
						"</td>",
						"<td>{AdminTime}</td>",
					"</tr>",

					"<tpl if=\"this.hasData(Instructions)\">",
						"<tr class=\"Therapy\"><td colspan=\"3\">{Instructions}</td></tr>",
					"</tpl>",
				"</tpl>",		// END PreTherapy Loop TPL
			"</tpl>",		// END IF Has PreTherapy TPL







/************************* THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(Therapy)\">",
				"<tr><th colspan=\"3\" class=\"TherapySpacer\">&nbsp;</th></tr>",
				"<tr class=\"TherapyType\">",
					"<th colspan=\"3\">Therapy - <span>{TherapyInstr}</span></th>",
				"</tr>",
				"<tr class=\"header\">",
					"<th>Drug</th>",
					"<th>Dosing</th>",
					"<th>Administration Time</th>",
				"</tr>",

				"<tpl for=\"Therapy\">",
					"<tr>",
						"<th>",
							"{Med}",
						"</th>",
						"<td>",
							"{Dose} {DoseUnits}",
							"<tpl if=\"this.hasData(BSA_Dose)\">",
								"({BSA_Dose} {DoseUnits})",
								"</tpl>",
								"&nbsp;-&nbsp;{AdminMethod}",

								"<tpl if=\"this.ShowFluid(AdminMethod, FluidType, FluidVol, FlowRate)\">",
									"<br />{FluidType} {FluidVol} ml - {FlowRate} ml/hr (Duration: ",
										"{[this.CalcInfusionTime(values.FluidVol, values.FlowRate)]})",
								"</tpl>",
						"</td>",
						"<td>{AdminTime}</td>",
					"</tr>",

					"<tpl if=\"this.hasData(Instructions)\">",
						"<tr class=\"Therapy\"><td colspan=\"3\">{Instructions}</td></tr>",
					"</tpl>",
				"</tpl>",		// END Therapy Loop TPL
				"<tr><th colspan=\"3\" class=\"TherapySpacer\">&nbsp;</th></tr>",
			"</tpl>",		// END IF Has Therapy TPL

/************************* POST-THERAPY SECTION *************************************************/
			"<tpl if=\"this.hasDrug(PostTherapy)\">",
				"<tr class=\"TherapyType\">",
					"<th colspan=\"3\">Post Therapy - <span>{PostTherapyInstr}</span></th>",
				"</tr>",
				"<tr class=\"header\">",
					"<th>Drug</th><th>Dosing</th><th>Administration Time</th>",
				"</tr>",

				"<tpl for=\"PostTherapy\">",
					"<tr>",
						"<th>",
							"{Med}",
						"</th>",
						"<td>",
							"{Dose1} {DoseUnits1}",
							"<tpl if=\"this.hasData(BSA_Dose1)\">",
								"({BSA_Dose1} {DoseUnits1})",
								"</tpl>",
								"&nbsp;-&nbsp;{AdminMethod1}",

								"<tpl if=\"this.ShowFluid(AdminMethod1, FluidType1, FluidVol1, FlowRate1)\">",
									"<br />{FluidType1} {FluidVol1} ml - {FlowRate1} ml/hr (Duration: ",
										"{[this.CalcInfusionTime(values.FluidVol1, values.FlowRate1)]})",
								"</tpl>",

								"<tpl if=\"this.hasData(Dose2)\">",
									"<div class=\"OptionalMarker\">",
									"	<span>",
									"		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
									"	</span>",
									"&nbsp;OR &nbsp;",
									"	<span>",
									"		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
									"	</span>",
									"</div>",

									"{Dose2} {DoseUnits2}",
										"<tpl if=\"this.hasData(BSA_Dose2)\">",
											"({BSA_Dose2} {DoseUnits2})",
										"</tpl>",
									"&nbsp;-&nbsp;{AdminMethod2}",
									"<tpl if=\"this.ShowFluid(AdminMethod2, FluidType2, FluidVol2, FlowRate2)\">",
											"<br />{FluidType2} {FluidVol2} ml - {FlowRate2} ml/hr (Duration: ",
											"{[this.CalcInfusionTime(values.FluidVol2, values.FlowRate2)]})",
									"</tpl>",	
								"</tpl>",
						"</td>",
						"<td>{AdminTime}</td>",
					"</tr>",

					"<tpl if=\"this.hasData(Instructions)\">",
						"<tr class=\"Therapy\"><td colspan=\"3\">{Instructions}</td></tr>",
					"</tpl>",
				"</tpl>",		// END PostTherapy Loop TPL
			"</tpl>",		// END IF Has PostTherapy TPL
/************************* END POST-THERAPY SECTION *************************************************/







			"</table>",
			{
					// XTemplate Configuration
				disableFormats: true,
				pIndex : 0,
				curCycle : 0,
				curDay : 0,
				hasData: function (instr) {
					return ("" !== instr);
				},
				hasNOData: function (instr) {
					return ("" === instr);
				},
				hasDrug : function (therapy) {
					if (therapy) {
						return (null !== therapy[0].Med);
					}
					return (false);
				},

				SaveIdx : function (xindex, Cycle, Day, values) {
					this.pIndex = xindex;
					this.curCycle = Cycle;
					this.curDay = Day;
				},

				ShowFluid : function(AdminMethod, FluidType, FluidVol, FlowRate) {
					var lineNo = 0;
					var a2, flg = true;
					try {
						if ("" === AdminMethod) {
							return false;
						}
						if ("IV" !== AdminMethod.substr(0,2)) {
							return false;
						}
						a2 = FluidType + FluidVol + FlowRate;
						try {
							flg = ("" !== a2.trim());							
						}
						catch (e) {
						}
						return( flg );
					}
					catch (err) {
						return( false );
					}
				},

				CalcInfusionTime : function (vol, rate) {
					return (Ext.CalcInfusionTime(vol, rate, true));
				},

				CalcStyle : function ( current ) {
					if (1 === current.Cycle && 1 === current.Day) {
						return "style=\"display:block;\"";
					}
					return ("style=\"display:hidden;\"");
				},

				CalcName : function ( current ) {
					return ("Cycle_" + current.Cycle + "_Day_" + current.Day);
				},
				CalcAnchor : function ( type, idx, current, parent ) {
					// Anchor onClick handler located in the OEM.js controller
					// var Cycle = parent[idx-1].Cycle;
					var AdminDate = parent.AdminDate;
					var today = new Date();
					var aDate = new Date(AdminDate);
					if (aDate < today) {
						return ("");	// No Edit link if the Admin Date is before today
					}

					var Cycle = this.curCycle;
					// var Day = parent[idx-1].Day;
					var Day = this.curDay;
					var Type = type;
					var TypeIdx = idx;
					var pIndex = this.pIndex;

					var buf = "href=\"#Cycle_" + Cycle + "_Day_" + Day + "_Med_" + idx + "\" " + 
						"name=\"Edit_" + Type + "_" + Cycle + "_" + Day + "_" + idx + "\" " + 
						"cycle=\"" + Cycle + "\" " + 
						"day=\"" + Day + "\" " + 
						"type=\"" + Type + "\" " + 
						"medidx=\"" + idx + "\" " + 
						"typeidx=\"" + pIndex + "\"" ;
					return "<br /><a class=\"EditOEM_Record\" " + buf + ">Edit</a>";
				},
				CalcEditAdminDate : function( current ) {
					var AdminDate = current.AdminDate;
					var today = new Date();
					var aDate = new Date(AdminDate);
					if (aDate < today) {
						return ("");	// No Edit link if the Admin Date is before today
					}
					var buf = "";
					return " - <button class=\"anchor EditOEM_Record\" " + buf + ">Change Admin Date</button>";
				}
			}

		)
		);
	},

	createChildren : function( component, eOpts ) {
		var i, j, fsIndex = 0, fsTitle, fsMargin, fsCollapsed, thisDay, thisDayFS, thisCycle, thisCycleFS, insertIdx = 0, InnerFSName = "";
		var oTpl, dTpl, nTpl, margin, collapsed, thisDayFSName;
		var oHtml, dHtml, nHtml;
		var Patient = this.application.Patient;
		if ("" === Patient.TemplateID) {
			return;		// No Template assigned to this patient
		}
		try {
			var NumCycles = Patient.OEMRecords.numCycles;
			var DaysPerCycle = Patient.OEMRecords.AdminDaysPerCycle;
			var AdminDays = Patient.OEMRecords.OEMRecords;
			var NumDaysTotal = AdminDays.length;
			var InnerFS = [], OuterFS = [];
			var UpdateData = Patient.OEMRecords;

			UpdateData.TreatmentStart = UpdateData.OEMRecords[0].AdminDate;
			var i1 = UpdateData.OEMRecords.length - 1;
			UpdateData.TreatmentEnd = UpdateData.OEMRecords[i1].AdminDate;

			var thisCtl = this.getController("NewPlan.CTOS.ChronologyTab");
			var Overview = thisCtl.getChronologyOverview();
			Overview.update(UpdateData);

			var Body = thisCtl.getChronologyBody();

			for (i = 0; i < NumCycles; i++ ) {
				fsTitle = "Cycle " + (1 + i) + " of " + NumCycles;
				margin = ((0 === i) ? "10 10 5 10" : "5 10 10 10");
				collapsed = ((0 === i) ? false : true);
				thisCycleFS = Ext.create("Ext.form.FieldSet", {
						title: fsTitle,
						collapsible : true,
						collapsed : collapsed,
						frame : true,
						margin : margin
				});
				for (j = 0; j < DaysPerCycle; j++) {
					var DayIdx = (DaysPerCycle * i) + j;
					thisDay = AdminDays[DayIdx];
					fsTitle = "Admin Date - " + thisDay.AdminDate;

					// Calculate a unique name for this particular Fieldset, based on Cycle and Day in Cycle
					thisDayFSName = "Cycle_" + (1 + i) + "_Day_" + (1+j);

					margin = ((0 === i) ? "10 10 5 10" : "5 10 10 10");
					collapsed = ((0 === i) ? false : true);

					oTpl = this.OrderTemplate();
					oHtml = oTpl.apply(Patient.OEMRecords.OEMRecords[DayIdx]);
					dTpl = this.DeliveredTemplate();
					dHtml = dTpl.apply(Patient.OEMRecords.OEMRecords[DayIdx]);

					thisDayFS = Ext.create("Ext.form.FieldSet", {
						title: fsTitle,
						name : thisDayFSName,
						collapsible : true,
						collapsed : collapsed,
						frame : true,
						margin : margin,
						defaultType : "fieldset",
						defaults : { collapsible : true, margin : "5 10 5 10", frame : true },
						items : [
							{ title : "Ordered", name : (thisDayFSName + "_Ordered"), html : oHtml },
							{ title : "Finalized/Dispensed", name : (thisDayFSName + "_Final_Dispensed"), html : dHtml },
							{ title : "Administered", name : (thisDayFSName + "_Administered"), html : dHtml },
							{ title : "Nursing Documentation", name : (thisDayFSName + "_NurseDocs") }
						]
					});
					thisCycleFS.insert(j, thisDayFS);
				}
				Body.insert( i, thisCycleFS );
			}
		}
		catch (err) {
			// debugger;
		}
	},

	/**********************
	 *
	 *	Called when the "PatientSelected" event is triggered from the top of the NewTab Panel Select Patient drop down
	 *	This adjusts the values in the "Select Applied Template" drop down based on the selected user
	 *
	 **********************/
	PatientSelected: function (combo, recs, eOpts) {
		var thisCtl = this.getController("NewPlan.CTOS.ChronologyTab");
		var Overview = thisCtl.getChronologyOverview();
		var Body = thisCtl.getChronologyBody();
		var Chronology = thisCtl.getChronology();
		if (Chronology) {
			if (Chronology.rendered) {
				Overview.removeAll(true);
				Body.removeAll(true);
				this.TabContentsCleared = true;
			}
		}
	},

	TabRendered : function ( component, eOpts ) {
		wccConsoleLog("Chronology Tab has been rendered");
	},

	BeforeTabActivated : function (component, eOpts ) {
		wccConsoleLog("Chronology Tab has been rendered");
		if ( this.TabContentsCleared ) {
			this.TabContentsCleared = false;
			this.createChildren( component, eOpts );
		}
		return true;
	}
});


Ext.define("COMS.controller.NewPlan.CTOS.DiseaseResponsePanel", {
	extend: "Ext.app.Controller",

	stores: [
	],

	views: [
		"NewPlan.CTOS.ToxicitySideEffectsPanel"
	],

    refs: [
		{ ref: "SaveBtn",					selector: "FlowSheetOptionalQues button[text=\"Save\"]"},
		{ ref: "ToxDetails",				selector: "FlowSheetOptionalQues [name=\"ToxDetails\"]"}
	],

	init: function () {
		this.control({
			"scope" : this,
			"FlowSheetOptionalQues button[text=\"Save\"]" : {
				//click: this.Save
			},
			"FlowSheetOptionalQues combobox[name=\"ToxInstr\"]" : {
				//"change" : this.SelectToxInstr
			}
		});
	}

});

Ext.define("COMS.controller.NewPlan.CTOS.FS_Toxicity", {
	extend: "Ext.app.Controller",
	views : [ "RequiredInstr", "NewPlan.CTOS.FS_Toxicity", "NewPlan.CTOS.FS_ToxicityGrid" ],
	stores: [ "ToxGridStore" ],
	


	init: function () {
		this.control({
			"FS_Toxicity form" : {
				validitychange : this.CheckValidation
			},

			"FS_Toxicity form [name=\"ToxInstr\"]" : {
				beforequery : this.ToxInstrBeforeQuery,
				select : this.ToxInstrSelectRec
			},
			"FS_Toxicity form [name=\"ToxLevel\"]" : {
				beforequery : this.ToxLevelBeforeQuery,
				select : this.ToxLevelSelectRec
			},

			"FS_Toxicity grid" : {
					select: this.selectGridRow,
					beforerender: this.loadGridStore
			},

			"FS_Toxicity button[text=\"Add\"]" : {
				click: this.LockAndAddNewRecord
			},

			"FS_Toxicity button[text=\"Delete\"]" : {
				click: this.DeleteSelectedRecords
			},

			"FS_Toxicity button[text=\"Refresh\"]" : {
				click: this.RefreshToxGrid
			},

			"FS_Toxicity button[name=\"Save\"]" : {
				click: this.Save
			},
			"FS_Toxicity button[name=\"Cancel\"]" : {
				click: this.Cancel
			}
		});
	},

	ToxLevel : "",
	ToxInstr : "",

	CheckValidation : function( theForm, valid, eOpts ) {
		var saveBtn = this.getSaveBtn(theForm);
		if (theForm.isDirty()) {
			if (valid) {
				saveBtn.setDisabled(false);
			}
			else {
				saveBtn.setDisabled(true);
			}
		}
	},

	loadGridStore : function(theGrid) {
		var theStore = theGrid.getStore();
		theStore.load({ url: Ext.URLs.ToxGrid + "/" + this.application.Patient.PAT_ID });
	},

	RefreshToxGrid : function(theBtn) {
		var theGrid = this.getTheGrid(theBtn);
		this.loadGridStore(theGrid);
	},

	gnrlGetComponent: function(thisComp, str) {
		if (thisComp.owner) {
			return thisComp.owner.findParentByType("FS_Toxicity").down(str);
		}
		else {
			return thisComp.findParentByType("FS_Toxicity").down(str);
		}
	},

	getAddRecordBtn :  function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[text=\"Add\"]");
	},
	getAddRecordPanel : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"ToxicityEditPanel\"]");
	},
	
	getTheGrid : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"Toxicity Grid\"]");
	},

	getIDField : function (thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"RecID\"]");
	},
	getToxInstrFld : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"ToxInstr\"]");
	},
	getOtherToxFld : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"OtherTox\"]");
	},
	getToxLevelFld : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"ToxLevel\"]");
	},
	getToxEditLevelFld : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"ToxEditLevel\"]");
	},

	getToxEditDetailsFld : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"ToxEditDetails\"]");
	},
	getToxDetailsFld : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"ToxDetails\"]");
	},

	getCommentsFld : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"Data\"]");
	},

	getAlertFld : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"AdverseAlert\"]");
	},

	getDeleteBtn : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[text=\"Delete\"]");
	},

	getSaveBtn : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "[name=\"Save\"]");
	},
	getTheForm : function(thisComp) {
		return this.gnrlGetComponent(thisComp, "form");
	},


	getToxInstr : function(thisComp) {
		var theFld = this.getToxInstrFld(thisComp);
		var ret = theFld.getRawValue();
		return ret;
	},
	getToxLevel : function(thisComp) {
		var theFld = this.getToxLevelFld(thisComp);
		var ret = theFld.getRawValue();
		if (!theFld.isVisible()) {
			theFld = this.getToxEditLevelFld(thisComp);
			ret = theFld.getValue();
		}
		return ret;
	},

	clrToxLevel :  function(thisComp) {
		var theFld = this.getToxLevelFld(thisComp);
		theFld.setValue("");
	},
	
	clrDetails : function(thisComp) {
		var theFld = this.getToxDetailsFld(thisComp);
		theFld.setValue("&nbsp;");
	},

	Cancel : function(btn) {
		var theForm = btn.up('form').getForm();
		var theGrid = this.getTheGrid(theForm);
		theForm.reset();
		this.RowIdx = null;
		theGrid.getSelectionModel().clearSelections();

		this.releaseLock(this.getAddRecordPanel(btn));

	},

	Save : function(btn) {
		if (!this.Saving) {		// Prevents multiple saves by clicking the "Save" button more than once
			var theForm = btn.up('form').getForm();
			if (theForm.isValid()) {
				this.Saving = true;
				this.saveData(theForm);
			}
		}
	},

	saveData : function(theForm) {
		var theData = theForm.getFieldValues();
		if ("Other" !== theData.ToxInstr) {
			theData.OtherTox = "";
		}

		if (theData.ToxLevel !== "" && theData.ToxEditLevel == "") {
			delete theData.ToxEditLevel;
		}
		else if (theData.ToxEditLevel !== "") {
			theData.ToxLevel = theData.ToxEditLevel;
			delete theData.ToxEditLevel;
		}

		if (theData.ToxDetails !== "" && theData.ToxEditDetails == "") {
			delete theData.ToxEditDetails;
		}
		else if (theData.ToxEditDetails !== "") {
			theData.ToxDetails = theData.ToxEditDetails;
			delete theData.ToxEditDetails;
		}
		var theGrid = theForm.owner.ownerCt.down("FS_ToxicityGrid");
		var theStore = theGrid.getStore();
		var PAT_ID = this.application.Patient.PAT_ID;
		theStore.proxy.url = Ext.URLs.ToxGrid + "/" + PAT_ID;

		var AlertEvent = theData.AdverseAlert ? 1 : 0;

		var storeData = { 
			"tDate" : Ext.Date.format(new Date(), "m/d/Y"), 
			"Alert" : AlertEvent, 
			"Comments" : theData.Data, 
			"Details" : theData.ToxDetails, 
			"Grade_Level" : theData.ToxLevel, 
			"id" : theData.RecID, 
			"Label" : theData.ToxInstr,
			"OtherTox" : theData.OtherTox
		};
		
		var rec = Ext.create(Ext.COMSModels.ToxGridModel, storeData);
		rec.dirty = true;

		if (this.RowIdx && this.RowIdx >= 0) {
			theStore.removeAt(this.RowIdx, 1);
			theStore.insert(this.RowIdx, rec);
			this.RowIdx = null;
		}
		else {
			theStore.add(rec);
		}
		theStore.commitChanges();
		theForm.reset();
		this.Saving = false;

		this.releaseLock(this.getAddRecordPanel(theForm));
		this.application.fireEvent("loadAdverseEventsHistory");
	},

	selectGridRow : function(theRowModel, record, index, eOpts) {
		this.RowIdx = index;
		var theView = theRowModel.view;
		var recID = record.get("id");
		var Label = record.get("Label");
		var OtherTox = record.get("OtherTox");

		var Details = record.get("Details");
		var Grade_Level = record.get("Grade_Level");
		this.ToxLevel = Grade_Level;
		this.ToxInstr = Label;
		var Comments = record.get("Comments");
		var tDate = record.get("tDate");
		var Alert = record.get("Alert");

		Details = Ext.util.Format.htmlDecode(Details);

		var hiddenRecID = this.getIDField(theView);
		hiddenRecID.setValue(recID);

		var theToxInstrField = this.getToxInstrFld(theView);
		var theOtherToxField = this.getOtherToxFld(theView);

		var theToxDetailsField = this.getToxDetailsFld(theView);
		if (!theToxDetailsField.isVisible()) {
			theToxDetailsField = this.getToxEditDetailsFld(theView);
		}
		var theToxLevelField = this.getToxLevelFld(theView);
		if (!theToxLevelField.isVisible()) {
			theToxLevelField = this.getToxEditLevelFld(theView);
		}

		var theAlertField = this.getAlertFld(theView);
		var theCommentsField = this.getCommentsFld(theView);

		if ("Other" === Label) {
			theOtherToxField.show();
		}
		else {
			theOtherToxField.hide();
		}

		theToxInstrField.setValue(Label);
		theOtherToxField.setValue(OtherTox);

		theToxDetailsField.setValue(Details);
		theToxLevelField.setValue(Grade_Level);
		theCommentsField.setValue(Comments);
		theAlertField.setValue(Alert);

		var records = theRowModel.getSelection();
		
		var delBtn = this.getDeleteBtn(theView);
		if (records.length <= 0) {
			delBtn.setDisabled(true);
		}
		else {
			delBtn.setDisabled(false);
		}
	},



	deleteRecord : function(theRecords) {
		var record = theRecords.pop();
		if (record) {
			var rID = record.get("id");
			var CMD = "DELETE";
			var URL = Ext.URLs.ToxGrid + "/" + rID;
			Ext.Ajax.request({
				url: URL,
				method : CMD,
				scope: this,
				records : theRecords,
				success: function( response, opts ){
					this.deleteRecord(opts.records);
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					Ext.MessageBox.alert("Saving Error", "Saving Error", "Site Configuration - Delete Toxicity Record, Save Error - <br />" + resp.msg );
				}
			});
		}
		else {
			this.application.unMask();
				this.theForm.getForm().reset();
				this.RowIdx = null;
				this.theGrid.getSelectionModel().deselectAll( true );
				var delBtn = this.getDeleteBtn(this.theForm);
				delBtn.setDisabled(true);
				delete this.theForm;
				delete this.RowIdx;
				delete this.theGrid;
				theApp.fireEvent("loadAdverseEventsHistory");
		}
	},

	DeleteSelectedRecords : function(theBtn) {
		var theGrid = this.getTheGrid(theBtn);
		var theForm = this.getTheForm(theBtn);
		var theRecords = theGrid.getSelectionModel().getSelection();
		var len = theRecords.length, i, record;
		this.theForm = theForm;
		this.theGrid = theGrid;
		this.theRecords = theRecords;
		Ext.MessageBox.confirm("Confirm Deletion", "Are you sure you want to delete the selected Toxicity records?", function(btn) {
			if ("yes" === btn) {
				this.application.loadMask("Please wait; Deleting Selected Records");
				this.deleteRecord(this.theRecords);
			}
		}, this);
	},




















	loadToxInstrStore : function(theStore, theData) {
		var i, rec, len,
			ToxInstr = [], 
			ToxOther = [];
		len = theData.length;
		for (i = 0; i < len; i++) {
			rec = theData[i];
			var el = {Label: rec, value: rec};
			if (rec.indexOf("No Toxicities") >= 0 || rec.indexOf("Other") >= 0) {
				ToxOther.push(el);
			}
			else {
				ToxInstr.push(el);
			}
		}
		len = ToxOther.length;
		for (i = 0; i < len; i++) {
			ToxInstr.push(ToxOther[i]);
		}
		theStore.loadData(ToxInstr);
	},

	loadToxLevelStore : function(theStore, theData) {
		var theInstr = this.ToxInstr;
		var ToxList = [];
		var i, rec, len,
			ToxInstr = [], 
			ToxOther = [];
		len = theData.length;
		for (i = 0; i < len; i++) {
			rec = theData[i].getData();
			if (rec.Label === theInstr) {
				if ("" == rec.Grade_Level) {
					rec.Grade_Level = "None";
				}
				var el = {Details : rec.Details, Label: rec.Label, Grade_Level: rec.Grade_Level, ID: rec.ID };
				ToxList.push(el);
			}
		}
		theStore.loadData(ToxList);
	},


	ToxInstrBeforeQuery : function( queryEvent, eOpts ) {
		var qeCombo = queryEvent.combo;
		delete qeCombo.lastQuery;
		var qeQuery = queryEvent.query;
		var qeForceAll = queryEvent.forceAll;
		aStore = Ext.getStore("Toxicity");
		if (aStore.getTotalCount() <= 0) {
			this.application.loadMask("Loading...");
			aStore.load({
				scope: this,
				combo : qeCombo,
				store : aStore,
				callback: function(records, operation, success) {
					var data = operation.store.collect('Label');
					var cStore = operation.combo.getStore();
					this.loadToxInstrStore(cStore, data);
					this.application.unMask();
				}
			});
		}
		else {
			var data = aStore.collect('Label');
			var cStore = qeCombo.getStore();
			this.loadToxInstrStore(cStore, data);
		}
		return true;
	},

	getDetails4Label : function(theRecordData) {
			var aStore = Ext.getStore("Toxicity");
			var theRec = aStore.findRecord( "Label", theRecordData);
			var theData = theRec.getData().Details;
			return theData;

	},

	ToxInstrSelectRec : function(combo, recs, eOpts) {
		var theRecordData = recs[0].getData().Label;
		this.ToxInstr = theRecordData;
		var tLevel = this.getToxLevelFld(combo);
		var tELevel = this.getToxEditLevelFld(combo);
		var tDetails = this.getToxDetailsFld(combo);
		var tEDetails = this.getToxEditDetailsFld(combo);
		var AEAlert = this.getAlertFld(combo);
		var OtherTox = this.getOtherToxFld(combo);
		var theData;


		this.clrToxLevel(combo);
		this.clrDetails(combo);

		if ( theRecordData.indexOf("No Toxicities") >= 0 ) {
			OtherTox.hide();

			tELevel.hide();
			tLevel.hide();
			tEDetails.hide();
			tDetails.show();

			AEAlert.hide();

			OtherTox.allowBlank = true;
			tELevel.allowBlank = true;
			tLevel.allowBlank = true;
			tEDetails.allowBlank = true;

			theData = this.getDetails4Label(theRecordData);
			tDetails.setValue( theData );

		}
		else if (theRecordData.indexOf("Other") >= 0) {
			OtherTox.show();

			tLevel.hide();
			tDetails.hide();

			tELevel.show();
			tEDetails.show();

			AEAlert.show();

			OtherTox.allowBlank = false;
			tELevel.allowBlank = false;
			tEDetails.allowBlank = false;

			tLevel.allowBlank = true;
			tDetails.allowBlank = true;

			theData = this.getDetails4Label(theRecordData);
			tEDetails.setValue( theData );

		}
		else {
			OtherTox.hide();
			tELevel.hide();
			tLevel.show();
			tEDetails.hide();
			tDetails.show();

			OtherTox.allowBlank = true;
			tLevel.allowBlank = false;
			tELevel.allowBlank = true;
			tEDetails.allowBlank = true;
			AEAlert.allowBlank = true;
		}

	},

	ToxLevelBeforeQuery : function( queryEvent, eOpts ) {
		var qeCombo = queryEvent.combo;
		delete qeCombo.lastQuery;
		var theInstr = this.getToxInstr(qeCombo);
		this.ToxInstr = theInstr;
		if ("" != theInstr) {
			var qeQuery = queryEvent.query;
			var qeForceAll = queryEvent.forceAll;
			aStore = Ext.getStore("Toxicity");
			if (aStore.getTotalCount() <= 0) {
				this.application.loadMask("Loading...");
				aStore.load({
					scope: this,
					combo : qeCombo,
					store : aStore,
					callback: function(records, operation, success) {
						var cStore = operation.combo.getStore();
						var theRecords = operation.store.getRange();
						this.loadToxLevelStore(cStore, theRecords);
						this.application.unMask();
					}
				});
			}
			else {
				var cStore = qeCombo.getStore();
				this.loadToxLevelStore(cStore, aStore.getRange());
			}
			return true;
		}
		else {
			Ext.MessageBox.alert("Warning", "You must select a Toxicity first");
		}
		return false;
	}, 

	ToxLevelSelectRec : function(combo, recs, eOpts) {
		var theRecordData = recs[0].getData().Label;
		this.ToxLevel = theRecordData;
		var DetailsField = combo.findParentByType("FS_Toxicity").down("[name=\"ToxDetails\"]");
		var theData = recs[0].getData().Details;
		theData = Ext.util.Format.htmlDecode(theData);
		DetailsField.setValue(theData);
	},


	AddNewRecord : function(params) {
		var me = params.scope;
		var theBtn = params.theBtn;
		var theAddRecordPanel = me.getAddRecordPanel(theBtn);
		theAddRecordPanel.show();

		var f1 = me.getToxInstrFld(theAddRecordPanel);
		f1.allowBlank = false;
		var f2 = me.getToxLevelFld(theAddRecordPanel);
		f2.allowBlank = false;
		theBtn.setDisabled(true);
	},

	LockAndAddNewRecord : function(theBtn) {
		var params = { scope : this, theBtn : theBtn };
		Ext.COMS_LockSection(this.application.Patient.id, "Toxicity", this.AddNewRecord, params); 
	},

	releaseLock : function(thePanel) {
		thePanel.hide();

var f1 = this.getToxInstrFld(thePanel);
f1.allowBlank = true;
var f2 = this.getToxLevelFld(thePanel);
f2.allowBlank = true;

		var theBtn = this.getAddRecordBtn(thePanel);
		theBtn.setDisabled(false);
		Ext.COMS_UnLockSection();
	}



});

Ext.define("COMS.controller.NewPlan.CTOS.FlowSheetOptionalQues", {
	extend: "Ext.app.Controller",

	stores: [
	],

	views: [
		"NewPlan.CTOS.FlowSheetOptionalQues"
	],

    refs: [
		{ ref: "SaveBtn",					selector: "FlowSheetOptionalQues button[text=\"Save\"]"}
	],

	init: function () {
		this.control({
			"scope" : this,
			"FlowSheetOptionalQues button[text=\"Save\"]" : {
				click: this.Save
			},
			"FlowSheetOptionalQues button[text=\"Cancel\"]" : {
				click: this.Cancel
			}
		});
	},

	Save : function(btn) {
		var PAT_ID = "", Cycle = "", Day = "";
		if (this.application && this.application.Patient) {
			PAT_ID = this.application.Patient.PAT_ID;
			if (this.application.Patient.ThisAdminDay) {
				Cycle = this.application.Patient.ThisAdminDay.Cycle;
				Day = this.application.Patient.ThisAdminDay.Day;
			}
		}

		var theForm = btn.up("form");
		var BaseForm = theForm.getForm();
		if (BaseForm.isDirty()) {
			this.application.loadMask("Saving Information");
			BaseForm.submit({
				clientValidation: false,
				scope : this,
				"url" : Ext.URLs.FlowSheetOptionalInfo + "/" + PAT_ID,
				params : {
					"PAT_ID" : PAT_ID,
					"Cycle" : Cycle,
					"Day" : Day
				},
				success: function(form, action) {
					Ext.Msg.alert('Success', "General Information has been successfully saved");
					this.application.unMask();
					theForm.up("window").close();
					var theCtrlr = this.getController("NewPlan.CTOS.FlowSheetTab");
					theCtrlr.updateFlowsheetPanel();
				},
				failure: function(form, action) {
					switch (action.failureType) {
						case Ext.form.action.Action.CLIENT_INVALID:
							Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
							break;
						case Ext.form.action.Action.CONNECT_FAILURE:
							Ext.Msg.alert('Failure', 'Ajax communication failed');
							break;
						case Ext.form.action.Action.SERVER_INVALID:
							Ext.Msg.alert('Failure', action.result.msg);
					}
					this.application.unMask();
				}
			});
		}
		else {
			theForm.up("window").close();
		}
	},

	Cancel : function(btn) {
		btn.up('form').getForm().reset();
		btn.up('window').close();
	}
});

Ext.define("COMS.controller.NewPlan.CTOS.FlowSheetTab", {
	"extend" : "Ext.app.Controller",

	"stores" : [
		"Toxicity",
		"FlowSheetCombo",
		"ToxGridStore"
	],

	"views" : [
		"NewPlan.CTOS.FlowSheet",
		"NewPlan.CTOS.DiseaseResponsePUWin",
		"NewPlan.CTOS.OtherPUWin",
		"NewPlan.CTOS.FlowSheetGrid",
		"NewPlan.CTOS.FlowSheetOptionalQues",
		"NewPlan.CTOS.DiseaseResponsePanel",
		// "NewPlan.CTOS.ToxicitySideEffectsPanel",
		"NewPlan.CTOS.FS_Toxicity",
		"NewPlan.CTOS.OtherInfoPanel",
		"NewPlan.CTOS.FS_ToxicityHistory"
	],

	"refs" : [
		{ "ref" : "FlowSheetGrid",					"selector" : "FlowSheet FlowSheetGrid"},
		{ "ref" : "FlowSheetGridEdit",				"selector" : "FlowSheet button[name=\"EditOptionalQues\"]"},
		{ "ref" : "DiseaseResponsePanel",			"selector" : "FlowSheet DiseaseResponsePanel"},
		{ "ref" : "FS_ToxicityHistory",				"selector" : "FlowSheet FS_ToxicityHistory"},

		// { "ref" : "ToxicitySideEffectsPanel",		"selector" : "FlowSheet ToxicitySideEffectsPanel"},

		{ "ref" : "FS_ToxicityHistory",				"selector" : "FlowSheet FS_ToxicityHistory"},
		{ "ref" : "OtherInfoPanel",					"selector" : "FlowSheet OtherInfoPanel"}

	],

	"init" : function () {
		wccConsoleLog("Initialized Flow Sheet Tab Controller!");

		this.application.on( 
			{ 
				"PatientSelected" : this.PatientSelected, 
				"scope" : this 
			},
			{
				"loadAdverseEventsHistory" : this.LoadToxicityHistory, 
				"scope" : this
			}
		);

		this.control({
			"scope" : this,
//			"FlowSheet FlowSheetGrid" : {
				// render : this.TabRendered
//			},
			"FlowSheet" : {
				activate : this.updateFlowsheetPanel
			},
			"FlowSheetGrid" : {
				select : this.clickNamedAnchor,		// ( this, record, row, column, eOpts )
				afterrender : function() { 
					Ext.resumeLayouts(true); 
				},
				afterlayout : function() { 
					Ext.resumeLayouts(true); 
				}

			},
			"FlowSheetGrid button[name=\"EditOptionalQues\"]" : {
				click: this.EditOptionalQuestions
			},
			"FlowSheetGrid [name=\"ShowCycles\"]" : {
				change: this.ComboSelect
			},

			"FlowSheet DiseaseResponsePanel" : {
				afterrender : Ext.togglePanelOnTitleBarClick
			},
			"FlowSheet FS_ToxicityHistory" : {
				afterrender : Ext.togglePanelOnTitleBarClick
			},
			"FlowSheet OtherInfoPanel" : {
				afterrender : Ext.togglePanelOnTitleBarClick
			}
		});
	},

	"ComboSelect" : function(theCombo) {
		this.application.loadMask("Showing Cycles");
		var grid = theCombo.up("grid");
		var comboStore = theCombo.getStore();
		var theRecord = comboStore.findRecord("label", theCombo.rawValue);
		var data, start, end;
		
		data = theRecord.getData();
		start = data.StartIdx;
		end = data.EndIdx;
		this.ShowSelectedCycles(grid, start, end);
		this.application.unMask();
	},

	EditOptionalQuestions : function() {
		Ext.widget("FlowSheetOptionalQues");
	},

	clickNamedAnchor : function (grid, record, rowIdx, colIdx) {

		var theGrid = grid;
		var theData = record.getData();
		var theLabel = theData.label;
		var theColumnValue = theData[Object.keys(theData)[colIdx+1]];

		if (theLabel !== "Disease Response" && theLabel !== "Toxicity" && theLabel !== "Other") {
			return;
		}
		var thePanel = null;
		if ("Disease Response" == theLabel) {
			thePanel = this.getDiseaseResponsePanel();
		}
		else if ("Toxicity" == theLabel) {
			thePanel = this.getFS_ToxicityHistory();
		}
		else if ("Other" == theLabel) {
			thePanel = this.getOtherInfoPanel();
		}

		//var theElID = theColumnValue.substring(theColumnValue.indexOf("\"")+1, theColumnValue.indexOf(">")-1);
		var theEl;	//  = Ext.get(theElID);
		if (thePanel) {
			thePanel.expand();
			theEl = thePanel.getEl();
			var top = theEl.getTop();
			window.scroll(0, top);
			theEl.focus(100);
		}


		// var theCell = grid.view.getCellByPosition({row:row, column:column});
//		var theKey = this.getFlowSheetGrid().normalGrid.columns[column].key;
//		var theDate = grid.store.getAt(0).data[theKey];
//		var tableID = "ToxPanel-" + theDate;

	},



	buildCycleList : function (data) {
		var hold, key, curCycle, cyc_day, cycleNum, cycleDay, aDate;
		var comboRec = {}, dayIdx = 0, CycleRecords = [], aRec = data;
		for(key in aRec){
			if (aRec.hasOwnProperty(key)) {
				if (key !== "label" && key !== "-") {
					aDate = aRec[key];
					cyc_day = key.match(/\d*\d/g);
					cycleNum = cyc_day[0];
					cycleDay = cyc_day[1];
					if (!hold) {
						hold = { "hDate" : aRec[key], "Day" : cycleDay, "Cycle" : cycleNum, "Idx" : dayIdx };
						comboRec = { "label" : ("Show Cycle " + cycleNum + " " + aRec[key]), "StartDate" : aRec[key], "StartDay" : cycleDay, "Cycle" : cycleNum, "StartIdx" : dayIdx };
						curCycle = cycleNum;
					}
					if (curCycle && curCycle != cycleNum) {
						comboRec.EndDate = hold.hDate;
						comboRec.EndDay = hold.Day;
						comboRec.EndIdx = hold.Idx;
						comboRec.cols = comboRec.StartIdx + "-" + comboRec.EndIdx;
						comboRec.label += " - " + comboRec.EndDate;
						CycleRecords.push(comboRec);
						comboRec = { "label" : ("Show Cycle " + cycleNum + " " + aRec[key]), "StartDate" : aRec[key], "StartDay" : cycleDay, "Cycle" : cycleNum, "StartIdx" : dayIdx };
						curCycle = cycleNum;
					}
					hold = { "hDate" : aRec[key], "Day" : cycleDay, "Cycle" : cycleNum, "Idx" : dayIdx };
				}
				dayIdx++;
			}
		}
		comboRec.EndDate = hold.hDate;
		comboRec.EndDay = hold.Day;
		comboRec.EndIdx = hold.Idx;
		comboRec.cols = comboRec.StartIdx + "-" + comboRec.EndIdx;
		comboRec.label += " - " + comboRec.EndDate;
		CycleRecords.push(comboRec);
		return CycleRecords;

	},

	buildCycleDateObj : function (Cycle) {
		var strFormat = "d/m/Y";
		var tDate = new Date();
		var today = new Date(tDate.getFullYear(), tDate.getMonth(), tDate.getDate());

		var sDate = Cycle.StartDate.replace(/\\/g, "/"); 
		var eDate = Cycle.EndDate.replace(/\\/g, "/"); 

		sDate = new Date(sDate);
		eDate = new Date(eDate);

		sDate = new Date(sDate.getFullYear(), sDate.getMonth(), sDate.getDate());
		eDate = new Date(eDate.getFullYear(), eDate.getMonth(), eDate.getDate());

		return {"sDate" : sDate, "eDate" : eDate, "today" : today };

	},

	isCycleFutureOrCurrent : function (Cycle) {
		var df = this.buildCycleDateObj(Cycle);
		return (df.eDate >= df.today);
	},

	isCyclePastOrCurrent : function (Cycle) {
		var df = this.buildCycleDateObj(Cycle);
		return (df.sDate <= df.today);
	},

	isCycleCurrent : function (Cycle) {
		var df = this.buildCycleDateObj(Cycle);
		return (df.sDate <= df.today && df.eDate >= df.today);
	},



	buildComboStore : function (data) {
		var CycleRecords = this.buildCycleList(data);
		var i, crLen = CycleRecords.length;
		var LastCycle, AllCycles = {}, PastCycle = {}, FutureCycle = {}, CurCycle = {};

		AllCycles.label = "Show All Cycles";
		AllCycles.StartDate = CycleRecords[0].StartDate;
		AllCycles.StartIdx = CycleRecords[0].StartIdx;
		AllCycles.EndDate = CycleRecords[crLen-1].EndDate;
		AllCycles.EndIdx = CycleRecords[crLen-1].EndIdx;

		LastCycle = CycleRecords[0];
		PastCycle.label = "Show Current plus All Past Cycles";
		PastCycle.StartDate = CycleRecords[0].StartDate;
		PastCycle.StartIdx = CycleRecords[0].StartIdx;

		for (i = 0; i < crLen; i++) {
			if (this.isCyclePastOrCurrent(CycleRecords[i])) {
				LastCycle = CycleRecords[i];
			}
		}
		PastCycle.EndDate = LastCycle.EndDate;
		PastCycle.EndIdx = LastCycle.EndIdx;

		LastCycle = CycleRecords[0];
		FutureCycle.label = "Show Current plus All Future Cycles";

		for (i = crLen-1; i > 0; i--) {
			if (this.isCycleFutureOrCurrent(CycleRecords[i])) {
				LastCycle = CycleRecords[i];
			}
		}
		FutureCycle.StartDate = LastCycle.StartDate;
		FutureCycle.StartIdx = LastCycle.StartIdx;
		FutureCycle.EndDate = AllCycles.EndDate;
		FutureCycle.EndIdx = AllCycles.EndIdx;

		CurCycle.label = "Show Current Cycle Only";
		LastCycle = CycleRecords[0];
		for (i = 0; i < crLen; i++) {
			if (this.isCycleCurrent(CycleRecords[i])) {
				LastCycle = CycleRecords[i];
			}
		}
		CurCycle.StartDate = LastCycle.StartDate;
		CurCycle.StartIdx = LastCycle.StartIdx;
		CurCycle.EndDate = LastCycle.EndDate;
		CurCycle.EndIdx = LastCycle.EndIdx;
		this.application.Patient.CurFlowSheetCycle = CurCycle;

		var comboStore = [];
		comboStore.push(AllCycles);
		comboStore.push(PastCycle);
		comboStore.push(FutureCycle);
		comboStore.push(CurCycle);
		for (i = 0; i < crLen; i++) {
			comboStore.push(CycleRecords[i]);
		}
		return comboStore;
	},

















	buildComboStoreNEW : function (data) {
		var CycleRecords = this.buildCycleList(data);
		var i, crLen = CycleRecords.length;
		var LastCycle, AllCycles = {}, PastCycle = {}, FutureCycle = {}, CurCycle = {};

		AllCycles.label = "Show All Cycles";
		AllCycles.StartDate = CycleRecords[0].StartDate;
		AllCycles.StartIdx = CycleRecords[0].StartIdx;
		AllCycles.EndDate = CycleRecords[crLen-1].EndDate;
		AllCycles.EndIdx = CycleRecords[crLen-1].EndIdx;
		AllCycles.label = "Show All Cycles - " + AllCycles.StartIdx + " - " + AllCycles.EndIdx;

		LastCycle = CycleRecords[0];
		PastCycle.StartDate = CycleRecords[0].StartDate;
		PastCycle.StartIdx = CycleRecords[0].StartIdx;
		for (i = 0; i < crLen; i++) {
			if (this.isCyclePastOrCurrent(CycleRecords[i])) {
				LastCycle = CycleRecords[i];
			}
		}
		PastCycle.EndDate = LastCycle.EndDate;
		PastCycle.EndIdx = LastCycle.EndIdx;
		PastCycle.label = "Show Current plus All Past Cycles - " + PastCycle.StartIdx + " - " + PastCycle.EndIdx;



		LastCycle = CycleRecords[0];
		FutureCycle.label = "Show Current plus All Future Cycles";

		for (i = crLen-1; i > 0; i--) {
			if (this.isCycleFutureOrCurrent(CycleRecords[i])) {
				LastCycle = CycleRecords[i];
			}
		}
		FutureCycle.StartDate = LastCycle.StartDate;
		FutureCycle.StartIdx = LastCycle.StartIdx;
		FutureCycle.EndDate = AllCycles.EndDate;
		FutureCycle.EndIdx = AllCycles.EndIdx;
		FutureCycle.label = "Show Current plus All Future Cycles - " + " - " + FutureCycle.StartIdx + " - " + FutureCycle.EndIdx;



		LastCycle = CycleRecords[0];
		for (i = 0; i < crLen; i++) {
			if (this.isCycleCurrent(CycleRecords[i])) {
				LastCycle = CycleRecords[i];
			}
		}
		CurCycle.StartDate = LastCycle.StartDate;
		CurCycle.StartIdx = LastCycle.StartIdx;
		CurCycle.EndDate = LastCycle.EndDate;
		CurCycle.EndIdx = LastCycle.EndIdx;
		CurCycle.label = "Show Current Cycle Only - " + CurCycle.StartIdx + " - " + CurCycle.EndIdx;

		this.application.Patient.CurFlowSheetCycle = CurCycle;

		var comboStore = [];
		comboStore.push(AllCycles);
		comboStore.push(PastCycle);
		comboStore.push(FutureCycle);
		comboStore.push(CurCycle);
		for (i = 0; i < crLen; i++) {
			CycleRecords[i].label += " - " + CycleRecords[i].StartIdx + " - " + CycleRecords[i].EndIdx;
			comboStore.push(CycleRecords[i]);
		}
		return comboStore;
	},


	"LoadToxicityHistory" : function() {
		this.getToxicityHistoryData(this.application.Patient.PAT_ID);
	},



	"updateFlowsheetPanel" : function() {
		// this.application.loadMask("Saving Information");
		Ext.suspendLayouts(); 
		var theGrid = this.getFlowSheetGrid();
		this.getFlowSheetData(this.application.Patient.id, this.application.Patient.PAT_ID, theGrid);
		this.getOptionalInfoData(this.application.Patient.PAT_ID);
		this.getToxicityHistoryData(this.application.Patient.PAT_ID);
/**
 **/
		var CurCycle = this.application.Patient.CurFlowSheetCycle;
		if (CurCycle) {
			this.ShowSelectedCycles(theGrid, CurCycle.StartIdx, CurCycle.EndIdx);
		}
/**
 **/
		Ext.resumeLayouts(true);
	},


	ShowSelectedCycles : function(grid, start, end) {
		Ext.suspendLayouts(); 
		end = end + 1;
		var theCols = this.createColumns(this.application.Patient.FlowsheetData);
		var theStore = this.createStore(this.application.Patient.FlowsheetData);
//		var numCols2Show = end - start;
//		var theCols1 = theCols;
//		var num2remove;
		var aLen = theCols.length;
		var Num2Trim;
		var startIndex;

		if (start <= 2) {
			// First Cycle
			Num2Trim = aLen - end;
			theCols.splice(end, Num2Trim);
		}
		else if (end >= aLen) {
			// Last Cycle
			theCols.splice(2, start-2);
		}
		else {
			theCols.splice(2, start-2);
			startIndex = end - start + 2;
			Num2Trim = theCols.length - startIndex+1;
			theCols.splice(startIndex, Num2Trim);
		}




		grid.reconfigure(theStore, theCols);
		Ext.resumeLayouts(true);
		return;




	},



	maskFlowSheetPanels : function(panel, title) {
		panel.setTitle(title + "- Loading Data");
		// Ext.suspendLayouts();
		panel.setLoading( "Loading " + title + " Information", false );
	},
	unMaskFlowSheetPanels : function(panel, title) {
		// Ext.resumeLayouts();
		panel.setLoading( false, false );
		panel.setTitle(title);
	},

	getFlowSheetData : function(PatientID, PAT_ID, theGrid) {
		this.maskFlowSheetPanels(theGrid, "Flowsheet");

		Ext.Ajax.request({
			scope : this,
			url : Ext.URLs.FlowSheetRecords + "/" + PatientID + "/" + PAT_ID,
			success : function( response) {
				var obj = Ext.decode(response.responseText);
				this.application.Patient.FlowsheetData = obj.records;
				if (obj.records) {
					var theStore = this.createStore(obj.records);
					var theCols = this.createColumns(obj.records);
					var colsRecords = this.buildComboStore(obj.records[0]);
					var comboStore = Ext.getStore("FlowSheetCombo");
					comboStore.loadData(colsRecords);
					theGrid.reconfigure(theStore, theCols);
					theGrid.setTitle("Flowsheet");
				}
				else {
					theGrid.setTitle("Flowsheet - No Data Available");
				}
				this.unMaskFlowSheetPanels(this.getFlowSheetGrid(), "Flowsheet");
			},

			failure : function( ) {
				this.unMaskFlowSheetPanels(this.getFlowSheetGrid(), "Flowsheet");
				alert("Attempt to load Flow Sheet data failed.");
			}
		});
	},


	getToxicityHistoryData : function(PAT_ID) {
		var URL = Ext.URLs.AdverseEventsHistory + "/" + this.application.Patient.PAT_ID;
		var FS_ToxicityHistoryPanel = this.getFS_ToxicityHistory();
		this.maskFlowSheetPanels(FS_ToxicityHistoryPanel, "Toxicity History");

		Ext.Ajax.request({
			scope : this,
			url: URL,
			success : function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (resp.success) {
					if (resp.records) {
						var i, len, rec;
						this.application.Patient.Assessments = resp.records.Assessments;
						this.application.Patient.Reactions = resp.records.ReactAssessments;
						this.application.Patient.TotalAdverseEvents = resp.totalEvents;
						var theController = this.getController("NewPlan.AdverseEventsHistory");
						var data = theController.MergeAssessmentAndReactionLists(resp.records.Assessments, resp.records.ReactAssessments);
						FS_ToxicityHistoryPanel.update(data.list);
					}
				}
				else {
					alert("load Flow Sheet Toxicity History - Error");
				}
				this.unMaskFlowSheetPanels(FS_ToxicityHistoryPanel, "Toxicity History");
			},
			failure : function( response, opts ) {
				this.unMaskFlowSheetPanels(FS_ToxicityHistoryPanel, "Toxicity History");
				alert("Flow Sheet Toxicity History Data Load Failed...");
			}
		});
	},


	getOptionalInfoData : function(PAT_ID) {
		this.maskFlowSheetPanels(this.getDiseaseResponsePanel(), "Disease Response");
		this.maskFlowSheetPanels(this.getOtherInfoPanel(), "Additional General Information");

		Ext.Ajax.request({
			scope : this,
			url : Ext.URLs.FlowSheetOptionalInfo + "/" + PAT_ID,
			success : function( response) {
				var obj = Ext.decode(response.responseText);

				var DiseaseResponsePanel = this.getDiseaseResponsePanel();
				DiseaseResponsePanel.update(obj);
				this.unMaskFlowSheetPanels(DiseaseResponsePanel, "Disease Response");

				var OtherInfoPanel = this.getOtherInfoPanel();
				OtherInfoPanel.update(obj);
				this.unMaskFlowSheetPanels(OtherInfoPanel, "Additional General Information");
			},

			failure : function( ) {
				this.unMaskFlowSheetPanels(FlowSheetPanels, "Disease Response - Failed to load Disease Response Information");
				alert("Attempt to load Flow Sheet data failed.");
				// console.log("Restoring Disease Response ERROR");
			}
		});
	},



	getKeysFromJson : function (obj) {
		var keys = [];
		for (var key in obj) {
			if (obj.hasOwnProperty(key)) {
				keys.push(key);
			}
		}
		return keys;
	},

	createStore : function (json) {
		var keys = this.getKeysFromJson(json[0]);
		return Ext.create('Ext.data.Store', {
			fields: keys,
			groupField: '-',
			data: json
		});
	},

	createColumns : function (json) {
		var idx = 0, key, jObj, firstRec = json[0], theCols = [];
		for (key in firstRec) {
			if (firstRec.hasOwnProperty(key)) {
				jObj = {};
				jObj.text = Ext.String.capitalize(key);
				jObj.key = key;
				jObj.idx = idx;
				jObj.width = 140;
				jObj.dataIndex = key;
				jObj.renderer = Ext.util.Format.htmlDecode;

				jObj.id = "Col-" + idx;
				if ("-" === key || "&nbsp;" === key) {
					jObj.hidden = true;
					jObj.text = "Category";
				}
				if ("LABEL" === key.toUpperCase()) {
					jObj.text = "";
					jObj.locked = true;
					jObj.width = 200;
				}
				theCols.push(jObj);
				idx += 1;
			}
		}
		return theCols;
	},
	PatientSelected: function (combo, recs, eOpts) {
	}

});


Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.AssessmentTab", {
	extend: "Ext.app.Controller",

	stores: [
	],
	views: [
		"Common.SelectAdverseReactionAlerts", "NewPlan.CTOS.FS_Toxicity"
	],
	refs: [
		{ ref: "NoAdverseReactions", selector: "NursingDocs_Assessment [name=\"ND_Ass_None\"]"},
		{ ref: "AdverseReactionsCheckBoxes", selector: "NursingDocs_PretreatmentAssesment checkbox"}

	],

	// Ext.ComponentQuery.query("NursingDocs_PretreatmentAssesment [name=\"ND_PA_CTCAE_TERM_001\"]")[0].getStore()
	init: function () {
		wccConsoleLog("Initialized Nursing Docs Assessmment Tab Controller!");

		this.application.on({
			PatientSelected : this.PatientSelected,
			scope : this
		});
	/**
		this.control({
			"NursingDocs_Assessment [name=\"ND_Ass_None\"]" : {
				change : this.ClickNoneCheckbox
			},
			"NursingDocs_PretreatmentAssesment checkbox" : {
				change : this.ClickCheckbox
			},
			"NursingDocs_Assessment button[action=\"save\"]": {
				click: this.SaveAssessments
			}
		});
	 **/
	},

	/* Note: This function gets called twice when a patient is selcted */
	PatientSelected : function() {
		// debugger;
	},

	ClickNoneCheckbox : function(btn, newValue, oldValue, eOpts) {
		var i, len, btn_i, AdverseReactionChecks = Ext.ComponentQuery.query("NursingDocs_PretreatmentAssesment checkbox");
		var hasPrev = this.application.Patient.Assessments.length;
		if (newValue) {
			if (hasPrev > 0) {
				Ext.MessageBox.alert("Previous Adverse Reactions Alert", "This patient has had previous adverse reactions to this regimen. Please confirm your response of no adverse reactions for today." );
			}
			len = AdverseReactionChecks.length;
			for (i = 0; i < len; i++) {
				btn_i = AdverseReactionChecks[i];
				if ("ND_Ass_None" !== btn_i.name) {
					btn_i.setValue(false);
				}
			}
		}
	},

	ClickCheckbox : function(btn, newValue, oldValue, eOpts) {
		var selectName, commentName, selectTag, comments;
		var NoneCkBox = this.getNoAdverseReactions();
		var NoAdverseState = NoneCkBox.getValue();

		switch (btn.name) {
			case "ND_Ass_Fatigue":
				selectName = "ND_Ass_FatigueOptions";
				commentName = "ND_Ass_FatigueComments";
				break;
			case "ND_Ass_Anorexia":
				selectName = "ND_Ass_AnorexiaOptions";
				commentName = "ND_Ass_AnorexiaComments";
				break;
			case "ND_Ass_Nausea":
				selectName = "ND_Ass_NauseaOptions";
				commentName = "ND_Ass_NauseaComments";
				break;
			case "ND_Ass_Vomiting":
				selectName = "ND_Ass_VomitingOptions";
				commentName = "ND_Ass_VomitingComments";
				break;
			case "ND_Ass_Rash":
				selectName = "ND_Ass_RashOptions";
				commentName = "ND_Ass_RashComments";
				break;
			case "ND_Ass_Insomnia":
				selectName = "ND_Ass_InsomniaOptions";
				commentName = "ND_Ass_InsomniaComments";
				break;
			case "ND_Ass_Distress":
				selectName = "ND_Ass_DistressOptions";
				commentName = "ND_Ass_DistressComments";
				break;
			case "ND_Ass_Diarrhea":
				selectName = "ND_Ass_DiarrheaOptions";
				commentName = "ND_Ass_DiarrheaComments";
				break;
			case "ND_Ass_Dyspnea":
				selectName = "ND_Ass_DyspneaOptions";
				commentName = "ND_Ass_DyspneaComments";
				break;
			case "ND_Ass_Neuropathy":
				selectName = "ND_Ass_NeuropathyOptions";
				commentName = "ND_Ass_NeuropathyComments";
				break;
			case "ND_Ass_Other":
				selectName = "";
				commentName = "ND_Ass_OtherComments";
				break;
			default:
				selectName = "";
				commentName = "";
				break;
		}

		if (btn.value && "ND_Ass_None" !== btn.name) {
			NoneCkBox.setValue(false);
		}

		if ("" !== selectName ) {
			selectTag = Ext.ComponentQuery.query("NursingDocs_PretreatmentAssesment [name=\"" + selectName + "\"]")[0];
		}
		if ("" !== commentName ) {
			comments = Ext.ComponentQuery.query("NursingDocs_PretreatmentAssesment [name=\"" + commentName + "\"]")[0];
		}

		if (btn.value) {
			if ( selectTag ) {
				selectTag.show();
				selectTag.focus(true, true);
			}
			else if (comments) {
				comments.show();
				comments.focus(true, true);
			}
		}
		else {
			if ( selectTag ) {
				selectTag.hide();
				selectTag.setValue("");
			}
			else if (comments) {
				comments.hide();
				comments.setValue("");
			}
		}
	},

	AssessmentsPost : function(records, Patient, theApp) {
		var params = Ext.encode(records);
		var CMD = "POST";
		var URL = Ext.URLs.AddND_Assessment + "/" + Patient.PAT_ID;
		if (Patient.AssessmentRecordID) {
			CMD = "PUT";
			URL += "/" + Patient.AssessmentRecordID;
		}
		// theApp.loadMask("Saving Pretreatment Assessment Information...");
		Ext.Ajax.request({
			url: URL,
			method : CMD,
			jsonData : params,
			scope: this,
			success: function( response, opts ){
				// theApp.unMask();
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (!resp.success) {
					Ext.MessageBox.alert("Saving Error", "ND - Assessment Section, Save Error - " + resp.msg );
				}
				else {
					var theTable2Update = "TheTable2Update";
					theApp.fireEvent("loadAdverseEventsHistory", theTable2Update);
					Ext.MessageBox.alert("Pretreatment Assessment", "Pretreatment Assessment Section, Save complete" );		// MWB - 7/20/2012 - New alert to confirm completion of saving.
					Patient.AssessmentRecordID = resp.AssessmentID;
				}
			},
			failure : function( response, opts ) {
				// theApp.unMask();
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				Ext.MessageBox.alert("Saving Error", "ND - Assessment Section, Save Error - <br />" + resp.msg );
			}
		});
	},

	SaveAssessments : function() {
		var Patient = this.application.Patient;

		var assFormChecks = Ext.ComponentQuery.query("NursingDocs_PretreatmentAssesment checkbox");
		var i, v, haveChecks = false, label, numChecks = assFormChecks.length, assFormCheck, assFormValue, assFormOption, assFormComments, assFormCommentsValue;
		var records = {}, assessmentsCount = 0;
		records.patientId = Patient.id;
		records.Details = [];

		for (i = 0; i < numChecks; i++) {
			assFormCheck = assFormChecks[i];
			v = assFormCheck.getValue();
			if (v) {
				haveChecks = true;
				assFormOption = Ext.ComponentQuery.query("NursingDocs_PretreatmentAssesment [name=\"" + assFormCheck.name + "Options\"]");
				assFormComments = Ext.ComponentQuery.query("NursingDocs_PretreatmentAssesment [name=\"" + assFormCheck.name + "Comments\"]");

				assFormValue = 0;
				assFormCommentsValue = "";

				if (assFormOption && assFormOption.length > 0) {
					assFormValue = assFormOption[0].getRawValue();
					if (null === assFormValue) {
						assFormValue = "";
					}
				}
				if (assFormComments && assFormComments.length > 0) {
					assFormCommentsValue = assFormComments[0].getValue();
				}
				// var sectionTitle = assFormCheck.up("fieldset").title;
				if ("ND_Ass_None" == assFormCheck.name) {
					label = "No Adverse Reaction";
				}
				else {
					label = assFormCheck.boxLabel;
				}
				records.Details[assessmentsCount++] = { 
					"sequence" : i, 
					"fieldLabel" : label, 
					"choice" : true, 
					"comments" : assFormCommentsValue, 
					"levelChosen" : assFormValue
				};
			}
		}


		var NoneCkBox = this.getNoAdverseReactions();
		var NoAdverseState = NoneCkBox.getValue();
		if (NoAdverseState) {
			this.AssessmentsPost(records, Patient, this.application);
		}
		else {
			if (haveChecks) {
				if (this.getNoAdverseReactions().getValue()) {
					this.AssessmentsPost(records, Patient, this.application);
				}
				else {
					var PAT_ID = this.application.Patient.PAT_ID;	/* PAT_ID is used rather than just the Patient ID, because it defines a patient/treatment Regimen */
					var view = Ext.widget("SelectAdverseReactionAlerts", { "PAT_ID" : PAT_ID, "type" : "Pretreatment Assessments", "records" : records, "scope" : this, "fnc" : this.AssessmentsPost });
				}
			}
			else {
				Ext.MessageBox.alert("Saving Error", "If there are no Adverse Events then you must check the \"No Adverse Reaction since Last Treatment\" checkbox" );
			}
		}
	}
});




Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.Chemotherapy", {
	extend: "Ext.app.Controller",

	refs: [
		{
			"ref" : "ndctWarning",
			"selector" : "NursingDocs_Chemotherapy [name=\"ndctWarning\"]"
		},
		{
			"ref" : "CycleInfo",
			"selector" : "NursingDocs_Chemotherapy [name=\"ndctCycleInfo\"]"
		},
		{
			"ref" : "ndctRegimen",
			"selector" : "NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]"
		},
		{
			"ref" : "ndctCycle",
			"selector" : "NursingDocs_Chemotherapy displayfield[name=\"ndctCycle\"]"
		},
		{
			"ref" : "ndctDay",
			"selector" : "NursingDocs_Chemotherapy displayfield[name=\"ndctDay\"]"
		},
		{
			"ref" : "ndctDate",
			"selector" : "NursingDocs_Chemotherapy displayfield[name=\"ndctDate\"]"
		},
		{
			"ref" : "FNLPanel",
			"selector" : "NursingDocs_Chemotherapy [name=\"NeutropeniaInfo\"]"
		},
		{
			"ref" : "EmoPanel",
			"selector" : "NursingDocs_Chemotherapy [name=\"EmesisInfo\"]"
		}
	],

	

	init: function () {
		this.application.on( 
			{ 
				PatientSelected : this.ChemoBioSectionHandler,
				scope : this 
			} 
		);
		this.control({
			"NursingDocs_Chemotherapy [name=\"NeutropeniaInfo\"]" : {
				afterrender : function() {
					var thisCtl = this.getController("NewPlan.CTOS.NursingDocs.Chemotherapy");
					thisCtl.getFNRiskInfoAfterRender();
				},
				scope : this 
			},
			"NursingDocs_Chemotherapy [name=\"EmesisInfo\"]" : {
				afterrender : function() {
					var thisCtl = this.getController("NewPlan.CTOS.NursingDocs.Chemotherapy");
					thisCtl.getEmoLevelInfoAfterRender();
				},
				scope : this 
			}

		});
	},

	ClearTabData : function() {
		// console.log("Chemotherapy - ClearTabData");
		this.ChemoBioSectionHandler(true);
	},



	getFNRiskInfoAfterRender : function() {
		var Data = this.application.Patient.OEMRecords;
		if (Data) {
			this.getFNRiskInfo(Data.FNRisk);
		}
	},

	getEmoLevelInfoAfterRender : function() {
		var Data = this.application.Patient.OEMRecords;
		if (Data) {
			this.getEmoLevelInfo(Data.ELevelName);
		}
	},

	/* Calling getFNRiskInfo() or  getEmoLevelInfo() before the panels are rendered causes a the "Expand/Collapse Icon to not be displayed */
	getFNRiskInfo : function(FNRisk) {
		var i, len, FNLPanel = Ext.ComponentQuery.query("NursingDocs_Chemotherapy [name=\"NeutropeniaInfo\"]");
		var FNLevelInfo = FNRisk < 10 ? "Low Risk" : FNRisk <= 20 ? "Intermediate Risk" : "High Risk";
		var theFNLevelData = Ext.util.Format.htmlDecode(this.application.Patient.OEMRecords.NeutropeniaRecommendation);

		len = FNLPanel.length;
		var theTitle = "Febrile Neutropenia Level = " + FNRisk + "% (" + FNLevelInfo + ")";

		for (i = 0; i < len; i++) {
			if (FNLPanel[i].rendered) {
				FNLPanel[i].setTitle(theTitle);
				FNLPanel[i].update(theFNLevelData);
				FNLPanel[i].doLayout();
			}
		}
	},

	getEmoLevelInfo : function(ELevel) {
		var i, len, EmoPanel = Ext.ComponentQuery.query("NursingDocs_Chemotherapy [name=\"EmesisInfo\"]");
		len = EmoPanel.length;
		var emoTitle = "Emetogenic Level = Not Specified",
			theEmoLevelData = "Not Yet Available";

		if (ELevel && Ext.util.Format.htmlDecode(this.application.Patient.OEMRecords.ELevelRecommendation)) {
			emoTitle = "Emetogenic Level = " + ELevel;
			theEmoLevelData = Ext.util.Format.htmlDecode(this.application.Patient.OEMRecords.ELevelRecommendation);
			/*
				"<abbr title=\"American Society of Clinical Oncology\">ASCO</abbr><p>" + Ext.util.Format.htmlDecode(this.application.Patient.OEMRecords.ELevelRecommendationASCO) + "</p>" +
				"<abbr title=\"National Comprehensive Cancer Network\">NCCN</abbr><p>" + Ext.util.Format.htmlDecode(this.application.Patient.OEMRecords.ELevelRecommendationNCCN) + "</p>";
			*/
		}
		for (i = 0; i < len; i++) {
			if (EmoPanel[i].rendered) {
				EmoPanel[i].setTitle(emoTitle);
				if (ELevel) {
					EmoPanel[i].update(theEmoLevelData);
					EmoPanel[i].doLayout();
				}
			}
		}
	},

	setChemoBioField : function(fieldQuery, value, showField) {
		// console.log("setChemoBioField - " + fieldQuery);
		var theField = Ext.ComponentQuery.query(fieldQuery);
		var i, len = theField.length;
		for (i = 0; i < len; i++) {
			theField[i].setValue(value);
			if (showField) {
				theField[i].show();
			}
			else {
				theField[i].hide();
			}
		}
	},

	showMultiContainer : function(fieldQuery, showField) {
		var theField = Ext.ComponentQuery.query(fieldQuery);
		var i, len = theField.length;
		for (i = 0; i < len; i++) {
			if (showField) {
				theField[i].show();
			}
			else {
				theField[i].hide();
			}
		}
	},

	ChemoBioSectionHandler : function ( Clear ) {		// Handles parsing and posting of data in the Chemotherapy/Biotherapy sections in ND and Flowsheet
		if (!this.application.Patient.ThisAdminDay) {
			this.application.Patient.ThisAdminDay = this.getController("NewPlan.OEM").IsDayAnAdminDay( Ext.Date.format( new Date(), "m/d/Y") );
		}
		var ThisAdminDay = this.application.Patient.ThisAdminDay;
/*
		var ndctRegimenAr = Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]");
		var ndctCycleAr = Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctCycle\"]");
		var ndctDayAr = Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctDay\"]");
		var ndctDateAr = Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctDate\"]");
*/
		var Patient = this.application.Patient;
		var TempDesc = Patient.TemplateDescription;
		if ("" === TempDesc) {
			TempDesc = Patient.TemplateName;
		}

		// var EmoLevel = "", FNRisk = "";
		// var Data = Patient.OEMRecords;
		// this.getFNRiskInfo(Data.FNRisk);
		// this.getEmoLevelInfo(Data.ELevelName);


		this.getFNRiskInfoAfterRender();
		this.getEmoLevelInfoAfterRender();

		this.setChemoBioField("NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]", TempDesc, ("" !== TempDesc));
		var theField = Ext.ComponentQuery.query("NursingDocs_Chemotherapy [name=\"Link2XternalFlowsheet\"]");
		var i, len = theField.length, data = "<a href=\"Fsheet/?PAT_ID=" + this.application.Patient.PAT_ID + "&PID=" + this.application.Patient.id + "&PName=" + this.application.Patient.name + "\" target=\"FlowsheetWin\">Flowsheet</a> (opens new window)";
		for (i = 0; i < len; i++) {
			theField[i].update(data);
		}
/*
		this.showMultiContainer("NursingDocs_Chemotherapy [name=\"ndctWarning\"]", false);
		this.showMultiContainer("NursingDocs_Chemotherapy [name=\"ndctCycleInfo\"]", false);
		this.setChemoBioField("NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]", "", false);
		this.setChemoBioField("NursingDocs_Chemotherapy displayfield[name=\"ndctCycle\"]", "", false);
		this.setChemoBioField("NursingDocs_Chemotherapy displayfield[name=\"ndctDay\"]", "", false);
		this.setChemoBioField("NursingDocs_Chemotherapy displayfield[name=\"ndctDate\"]", "", false);
*/
		if (ThisAdminDay) {
			this.setNDCTWarning("", false, ThisAdminDay);
		}
		else {
			var msg = this.getNextAdminDate();
			this.setNDCTWarning("<div class=\"ndctWarning\"><span>Note:</span> - This is not a scheduled Administration Day for this Regimen</div>" + msg, true, ThisAdminDay);
		}

		this.showMultiContainer("NursingDocs_Chemotherapy [name=\"ndctWarning\"]", true);
		this.showMultiContainer("NursingDocs_Chemotherapy [name=\"ndctCycleInfo\"]", true);
	},



	setNDCTWarning : function(msg, show, ThisAdminDay) {
		var theField = Ext.ComponentQuery.query("NursingDocs_Chemotherapy [name=\"ndctWarning\"]");
		var i, el, len = theField.length;
		for (i = 0; i < len; i++) {
			el = theField[i].getEl();
			if (el) {
				el.setHTML(msg);
			}
			if (show) {
				theField[i].show();
			}
			else {
				theField[i].hide();
			}
		}

		this.showMultiContainer("NursingDocs_Chemotherapy [name=\"ndctCycleInfo\"]", !ThisAdminDay);
		if (ThisAdminDay) {
			this.setChemoBioField("NursingDocs_Chemotherapy displayfield[name=\"ndctCycle\"]", ThisAdminDay.Cycle, ThisAdminDay);
			this.setChemoBioField("NursingDocs_Chemotherapy displayfield[name=\"ndctDay\"]", ThisAdminDay.Day, ThisAdminDay);
			this.setChemoBioField("NursingDocs_Chemotherapy displayfield[name=\"ndctDate\"]", ThisAdminDay.AdminDate, ThisAdminDay);
		}
	},

	getNextAdminDate : function() {
		var ListOfAdminDays,
			today = new Date(), 
			AdminDate, 
			AdminDate1 = null, 
			LastAdminDate = null,
			msg = "", i;
		if (this.application.Patient && this.application.Patient.OEMRecords) {
			ListOfAdminDays = this.application.Patient.OEMRecords.OEMRecords;
			for (i = 0; i < ListOfAdminDays.length; i++ ) {
				LastAdminDate = AdminDate;
				AdminDate = ListOfAdminDays[i].AdminDate;
				AdminDate1 = new Date(AdminDate);
				if (AdminDate1.getTime() > today.getTime()) {
					if (LastAdminDate !== null) {
						msg = "<br />Last Administration Date: <b>" + LastAdminDate + "</b>";
					}
					msg += "<br />Next Administration Date: <b>" + AdminDate + "</b>";
					return msg;
				}
			}
			if (LastAdminDate !== null) {
				msg = "<br />Last Administration Date: <b>" + LastAdminDate + "</b><br />There are no additional Administration Dates";
			}
		}
		return msg;
	}


});

Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.DischargeInstructions" ,{
	extend: "Ext.app.Controller",
	views: [
		"CkBoxTArea",
		"NewPlan.CTOS.NursingDocs.DischargeInstructions", 
		"NewPlan.CTOS.NursingDocs.PatientEducationDetails",
		"NewPlan.CTOS.NursingDocs.FollowupDetails",
		"NewPlan.CTOS.NursingDocs.selDischargeInstructions"
	],
	refs: [
		{
			ref : "Barrier_Physical",
			selector : "CkBoxTArea[name=\"Barrier_Physical\"]"
		},
		{
			ref : "Barrier_Physical_ckbox",
			selector : "CkBoxTArea[name=\"Barrier_Physical\"] checkbox"
		},
		{
			ref : "PatientEduDetails",
			selector : "DischargeInstructions fieldset[name=\"PatientEducation\"] container[name=\"PatientEduDetails\"]"
		},
		{
			ref : "DischargeInstrDetails",
			selector : "PatientEducationDetails [name=\"ND_E_DischargeInstr\"]"
		},

		{
			ref : "ClinicInfoDetails",
			selector : "PatientEducationDetails [name=\"ND_E_ClinicInfoDetails\"]"
		},
		{
			ref : "ClinicInfoDetailsDisplay",
			selector : "ClinicInfoDisplay"
		},
		{
			ref : "DischargeInstrDetailsDisplay",
			selector : "SpclInstrDisplay"
		},
		{
			ref : "SpclInstrDetailsDisplay",
			selector : "PatientEducationDetails [name=\"ND_E_SpclInstrDisplay\"]"
		},

		{
			ref : "MedSpecificInfoDisplay",
			selector : "PatientEducationDetails MedSpecificInfoDisplay"
		},

		{
			ref : "selDischargeInstruction2See",
			selector : "selDischargeInstructions"
		},
		{
			ref : "DischargeInstrForm",
			selector : "DischargeInstructions form"
		},
		{
			ref : "DischargeInstrSaveBtn",
			selector : "DischargeInstructions button[text=\"Save\"]"
		},
		{
			ref : "Applied_Template",
			selector : "DischargeInstructions [name=\"Applied_Template\"]"
		}
/***
		,
		{
			ref : "MedList",
			selector : "DischargeInstructions [name=\"MedList\"]"
		}
***/



	],

	// Ext.ComponentQuery.query("DischargeInstructions [name=\"PatientEducation\"] [name=\"PatientEduDetails\"]")[0].getStore()
	init: function () {
		this.application.on( { DischargeInstructionSelected : this.DischargeInstrSelected, scope : this } );
		this.control({
			"scope" : this,
			"DischargeInstructions [id=\"PrintDischargeInstructions\"]" : {
				"click" : function() {
					var PAT_ID = this.application.Patient.PAT_ID;
					if (this.application.Patient.DischargeInfoID) {
						var DI_ID = this.application.Patient.DischargeInfoID;
						window.open("/DI?pat_id=" + PAT_ID + "&di_id=" + DI_ID);
					}
					else {
						Ext.Msg.alert("Discharge Instructions Not Available", "There are no discharge instructions listed for this patient");
					}
				}
			},
			"DischargeInstructions [id=\"PrintFollowupApt\"]" : {
				"click" : function() {
					var PAT_ID = this.application.Patient.PAT_ID;
					var DI_ID = this.application.Patient.DischargeInfoID;
					if (this.application.Patient.DischargeInfoID) {
						DI_ID = this.application.Patient.DischargeInfoID;
						window.open("/DIF?pat_id=" + PAT_ID + "&di_id=" + DI_ID);
					}
					else {
						Ext.Msg.alert("Followup Appointments Not Available", "There are no followup appointments listed for this patient");
					}
				}
			},

			"DischargeInstructions [name=\"ND_E_SelectClinicInfo\"]" : {
				"change" : this.ClinicInfoSelected
			},
			"PatientEducationDetails [name=\"ND_E_SelectDischargeInstr\"]" : {
				"change" : this.SpclInstrSelected
			},
			"[name=\"PatientEducation\"] [name=\"PE_Taught\"]" : {
				"change" : function(theFld, newV, oldV, eOpts) {
					var theSectionByID = Ext.getCmp("PatientEducationDetails");
					if ("Yes" === theFld.fieldLabel && newV) {
						theSectionByID.show();
					}
					else if ("No" === theFld.fieldLabel && newV) {
						theSectionByID.hide();
					}
				}
			},

			"[name=\"Followup\"] [name=\"FollowupNeeded\"]" : {
				"change" : function(theFld, newV, oldV, eOpts) {
					var theSectionByID = Ext.getCmp("FollowupDetails");
					if ("Yes" === theFld.fieldLabel && newV) {
						theSectionByID.show();
					}
					else if ("No" === theFld.fieldLabel && newV) {
						theSectionByID.hide();
					}
				}
			},

			"[name=\"DischargeInstructionsMaterials\"] [name=\"DischargeInstructions_Given\"]" : {
				"change" : function(theFld, newV, oldV, eOpts) {
					var theSectionByID = Ext.getCmp("DischargeInstructionsDetails");
					if ("Yes" === theFld.fieldLabel && newV) {
						theSectionByID.show();
					}
					else if ("No" === theFld.fieldLabel && newV) {
						theSectionByID.hide();
					}
				}
			},
			"DischargeInstructions button[text=\"Save\"]" : {
				"click" : this.SaveDischargeInstructions
			},
			"DischargeInstructions button[text=\"Cancel\"]" : {
				"click" : this.CancelDischargeInstructions
			},
			"PatientEducationDetails [name=\"MedSpecificInfoHeader\"]" : {
				"click" : this.DisplayMedInfo
			},
			"fieldset[name=\"Barriers\"] checkbox" : {
				"change" : function(btn, nValu, oValu, opts) {
					this.MExclusiveCkBoxs(btn, nValu);
				}
			},

			"DischargeInstructions" : {
				"afterrender" : this.DischargeInstrPanelLoadProc
			},

			"selDischargeInstructions" : {
				"select" : this.selDischargeInstructions
			}
		});
	},




	selDischargeInstructions : function(theCombo, records, eOpts) {
		var theData = records[0].getData();
		var theForm = theCombo.up("panel").down("form").getForm();
		var args = { "form" : theForm, "DischargeID" : theData.DischargeID, "PatientID" : theData.PatientID, "date" : theData.date };
		if (theForm.isDirty()) {
			Ext.MessageBox.show({
				title:"Save Changes?",
				msg: "You have made changes to this Discharge Instructions Form, do you want to save those changes before opening a new set of Discharge Instructions?",
				buttons: Ext.Msg.YESNOCANCEL,
				icon: Ext.Msg.QUESTION,
				scope : this,
				fn: function(btn){
					if ("no" === btn){
						args.SaveCurrent = false;
						this.application.fireEvent("DischargeInstructionSelected", args);
					}
					else if ("yes" === btn) {
						args.SaveCurrent = true;
						this.application.fireEvent("DischargeInstructionSelected", args);
					}
				}
			});
		}
		else {
			args.SaveCurrent = false;
			this.application.fireEvent("DischargeInstructionSelected", args);
		}
	},

	DischargeInstrSelected : function( args ) {
		var PreviousDischargeID = this.application.Patient.DischargeInfoID;
		var theForm = args.form;
		var curDischargeID = args.DischargeID;		// ID for currently loaded Discharge Instructions
		this.application.Patient.DischargeInfoID = curDischargeID;
		var Pat_ID = this.application.Patient.PAT_ID;
		args.Pat_ID = Pat_ID;
		args.PreviousDischargeID = PreviousDischargeID;

		if (args.SaveCurrent) {
			this.doFormSubmit(theForm, Pat_ID, PreviousDischargeID, args, this.LoadForm);
		}
		else {
			this.LoadForm(args);
		}
	},

	DischargeInstrPanelLoadProc : function(thePanel, eOpts) {
		var theForm = this.getDischargeInstrForm();

		var appTemplateField = this.getApplied_Template();
		appTemplateField.setValue(this.application.Patient.AppliedTemplate.id);



	var theTemplate = this.application.Patient.AppliedTemplate;
	var PreMeds = theTemplate.PreMHMeds;
	var TheMeds = theTemplate.Meds;
	var PostMeds = theTemplate.PostMHMeds;
	var MedsList = { "PreMeds" : PreMeds, "Meds" : TheMeds, "PostMeds" : PostMeds };

		appTemplateField = this.getApplied_Template();
		appTemplateField.setValue(this.application.Patient.AppliedTemplate.id);

		// var MedListField = this.getMedList();
		// MedListField.setValue(Ext.JSON.encode(MedsList));





		var combo = this.getSelDischargeInstruction2See();
		var store = combo.getStore();
		var Pat_ID = this.application.Patient.PAT_ID;
		store.proxy.url = Ext.URLs.PatientDischarge + "/" + Pat_ID;	// Patient/DischargeInstructions/F8B904DF-D4CF-E311-A4B9-000C2935B86F
		store.load({
			"scope" : this,
			"form" : theForm,
			"Pat_ID" : Pat_ID,
			"callback" : function(records, operation, success) {
				var DischargeID;
				if(success){
					Ext.each(records, function(r) {
						var dateCk = Ext.util.Format.date(new Date());
						if (dateCk == r.get('date')) {
							DischargeID = r.get("DischargeID");
							return false;	/* Exit from the each loop */
						}
					});
				}
				if (DischargeID) {
					this.application.Patient.DischargeInfoID = DischargeID;
					this.LoadForm({"form" : operation.form, "Pat_ID" : operation.Pat_ID, "DischargeID" : DischargeID});
				}
			}
		});
		this.LoadMedInfo();
	},


	MExclusiveCkBoxs : function(btn, nValu) {
		var label = btn.getFieldLabel();
		var ckboxs = Ext.ComponentQuery.query("fieldset[name=\"Barriers\"] checkbox");
		var tAreas = Ext.ComponentQuery.query("fieldset[name=\"Barriers\"] textarea");
		if ("None" === label) {
			if (nValu) {
				var i, cBox, tArea, cl = ckboxs.length, tl = tAreas.length;
				for (i = 1; i < cl; i++) {
					cBox = ckboxs[i];
					cBox.setValue("");
				}
				for (i = 0; i < tl; i++) {
					tArea = tAreas[i];
					tArea.setValue("");
					tArea.hide();
				}
			}
		}
		else if (nValu) {
			ckboxs[0].setValue("");
		}
	},

	LoadMedInfo : function() {
		var theMeds = this.application.Patient.AppliedTemplate.Meds;
		Ext.Ajax.request({
			url: Ext.URLs.TemplateMedDocs + "/" + this.application.Patient.AppliedTemplate.id,
			scope: this,
			theMeds : theMeds,
			success: function( response, opts ){
				var i, text = response.responseText;
				var resp = Ext.JSON.decode( text );
				var MedRecords = resp.records;
				var thePanel = this.getMedSpecificInfoDisplay();

				for (i = 0; i < MedRecords.length; i++) {
					var dec, raw = MedRecords[i].Documentation;
					if ("" === raw) {
						dec = "No additional information provided for this medication";
					}
					else {
						dec = Ext.util.Format.htmlDecode(raw);
					}
					MedRecords[i].Documentation = dec;
				}
				thePanel.update(MedRecords);
			},
			failure : function( response, opts ) {
				alert("Failure to load Medicstion Info");
			}
		});

		/* MedSpecificInfoDisplay */
	},
	DisplayMedInfo : function() {
		var htmlData = prettyPrint( COMS.Patient.AppliedTemplate, { maxDepth : 5 } ).innerHTML;
		Ext.create('Ext.window.Window', {
			title: 'Patient Template',
			height: 800,
			width: 950,
			autoScroll : true,
			html : htmlData
		}).show();
	},

	SaveDischargeInstructions : function(theBtn, theEvent, eOpts) {
		var form = theBtn.up('form').getForm();
		var Pat_ID = this.application.Patient.PAT_ID;
		var PreviousDischargeID = this.application.Patient.DischargeInfoID;
		this.doFormSubmit(form, Pat_ID, PreviousDischargeID, null, null);
	},


	CancelDischargeInstructions : function(theBtn, theEvent, eOpts) {
		var form = theBtn.up('form').getForm();
		if (form.isDirty()) {
			Ext.MessageBox.show({
				title:"Clear Form?",
				msg: "You have made changes to this Discharge Instructions Form, are you sure you want to CANCEL this form? All changes will be lost",
				buttons: Ext.Msg.YESNO,
				icon: Ext.Msg.QUESTION,
				fn: function(btn){
					if ("yes" === btn) {
						var form = theBtn.up('form').getForm();
						form.reset();
						Ext.getCmp("PatientEducationDetails").hide();
						Ext.getCmp("FollowupDetails").hide();
						Ext.getCmp("DischargeInstructionsDetails").hide();
					}
				}
			});
		}
		else {
			Ext.SetForm2ReadOnly("DischargeInstructionsForm", false);
			this.getDischargeInstrSaveBtn().show();
			form.reset();
			Ext.getCmp("PatientEducationDetails").hide();
			Ext.getCmp("FollowupDetails").hide();
			Ext.getCmp("DischargeInstructionsDetails").hide();
		}

	},


	LoadForm : function( args ) {
		this.application.loadMask("Loading Discharge Instructions");

		var form = args.form;
		if (form.getForm) {
			form = form.getForm();
		}
		var Pat_ID = args.Pat_ID;
		var DischargeInstructionsID = args.DischargeID;

		var URL = Ext.URLs.PatientDischarge + "/" + Pat_ID + "/" + DischargeInstructionsID;

		Ext.ClearForm(form);
		Ext.getCmp("PatientEducationDetails").hide();
		Ext.getCmp("DischargeInstructionsDetails").hide();
		Ext.getCmp("FollowupDetails").hide();
		form.load({
			url: URL,
			method: "GET",
			scope : this,
			success: function(form, action) {
				// If Date of data loaded is today, form can be written to
				// else form is readonly
				// process input to show sections of the form
				var theData = action.result.data;
				if ("1" == theData.PE_Taught) {
					Ext.getCmp("PatientEducationDetails").show();
				}
				if ("1" == theData.DischargeInstructions_Given) {
					Ext.getCmp("DischargeInstructionsDetails").show();
				}
				if ("1" == theData.FollowUp_Type) {
					Ext.getCmp("FollowupDetails").show();
				}
				Ext.ClearDirtyFlags(form);
				var dateCk = Ext.util.Format.date(new Date());
				if (dateCk !== theData.date) {
					Ext.SetForm2ReadOnly("DischargeInstructionsForm", true);
					this.getDischargeInstrSaveBtn().hide();
				}
				else {
					Ext.SetForm2ReadOnly("DischargeInstructionsForm", false);
					this.getDischargeInstrSaveBtn().show();
				}
				this.application.unMask();

			},
		    failure: function(form, action) {
				Ext.Msg.alert("Load failed", action.result.errorMessage);
				this.application.unMask();
			}
		});
	},

	doFormSubmit : function(form, Pat_ID, PreviousDischargeID, fncArgs, fnc) {

		var CMD = "POST";
		var URL = Ext.URLs.PatientDischarge + "/" + Pat_ID;
		if (PreviousDischargeID) {
			CMD = "PUT";
			URL += "/" + PreviousDischargeID;
		}

		form.submit({
			scope : this,
			clientValidation: true,
			url: URL,
			method : CMD,
			success: function(form, action) {
				Ext.ClearDirtyFlags(form);	/* Undocumented function in app.js */
				this.application.Patient.DischargeInfoID = action.result.dischargeInfoID;
				Ext.MessageBox.alert("Discharge Instructions Saved", "Discharge Instructions Saved..." );
				if (fnc) {
					fnc(fncArgs);
				}

				// Force combo to reload it's store
				var theCombo = this.getSelDischargeInstruction2See();
				delete theCombo.getStore().lastQuery;

				// delete qeb.getStore().lastQuery;

			},
			failure: function(form, action) {
				switch (action.failureType) {
					case Ext.form.action.Action.CLIENT_INVALID:
						Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
						break;
					case Ext.form.action.Action.CONNECT_FAILURE:
						Ext.Msg.alert('Failure', 'Ajax communication failed');
						break;
					case Ext.form.action.Action.SERVER_INVALID:
						Ext.Msg.alert('Failure', action.result.msg);
				}
			}
		});
	},




	commonRenderTable : function(thePanel, theStore) {
		var Records = theStore,
			len = Records.length,
			Data = [],
			i,
			theRec;
		if (len > 0) {
			for (i = 0; i < len; i++) {
				theRec = Records[i];
				var doc = theRec.Details;
				doc = Ext.util.Format.htmlDecode(doc);
				Data.push({"Label" : theRec.Label, "Details" : doc });
			}
		}
		thePanel.update(Data);
	},


	/**
	 * Special Instructions
	 **/
	spclInstrStore : [],
	SpclInstrGetSelected : function(key) {
			Ext.Ajax.request({
				url: Ext.URLs.DischargeInstruction + "/" + key,
				method : "GET",
				scope: this,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					if (!resp.success) {
						Ext.MessageBox.alert("Error", "Site Configuration - Special Instructions Details, Retrieve Error - " + resp.msg );
					}
					else {
						Ext.Array.include(this.spclInstrStore, resp.records[0]);
						var theStore = this.spclInstrStore;
						var thePanel = this.getDischargeInstrDetailsDisplay();
						this.commonRenderTable(thePanel, theStore);
					}
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );

					Ext.MessageBox.alert("Error", "Error", "Site Configuration - Special Instructions Details, Retrieve Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
	},

	SpclInstrSelected : function(theCkBox, nValue, oValue, eOpts) {
		var newKeys, oldKeys, newRecords, records2Remove;

		if (nValue && "" !== nValue ) {
			newKeys = nValue.split(",");
		}
		if (oValue && "" !== oValue ) {
			oldKeys = oValue.split(",");
		}
		
		// var diff1 = Ext.Array.difference(newKeys, oldKeys);
		newRecords = null;
		records2Remove = null;
		if (newKeys && !oldKeys) {
			newRecords = newKeys;
			records2Remove = null;
		}
		else if (newKeys && oldKeys) {
			newRecords = Ext.Array.difference(newKeys, oldKeys);
			if (0 == newRecords.length) {
				newRecords = null;
			}
			records2Remove = Ext.Array.difference(oldKeys, newKeys);
		}
		else if (!newKeys && oldKeys) {
			newRecords = null;
			records2Remove = oldKeys;
		}
		if (newRecords || newRecords == "") {
			this.SpclInstrGetSelected(newRecords);
		}
		var i, len = this.spclInstrStore.length;
		if (records2Remove) {
			for (i = 0; i < len; i++) {
				var rec = this.spclInstrStore[i];
				if (rec.ID === records2Remove[0]) {
					Ext.Array.remove(this.spclInstrStore, rec);

						var theStore = this.spclInstrStore;
						var thePanel = this.getDischargeInstrDetailsDisplay();
						this.commonRenderTable(thePanel, theStore);


					// this.renderSpclInstrTable();
					break;
				}
			}
		}
	},

	/**
	 * Clinic Information
	 **/
	sciStore : [],
	sciGetSelected : function(key) {
			Ext.Ajax.request({
				url: Ext.URLs.ClinicInfo + "/" + key,
				method : "GET",
				scope: this,
				success: function( response, opts ){
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );
					if (!resp.success) {
						Ext.MessageBox.alert("Error", "Site Configuration - Clinic Info, Retrieve Error - " + resp.msg );
					}
					else {
						Ext.Array.include(this.sciStore, resp.records[0]);
						var theStore = this.sciStore;
						var thePanel = this.getClinicInfoDetailsDisplay();
						this.commonRenderTable(thePanel, theStore);
					}
				},
				failure : function( response, opts ) {
					var text = response.responseText;
					var resp = Ext.JSON.decode( text );

					Ext.MessageBox.alert("Error", "Error", "Site Configuration - Clinic Info, Retrieve Error - " + "e.message" + "<br />" + resp.msg );
				}
			});
	},
	ClinicInfoSelected : function(theCkBox, nValue, oValue, eOpts) {
		var newKeys, oldKeys, newRecords, records2Remove;
		if (nValue && "" !== nValue ) {
			newKeys = nValue.split(",");
		}
		if (oValue && "" !== oValue ) {
			oldKeys = oValue.split(",");
		}
		newRecords = null;
		records2Remove = null;
		if (newKeys && !oldKeys) {
			newRecords = newKeys;
			records2Remove = null;
		}
		else if (newKeys && oldKeys) {
			newRecords = Ext.Array.difference(newKeys, oldKeys);
			if (0 == newRecords.length) {
				newRecords = null;
			}
			records2Remove = Ext.Array.difference(oldKeys, newKeys);
		}
		else if (!newKeys && oldKeys) {
			newRecords = null;
			records2Remove = oldKeys;
		}
		if (newRecords || newRecords == "") {
			this.sciGetSelected(newRecords);
		}
		var i, len = this.sciStore.length;
		if (records2Remove) {
			for (i = 0; i < len; i++) {
				var rec = this.sciStore[i];
				if (rec.ID === records2Remove[0]) {
					Ext.Array.remove(this.sciStore, rec);
						var theStore = this.sciStore;
						var thePanel = this.getClinicInfoDetailsDisplay();
						this.commonRenderTable(thePanel, theStore);
					break;
				}
			}
		}
	}
});

Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.EducationTab", {
	extend: "Ext.app.Controller",

	stores: [
	],


	views: [
	],

	refs: [
	    {
		    ref: "CTOS",
			selector: "NewPlanTab CTOS"
	    },
		{
			ref : "NursingDocsTabSet",
			selector : "NursingDocs"
		},
		{
			ref : "ND_E_Tab",
			selector : "NursingDocs_Education"
		},

		{
			ref : "ND_E_PE_Outpatient",
			selector : "NursingDocs_Education [name=\"ND_E_PE_Outpatient\"]"
		},
		{
			ref : "ND_E_DischargeInstrGiven",
			selector : "NursingDocs_Education [name=\"ND_E_DischargeInstrGiven\"]"
		},
		{
			ref : "ND_E_PE_Outpatient",
			selector : "NursingDocs_Education [name=\"\"]"
		}
	],


	// Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Nursing Docs Education Tab Controller!");
		this.control({
            "NursingDocs_Education button[action=\"save\"]": {
                click: this.SaveEducation
            }
		});
	},

	SaveEducation : function(button) {
		Ext.MessageBox.alert("Discharge Instructions", "Discharge Instructions Section, Save complete" );		// MWB - 7/20/2012 - New alert to confirm completion of saving.
	}

});


			/*****************************
			 *	Patient Record Structure
			 *		id, 
			 *		name,
			 *		Gender, 
			 *		DOB, 
			 *		Age, 
			 *		Amputee, 
			 *		BSA, 
			 *		BSA_Method, 
			 *		BSA_Weight, 
			 *		WeightFormula, 
			 *		TemplateDescription, 
			 *		TemplateID, 
			 *		TemplateName, 
			 *		TreatmentEnd, 
			 *		TreatmentStart, 
			 *		Disease : [ 
			 *			Stage, 
			 *			Type, 
			 *			coms.model.patientinfo_id 
			 *		], 
			 *		Measurements : [
			 *			BP, 
			 *			BSA, 
			 *			BSA_Method, 
			 *			BSA_Weight, 
			 *			DateTaken, 
			 *			Height, 
			 *			Weight, 
			 *			WeightFormula, 
			 *			coms.model.patientinfo_id
			 *		]
			 ****************************************************/

Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.GenInfoTab", {
	extend: "Ext.app.Controller",

	stores: [
	],


	views: [
		"Common.VitalSignsHistory", "NewPlan.CTOS.NursingDocs.Chemotherapy"
	],

	refs: [
	    {
		    ref: "CTOS",
			selector: "NewPlanTab CTOS"
	    },
		{
			ref : "NursingDocsTabSet",
			selector : "NursingDocs"
		},


		{
			ref: "ndct_GenInfoTab",
			selector: "NursingDocs_GenInfo"
		},

		{
			ref: "ndct_PatientID", 
			selector: "NursingDocs_GenInfo NursingDocs_PatientID"
		},

		{
			ref: "ndct_PatientTeaching", 
			selector: "NursingDocs_GenInfo NursingDocs_PatientTeaching"
		},

		{
			ref: "ndct_DualDosing", 
			selector: "NursingDocs_GenInfo NursingDocs_DualDosingVerification"
		},

		{
			ref: "ndVitalSignsForm",
			selector: "VitalSignsEntryForm"
		},

		{
			ref: "ndVitalsTempF",
			selector: "VitalSignsEntryForm [name=\"ndVitalsTempF\"]"
		},
		{
			ref: "ndVitalsTempLoc",
			selector: "VitalSignsEntryForm [name=\"ndVitalsTempLoc\"]"
		},
		{
			ref: "ndVitalsTempC",
			selector: "NursingDocs_VitalSigns displayfield[name=\"ndVitalsTempC\"]"
		},
		{
			ref: "ndVitalsPulse",
			selector: "VitalSignsEntryForm [name=\"ndVitalsPulse\"]"
		},
		{
			ref: "ndVitalsSystolic",
			selector: "VitalSignsEntryForm [name=\"ndVitalsSystolic\"]"
		},
		{
			ref: "ndVitalsGender",
			selector: "NursingDocs_VitalSigns [name=\"ndVitalsGender\"]"
		},
		{
			ref: "ndVitalsHeightIN",
			selector: "VitalSignsEntryForm [name=\"ndVitalsHeightIN\"]"
		},
		{
			ref: "ndVitalsHeightCM",
			selector: "NursingDocs_VitalSigns displayfield[name=\"ndVitalsHeightCM\"]"
		},
		{
			ref: "ndVitalsResp",
			selector: "VitalSignsEntryForm [name=\"ndVitalsResp\"]"
		},
		{
			ref: "ndVitalsDiastolic",
			selector: "VitalSignsEntryForm [name=\"ndVitalsDiastolic\"]"
		},
		{
			ref: "ndVitalsAge",
			selector: "NursingDocs_VitalSigns displayfield[name=\"ndVitalsAge\"]"
		},
		{
			ref: "ndVitalsWeightP",
			selector: "VitalSignsEntryForm [name=\"ndVitalsWeightP\"]"
		},
		{
			ref: "ndVitalsWeightKG",
			selector: "NursingDocs_VitalSigns displayfield[name=\"ndVitalsWeightKG\"]"
		},
		{
			ref: "ndVitalsPain",
			selector: "VitalSignsEntryForm [name=\"ndVitalsPain\"]"
		},
		{
			ref: "ndVitalsO2Level",
			selector: "VitalSignsEntryForm [name=\"ndVitalsO2Level\"]"
		},
		{
			ref: "ndVitalsBSA",
			selector: "NursingDocs_VitalSigns displayfield[name=\"ndVitalsBSA\"]"
		},
		{
			ref: "VitalSignsHistory",
	        selector: "NursingDocs_GenInfo VitalSignsHistory"
		},
		{
			ref : "ND_PT_TabLabInfo",
			selector : "NursingDocs_GenInfo [name=\"ND_PT_LabInfo\"]"
		}
	],


	init: function () {
		wccConsoleLog("Initialized Nursing Docs General Info Tab Controller!");

		this.application.on( 
			{ 
				PopulateNDTabs : this.GenInfoRendered,	// Event is fired off from the NursingDocs Tab Controller when the NursingDocs Tab is activated
				ClearNDTabs : this.ClearTabData,		// Event is fired off from the NursingDocs Tab Controller when a new patient is selected
				scope : this 
			} 
		);
	

		this.control({
			"NursingDocs_GenInfo" : {
				afterrender : this.GenInfoRendered
			},
			"button[id=\"AddVitals_PatientInfoPanel3\"]" : {
					click : this.HandleVSFormShowCalcButtons
			},
			"button[text=\"Calculations\"]" : {
					click : this.HandleVSFormShowCalcButtons
			},
            "button[name=\"ShowBSA\"]" : {
                click: this.NDGIVS_BSA_Calculations
            },

            "NursingDocs_GenInfo button[action=\"save\"]": {
                click: this.btnSaveGenInfo
            },
			"NursingDocs_DualDosingVerification button[name=\"DDV_FirstSig\"]" : {
                click: this.btnFirstSignature
			},
			"NursingDocs_DualDosingVerification button[name=\"DDV_SecSig\"]" : {
                click: this.btnSecondSignature
			},
            "Authenticate[title=\"Signature of first verifier\"] button[action=\"save\"]": {
                click: this.AuthenticateUser
            },
            "Authenticate[title=\"Signature of second verifier\"] button[action=\"save\"]": {
                click: this.AuthenticateUser
            },
			"NursingDocs_Chemotherapy [name=\"NeutropeniaInfo\"]" : {
				afterrender : Ext.togglePanelOnTitleBarClick
			},
			"NursingDocs_Chemotherapy [name=\"EmesisInfo\"]" : {
				afterrender : Ext.togglePanelOnTitleBarClick
			},

			"VitalSignsEntryForm" : {
				"beforerender" : this.initForm,
				"show" : this.initForm
			},


			"VitalSignsEntryForm [name=\"ndVitalsTempF\"]" : {
				"blur" : this.VitalsFieldValidation
			},
			"VitalSignsEntryForm [name=\"ndVitalsPulse\"]" : {
				"blur" : this.VitalsFieldValidation
			},
			"VitalSignsEntryForm [name=\"ndVitalsSystolic\"]" : {
				"blur" : this.VitalsFieldValidation
			},
			"VitalSignsEntryForm [name=\"ndVitalsDiastolic\"]" : {
				"blur" : this.VitalsFieldValidation
			},
			"VitalSignsEntryForm [name=\"ndVitalsHeightIN\"]" : {
				"blur" : this.VitalsFieldValidation
			},
			"VitalSignsEntryForm [name=\"ndVitalsResp\"]" : {
				"blur" : this.VitalsFieldValidation
			},
			"VitalSignsEntryForm [name=\"ndVitalsO2Level\"]" : {
				"blur" : this.VitalsFieldValidation
			},
			"VitalSignsEntryForm [name=\"ndVitalsWeightP\"]" : {
				"blur" : this.VitalsFieldValidation
			},
			"VitalSignsEntryForm [name=\"ndVitalsPain\"]" : {
				"blur" : this.VitalsFieldValidation
			}
		});
	},
	initForm : function(theForm) {
		if (this.application.Patient) {
			this.initVitalSignsEntryForm(this.application.Patient);
		}
	},

	procIDE : function(fld, IDESpec) {
		var fldName = fld.name, 
			fldValue = parseFloat(fld.getValue()), 
			errMsg = "", 
			LastVitals, 
			systolic, 
			diastolic, 
			Valid = true,
			Vitals,
			min, max, Msg, LastVital, pct, pctLast, valu;

		if (!Ext.isEmpty(this.application.Patient.Vitals)) {
			Vitals = this.application.Patient.Vitals;
			if (Vitals.length > 0) {
				LastVitals = Vitals[0];
				if (LastVitals.BP) {
					var BP = LastVitals.BP.split("/");
					if (BP.length > 0) {
						systolic = BP[0];
						diastolic = BP[1];
					}
				}
			}
		}
		if ("on" === IDESpec.MinMax) {
			min = parseFloat(IDESpec.MinValue);
			max = parseFloat(IDESpec.MaxValue);
			Msg = IDESpec.MinMaxMsg;
			if (fldValue < min || fldValue > max) {
				errMsg += Msg + ". ";
				Valid = false;
			}
		}
		if ("on" === IDESpec.PctVarFromLast && LastVitals) {
			pct = parseFloat(IDESpec.PctVarFromLastPct) / 100;
			switch(fldName) {
				case "ndVitalsTempF" : 
					LastVital = LastVitals.Temperature;
					break;
				case "ndVitalsPulse" : 
					LastVital = LastVitals.Pulse;
					break;
				case "ndVitalsHeightIN" : 
					LastVital = LastVitals.Height;
					break;
				case "ndVitalsResp" : 
					LastVital = LastVitals.Respiration;
					break;
				case "ndVitalsO2Level" : 
					LastVital = LastVitals.SPO2;
					break;
				case "ndVitalsWeightP" : 
					LastVital = LastVitals.Weight;
					break;
				case "ndVitalsPain" : 
					LastVital = LastVitals.Pain;
					break;
				case "ndVitalsSystolic" : 
					LastVital = systolic;
					break;
				case "ndVitalsDiastolic" : 
					LastVital = diastolic;
					break;
			}
			LastVital = parseFloat(LastVital);
			pctLast = pct * LastVital;
			min = LastVital - pctLast;
			max = LastVital + pctLast;
			Msg = IDESpec.PctVarFromLastMsg;
			if (fldValue < min || fldValue > max) {
				errMsg += Msg + ". ";
				Valid = false;
			}
		}
		if ("on" === IDESpec.PctVarFromValue) {
			pct = parseFloat(IDESpec.PctVarFromValuePct) / 100;
			valu = parseFloat(IDESpec.PctVarFromValueValue);
			pctLast = pct * valu;
			min = valu - pctLast;
			max = valu + pctLast;
			Msg = IDESpec.PctVarFromValueMsg;
			if (fldValue < min || fldValue > max) {
				errMsg += Msg + ". ";
				Valid = false;
			}
		}

		if (!Valid) {
			fld.markInvalid(errMsg);
			return false;
		}
		return true;
	},

	VitalsFieldValidation : function(fld, evt, eOpts) {
		var IDESpec = this.application.IntelligentDataElements,
			IDESpecLen = 0, i,
			fldName = fld.name, fldNameMap = [],
			validity = true,
			FldProcessed = false;
		if (IDESpec) {
			IDESpecLen = IDESpec.length;
		}
		

		fldNameMap = [];
		fldNameMap.ndVitalsTempF = "Temperature";
		fldNameMap.ndVitalsPulse = "Pulse";
		fldNameMap.ndVitalsSystolic = "BP_Systolic";
		fldNameMap.ndVitalsDiastolic = "BP_Diastolic";
		fldNameMap.ndVitalsHeightIN = "Height";
		fldNameMap.ndVitalsResp = "Respiration";
		fldNameMap.ndVitalsO2Level = "SP_O2";
		fldNameMap.ndVitalsWeightP = "Weight";
		fldNameMap.ndVitalsPain = "Pain";

		if (IDESpecLen > 0) {
			for (i = 0; i < IDESpecLen; i++) {
				if (IDESpec[i].Vital2Check === fldNameMap[fldName]) {
					validity = this.procIDE(fld, IDESpec[i]);
					if (validity) {
						if ("ndVitalsTempF" === fldName ) {
							FldProcessed = true;
							this.ConvertTemp(fld, eOpts);
						}
						else if ("ndVitalsHeightIN" === fldName) {
							FldProcessed = true;
							this.ConvertHeight(fld, eOpts);
						}
						else if ("ndVitalsWeightP" === fldName) {
							FldProcessed = true;
							this.ConvertWeight(fld, eOpts);
						}
					}
				}
			}
		}

		if (IDESpecLen <= 0 || !FldProcessed) {
			if ("ndVitalsTempF" === fldName ) {
				this.ConvertTemp(fld, eOpts);
			}
			else if ("ndVitalsHeightIN" === fldName) {
				this.ConvertHeight(fld, eOpts);
			}
			else if ("ndVitalsWeightP" === fldName) {
				this.ConvertWeight(fld, eOpts);
			}
		}
		return validity;
	},

	AuthenticateUser : function (button) {
		var win = button.up('window');
		var SigNameField = win.SigName;
		var SigField = Ext.ComponentQuery.query("NursingDocs_DualDosingVerification displayfield[name=\"" + SigNameField + "\"]")[0];

		var SigName1Field = win.SigName1;
		var Sig1Field = Ext.ComponentQuery.query("NursingDocs_DualDosingVerification displayfield[name=\"" + SigName1Field + "\"]")[0];
		var Sig1 = Sig1Field.getValue();

		var SigName2Field = win.SigName2;
		var Sig2Field = Ext.ComponentQuery.query("NursingDocs_DualDosingVerification displayfield[name=\"" + SigName2Field + "\"]")[0];
		var Sig2 = Sig1Field.getValue();

        var values = win.down('form').getValues();
		if ("" !== values.AccessCode && "" !== values.VerifyCode) {
			if (values.AccessCode === Sig1 || values.AccessCode === Sig2) {
				Ext.MessageBox.alert("Authentication Error", "You can't sign this record twice. Please have another sign to verify");
			}
			else {
				Ext.Ajax.request({
					scope : this,
					url: "/Session/Authenticate?Access=" + values.AccessCode + "&Verify=" + values.VerifyCode,
					success: function( response, opts ){
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						if (resp.success && "Failed" !== resp.records) {
							win.close();
							SigField.setValue(resp.records);
						}
						else {
							Ext.MessageBox.alert("Authentication Error", "Authentication failed! Please click the \"Sign to Verify\" button again and enter your proper Access and Verify Codes");
						}
					},
					failure : function( response, opts ) {
						Ext.MessageBox.alert("Authentication Error", "Authentication failed! \n\nPlease click the \"Sign to Verify\" button again and enter your proper Access and Verify Codes");
					}
				});
			}
		}
	},




	btnFirstSignature : function( button ) {
		var SigNameFld1 = "DDV_FirstSig1";
		var SigNameFld2 = "DDV_FirstSig4";
		var EditRecordWin = Ext.widget("Authenticate", { title : "Signature of first verifier", SigName : SigNameFld1, SigName1 : SigNameFld1, SigName2 : SigNameFld2 });
		Ext.ComponentQuery.query("Authenticate form")[0].getForm().getFields().getAt(0).focus("", true);



	},

	btnSecondSignature : function( button ) {
		var SigNameFld1 = "DDV_FirstSig1";
		var SigNameFld2 = "DDV_FirstSig4";
		var EditRecordWin = Ext.widget("Authenticate", { title : "Signature of second verifier", SigName : SigNameFld2, SigName1 : SigNameFld1, SigName2 : SigNameFld2 });
		Ext.ComponentQuery.query("Authenticate form")[0].getForm().getFields().getAt(0).focus("", true);
	},

	ConvertWeight : function( fld, eOpts ) {
        var inValue = fld.getValue();
        var NDVitalsWeightKG = fld.ownerCt.query("displayfield[name=\"ndVitalsWeightKG\"]")[0];
        var kg = "";
        if ("" !== inValue) {
            kg = Ext.lbs2kg(inValue);
        }
        NDVitalsWeightKG.setValue("(" + kg + " kg)");
        this.ndgiUpdateBSA(fld);
	},

	ConvertHeight : function( fld, eOpts ) {
        var inValue = fld.getValue();
        var NDVitalsHeightCM = fld.ownerCt.query("displayfield[name=\"ndVitalsHeightCM\"]")[0];
        var cm = "";
        if ("" !== inValue) {
            cm = Ext.in2cm(inValue);
        }
        NDVitalsHeightCM.setValue("(" + cm + " cm)");
        this.ndgiUpdateBSA(fld);
	},

	ConvertTemp : function( fld, eOpts ) {
        var inValue = fld.getValue();
        var NDVitalsTempC = fld.ownerCt.query("displayfield[name=\"ndVitalsTempC\"]")[0];
        var c = "";
        if ("" !== inValue) {
            c = Ext.f2C(fld.getValue());
        }
        NDVitalsTempC.setValue("(" + c + " &deg;C)");
	},





ClearTabData : function(obj) {
		// obj.ClearNDTabs()
		// obj.PopulateNDTabs()
		// obj.scope

        var thisCtl;
		try {
			thisCtl = this.getController("NewPlan.CTOS.NursingDocs.GenInfoTab");
			if (!thisCtl.getNdct_GenInfoTab().rendered) {
				return;		// Traps possible call from the PopulateNDTabs event
			}
		}
		catch (e) {
			Ext.MessageBox.alert("Loading Error", "ND - ClearTabData() - Error - " + e.message );
		}
		// Event is fired off from the NursingDocs Tab Controller when a new patient is selected

		var f1 = thisCtl.getNdct_PatientID();
		Ext.each(f1.query('field'), function(field) { 
			field.reset(); 
		}); 
		var f2 = thisCtl.getNdct_PatientTeaching();
		Ext.each(f2.query('field'), function(field) { 
			field.reset(); 
		});
		var f3 = thisCtl.getNdct_DualDosing();
		Ext.each(f3.query('field'), function(field) { 
			field.reset(); 
		});

		var allForms = Ext.ComponentQuery.query("VitalSignsEntryForm");
		var afLen = allForms.length;
		var f, i;
		if (this.application.Patient) {
			this.initVitalSignsEntryForm(this.application.Patient);
		}
		else {
			var clearedFields = {"ndVitalsTempF" : "", "ndVitalsTempC" : "", "ndVitalsTempLoc" : "", "ndVitalsPulse" : "", "ndVitalsBP" : "", "ndVitalsSystolic" : "", "ndVitalsDiastolic" : "", "ndVitalsGender" : "", "ndVitalsHeightIN" : "", "ndVitalsHeightCM" : "", "ndVitalsResp" : "", "ndVitalsO2Level" : "", "ndVitalsAge" : "", "ndVitalsWeightP" : "", "ndVitalsWeightKG" : "", "ndVitalsPain" : "", "ndVitalsBSA" : "" };
			for (i = 0; i < afLen; i++) {
				f = allForms[i].getForm();
				f.setValues(clearedFields);
			}
		}

		thisCtl = this.getController("NewPlan.CTOS.NursingDocs.Chemotherapy");
		thisCtl.ClearTabData();
	},

	initVitalSignsEntryForm : function(Patient) {
		var allForms = Ext.ComponentQuery.query("VitalSignsEntryForm");
		var afLen = allForms.length;
		var f, i;
		var clearedFields = {
			"displayfield-1212-inputEl" : "",
			"ndVitalsAge" : Patient.Age, 
			"ndVitalsBSA" : "",
			"ndVitalsDiastolic" : "", 
			"ndVitalsGender" : Patient.Gender, 
			"ndVitalsHeightCM" : "",
			"ndVitalsHeightIN" : "",
			"ndVitalsO2Level" : "",
			"ndVitalsPain" : "",
			"ndVitalsPulse" : "", 
			"ndVitalsResp" : "", 
			"ndVitalsSystolic" : "", 
			"ndVitalsTempC" : "",
			"ndVitalsTempF" : "", 
			"ndVitalsTempLoc" : "",
			"ndVitalsWeightKG" : "",
			"ndVitalsWeightP" : ""
		};

		for (i = 0; i < afLen; i++) {
			f = allForms[i].getForm();
			f.setValues(clearedFields);
		}
	},







	_saveVitals2DB : function(record, parent) {
		this.application.loadMask("One moment please, saving Patient Vitals...");
		record.DFN = this.application.Patient.DFN;

		var Temperature = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsTempF\"]")[0];
		var TemperatureLocation = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsTempLoc\"]")[0];
		var Pulse = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsPulse\"]")[0];
		var Systolic = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsSystolic\"]")[0];
		var Diastolic = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsDiastolic\"]")[0];
		var Height = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsHeightIN\"]")[0];
		var Respiration = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsResp\"]")[0];
		var Weight = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsWeightP\"]")[0];
		var Pain = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsPain\"]")[0];
		var SPO2 = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsO2Level\"]")[0];
		var BSA = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsBSA\"]")[0];
		var NDVitalsWeightKG = Ext.ComponentQuery.query("displayfield[name=\"ndVitalsWeightKG\"]")[0];
		var NDVitalsHeightCM = Ext.ComponentQuery.query("displayfield[name=\"ndVitalsHeightCM\"]")[0];
		var NDVitalsTempC = Ext.ComponentQuery.query("displayfield[name=\"ndVitalsTempC\"]")[0];

		Temperature.setValue("");
		TemperatureLocation.setValue("");
		Pulse.setValue("");
		Systolic.setValue("");
		Diastolic.setValue("");
		Height.setValue("");
		Respiration.setValue("");
		Weight.setValue("");
		Pain.setValue("");
		SPO2.setValue("");
		BSA.setValue("");
		NDVitalsWeightKG.setValue("");
		NDVitalsHeightCM.setValue("");
		NDVitalsTempC.setValue("");

		this._saveVitalsPOST(record);
	},

	_saveVitalsPOST : function(record) {
		this.SavingVitals = true;
		var params = Ext.encode(record);
		Ext.Ajax.request({
			scope : this,
			url: Ext.URLs.AddVitals,
			method : "POST",
			jsonData : params,
			success : function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				this.SavingVitals = false;
				this.application.unMask();
				if (resp.success) {
					var newPlanTabCtl = this.getController("NewPlan.NewPlanTab");
					newPlanTabCtl.loadVitals("Update Vitals");
					Ext.MessageBox.alert("Vital Signs", "Vitals Information Section, Save complete" );		// MWB - 7/20/2012 - New alert to confirm completion of saving.
				}
				else {
					Ext.MessageBox.alert("Saving Error", "ND - GenInfo - Vitals Information Section, Save Error - " + resp.msg );
				}
			},
			failure : function( response, opts ) {
				this.SavingVitals = false;
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				this.application.unMask();
				Ext.MessageBox.alert("Saving Vitals ERROR", "Vitals Information Section, Save Error - <br>" + resp.msg );
			}
		});
	},

	SaveVitals : function(parent) {
		var Patient = this.application.Patient;
		var ThisAdminDay = this.application.Patient.ThisAdminDay;		// This is the OEM Record for a specific Admin Day - 
		// { id, AdminDate, Cycle, Day, PostTherapy, PostTherapyInstr, PreTherapy, PreTherapyInstr, Therapy, TherapyInstr }

		var Temperature = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsTempF\"]")[0];
		var tValid1 = this.VitalsFieldValidation(Temperature);

		var Pulse = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsPulse\"]")[0];
		var tValid2 = this.VitalsFieldValidation(Pulse);

		var Systolic = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsSystolic\"]")[0];
		var tValid3 = this.VitalsFieldValidation(Systolic);

		var Diastolic = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsDiastolic\"]")[0];
		var tValid4 = this.VitalsFieldValidation(Diastolic);

		var Height = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsHeightIN\"]")[0];
		var tValid5 = this.VitalsFieldValidation(Height);

		var Respiration = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsResp\"]")[0];
		var tValid6 = this.VitalsFieldValidation(Respiration);

		var Weight = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsWeightP\"]")[0];
		var tValid7 = this.VitalsFieldValidation(Weight);

		var Pain = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsPain\"]")[0];
		var tValid8 = this.VitalsFieldValidation(Pain);

		var SPO2 = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsO2Level\"]")[0];
		var tValid9 = this.VitalsFieldValidation(SPO2);


		var TemperatureLocation = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsTempLoc\"]")[0];
		var BSA = Ext.ComponentQuery.query(parent + " [name=\"ndVitalsBSA\"]")[0];
		var NDVitalsWeightKG = Ext.ComponentQuery.query("displayfield[name=\"ndVitalsWeightKG\"]")[0];
		var NDVitalsHeightCM = Ext.ComponentQuery.query("displayfield[name=\"ndVitalsHeightCM\"]")[0];
		var NDVitalsTempC = Ext.ComponentQuery.query("displayfield[name=\"ndVitalsTempC\"]")[0];

		var dt = new Date();
		var record = {};
		record.patientId = Patient.id;
		record.DateTaken = Ext.Date.format(dt, "m/d/Y H:i:s");
		record.DateTaken = Ext.Date.format(dt, "m/d/Y");		// Ignore timestamp till we can get an accurate time from VistA
		record.Temperature = Temperature.getValue();
		record.TemperatureLocation = TemperatureLocation.getValue();
		record.Pulse = Pulse.getValue();
		record.Systolic = Systolic.getValue();
		record.Diastolic = Diastolic.getValue();
		record.Height = Height.getValue();
		record.Respiration = Respiration.getValue();
		record.Weight = Weight.getValue();
		record.Pain = Pain.getValue();
		record.SPO2 = SPO2.getValue();
		record.BSA = BSA.getValue();
		record.BSA = record.BSA.split(" ")[0];
		record.BP = Systolic.getValue() + " / " + Diastolic.getValue();

		var flg1 = "" === record.Temperature;
		var flg1a = "" === record.TemperatureLocation;
		var flg2 = "" === record.Pulse;
		var flg3 = "" === record.Systolic;
		var flg4 = "" === record.Height;
		var flg5 = "" === record.Respiration;
		var flg6 = "" === record.Diastolic;
		var flg7 = "" === record.Weight;
		var flg8 = null === record.Pain;
		var flg9 = "" === record.SPO2;
		var flg10 = "" === record.BSA;

		if (flg1 && flg1a && flg2 && flg3 && flg4 && flg5 && flg6 && flg7 && flg8 && flg9 && flg10) {
			return false;
		}

		if (record.SPO2 && (record.SPO2 <= 0 || record.SPO2 > 100)) {
			Ext.MessageBox.alert("Vital Signs", "Vital Signs cannot be saved. <abbr title=\"Saturation of Peripheral Oxygen\">SP O<sub>2</sub>%</abbr> cannot be &gt; 100%" );		// MWB - 7/20/2012 - New alert to confirm completion of saving.
			return true;
		}

		if (ThisAdminDay) {
			record.Cycle = ThisAdminDay.Cycle;
			record.Day = ThisAdminDay.Day;
		}
		else {	// This is NOT an AdminDay for this Regimen
			record.Cycle = "";
			record.Day = "";
		}

		record.WeightFormula = Patient.WeightFormula;
		record.BSA_Method = Patient.BSA_Method;
		record.BSA_Weight = Patient.BSA_Weight;

		if (!(tValid1 && tValid2 && tValid3 && tValid4 && tValid5 && tValid6 && tValid7 && tValid8 && tValid9)) {
			Ext.MessageBox.alert("Vital Signs", "Vital Signs cannot be saved. Check Fields for Input Errors" );

			var quesAnswer = Ext.Msg.show({
				"title" : "Vital Signs Exceed Parameters", 
				"msg" : "One or more Vital Signs exceeds the recommended parameters. Please check indicated Vital Sign Fields for possible Input Errors. If you still wish to save these Vitals, click \"Yes\". To cancel and review, please click \"No\". Do you still want to save the current Vitals?", 
				"buttons" : Ext.Msg.YESNO, 
				"icon" : Ext.Msg.QUESTION,
				"scope" : this,
				"fn" : function( btnID, txt, opt) {
					if ("yes" === btnID) {
						this._saveVitals2DB(record, parent);
					}
				}
			});
		}
		else {
			this._saveVitals2DB(record, parent);
		}

		return true;
	},
	
	SaveGenInfo : function() {
		var Patient = this.application.Patient;

		var rgPatientID = Ext.ComponentQuery.query("NursingDocs_PatientID [name=\"rgPatientID\"]")[0].getValue();
		var rgConsent = Ext.ComponentQuery.query("NursingDocs_PatientID [name=\"rgConsent\"]")[0].getValue();
		var PatientIDComment = Ext.ComponentQuery.query("NursingDocs_PatientID [name=\"PatientIDComment\"]")[0].getValue();

		var rgEduAssess = Ext.ComponentQuery.query("NursingDocs_PatientTeaching [name=\"rgEduAssess\"]")[0].getValue();
		var rgPlanReviewed = Ext.ComponentQuery.query("NursingDocs_PatientTeaching [name=\"rgPlanReviewed\"]")[0].getValue();

		var flg1 = null === rgPatientID.patientIDGood || undefined === rgPatientID.patientIDGood;
		var flg2 = null === rgConsent.consentGood || undefined === rgConsent.consentGood;
		var flg3 = null === rgEduAssess.educationGood || undefined === rgEduAssess.educationGood;
		var flg4 = null === rgPlanReviewed.planReviewed || undefined === rgPlanReviewed.planReviewed;
		var flg5 = "" === PatientIDComment;

		if (flg1 && flg2 && flg3 && flg4 && flg5) {
			return (false);
		}

		var record = {};
		record.patientId = Patient.id;

		record.patientIDGood = rgPatientID.patientIDGood || false;
		record.consentGood = rgConsent.consentGood || false;
		record.comment = PatientIDComment;
		record.educationGood = rgEduAssess.educationGood || false;
		record.planReviewed = rgPlanReviewed.planReviewed || false;

		this.SavingGenInfo = true;
		var params = Ext.encode(record);
		Ext.Ajax.request({
			scope : this,
			url: Ext.URLs.AddND_GenInfo,
			method : "POST",
			jsonData : params,
			success: function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				this.SavingGenInfo = false;
				if (!this.SavingVitals && !this.SavingGenInfo) {
					this.application.unMask();
				}

				if (!resp.success) {
					Ext.MessageBox.alert("Saving Error", "ND - GenInfo - General Information Section, Save Error - " + resp.msg );
				}
				else {
					Ext.MessageBox.alert("Saving General Information Section", "Saving General Information Complete" );
				}
			},
			failure : function( response, opts ) {
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				Ext.MessageBox.alert("Saving Error", "ND - GenInfo - General Information Section, Save Error - " + resp.msg );
			}
		});
		return (true);
	},


	btnSaveGenInfo : function (button) {
		this.SavingVitals = false;
		this.SavingGenInfo = false;
		this.application.loadMask("One moment please, saving General Information...");
		var SaveGood1 = this.SaveGenInfo();
		var SaveGood2 = this.SaveVitals("NursingDocs_VitalSigns");
		this.application.unMask();
		if (!SaveGood1 && !SaveGood2) {
			Ext.MessageBox.alert("No Data Saved", "There was no data specified to be saved" );
		}
	},















	GenInfoRendered : function ( component, eOpts ) {
		var tempScratch, tempScratch1, Patient, thisCtl;
		Patient = this.application.Patient;
		thisCtl = this.getController("NewPlan.CTOS.NursingDocs.GenInfoTab");

		if (!thisCtl.getNdct_GenInfoTab().rendered) {
			return;		// Traps possible call from the PopulateNDTabs event
		}

		this.application.Patient.ThisAdminDay = this.getController("NewPlan.OEM").IsDayAnAdminDay( Ext.Date.format( new Date(), "m/d/Y") );

		var NDVitalsTempF = thisCtl.getNdVitalsTempF();
		var NDVitalsTempC = thisCtl.getNdVitalsTempC();
		var NDVitalsTempLoc = thisCtl.getNdVitalsTempLoc();
		var NDVitalsPulse = thisCtl.getNdVitalsPulse();
		var NDVitalsSystolic = thisCtl.getNdVitalsSystolic();
		var NDVitalsGender = thisCtl.getNdVitalsGender();
		var NDVitalsHeightIN = thisCtl.getNdVitalsHeightIN();
		var NDVitalsHeightCM = thisCtl.getNdVitalsHeightCM();
		var NDVitalsResp = thisCtl.getNdVitalsResp();
		var NDVitalsDiastolic = thisCtl.getNdVitalsDiastolic();
		var NDVitalsAge = thisCtl.getNdVitalsAge();
		var NDVitalsWeightP = thisCtl.getNdVitalsWeightP();
		var NDVitalsWeightKG = thisCtl.getNdVitalsWeightKG();
		var NDVitalsPain = thisCtl.getNdVitalsPain();
		var NDVitalsO2Level = thisCtl.getNdVitalsO2Level();
		var NDVitalsBSA = thisCtl.getNdVitalsBSA();

		var LaboratoryInfo = thisCtl.getND_PT_TabLabInfo();
		LaboratoryInfo.update( Patient.History );

		var VitalSigns = thisCtl.getVitalSignsHistory();
		globalAppPatientScope = this;
		VitalSigns.update( Patient );

		NDVitalsGender.setValue((("M" === Patient.Gender) ? "Male" : "Female"));
		NDVitalsAge.setValue(Patient.Age);
		NDVitalsPain.setValue("");
		NDVitalsO2Level.setValue("");
		NDVitalsBSA.setValue("");		// Patient.BSA);

		NDVitalsTempF.setValue("");
		NDVitalsTempC.setValue("");
        NDVitalsTempLoc.setValue("");
		NDVitalsPulse.setValue("");

		NDVitalsSystolic.setValue("");
		NDVitalsDiastolic.setValue("");
		NDVitalsResp.setValue("");
		NDVitalsHeightIN.setValue("");
		NDVitalsHeightCM.setValue("");
		NDVitalsWeightP.setValue("");
		NDVitalsWeightKG.setValue("");

		var VSHTemplateDataBtns;
		if (VitalSigns && VitalSigns.rendered) {		// Make sure the Vital Signs in the ND/GenInfo tab are rendered before trying to attach.
			var newCtl = this.getController("NewPlan.NewPlanTab");
			VSHTemplateDataBtns = VitalSigns.el.select("button.dspVSHDoseCalcs");
			VSHTemplateDataBtns.on("click", newCtl.HandleVSHCalcDoseButtons, this);
			var piTableInfo = newCtl.getPatientInfoTableInformation();
			piTableInfo.update(this.application.Patient);
		}
	},

	HandleVSFormShowCalcButtons : function (evt, btn) {
		var Patient = this.application.Patient;
		var PatientData = Ext.ShowBSACalcs(Patient, false, null, null, null);

		Ext.MessageBox.show({
			title : "Dosage Calculations",
			msg : PatientData,
			buttons : Ext.MessageBox.OK
		});
	},

	ndgiUpdateBSA : function(fld) {
		var Parent = fld.up(".VitalSignsEntryForm");
		var HeightEditFieldValue = Parent.query("container [name=\"ndVitalsHeightIN\"]")[0].getValue();
		var WeightEditFieldValue = Parent.query("container [name=\"ndVitalsWeightP\"]")[0].getValue();
		var VitalsBSAField = Parent.query("displayfield[name=\"ndVitalsBSA\"]")[0];

		var Patient = this.application.Patient;
		var params = {};
		params = Ext.apply(params, Patient);

		params.Weight = WeightEditFieldValue;
		params.Height = HeightEditFieldValue;

		if ("" !== params.Weight && "" !== params.Height) {
			Patient.Height = params.Height;
			Patient.Weight = params.Weight;
			params.BSA = Ext.BSA_Calc(params);
			VitalsBSAField.setValue(params.BSA + " m<sup>2</sup>");
		}
		else {
			VitalsBSAField.setValue("");
		}
	}

});


Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.NursingDocs", {
	extend: "Ext.app.Controller",

	stores: [
		"ND_CTCAE_SOC",
		"ND_CTCAE_Data"
	],


	views: [
		"NewPlan.CTOS.NursingDocs",
		"NewPlan.CTOS.NursingDocs.GenInfo",				/* New Name = "General Information" */
		"NewPlan.CTOS.NursingDocs.Assessment",			/* New Name = "Assessment" */
		"NewPlan.CTOS.NursingDocs.PreTreatment",		/* New Name = "IV Site" */
		"NewPlan.CTOS.NursingDocs.Treatment",			/* New Name = "Administration" */
		"NewPlan.CTOS.NursingDocs.React_Assess",		/* New Name = "Infusion Reactions" */
		"NewPlan.CTOS.NursingDocs.Education",			/* Now container for "Discharge Instructions" Tab */
		"NewPlan.CTOS.NursingDocs.DischargeInstructions"	/* Contained within Education Tab */
	],

	refs: [
	    {
		    ref: "GenInfoTab",
			selector: "NursingDocs_GenInfo"
	    },
		{
			ref: "CTOS_Tabs",
			selector: "NewPlanTab CTOS"
	    }
	],


	// Ext.ComponentQuery.query("NursingDocs")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Nursing Docs Tab Controller!");
		this.application.on({
			PatientSelected : this.PatientSelected,
			scope : this
		});


		this.control({
			"NursingDocs" : {
				beforeactivate : this.BeforeTabActivated
			}
		});
	},


	BeforeTabActivated :  function( component, eOpts ) {
		var PatientInfo = this.application.Patient;
		if ("" === PatientInfo.TemplateID) {
			alert("No Template has been applied to this patient\nTab will not display");
			this.getCTOS_Tabs().setActiveTab( 0 );
			return false;
		}
		this.application.fireEvent("PopulateNDTabs");
		return true;
	},

	PatientSelected : function(arg1, arg2, arg3) {
		// Fire an event that will force all the ND Tabs to clear out their data
		this.application.fireEvent("ClearNDTabs");
	}

});


Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.PreTreatmentTab", {
	extend: "Ext.app.Controller",

	stores: [
	],


	views: [
	],

	refs: [
	    {
		    ref: "CTOS",
			selector: "NewPlanTab CTOS"
	    },
		{
			ref : "NursingDocsTabSet",
			selector : "NursingDocs"
		},
		{
			ref : "ND_PT_Tab",
			selector : "NursingDocs_PreTreatment"
		}
	],


	// Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Nursing Docs Pre Treatment Tab Controller!");
		this.control({
            "NursingDocs_PreTreatment checkbox" : {
				change : this.SiteAssessmentCheckBoxCheck
			},
            "NursingDocs_PreTreatment" : { afterrender : this.TabRendered },
            "NursingDocs_PreTreatment button[action=\"save\"]": { click: this.btnSaveIVSiteInfo }
		});
	},


    SiteAssessmentCheckBoxCheck : function(btn, newValue, oldValue, eOpts) {
        var label = btn.boxLabel;
        var PainBox = Ext.ComponentQuery.query("NursingDocs_PreTreatment checkbox[name=\"ND_PT_SA_Pain\"]")[0];
        var SwellingBox = Ext.ComponentQuery.query("NursingDocs_PreTreatment checkbox[name=\"ND_PT_SA_Swelling\"]")[0];
        var ErythemaBox = Ext.ComponentQuery.query("NursingDocs_PreTreatment checkbox[name=\"ND_PT_SA_Redness\"]")[0];
        var AbsenceBox = Ext.ComponentQuery.query("NursingDocs_PreTreatment checkbox[name=\"ND_PT_SA_Absence\"]")[0];
        if ("Absence of symptoms" === label && newValue === true) {
            PainBox.setValue(false);
            SwellingBox.setValue(false);
            ErythemaBox.setValue(false);
        }
        else if (("Pain" === label || "Swelling" === label || "Erythema" === label) && true === newValue) {
            AbsenceBox.setValue(false);
        }
    },

	btnSaveIVSiteInfo : function (button) {
		Ext.MessageBox.alert("IV Site", "IV Site Information Section, Save complete" );		// MWB - 7/20/2012 - New alert to confirm completion of saving.
	},

	TabRendered : function ( component, eOpts ) {
		wccConsoleLog("PreTreatment Tab Rendered");
		var Patient = this.application.Patient;
		var thisCtl = this.getController("NewPlan.CTOS.NursingDocs.PreTreatmentTab");
	}

});


Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.React_AssessTab", {
	extend: "Ext.app.Controller",

	stores: [
	],


	views: [
		"Common.SelectAdverseReactionAlerts"
	],

	refs: [
		{ ref: "CTOS", selector: "NewPlanTab CTOS" },
		{ ref : "NursingDocsTabSet", selector : "NursingDocs" },
		{ ref : "ND_RA_Tab", selector : "NursingDocs_React_Assess" },
		{ ref: "NoAdverseReactions", selector: "NursingDocs_React_Assess [name=\"ND_InfusReact_None\"]" }
	],


	// Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Nursing Docs React / Assess Tab Controller!");

		this.application.on({
			PatientSelected : this.PatientSelected,
			scope : this
		});
		
		this.control({
			"NursingDocs_React_Assess [name=\"ND_InfusReact_None\"]" : {
				change : this.ClickNoneCheckbox
			},

			"NursingDocs_React_Assess checkbox" : {
				change : this.ClickCheckbox
			},
            "NursingDocs_React_Assess button[action=\"save\"]": {
                click: this.SaveReact_Assess
            }
/*				
				,

			"NursingDocs_React_Assess" : {
				afterrender : this.TabRendered
			}
*/
		});
	},

	PatientSelected : function() {
		// debugger;
	},


	ClickNoneCheckbox : function(btn, newValue, oldValue, eOpts) {
		var i, len, btn_i, AdverseReactionChecks = Ext.ComponentQuery.query("NursingDocs_React_Assess checkbox");
		var hasPrev = this.application.Patient.Reactions.length;
		if (newValue) {
			if (hasPrev > 0) {
				Ext.MessageBox.alert("Previous Adverse Reactions Alert", "This patient has had previous adverse reactions to this regimen. Please confirm your response of no adverse reactions for today." );
			}
			len = AdverseReactionChecks.length;
			for (i = 0; i < len; i++) {
				btn_i = AdverseReactionChecks[i];
				if ("ND_InfusReact_None" !== btn_i.name) {
					btn_i.setValue(false);
				}
			}
		}
	},

	ClickCheckbox : function(btn, newValue, oldValue, eOpts) {
		var fldName = "", commentName, txtField, comments;
		var NoneCkBox = this.getNoAdverseReactions();
		var NoAdverseState = NoneCkBox.getValue();

		switch (btn.name) {
			case "ND_InfusReact_None": 
				fldName = "";
			break;

			case "ND_RA_Xtrav_Heat":
				fldName = "ND_RA_Xtrav_HeatFreq";
			break;
			
			case "ND_RA_Xtrav_Cool":
				fldName = "ND_RA_Xtrav_CoolFreq";
			break;
			
			case "ND_RA_Xtrav_Interventions":
				fldName = "ND_RA_Xtrav_InterventionsGiven";
			break;
			
			case "ND_RA_Xtrav_Antidotes":
				fldName = "ND_RA_Xtrav_AntidotesGiven";
			break;
			
			case "ND_RA_Xtrav_Measurements":
				fldName = "ND_RA_Xtrav_MeasurementsDetails";
			break;
			
			case "ND_RA_Xtrav_Discomfort":
				fldName = "ND_RA_Xtrav_DiscomfortDetails";
			break;

			case "ND_RA_Xtrav_Other":
				fldName = "ND_RA_Xtrav_OtherDetails";
			break;
			
			case "ND_RA_CRS_Fever":
				fldName = "ND_RA_CRS_Temperature";
			break;
			
			case "ND_RA_CRS_Hypotension":
				fldName = "ND_RA_CRS_HypotensionBP";
			break;
			
			case "ND_RA_CRS_Tachycardia":
				fldName = "ND_RA_CRS_TachycardiaPulse";
			break;
			
			case "ND_RA_CRS_Rash":
				fldName = "ND_RA_CRS_RashDesc";
			break;

			case "ND_RA_CRS_Other":
				fldName = "ND_RA_CRS_OtherDetails";
			break;
			
			case "ND_RA_HorA_Hypotension":
				fldName = "ND_RA_HorA_HypotensionBP";
			break;
			
			case "ND_RA_HorA_Other":
				fldName = "ND_RA_HorA_OtherDetails";
			break;
			
			case "ND_RA_CR_Reaction":
				fldName = "ND_RA_CR_Comments";
			break;
		}

		if (btn.value && "ND_InfusReact_None" !== btn.name) {
			NoneCkBox.setValue(false);
		}

		if ("" !== fldName ) {
			txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"" + fldName + "\"]")[0];
			if (btn.value) {
				if (txtField) {
					txtField.show();
				}
				if ("ND_RA_HorA_HypotensionBP" === fldName) {
					txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"ND_RA_HorA_Systolic\"]")[0];
				}
				else if ("ND_RA_CRS_HypotensionBP" === fldName) {
					txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"ND_RA_CRS_Systolic\"]")[0];
				}
				else if ("ND_RA_CRS_TachycardiaPulse" === fldName) {
					txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"ND_RA_CRS_Pulse\"]")[0];
				}
				if (txtField) {
					txtField.focus(true, true);
				}
			}
			else {
				if (txtField) {
					txtField.hide();
				}
				if ("ND_RA_HorA_HypotensionBP" === fldName) {
					txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"ND_RA_HorA_Diastolic\"]")[0];
					txtField.setValue("");
					txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"ND_RA_HorA_Systolic\"]")[0];

				}
				else if ("ND_RA_CRS_HypotensionBP" === fldName) {
					txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"ND_RA_CRS_Diastolic\"]")[0];
					txtField.setValue("");
					txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"ND_RA_CRS_Systolic\"]")[0];
				}
				else if ("ND_RA_CRS_TachycardiaPulse" === fldName) {
					txtField = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"ND_RA_CRS_Pulse\"]")[0];
				}
				txtField.setValue("");
			}
		}
	},

/*
	TabRendered : function ( component, eOpts ) {
		wccConsoleLog("React / Assess Tab Rendered");
		var Patient = this.application.Patient;
		var thisCtl = this.getController("NewPlan.CTOS.NursingDocs.React_AssessTab");
	},
*/

	InfuseReactPost : function(records, Patient, theApp) {
		var params = Ext.encode(records);
		var CMD = "POST";
		var URL = Ext.URLs.AddND_React_Assess + "/" + Patient.PAT_ID;
		if (Patient.InfuseReactionRecordID) {
			CMD = "PUT";
			URL += "/" + Patient.InfuseReactionRecordID;
		}
		theApp.loadMask("Saving Infusion Reactions Information...");
		Ext.Ajax.request({
			url: URL,
			method : CMD,
			jsonData : params,
			scope: this,
			success: function( response, opts ){
				theApp.unMask();
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (!resp.success) {
					Ext.MessageBox.alert("Saving Error", "ND - Infusion Reactions Section, Save Error - " + resp.msg );
				}
				else {
					theApp.fireEvent("loadAdverseEventsHistory");
					Ext.MessageBox.alert("Infusion Reactions", "Infusion Reactions Section, Save complete" );
					Patient.InfuseReactionRecordID = resp.InfuseReactionRecordID;
				}
			},
			failure : function( response, opts ) {
				theApp.unMask();
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				Ext.MessageBox.alert("Saving Error", "ND - Infusion Reactions Section, Save Error - <br />" + resp.msg );
			}
		});
	},



	SaveReact_Assess : function(btn) {
		// var theForm = btn.up("form").getForm();
		var Patient = this.application.Patient;

		var ReactAssesFormChecks = Ext.ComponentQuery.query("NursingDocs_React_Assess checkbox");
		var i, v, haveChecks = false, numChecks = ReactAssesFormChecks.length, ReactAssesFormCheck, ReactAssesFormValue, ReactAssesFormOption, ReactAssesFormComments, ReactAssesFormCommentsValue;
		var records = {}, ReactAssesessmentsCount = 0;
		records.patientId = Patient.id;
		records.Details = [];

		for (i = 0; i < numChecks; i++) {
			ReactAssesFormCheck = ReactAssesFormChecks[i];
			v = ReactAssesFormCheck.getValue();
			if (v) {
				haveChecks = true;
				ReactAssesFormOption = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"" + ReactAssesFormCheck.name + "Options\"]");
				ReactAssesFormComments = Ext.ComponentQuery.query("NursingDocs_React_Assess [name=\"" + ReactAssesFormCheck.name + "Comments\"]");

				ReactAssesFormValue = 0;
				ReactAssesFormCommentsValue = "";

				if (ReactAssesFormOption && ReactAssesFormOption.length > 0) {		// ReactAssesFormOption[0]) {
					ReactAssesFormValue = ReactAssesFormOption[0].getValue();
					if (null === ReactAssesFormValue) {
						ReactAssesFormValue = "";		// 0;
					}
				}
				if (ReactAssesFormComments && ReactAssesFormComments.length > 0) {		//  && ReactAssesFormComments[0]) {
					ReactAssesFormCommentsValue = ReactAssesFormComments[0].getValue();
				}
				var sectionTitle = ReactAssesFormCheck.up("fieldset").title;

				records.Details[ReactAssesessmentsCount++] = { 
					"sequence" : i, 
					"fieldLabel" : ReactAssesFormCheck.boxLabel, 
					"choice" : true, 
					"comments" : ReactAssesFormCommentsValue, 
					"levelChosen" : ReactAssesFormValue, 
					"sectionTitle" : sectionTitle
				};
			}
		}
		if (haveChecks) {
			if (this.getNoAdverseReactions().getValue()) {
				this.InfuseReactPost(records, Patient, this.application);
			}
			else {
				var PAT_ID = this.application.Patient.PAT_ID;	/* PAT_ID is used rather than just the Patient ID, because it defines a patient/treatment Regimen */
				var view = Ext.widget("SelectAdverseReactionAlerts", { "PAT_ID" : PAT_ID, "type" : "Infusion Reactions", "records" : records, "scope" : this, "fnc" : this.InfuseReactPost });
			}
		}
		else {
				Ext.MessageBox.alert("Saving Error", "If there are no Adverse Events then you must check the \"No Adverse Reaction since Last Treatment\" checkbox" );
			}

	}

});


// Loading Error - NursingDocs_TreatmentTab - Error - TreatmentTab.js - 89Patient is undefined
//	init: function () {
//	AuthenticateUser : function (button)
//	abSignHandler : function(grid, rowIndex, colIndex)
//	CellEditCommit : function (editor, eObj)
//	CellEdit : function (plugin, eObj, beforeEdit)
//	LoadPreviousTreatmentData : function()
//	ClearTabData : function( )
//	TabRendered : function ( component, eOpts )
//	BtnClicked : function (button)

Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.TreatmentTab", {
	extend: "Ext.app.Controller",

	stores: [
		"ND_Treatment"
	],
	views : [
		"NewPlan.CTOS.NursingDocs.Authenticate",
		"Common.puWinTreatmentAmmend"
	],

	refs: [
	    { ref: "CTOS", selector: "NewPlanTab CTOS" },
		{ ref : "NursingDocsTabSet", selector : "NursingDocs" },
		{ ref : "ND_T_Tab", selector : "NursingDocs_Treatment" },
		{ ref : "ND_T_T_Warning", selector : "NursingDocs_Treatment [name=\"ND_T_T_Warning\"]" },
		{ ref : "ND_T_T_Regimen", selector : "NursingDocs_Treatment [name=\"ND_T_T_Regimen\"]" },
		{ ref : "ND_T_T_Cycle", selector : "NursingDocs_Treatment [name=\"ND_T_T_Cycle\"]" },
		{ ref : "ND_T_T_Day", selector : "NursingDocs_Treatment [name=\"ND_T_T_Day\"]" },
		{ ref : "ND_T_T_Date", selector : "NursingDocs_Treatment [name=\"ND_T_T_Date\"]" },
		{ ref : "ND_T_Meds", selector : "NursingDocs_Treatment [name=\"ND_T_Meds\"]" },
		{ ref : "NursingDocs_Treatment_Meds", selector : "NursingDocs_Treatment_Meds" },		// Meds Grid in Treatment
		{ ref : "NursingDocs_Treatment_MedsView", selector : "NursingDocs_Treatment_Meds > tableview" },		// Meds Grid in Treatment
		{ ref : "TreatmentCompleteBtn", selector : "NursingDocs_Treatment button[text=\"Administration Complete\"]"}
	],


	// Ext.ComponentQuery.query("NursingDocs_Treatment button[text=\"Administration Complete\"]")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Nursing Docs Treatment Tab Controller!");
		this.application.on({ 
				PopulateNDTabs : this.TabRendered,		// Event is fired off from the NursingDocs Tab Controller when the NursingDocs Tab is activated
				ClearNDTabs : this.ClearTabData,		// Event is fired off from the NursingDocs Tab Controller when a new patient is selected
				// SignTreatment : this.abSignHandler,		// Event is fired off from the Treatment Tab "Sign" action button.
				scope : this 
		});

		this.control({
			"NursingDocs_Treatment" : { afterrender : this.TabRendered },
			"NursingDocs_Treatment_Meds" : { // Handles the Cell Edit (both start and end of edit cycle.
				cellclick : this.AssignVerify2SignHandler6,
				beforeedit : this.beforeCellEdit,
				edit : this.afterCellEdit,
				scope : this
			},
			"NursingDocs_Treatment button[name=\"btnPreMed\"]" : { click : this.BtnClicked },
			"NursingDocs_Treatment button[name=\"btnPOMed\"]" : { click : this.BtnClicked },
			"NursingDocs_Treatment button[name=\"btnIVMed\"]" : { click : this.BtnClicked },
			"NursingDocs_Treatment button[name=\"btnPostMed\"]" : { click : this.BtnClicked },
			"NursingDocs_Treatment button[name=\"btnHydration\"]" : { click : this.BtnClicked },

			"Authenticate[title=\"Authenticate\"] button[action=\"save\"]": {
				click: {
					scope : this,
					fn : this.AuthenticateUser
				}
			},
			"NursingDocs_Treatment button[text=\"Administration Complete\"]" : { click : this.TreatmentCompleteClicked }
		});
	},

	TreatmentStore : null,
	TreatmentRecords : [],
	curTreatmentRecord : null,

	AssignVerify2SignHandler6 : function(tableView, cellElement, cellIdx, record, rowElement, rowIndex, evt, opts) {		// 		<-- MWB - 7/4/2012 - Assignment is done as part of the renderer for the grid
		if (cellElement.innerHTML.search("Sign to Verify") > 0) {
			var StartTime = record.get("StartTime");
			if ("" === StartTime) {
				Ext.MessageBox.alert("Error", "You MUST specify at least a \"Start Time\" for this administration");
			}
			else {
				this.curTreatmentRecord = record;
				record.set("Treatment_User", "In Process...");
					// Prompt user and issue AJAX call to verify their credentials and save this record if credentials verified.
				var EditRecordWin = Ext.widget("Authenticate");
				EditRecordWin.curTreatmentRecord = record;
				var initialField = Ext.ComponentQuery.query('Authenticate [name=\"AccessCode\"]')[0];
				initialField.focus(true, true);
			}
		}
	},


	SaveTreatmentRecord : function(curTreatmentRecord) {
		var tData = curTreatmentRecord.getData();
		var drug = curTreatmentRecord.get("drug");
		var res = drug.replace(/^\d+\. /, "");
		curTreatmentRecord.set("drug", drug);
		curTreatmentRecord.set("Treatment_User", curTreatmentRecord.get("User"));
		curTreatmentRecord.set("Treatment_Date", Ext.Date.format(new Date(), "m/d/Y - g:i a"));
		curTreatmentRecord.set("StartTime", Ext.Date.format(tData.StartTime, "h:i a"));
		curTreatmentRecord.set("EndTime", Ext.Date.format(tData.EndTime, "h:i a"));

		this.application.loadMask("Saving record of changes");
		// POST Changed data row back to server then upon successful posting of the data...
		curTreatmentRecord.save({
			scope : this,
			callback : function(record, operation) {
				var theData = record.getData();
				if ("Therapy" === theData.type) {
							var thisCtl = this.getController("Common.puWinAddCumDose");
							// var Info = { "MedID" : "B495474E-A99F-E111-903E-000C2935B86F", "UnitsID" : "AB85F3AA-0B21-E111-BF57-000C2935B86F", "AdministeredDose" : "54,321"};
							var Info = { "MedID" : theData.Drug_ID, "MedName" : theData.drug, "UnitsID" : "", "UnitName" : theData.unit, "AdministeredDose" : theData.dose};
							thisCtl.SaveNewCumDoseInfo( Info );
				}
				this.application.unMask();
				if (!operation.success) {
						Ext.MessageBox.alert("Error", "Administration Record Save failed... unknown reason");
				}
			}
		});
		delete this.curTreatmentRecord;
	},

	AuthenticateUser : function (button) {
// debugger;
// get Route
// if Route !== Oral the End Time MUST be set before signing
// IF the medication is ORAL, SubQ, IM or IVP then only a start time is required before the user can sign off on the record
// ELSE IF the medication is IV or IVPB, then a start AND End time are required before the user can sign off on the record
		var curTreatmentRecord = button.up("Authenticate").curTreatmentRecord;

		this.SignRecordBtn = button;
		button.hide();
		this.application.loadMask("Authenticating digital signature");
		var win = button.up('window');
		var form = win.down('form');
		var values = form.getValues();
		var SignData = window.SessionUser + " - " + Ext.Date.format(new Date(), "m/d/Y - g:i a");

		curTreatmentRecord.set("AccessCode", values.AccessCode);
		curTreatmentRecord.set("User", values.AccessCode);
		curTreatmentRecord.set("VerifyCode", values.VerifyCode);
		curTreatmentRecord.set("PAT_ID", this.application.Patient.PAT_ID);
		curTreatmentRecord.set("templateID", this.application.Patient.AppliedTemplateID);


		Ext.Ajax.request({
			scope : this,
			url: "/Session/Authenticate?Access=" + values.AccessCode + "&Verify=" + values.VerifyCode,
			success: function( response, opts ){
				this.application.unMask();
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				if (resp.success && "Failed" !== resp.records) {
					win.close();
					curTreatmentRecord.set("AccessCode", "");
					curTreatmentRecord.set("User", resp.records);
					curTreatmentRecord.set("VerifyCode", "");
					this.SaveTreatmentRecord (curTreatmentRecord);
				}
				else {
					Ext.MessageBox.alert("Error", "Authentication failed! Please click the \"Sign to Verify\" button again and enter your proper Access and Verify Codes");
					this.SignRecordBtn.show();
				}
			},
			failure : function( response, opts ) {
				this.application.unMask();
				Ext.MessageBox.alert("Error", "Authentication failed! \n\nPlease click the \"Sign to Verify\" button again and enter your proper Access and Verify Codes");
				this.SignRecordBtn.show();
			}
		});
	},

	beforeCellEdit : function (plugin, eObj, beforeEdit) {
		var StartTimeField = Ext.getCmp("startTimeEditor");
		var EndTimeField = Ext.getCmp("endTimeEditor");


// IF the medication is ORAL, SubQ, IM or IVP then only a start time is required before the user can sign off on the record
// ELSE IF the medication is IV or IVPB, then a start AND End time are required before the user can sign off on the record


        var timeMax = Ext.Date.format(new Date(), 'h:i A');
		EndTimeField.setMaxValue(timeMax);
		StartTimeField.setMaxValue(timeMax);
        StartTimeField.setValue("07:00 AM");
        StartTimeField.setRawValue("07:00 AM");

		if ("" === eObj.record.get("Treatment_User")) {
			var StartTimeFieldValue = eObj.record.get("StartTime");
			if ("EndTime" === eObj.field && "" !== StartTimeFieldValue) {
				EndTimeField.setMinValue(StartTimeFieldValue);
			}
			else {
				EndTimeField.setMinValue("");
				StartTimeField.setMinValue("");
			}
			return true;		// This record hasn't been signed so it is editable
		}
		return false;	// Can't edit record that's been signed.
	},

	afterCellEdit : function (editor, eObj) {
		var theRecord = eObj.record;
		var theStore = eObj.grid.getStore();
		var newValue = eObj.value;
		var oldValue = eObj.originalValue;
		var rowIndex = eObj.rowIdx;
		var Cycle = eObj.record.get("CourseNum");

		if (null === this.curTreatmentRecord) {
			this.TreatmentStore = eObj.grid.getStore();
			this.curTreatmentRecord = eObj.record;    // this.TreatmentStore.getAt(rowIndex);
			this.curTreatmentRecord.set("TreatmentID", this.application.Patient.PAT_ID);
			this.curTreatmentRecord.set("PAT_ID", this.application.Patient.PAT_ID);
			this.curTreatmentRecord.set("rowIdx", rowIndex);
		}
  
		if ("StartTime" === eObj.field || "EndTime" === eObj.field) {
			var eObjValue1 = Ext.Date.format( eObj.value, "h:i A");
			eObj.value = Ext.Date.parse(eObjValue1, "h:i A");
		}

		this.curTreatmentRecord.set(eObj.field + "_originalValue", eObj.originalValue);
		this.curTreatmentRecord.set(eObj.field, eObj.value);
		this.curTreatmentRecord.set("Cycle", Cycle);    // MWB - 6/17/2012 - Carry over from CourseNum from Orders data
		return true;
	},

/**
 * Load all the current (e.g. dispensed) orders in the system
 * select orders for the current patient for the current day
 * This is what should get sent to the Nursing Doc Treatment Store
 **/
	LoadPreviousTreatmentData : function() {
		var Patient = this.application.Patient;
		var PAT_ID = Patient.PAT_ID;
		Ext.Ajax.request({
			scope : this,
			url: Ext.URLs.ReadND_Treatment + "/" + PAT_ID,
			success: function( response, opts ){
				var tempData, tsRecord;
				var obj = Ext.decode(response.responseText);
				var TreatmentHistoryRecords = obj.records;
				this.application.Patient.TreatmentHistory = TreatmentHistoryRecords;			// Treatment History (all days)
				// Note: record.Treatment_User === The person who signed the treatment record.

				var treatmentStore = this.application.Patient.TreatmentStore;

				// Now that we have the store of todays records (treatmentStore)
				// We need to compare each store record with each of the TreatmentHistory records (TreatmentHistoryRecords)
				// to find matches and then ensure that the treatmentStore records are updated with the TreatmentHistory records

				var MatchingRecord, i, aRec, len = TreatmentHistoryRecords.length;
				var findByFcn = function(record, id) {
					return this.Record2Find.AdminDate === record.get("adminDate") && 
					this.Record2Find.Drug === record.get("drug") && 
					this.Record2Find.Type === record.get("type");
				};
				for (i = 0; i < len; i++) {
					aRec = TreatmentHistoryRecords[i];
					this.Record2Find = aRec;
					MatchingRecord = treatmentStore.findBy(findByFcn, this);
					tsRecord = treatmentStore.getAt(MatchingRecord);
					if (tsRecord) {
						var temp, dbg_temp = tsRecord.data;
						tsRecord.set("StartTime", aRec.StartTime);
						tsRecord.set("EndTime", aRec.EndTime);
						tsRecord.set("Comments", aRec.Comments);

						/* May not need this process, but might need to pull the "OriginalValue" from the aRec */
						temp = tsRecord.get("dose");
						tsRecord.set("dose_originalValue", temp);
						temp = tsRecord.get("drug");
						tsRecord.set("drug_originalValue", temp);
						temp = tsRecord.get("route");
						tsRecord.set("route_originalValue", temp);
						tsRecord.set("dose", aRec.Dose);
						tsRecord.set("drug", aRec.Drug);
						tsRecord.set("route", aRec.Route);
						tsRecord.set("PAT_ID", aRec.PAT_ID);
						tsRecord.set("Treatment_User", aRec.Treatment_User);
						tsRecord.set("Treatment_Date", aRec.Treatment_Date);
					}
				}
			},
			failure : function( response, opts ) {
				Ext.MessageBox.alert("Error", "Administration Information failed to load");
			}
		});
	},

	LoadTreatmentStore : function() {
		var Patient = this.application.Patient;
		var theStore = Ext.getStore("ND_Treatment");

		var re = new RegExp(Patient.id);
		var today = Ext.Date.format( new Date(), "m/d/Y");
		var today4URL = Ext.Date.format( new Date(), "Y-m-d");
		var reDate = new RegExp(today);
		var reDispensed = new RegExp("Dispensed");
/*****
		theStore.clearFilter(true);
		theStore.filter([
			{property: "patientID", value: re}
			,{property: "adminDate", value: reDate}
			,{property: "orderstatus", value: reDispensed}
		]);
*****/
this.PatientID = Patient.id;
this.AdminDate = today;

		/***
		 *	Instead of a filter (which still loads all the data down to the client), set the proxy of the store with parameters to the Orders service call
		 *
		 *	theStore.proxy.api.read = Ext.URLs.ND_Treatment + PatientID + "/" + AdminDate + "/" + OrderStatus;
		 *
		 ***/

		this.application.loadMask("Loading Treatment Administration Information");
		theStore.proxy.api.read = Ext.URLs.ND_TreatmentDispensed + Patient.PAT_ID + "/" + today4URL;
		theStore.load({
			scope : this,
			callback: function(records,operation,success){
				this.application.unMask();
				if(success){
//					var theStore = Ext.getStore("ND_Treatment");
//					this.application.Patient.TreatmentStore = theStore;	// The store containing all the records for today's treatment
//					this.LoadPreviousTreatmentData();
				}
				else {
					Ext.MessageBox.alert("Error", "Administration Grid store failed to load");
				}
			}
		});
	},


	ClearTabData : function( ) {
		// Event is fired off from the NursingDocs Tab Controller when a new patient is selected
		try {
			var thisCtl = this.getController("NewPlan.CTOS.NursingDocs.TreatmentTab");
			if (!thisCtl.getND_T_Tab().rendered) {
				return;		// Traps possible call from the PopulateNDTabs event
			}

			var theTreatmentGrid = Ext.ComponentQuery.query("NursingDocs_Treatment [name=\"AdministeredMedsGrid\"]")[0];
			var Patient = this.application.Patient;
			if (theTreatmentGrid && theTreatmentGrid.rendered && "" !== Patient.PAT_ID) {
				this.LoadTreatmentStore();
			}
		}
		catch (e) {
			Ext.MessageBox.alert("Error", "Loading Error - NursingDocs_TreatmentTab - Error - TreatmentTab.js - ClearTabData() " + e.message );
		}
	},


	TabRendered : function ( component, eOpts ) {
		wccConsoleLog("Nursing Docs Treatment Administration Tab Rendered");
		var Patient = this.application.Patient;
		var thisCtl;
		try {
			thisCtl = this.getController("NewPlan.CTOS.NursingDocs.TreatmentTab");
			if (!thisCtl.getND_T_Tab().rendered) {
				return;		// Traps possible call from the PopulateNDTabs event
			}
		}
		catch (e) {
			Ext.MessageBox.alert("Error", "Loading Error - Nursing Docs Treatment Administration Tab Render() - Error - " + e.message );
			return;
		}

		this.ThisAdminDay = this.getController("NewPlan.OEM").IsDayAnAdminDay( Ext.Date.format( new Date(), "m/d/Y") );
		var ThisAdminDay = this.ThisAdminDay;
		var theMeds, MedsLen, newMeds, i, aMed, Dose, Dose1, Dose2, am1, am2;

		var tcBtns = Ext.ComponentQuery.query("NursingDocs_Treatment button[text=\"Administration Complete\"]");
		if (ThisAdminDay) {
			for (i = 0; i < tcBtns.length; i++) {
				tcBtns[i].show();
			}
		}
		else {
			for (i = 0; i < tcBtns.length; i++) {
				tcBtns[i].hide();
			}
		}

		var theTreatmentGrid = Ext.ComponentQuery.query("NursingDocs_Treatment [name=\"AdministeredMedsGrid\"]")[0];
		if (theTreatmentGrid && theTreatmentGrid.rendered) {
			// Never gets to this point...
			this.ClearTabData();
		}
	},

	BtnClicked : function (button) {
		var PatientInfo = this.application.Patient;
		var ThisAdminDay = this.ThisAdminDay;
		
		var EditRecordWin = Ext.widget("EditNursingDocs_Treatment");

		var title, theMedList, ComboStore, theMeds, MedsLen, Records, ComboStoreIndex = 0;

		switch( button.name ) {
			case "btnPreMed":
				title = "Edit Pre Medication";
				theMeds = ThisAdminDay.PreTherapy;
			break;
			case "btnPOMed":
				title = "Edit PO Medication";
			break;
			case "btnIVMed":
				title = "Edit IV/SQ/IM Medication";
				theMeds = ThisAdminDay.Therapy;
			break;
			case "btnPostMed":
				title = "Edit Post Medication";
				theMeds = ThisAdminDay.PostTherapy;
			break;
			case "btnHydration":
				title = "Edit Hydration Meds";
			break;
			default : 
				title = "Unknown Button Clicked";
			break;
		}

		EditRecordWin.setTitle(title);

		theMedList = Ext.ComponentQuery.query("EditNursingDocs_Treatment form combobox[name=\"Med\"]")[0];
		ComboStore = theMedList.getStore();
		ComboStore.removeAll();
		ComboStore.add(theMeds);

	},

	TreatmentCompleteClicked : function (button) {
		Ext.Msg.show({
			title:"Administration Complete?",
			msg: "Are you finished documenting administration of medications for this patient?",
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			callback: function(btn, text){
				if ("yes" === btn) {
					Ext.MessageBox.alert("Administration completion", "Administration is complete, Save complete");
				}
				else {
					Ext.MessageBox.alert("Administration completion", "Administration is NOT complete, No data specified to be saved");
				}
			}
		});
	}
});


Ext.define("COMS.controller.NewPlan.CTOS.NursingDocs.puWinViewInfusionReactions", {
	"extend" : "Ext.app.Controller",

	"views" : [
		"NewPlan.CTOS.NursingDocs.puWinViewInfusionReactions",
		"Common.selInfusionReactionCombo" 
	],

	"stores" : [ 
		"InfusionReaction"
	],

	"refs" : [
		{ "ref" : "InfusionReactionCombo",		"selector" : "selInfusionReaction"}
	],


	"init" : function() {
		this.control({
			"scope" : this,
			"selInfusionReaction" : {
				"afterrender" : this.LoadCombo,
				"change" : this.IRDateSelected
			}
		});
	},

	"IRDateSelected" : function(combo, nValue) {
		var theStore = Ext.getStore("InfusionReaction");
		theStore.proxy.url = "/NursingDoc/ReactAssess/ireact_id/" + nValue;
		theStore.load({
			scope: this,
			callback: function(records, operation, success) {
				var i, st, categories = [], rLen = records.length, data = records[0].getData();
				st = data.sectionTitle;
				var category = {};
				var aField = {};
				category.sectionTitle = st;
				category.fields = [];
				for (i = 0; i < rLen; i++) {
					data = records[i].getData();
					if (st !== data.sectionTitle) {
						if (0 != categories.length) {
							categories.push(category);
						}
						st = data.sectionTitle;
						category = {};
						category.sectionTitle = st;
						category.fields = [];
					}
					aField = { "Choice" : data.Choice, "Comments" : data.Comments, "FieldName" : data.Field_Label, "Alert" : data.alertEvent };
					category.fields.push(aField);
				}
			}
		});
	},

	"LoadCombo" : function(theWinQues) {
		var theCombo = this.getInfusionReactionCombo();
		var theStore = theCombo.getStore();
		theStore.proxy.url = "/NursingDoc/ReactAssessList/" + this.application.Patient.PAT_ID;
		// console.log("Store Proxy - " + theStore.proxy.url);
//		theStore.load();
	},

	"Cancel" : function(btn) {
		btn.up('window').close();
	}
});

Ext.define("COMS.controller.NewPlan.CTOS.OtherInfoPanel", {
	extend: "Ext.app.Controller",

	stores: [
	],

	views: [
		"NewPlan.CTOS.ToxicitySideEffectsPanel"
	],

    refs: [
		{ ref: "SaveBtn",					selector: "FlowSheetOptionalQues button[text=\"Save\"]"},
		{ ref: "ToxDetails",				selector: "FlowSheetOptionalQues [name=\"ToxDetails\"]"}
	],

	init: function () {
		this.control({
			"scope" : this,
			"FlowSheetOptionalQues button[text=\"Save\"]" : {
				//click: this.Save
			},
			"FlowSheetOptionalQues combobox[name=\"ToxInstr\"]" : {
				//"change" : this.SelectToxInstr
			}
		});
	}

});

Ext.define("COMS.controller.NewPlan.CTOS.PatientSummaryTab", {
	extend: "Ext.app.Controller",

	stores: [
	],

	views: [
	    "NewPlan.CTOS.PatientSummary"
	],

	refs: [
	    {
		    ref: "PatientSummary",
			selector: "PatientSummary"
	    },
//	    {
//		    ref: "PSummaryHeader",
//			selector: "PatientSummary [name=\"heading\"]"
//	    },

	    {
		    ref: "PSummaryOverview",
			selector: "PatientSummary PSummary_Overview"
	    },
	    {
		    ref: "PSummaryBody",
			selector: "PatientSummary [name=\"body\"]"
	    }
	],


	// Ext.ComponentQuery.query("NursingDocs_Chemotherapy displayfield[name=\"ndctRegimen\"]")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Patient Summary Tab Controller!");

		this.application.on( { PatientSelected : this.PatientSelected, scope : this } );

		this.control({
			"PatientSummary" : {
				beforeactivate : this.BeforeTabActivated,
				render : this.TabRendered
			}
		});
	},

		// Ensures 
	TabContentsCleared : true,

	/**********************
	 *
	 *	Called when the "PatientSelected" event is triggered from the top of the NewTab Panel Select Patient drop down
	 *	This adjusts the values in the "Select Applied Template" drop down based on the selected user
	 *
	 **********************/
	PatientSelected: function (combo, recs, eOpts) {
		var thisCtl = this.getController("NewPlan.CTOS.PatientSummaryTab");
		var PSummary = thisCtl.getPatientSummary();
		if (PSummary) {
			if (PSummary.rendered) {
				this.TabContentsCleared = true;
			}
		}
	},

	TabRendered : function ( component, eOpts ) {
		wccConsoleLog("Patient Summary Tab has been rendered");
	},

	BeforeTabActivated : function (component, eOpts ) {
		wccConsoleLog("Patient Summary Tab has been rendered");
		if ( this.TabContentsCleared ) {
			this.TabContentsCleared = false;
			var thisCtl = this.getController("NewPlan.CTOS.PatientSummaryTab");
			var Patient = this.application.Patient;
			var UpdateData = Patient.OEMRecords;

			UpdateData.TreatmentStart = UpdateData.OEMRecords[0].AdminDate;
			var i1 = UpdateData.OEMRecords.length - 1;
			UpdateData.TreatmentEnd = UpdateData.OEMRecords[i1].AdminDate;

//			var header = thisCtl.getPSummaryHeader();
//			header.update({PatientName : Patient.name});

			var Overview = thisCtl.getPSummaryOverview();
			Overview.update( UpdateData );

//			var Body = thisCtl.getPSummaryBody();
		}
		return true;
	}
});


Ext.define("COMS.controller.NewPlan.CTOS.ToxicitySideEffectsPanel", {
	extend: "Ext.app.Controller",

	stores: [
	],

	views: [
		"NewPlan.CTOS.ToxicitySideEffectsPanel"
	],

    refs: [
		{ ref: "SaveBtn",					selector: "FlowSheetOptionalQues button[text=\"Save\"]"},
		{ ref: "ToxDetails",				selector: "FlowSheetOptionalQues [name=\"ToxDetails\"]"}
	],

	init: function () {
		this.control({
			"scope" : this,
			"FlowSheetOptionalQues button[text=\"Save\"]" : {
				//click: this.Save
			},
			"FlowSheetOptionalQues combobox[name=\"ToxInstr\"]" : {
				//"change" : this.SelectToxInstr
			}
		});
	}

});


// End of Treatment Summary Controller
// Requires the model: 
//		EndTreatmentSummary
//
// Requires the URL for Reading:
//		Ext.URLs.EoTS = "/EndTreatmentSummary/EoTS";
// Param = EoTS GUID;
// Returns data structure for a specific EoTS;
// Example Usage - https://devtest.dbitpro.com/EndTreatmentSummary/EoTS/28225CF5-3937-E111-9B9C-000C2935B86F

// Requires the URL for Writing/Posting EoTS to SQL:
//		Ext.URLs.AddEoTS = "/EndTreatmentSummary/EoTS";
// Expects a POST data consistent with the EndTreatmentSummary Model
//
Ext.define("COMS.controller.NewPlan.EndTreatmentSummary", {
	extend : "Ext.app.Controller",
	EoTSData : {},		// This is used for storing the EoTS Data calculated within this controller rather than passing a variable around.
						// This will be the record stored on the back end when saving the EoTS
						// 
						// EoTS Record Object {
						//	Name - Taken directly from PatientInfo
						//	Gender - Taken directly from PatientInfo
						//	Age - Taken directly from PatientInfo
						//	DOB - Taken directly from PatientInfo
						//	Amputations - Taken directly from PatientInfo
						//	EoTS_TemplateName - Taken directly from PatientInfo
						//	TemplateDescription - Taken directly from PatientInfo
						//	TreatmentStatus - Taken directly from PatientInfo (but SHOULD be "Completed" plus the "End Reason"
						//	TreatmentStart - Taken directly from PatientInfo
						//	TreatmentEnd - Taken directly from PatientInfo
						//	Vitals - getVitals()
						//	EndReason - FinishUpReason4Change()
						// }

	stores : [
	],

	models : ["EndTreatmentSummary"],

	views : [
		"NewPlan.EndTreatmentSummary"
	],

	refs: [
		{ ref: "PatientInfoTable", selector: "EndTreatmentSummary [name=\"EoTS_PatientInfoTable\"]"},
		{ ref: "PatientInfoTableHeader", selector: "EndTreatmentSummary [name=\"PatientInfoTableHeader\"]"},
		{ ref: "PatientInfoTableBody", selector: "EndTreatmentSummary [name=\"PatientInfoTableBody\"]"},
		{ ref: "Reason4EOTSHead", selector: "EndTreatmentSummary [name=\"Reason4EOTSHead\"]"},

		// Radio Groups
		{ ref: "Reason4EOTSAnswer", selector: "EndTreatmentSummary [name=\"Reason4EOTSAnswer\"]"},
		{ ref: "Reason4EOTS_TCReason", selector: "EndTreatmentSummary [name=\"Reason4EOTS_TCReason\"]"},
		{ ref: "Reason4EOTS_PDReason", selector: "EndTreatmentSummary [name=\"Reason4EOTS_PDReason\"]"},

		// Radio Buttons for each group
		{ ref: "EOTS_Reason", selector: "EndTreatmentSummary [name=\"EOTS_Reason\"]"},
		{ ref: "EOTS_TChange", selector: "EndTreatmentSummary [name=\"EOTS_TChange\"]"},
		{ ref: "EOTS_PDChange", selector: "EndTreatmentSummary [name=\"EOTS_PDChange\"]"},

		// "Other" text fields for "Other" option for each group
		{ ref: "EOTS_ReasonOther", selector: "EndTreatmentSummary [name=\"EOTS_ReasonOther\"]"},
		{ ref: "EOTS_TChangeOther", selector: "EndTreatmentSummary [name=\"EOTS_TChangeOther\"]"},
		{ ref: "EOTS_PDChangeOther", selector: "EndTreatmentSummary [name=\"EOTS_PDChangeOther\"]"},

		{ ref: "ProviderReport", selector: "EndTreatmentSummary [name=\"ProviderReport\"]"},
		{ ref: "FollowUpAppointments", selector: "EndTreatmentSummary [name=\"FollowUpAppointments\"]"},


		{
			ref: "AdministeredMedsGrid",
			selector: "EndTreatmentSummary [name=\"AdministeredMedsGrid\"]"
		},

		{
			ref: "DiseaseResponseGrid",
			selector: "EndTreatmentSummary [name=\"DiseaseResponseGrid\"]"
		},
		{
			ref: "ToxicityGrid",
			selector: "EndTreatmentSummary [name=\"ToxicityGrid\"]"
		},
		{
			ref: "OtherGrid",
			selector: "EndTreatmentSummary [name=\"OtherGrid\"]"
		},
		{
			ref: "SaveBtn",
			selector: "EndTreatmentSummary button[action=\"save\"]"
		},
		{
			ref: "CancelBtn",
			selector: "EndTreatmentSummary button[action=\"cancel\"]"
		}

	],

	Start_EOTS1 : function() {
		wccConsoleLog("Start_EOTS1");
	},
	Start_EOTS2 : function() {
		wccConsoleLog("Start_EOTS2");
	},
	Start_EOTS3 : function() {
		wccConsoleLog("Start_EOTS3");
	},

	init: function() {  // called at application initialization time
		wccConsoleLog("Initialized End of Treatment Summary Controller!");
		this.control({
			"EndTreatmentSummary" : {
				beforeactivate: this.Start_EOTS3,
				beforerender: this.Start_EOTS2,
				beforeshow: this.Start_EOTS1,
				afterrender : this.AfterRenderWindow,
				close : this.CloseEoTSWin, 
				resize : this.ResizeTable
			},
			"EndTreatmentSummary button[action=\"save\"]": {
				click: this.SaveEoTS
			},
			"EndTreatmentSummary button[action=\"cancel\"]": {
				click: this.CancelEoTS
			},
				// Change Button in one of the 3 Radio Groups
			"EndTreatmentSummary [name=\"Reason4EOTSAnswer\"]" : {
				change : this.Reason4Change1
			},
			"EndTreatmentSummary [name=\"Reason4EOTS_TCReason\"]" : {
				change : this.Reason4Change2
			},
			"EndTreatmentSummary [name=\"Reason4EOTS_PDReason\"]" : {
				change : this.Reason4Change3
			},

			"EndTreatmentSummary [name=\"EOTS_ReasonOther\"]" : {
				blur : this.Reason4ChangeDone,
				specialkey : this.Look4Enter
			},
			"EndTreatmentSummary [name=\"EOTS_TChangeOther\"]" : {
				blur : this.Reason4ChangeDone,
				specialkey : this.Look4Enter
			},
			"EndTreatmentSummary [name=\"EOTS_PDChangeOther\"]" : {
				blur : this.Reason4ChangeDone,
				specialkey : this.Look4Enter
			}
		});
	},

	Look4Enter : function( theField, evt, eOpts ) {
		var theKey = evt.getKey();
		if (evt.ENTER === theKey) {
			this.Reason4ChangeDone( theField, "", "", eOpts);
		}
	},


		// Reason4EOTSAnswer btn has changed
	Reason4Change1 : function( theField, nValue, oValue, eOpts) {
		this.Reason4Change(theField, nValue, oValue, eOpts);
	},

		// Reason4EOTS_TCReason btn has changed
	Reason4Change2 : function( theField, nValue, oValue, eOpts) {
		this.Reason4Change(theField, nValue, oValue, eOpts);
	},

		// Reason4EOTS_PDReason btn has changed
	Reason4Change3 : function( theField, nValue, oValue, eOpts) {
		this.Reason4Change(theField, nValue, oValue, eOpts);
	},



	Reason4Change : function( theField, nValue, oValue, eOpts) {
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		var Head = thisCtl.getReason4EOTSHead();
		var FieldName = theField.name;
		var ReasonMsg = "";
		var EndOfChange = false;

// Reason4EOTSAnswer is the name of the group of buttons for the top level
// EOTS_Reason is the name of the Radio Buttons for the top level.
// EOTS_ReasonOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTSAnswer = this.getReason4EOTSAnswer();
		var EOTS_Reason = this.getEOTS_Reason();
		var EOTS_ReasonOther = this.getEOTS_ReasonOther();

// Reason4EOTS_TCReason is the name of the group of buttons for the secondary level, IF the "Treatment Change" button was clicked at the top level
// EOTS_TChange is the name of the Radio Buttons for the secondary level, IF the "Treatment Change" button was clicked at the top level
// EOTS_TChangeOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTS_TCReason = this.getReason4EOTS_TCReason();
		var EOTS_TChange = this.getEOTS_TChange();
		var EOTS_TChangeOther = this.getEOTS_TChangeOther();

// Reason4EOTS_PDReason is the name of the group of buttons for the secondary level, IF the "Patient Discontinuation" button was clicked at the top level
// EOTS_PDChange is the name of the Radio Buttons for the secondary level, IF the "Patient Discontinuation" button was clicked at the top level
// EOTS_PDChangeOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTS_PDReason = this.getReason4EOTS_PDReason();
		var EOTS_PDChange = this.getEOTS_PDChange();
		var EOTS_PDChangeOther = this.getEOTS_PDChangeOther();

		Reason4EOTSAnswer.hide();
		EOTS_ReasonOther.hide();

		Reason4EOTS_TCReason.hide();
		EOTS_TChangeOther.hide();

		Reason4EOTS_PDReason.hide();
		EOTS_PDChangeOther.hide();


		// Determine which radio button was clicked and show/hide appropriate sections as needed
		if ("Reason4EOTSAnswer" === FieldName) {	// Top level radio button clicked
			ReasonMsg = nValue.EOTS_Reason;

			if ("Treatment Change" === ReasonMsg ) {	// If Treatment Change is checked then need to display secondary set of Radio Buttons
				Reason4EOTS_TCReason.show();		// Secondary set of Radio Buttons
				Reason4EOTSAnswer.show();
			}
			else if ("Patient Discontinuation" === ReasonMsg ) {	// If Patient Discontinuation is checked then need to display secondary set of Radio Buttons
				Reason4EOTS_PDReason.show();		// Secondary set of Radio Buttons
				Reason4EOTSAnswer.show();
			}
			else if ("Other" === ReasonMsg) {	// Needs to show the text field for an "Other" reason
				EOTS_ReasonOther.show();
				Reason4EOTSAnswer.show();
			}
			else {
				EndOfChange = true;
			}
		}

		// Treatment Change - Process Secondary Buttons
		else if ("Reason4EOTS_TCReason" === FieldName) {	// User has selected "Treatment Change" so this handles the secondary radio buttons
			ReasonMsg = "Treatment Change - " + nValue.EOTS_TChange;

			if ("Other" === nValue.EOTS_TChange) {	// Needs to show the text field for an "Other" reason for "Treatment Change"
				Reason4EOTS_TCReason.show();		// Secondary set of Radio Buttons
				EOTS_TChangeOther.show();
				Reason4EOTSAnswer.show();
			}
			else {
				EndOfChange = true;
			}
		}

		// Patient Discontinuation - Process Secondary Buttons
		else if ("Reason4EOTS_PDReason" === FieldName) {	// User has selected "Patient Discontinuation" so this handles the secondary radio buttons
			ReasonMsg = "Patient Discontinuation - " + nValue.EOTS_PDChange;

			if ("Other" === nValue.EOTS_PDChange) {	// Needs to show the text field for an "Other" reason for "Patient Discontinuation"
				EOTS_PDChangeOther.show();
				Reason4EOTSAnswer.show();
				Reason4EOTS_PDReason.show();
			}
			else {
				EndOfChange = true;
			}
		}




		else if ("EOTS_ReasonOther" === FieldName) {		// Top level reason for change 
			ReasonMsg = nValue;
		}
		else if ("EOTS_TChangeOther" === FieldName) {		// Top level reason for change 
			ReasonMsg = "Treatment Change - " + nValue;
		}
		else if ("EOTS_PDChangeOther" === FieldName) {		// Top level reason for change 
			ReasonMsg = "Patient Discontinuation - " + nValue;
		}


		var Reason = "<span style=\"font-weight: normal; font-size: 100%;\">" + ReasonMsg + "</span>";
		var ChangeBtn = "";
		
		if (EndOfChange) {
			ChangeBtn = "<button class=\"anchor\" name=\"ChangeReason\" style=\"margin-left: 1em;\">Change</button>";
			this.FinishUpReason4Change(Reason, ChangeBtn);
		}
		else {
			thisCtl.getReason4EOTSHead().el.setHTML("<h2>Reason for generating End of Treatment Summary - " + Reason + ChangeBtn + "</h2>");
		}
	},





	Reason4ChangeDone : function( theField, nValue, oValue, eOpts) {
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		var answer1 = thisCtl.getReason4EOTSAnswer().getValue();
		var answer2 = thisCtl.getReason4EOTS_TCReason().getValue();
		var answer3 = thisCtl.getReason4EOTS_PDReason().getValue();

		var answer = "";
		if ("Treatment Change" === answer1.EOTS_Reason) {
			answer = answer1.EOTS_Reason + " - " + answer1.EOTS_TChange + " - " + theField.value;
		}
		else if ("Patient Discontinuation" === answer1.EOTS_Reason) {
			answer = answer1.EOTS_Reason + " - " + answer1.EOTS_PDChange + " - " + theField.value;
		}
		else if ("Other" === answer1.EOTS_Reason) {
			answer = answer1.EOTS_Reason + " - " + theField.value;
		}

		var ChangeBtn = "<button class=\"anchor\" name=\"ChangeReason\" style=\"margin-left: 1em;\">Change</button>";
		this.FinishUpReason4Change(answer, ChangeBtn);

	},

	CycleDates : [],
	PerformanceStatus : [],
	DiseaseResponse : [],
	Toxicity : [],
	Other : [],
	Drugs : [],

	EoTS_PerformanceStatus : [],
	EoTS_DiseaseResponse : [],
	EoTS_Toxicity : [],
	EoTS_Other : [],
	EoTS_Drugs : [],

	parseFSData4EoTS : function( tType, dName, tDataStore, EoTS_DataStore, data ) {
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary"),
			i, el, tmp, bl,
			buf = [], 
			HasDataFlag = false,
			tmpEoTS;
		for (i in data) {
			if (data.hasOwnProperty(i) && "&nbsp;" !== i && "label" !== i) {
				el = data[i];
				if ("" !== el) {

					if (el.indexOf("<button") >= 0) {
						if (el.indexOf("Write</button") < 0) {
							var el2=el.replace(/<button class="anchor .*data="/,"").replace(/".*$/, "");
							if (unescape) {
								el = unescape(el2);
							}
							else {
								el = decodeURI(el2);
							}
							el = el.replace(/\n/g, "<br />");
							if ("" === el2) {
								el = "No entry recorded";
							}
						}
						else {
							el = "";
						}
					}
					if ("" !== el) {
						if ("" === tType) {
							tmpEoTS = {};
							tmpEoTS.day = i;
							tmpEoTS.date = thisCtl.CycleDates[i];
							tmpEoTS.desc = el;
							buf.push("<tr><th style=\"width:10em;\">" + i + "</th><td style=\"width:10em;\">" + thisCtl.CycleDates[i] + "</td><td colspan=\"2\">" + el + "</td></tr>");
						}
						else {
							tmpEoTS = {};
							tmpEoTS.day = i;
							tmpEoTS.date = thisCtl.CycleDates[i];
							tmpEoTS.dosage = el;
							buf.push("<tr><th style=\"width:10em;\">" + i + "</th><td style=\"width:10em;\">" + thisCtl.CycleDates[i] + "</td><td colspan=\"2\">" + el + "</td></tr>");
						}
						HasDataFlag = true;
					}
				}
			}
		}
		if (HasDataFlag) {
			if ("" === tType) {
				tmp = {};
				tmp = Ext.apply({}, tmpEoTS);
			}
			else {
				tmp = {};
				tmp.administered = [];
				tmp.administered.push(tmpEoTS);
				tmp.name = dName;
			}
			EoTS_DataStore.push(tmp);
		}
		else {
			tmpEoTS = {};
			if ("" === tType) {
				tmpEoTS.day = "";
				tmpEoTS.date = "";
				tmpEoTS.desc = "No " + dName + ("Other" === dName? " Comments" : "") + " Recorded";
				buf.push("<tr><td colspan=\"4\">No " + dName + ("Other" === dName? " Comments" : "") + " Recorded</td></tr>");
			}
			else {
				tmpEoTS.name = dName;
				tmpEoTS.administered = [];
				buf.push("<tr><td colspan=\"4\">No " + dName + " Administered</td></tr>");
			}
			EoTS_DataStore.push(tmpEoTS);
		}
		var b1 = "<tr><th colspan=\"4\" style=\"font-weight:bold; padding-left: 2em; text-align: left;\">" + dName + "</th></tr>" + buf.join("");
		tDataStore.push(b1);
	},

	noParse : function( data ) {
	},

	parseFlowsheetData : function( ) {
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		var pData = this.application.Patient.FlowsheetData;
		var i, j, elLen, pdLen = pData.length, el;

		thisCtl.CycleDates = {};
		for (i = 0; i < pdLen; i++) {
			el = pData[i];
			if ("Date" === el.label) {
				thisCtl.CycleDates = Ext.apply(thisCtl.CycleDates, el);
				break;
			}
		}

		for (i = 0; i < pdLen; i++) {
			el = pData[i];

			switch(el.label) {
				case "Weight (lbs)":
					thisCtl.noParse(el);
					break;
				case "Date":
					thisCtl.noParse(el);
					break;
				case "Performance Status":

					thisCtl.parseFSData4EoTS("", el.label, thisCtl.PerformanceStatus, thisCtl.EoTS_PerformanceStatus, el);
					break;
				case "Disease Response":
					thisCtl.parseFSData4EoTS("", el.label, thisCtl.DiseaseResponse, thisCtl.EoTS_DiseaseResponse, el);
					break;
				case "Toxicity Side Effects":
					thisCtl.parseFSData4EoTS("", el.label, thisCtl.Toxicity, thisCtl.EoTS_Toxicity, el);
					break;
				case "Other":
					thisCtl.parseFSData4EoTS("", el.label, thisCtl.Other, thisCtl.EoTS_Other, el);
					break;
				case "Unknown...":
					thisCtl.noParse(el);
					break;
				default :
					thisCtl.parseFSData4EoTS(el["&nbsp;"], el.label, thisCtl.Drugs, thisCtl.EoTS_Drugs, el);
					break;
			}
		}

		var theGrid = thisCtl.getAdministeredMedsGrid();
		var theGridEl = theGrid.getEl();
		theGridEl.update("<h2 style=\"margin-top: 2em;\">Medication Administered</h2><table class=\"InformationTable\" border=\"1\" style=\"margin-bottom: 2em;\">" + thisCtl.Drugs.join("") + "</table>");

		theGrid = thisCtl.getDiseaseResponseGrid();
		theGridEl = theGrid.getEl();
		theGridEl.update("<h2>Patient Disease Response</h2><table class=\"InformationTable\" border=\"1\" style=\"margin-bottom: 2em;\">" + thisCtl.DiseaseResponse.join("") + "</table>");

		theGrid = thisCtl.getToxicityGrid();
		theGridEl = theGrid.getEl();
		theGridEl.update("<h2>Toxicity Side Effects</h2><table class=\"InformationTable\" border=\"1\" style=\"margin-bottom: 2em;\">" + thisCtl.Toxicity.join("") + "</table>");

		theGrid = thisCtl.getOtherGrid();
		theGridEl = theGrid.getEl();
		theGridEl.update("<h2>Other Comments</h2><table class=\"InformationTable\" border=\"1\">" + thisCtl.Other.join("") + "</table>");

	},



	FinishUpReason4Change : function(Reason, Btn) {
		this.EoTSData.EndReason = Reason;
		var Patient = this.application.Patient;
		this.getReason4EOTSHead().el.setHTML("<h2>Reason for generating End of Treatment Summary - " + Reason + Btn + "</h2>");
		var ChangeBtnEl = Ext.ComponentQuery.query("EndTreatmentSummary")[0].el.select("button.anchor");
		ChangeBtnEl.on("click", this.HandleChangeClicks, this);

		this.EoTSData.TreatmentOriginalEnd = "";

		var i, tHist = Patient.TemplateHistory;
		var thLen = 0;
		if (tHist) {
			thLen = tHist.length;
		}
		if (this.application.Patient.EoTS_TemplateID === Patient.TemplateID) {		// Terminating current template
			this.EoTSData.TreatmentStart = Patient.TreatmentStart;
			this.EoTSData.TreatmentOriginalEnd = Patient.TreatmentEnd;
			this.EoTSData.TreatmentEnd = Ext.Date.format(new Date(), "m/d/Y");
		}
		else {
			for (i = 0; i < thLen; i++) {
				if (tHist[i].TemplateID === this.application.Patient.EoTS_TemplateID) {
					this.EoTSData.TreatmentStart = tHist[i].DateStarted;
					this.EoTSData.TreatmentEnd = tHist[i].DateEnded;
				}
			}
		}

		this.EoTSData.Name = Patient.name;
		this.EoTSData.PatientID = Patient.id;		// MWB - 6/12/2012
		this.EoTSData.PAT_ID = Patient.PAT_ID;


		this.EoTSData.Gender = Patient.Gender;
		this.EoTSData.Age = Patient.Age;
		this.EoTSData.DOB = Patient.DOB;
		this.EoTSData.Amputations = Patient.Amputations;
		this.EoTSData.TemplateName = this.application.Patient.EoTS_TemplateName;
		this.EoTSData.TemplateID = this.application.Patient.EoTS_TemplateID;
		this.EoTSData.TemplateDescription = "";
		this.EoTSData.TreatmentStatus = "Ended";
		this.EoTSData.Disease = Patient.Disease;		// Contains an array of objects consisting of { Type : "", Stage : ""}
		this.EoTSData.Allergies = Patient.Allergies;	// Contains an array of objects consisting of { name : "", type : "", comment : "" }
		this.EoTSData.Trial = Patient.ClinicalTrial || "NOT a clinical trial";

		this.getVitals();

		var Ctl = this.getController("NewPlan.CTOS.FlowSheetTab");
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");

		
		thisCtl.CycleDates = [];
		thisCtl.PerformanceStatus = [];
		thisCtl.DiseaseResponse = [];
		thisCtl.Toxicity = [];
		thisCtl.Other = [];
		thisCtl.Drugs = [];

		thisCtl.EoTS_PerformanceStatus = [];
		thisCtl.EoTS_DiseaseResponse = [];
		thisCtl.EoTS_Toxicity = [];
		thisCtl.EoTS_Other = [];
		thisCtl.EoTS_Drugs = [];
		
//		var Flowsheet = Ctl.createFlowsheet(thisCtl.parseFlowsheetData);
		this.EoTSData.OriginalEnd = this.application.Patient.TreatmentEnd;
		this.EoTSData.Meds = this.EoTS_Drugs;
		this.EoTSData.DiseaseResponse = this.EoTS_DiseaseResponse;
		this.EoTSData.Toxicity = this.EoTS_Toxicity;
		this.EoTSData.Other = this.EoTS_Other;

		this.EoTSData.TreatmentReport = "";
		this.EoTSData.PatientDiseaseResponse = "";
		this.EoTSData.ToxicitySideEffects = "";
		this.EoTSData.ProviderReport = "";
		this.EoTSData.FollowUpAppointments = "";

		this.getReason4EOTSAnswer().hide();
		this.getPatientInfoTable().show();
		this.getPatientInfoTableHeader().show();
		this.getPatientInfoTableBody().show();
		this.getSaveBtn().show();
		this.getCancelBtn().show();


		var PatientInfo = this.application.Patient;
		var PITableHdr = this.getPatientInfoTableHeader();
		var PITable = this.getPatientInfoTable();

		PITableHdr.update( this.EoTSData );

		PITable.update( this.EoTSData );

		this.application.unMask();
	},


		// Function called when user clicks on the "Change" link to change the reason for generating the EoTS
	HandleChangeClicks : function() {
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		this.getReason4EOTSAnswer().show();
		var ChangeBtnEl = Ext.ComponentQuery.query("EndTreatmentSummary")[0].el.select("button.anchor");
		ChangeBtnEl.hide();

			// Reason4EOTSAnswer is the name of the group of buttons for the top level
			// EOTS_Reason is the name of the Radio Buttons for the top level.
			// EOTS_ReasonOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTSAnswer = this.getReason4EOTSAnswer();
		var answer1 = Reason4EOTSAnswer.getValue();
		var EOTS_Reason = this.getEOTS_Reason();
		var EOTS_ReasonOther = this.getEOTS_ReasonOther();

			// Reason4EOTS_TCReason is the name of the group of buttons for the secondary level, IF the "Treatment Change" button was clicked at the top level
			// EOTS_TChange is the name of the Radio Buttons for the secondary level, IF the "Treatment Change" button was clicked at the top level
			// EOTS_TChangeOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTS_TCReason = this.getReason4EOTS_TCReason();
		var answer2 = Reason4EOTS_TCReason.getValue();
		var EOTS_TChange = this.getEOTS_TChange();
		var EOTS_TChangeOther = this.getEOTS_TChangeOther();

			// Reason4EOTS_PDReason is the name of the group of buttons for the secondary level, IF the "Patient Discontinuation" button was clicked at the top level
			// EOTS_PDChange is the name of the Radio Buttons for the secondary level, IF the "Patient Discontinuation" button was clicked at the top level
			// EOTS_PDChangeOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTS_PDReason = this.getReason4EOTS_PDReason();
		var answer3 = Reason4EOTS_PDReason.getValue();
		var EOTS_PDChange = this.getEOTS_PDChange();
		var EOTS_PDChangeOther = this.getEOTS_PDChangeOther();

		if ("Treatment Change" === answer1.EOTS_Reason) {
			Reason4EOTS_TCReason.show();
			if ("Other" === answer2.EOTS_TChange) {
				EOTS_TChangeOther.show();
			}
		}
		else if ("Patient Discontinuation" === answer1.EOTS_Reason) {
			Reason4EOTS_PDReason.show();
			if ("Other" === answer3.EOTS_PDChange) {
				EOTS_PDChangeOther.show();
			}
		}

		this.getPatientInfoTable().hide();
		this.getPatientInfoTableHeader().hide();
		this.getPatientInfoTableBody().hide();
		this.getSaveBtn().hide();
		this.getCancelBtn().hide();

	},


	// Resize the EoTS Window based on the browser's size via the "onWindowResize" event handler
	AfterRenderWindow : function(theWin, eOPts) {
		Ext.EventManager.onWindowResize( this.ResizeTheEoTSWin, theWin );
		var max = Ext.getBody().getViewSize().height;
		var smaller = max * 0.1;
		smaller = max - smaller;
		theWin.setHeight(smaller);
		Ext.Function.defer( theWin.focus, 2000, this );
	},

	ResizeTheEoTSWin : function() {
		var max = Ext.getBody().getViewSize().height;
		var smaller = max * 0.1;
		smaller = max - smaller;
		this.setHeight(smaller);
	},

	ResizeTable : function(theWin, width, height, eOpts) {
		var tBody = this.getPatientInfoTableBody();
		if (tBody) {
			var max = theWin.getHeight();
			var smaller = max - 230;
			tBody.setHeight(smaller);
		}
	},


	// Make sure to remove the "onWindowResize" event handler when the EoTS window is closed.
	CloseEoTSWin : function(theWin, eOPts) {
		Ext.EventManager.removeResizeListener( this.ResizeTheEoTSWin, theWin );
	},

	SaveEoTS : function(button) {
		// this.application.loadMask("Saving record of changes");
		
		var win = button.up('window');

win.setLoading( "Saving End of Treatment Summary", false ) ;

		var ProvRep = this.getProviderReport();
		var FUA = this.getFollowUpAppointments();
		this.EoTSData.ClinicalTrial = this.application.Patient.ClinicalTrial;

		this.EoTSData.ProviderReport = ProvRep.value;
		this.EoTSData.FollowUpAppointments = FUA.value;

		var EoTSSaveRecord = Ext.apply({}, this.EoTSData);
		delete EoTSSaveRecord.LastVitals;
		delete EoTSSaveRecord.FirstVitals;

		var EoTSRecord = Ext.create(Ext.COMSModels.EoTS, EoTSSaveRecord );

		EoTSRecord.save({
			scope: this,
			success: function (data) {
				wccConsoleLog("Saved EoTS " );
				if (win.widget ) {
					Ext.widget(win.widget,{itemsInGroup: win.itemsInGroup, ChangeTemplate: win.ChangeTemplate});
				}
				win.setLoading( false, false ) ;
				win.close();
				// alert("Update History display with to display EoTS via ID returned in data");
				var thisCtl = this.getController("NewPlan.NewPlanTab");
				var Patient = this.application.Patient;
				thisCtl.loadTemplates("Update Templates");

// MWB - 8/2/2012 Clear out current template info...
Patient.TemplateDescription = "";
Patient.TemplateID = "";
Patient.TreatmentEnd = "";
Patient.TreatmentStart = "";


			},
			failure : function (arg0, arg1) {
				alert("End of Treatment Summary Failure to save record...");
				win.close();
			}
		});

	},

	CancelEoTS : function(button) {
		var win = button.up('window');
		win.close();
	},









//-----------------------------
//
// Get Vitals for EoTS
// This function is intended to get the vitals for a patient at the start and at the end of the treatment cycle.
// It should be examined again and probably tweaked when we have some consistent data to work with.
//
	getVitals : function() {
		var PatientInfo = this.application.Patient;
		var allVitals = PatientInfo.Vitals;
		var i, vitals, FirstVital = null, dt, vLen = allVitals.length;
		var soTreatment = new Date(this.EoTSData.TreatmentStart);
		var eoTreatment = new Date(this.EoTSData.TreatmentEnd);

		this.EoTSData.Vitals = [];
		for (i = vLen-1; i >= 0; i--) {
			vitals = allVitals[i];
			if (vitals.DateTaken) {
				if (0 === this.EoTSData.Vitals.length) {
					this.EoTSData.Vitals[0] = vitals;
					this.EoTSData.Vitals[1] = vitals;
				}
				dt = new Date(vitals.DateTaken);
				if (dt <= soTreatment) {
					this.EoTSData.Vitals[0] = vitals;
				}
				if (dt <= eoTreatment) {										// Right now our patients have vitals all over the place
					this.EoTSData.Vitals[1] = vitals;							// This code is intended to ensure that the FirstVital is before the Last Vital
				}
			}
		}
		this.EoTSData.FirstVitals = this.EoTSData.Vitals[0];		// The xTemplate view requires First/LastVitals, but the model uses an array of Vitals.
		this.EoTSData.LastVitals = this.EoTSData.Vitals[1];
	},

	createAdministeredMedsGrid : function() {
		var FSFields = [], FSColumns = [];
		var storeID = "AdministeredMedsStore";

		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		var theGrid = thisCtl.getAdministeredMedsGrid();

		var theGridEl = theGrid.getEl();

		FSColumns[0] = "date";
		FSColumns[1] = "Some Data";

		this.buildEoTSGrid( theGrid, storeID, FSFields, FSColumns, "" );
	},


	createDiseaseResponseGrid : function() {
		var FSFields = [], FSColumns = [];
		var storeID = "DiseaseResponseGrid";

		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		var theGrid = thisCtl.getAdministeredMedsGrid();

		var theGridEl = theGrid.getEl();

		FSColumns[0] = "date";
		FSColumns[1] = "Some Data";

		this.buildEoTSGrid( theGrid, storeID, FSFields, FSColumns, "" );
	},


	createToxicityGrid : function() {
		var FSFields = [], FSColumns = [];
		var storeID = "ToxicityGrid";

		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		var theGrid = thisCtl.getAdministeredMedsGrid();

		var theGridEl = theGrid.getEl();

		FSColumns[0] = "date";
		FSColumns[1] = "Some Data";

		this.buildEoTSGrid( theGrid, storeID, FSFields, FSColumns, "" );
	},


	buildEoTSGrid : function (theGrid, storeID, gFields, gCols, gData ) {
		var store = Ext.create('Ext.data.Store', {
			storeId: storeID,
			fields: gFields,
			data: { storeID : gData },
			proxy: {
				type: 'memory',
				reader: {
					type: 'json',
					root: storeID
				}
			}
		});

		theGrid = Ext.create('Ext.grid.Panel', {
			renderTo: theGrid.getEl(),
			autoScroll: 'y',
			columnLines: true,
			viewConfig: { stripeRows: true, forceFit: true },

			store: Ext.data.StoreManager.lookup(storeID),
			columns: gCols
		});

		theGrid.on("afterlayout", function() {
			theGrid.forceComponentLayout();	// Since the grid is added after the panel has been rendered, this function causes the panel to resize to fit the grid.
		}, this);
	}
});

Ext.define("COMS.controller.NewPlan.NewPlanTab", {
	/********************************
	 *
	 *	PatientSelected function is what loads all the data
	 *
	 * Function List:
	 *
	 *		MaskPITPanelOnExpand : function (p, ani, opts) {
	 *		MaskPITable : function (msg) {
	 *		clickPatientListCount : function( evt, itemClicked ) {
	 *		tabRendered : function( theTab ) {
	 *		InitIntelligentDataElementStore : function() {
	 *		cancelApply : function(button){
	 *		CancelVitals : function(btn) {
	 *		SaveVitals : function() {
	 *		handlePatientSelectionRender : function( panel ) {
	 *		resetPatientInfoPanel: function(thisCtl) {
	 *		resetTRSPanel: function(thisCtl, numTemplates) {
	 *		resetVitalsPanel: function(thisCtl, numVitals) {
	 *		resetLabInfoPanelPanelTitleBar: function(thisCtl, numLabResults) {
	 *		resetCTOSPanel: function(thisCtl) {
	 *		resetPanels: function(thisCtl, numTemplates, numVitals, numLabResults) {
	 *
	 *		HandleTemplateBtnClicks : function (event, element) {
	 *		ShowBSACalcsPUWin : function(opts, tab2switch2) {
	 *		afterrender : function(theWin, eOpts) {
	 *		HandleAnchorClicks : function (event, element) {
	 *		loadCombo : function(picker, eOpts){
	 *		callback: function(records,operation,success){
	 *		collapseCombo : function(picker,eOpts){
	 *		resetTemplateFilter : function(button){
	 *		editTemplate : function(button){
	 *		callback: function (records, operation, success) {
	 *		afterFindDisease : function(diseaseRecord){
	 *		callback: function(records,operation,success){
	 *		afterFindTemplate : function(templateRecord,controller,template){
	 *		ShowAskQues2ApplyTemplate : function(records, operation, success) {
	 *		applyTemplateToPatient : function(button){
	 *		clearCTOS : function(button){
	 *		TemplateTypeSelected : function(rbtn, newValue, oldValue, eOpts ) {
	 *		PatientModelLoadSQLPostTemplateApplied : function( PatientGUID, TreatmentID ) {
	 *		PatientModelLoadSQL : function( query ) {
	 *		PatientModelLoadMDWS : function(query) {
	 *		PatientStoreQuery : function( ) {
	 *		QSEnter : function( fld, e, eOpts ) {
	 *		LoadAllData4PatientByMDWSGUID : function(patientMDWSGUID) {
	 *		ConfirmPatientClick : function(evt, btn) {
	 *		handleShowUpdateMDWSClickEvent : function( evt, btn ) {
	 *		handlePatientSelectionClickEvent : function( evt, theBtn ) {
	 *		loadMDWSData : function() {
	 *		loadAllergyInfo : function() {
	 *		loadCumulativeMedDosing : function() {
	 *		loadLabInfo : function() {
	 *		extractDate : function(aDate) {
	 *		ConvertAssocArray : function(theData) {
	 *		extractAllergies : function(vDataRec) {
	 *		extractLabs : function(rec) {
	 *		extractProblems : function(rec) {
	 *		extractVitals : function(rec) {
	 *		parseVPR : function (vData) {
	 *		loadVitals : function(RetCode) {
	 *		loadAllTemplatesApplied2Patient : function() {
	 *		loadTemplates : function() {
	 *		getFNRiskInfo : function(FNRisk) {
	 *		getEmoLevelInfo : function(ELevel) {
	 *		manageOrderRecordsAfterLoading : function(OEMRecords) {
	 *		loadOrderRecords : function( ) {
	 *		PatientSelected : function(combo, recs, eOpts) {
	 *		UpdateOEMRecords : function(aRec, bRec) {
	 *		reAddHandlers : function() {
	 *		buildTemplateInfo : function(thisCtl, Patient, comeFrom) {
	 *		DataLoadCountDecrement : function(module) {
	 *		fieldContainerWalk : function(item, y, z) {
	 *		getObjLenMsg : function (Obj) {
	 *		updateKnownProblems : function() {
	 *		updateLabInfo : function() {
	 *		PatientDataLoadComplete : function(Loaded) {
	 *		HandleVSHCalcDoseButtons : function( event, element ) {
	 *		AssignBtnHandlers : function() {
	 *		onTemplateTypeChange : function(combo, recs, eOpts) {
	 *		DiseaseSelected : function(combo, recs, eOpts) {
	 *		onDiseaseStageChange : function(combo, recs, eOpts) {
	 *		CTOS_DataLoad2 : function(TemplateID) {
	 *		CTOS_DataLoad : function(TemplateID) {
	 *		LoadSpecifiedTemplate : function(TemplateID, module) {
	 *		ShowSelectedTemplate : function(theTemplate) {
	 *		selTemplateChange : function(combo, recs, eOpts) {
	 *		SaveBSAInfo : function() {	// Used to update the BSA if it's recalculated
	 *		LoadOEM_OrderData : function() {
	 *		selectMedReminderGridRow : function(theRowModel, record, index, eOpts) {
	 *		getAnyMedReminders4Template : function(TemplateID) {
	 *		RefreshMedRemindersGrid : function() {
	 *		AddMedReminders2Store : function(MedReminders) {
	 *		getMedRemindersInArray : function() {
	 *
	 ********************************/
    extend : "Ext.app.Controller",
    puWinAmputations : null,
    puWinBSASelection : null,

    stores : [
		"Patients",
		"PatientHistory",
		"LabInfo",
		"TemplateSources",
		"DiseaseType",
		"DiseaseStage",
		"Templates",
		"CTOS",
		"PerfStatStore",
		"TemperatureLocation",
		"DeliveryMechanism",
		"IDEntry",
		'MedReminders'
    ],



	models : ["LabInfo", "AllTemplatesApplied2Patient", "IDEntry", Ext.COMSModels.MedReminder],

	views : [
		"NewPlan.NewPlanTab",
		"NewPlan.MedRemindersPanel",
		"NewPlan.PatientSelection",
		"NewPlan.SelectPatient",
		"NewPlan.PatientInfo",
		"NewPlan.PatientInfoTable",
		"NewPlan.PatientTemplates",
		"NewPlan.PatientHistory",
		"NewPlan.LabInfo",
		"NewPlan.KnownProblems",
		"NewPlan.OEM",
		"NewPlan.AdverseEventsHistory",
		"NewPlan.CTOS",
		"NewPlan.CTOS.PatientSummary",
		"NewPlan.CTOS.NursingDocs",
		"NewPlan.CTOS.KnowledgeBase",
		"Common.Search4Template",
		"Common.selCTOSTemplate",
		"Common.selTemplateSrc",
		"Common.selDiseaseAndStage",
		"Common.selDisease",
		"Common.selDiseaseStage",
		"Common.selTemplate",
		"Common.VitalSignsHistory",
		"Common.puWinSelCancer",
		"Common.puWinAddCumDose",
		"Common.puWinSelBSA",
		"Common.puWinSelAmputation",
		"Common.MedRemindersForm",
		"Common.MedRemindersGrid",
		"Authoring.MedReminder",
		"NewPlan.dspTemplateData",
		"NewPlan.AskQues2ApplyTemplate",
		"NewPlan.AmputationSelection",
		"NewPlan.BSASelection",
		"NewPlan.EndTreatmentSummary"
	],

	refs: [
		{ ref: "NewPlanTab",					selector: "NewPlanTab"},

		{ ref: "CTOS",							selector: "NewPlanTab CTOS"},
		{ ref: "ApplyTemplateBtn",				selector: "NewPlanTab CTOS button[name=\"Apply\"]"},
		{ ref: "EditTemplateBtn",				selector: "NewPlanTab CTOS button[name=\"Edit\"]"},
		{ ref: "What2DoBtns",				    selector: "NewPlanTab CTOS [name=\"NewPlan_What2Do_Btns\"]"},
		{ ref: "NewPlan_CTOS_Form",			    selector: "NewPlanTab CTOS form[name=\"NewPlan_CTOS_Form\"]"},

		{ ref: "PatientInfo",					selector: "NewPlanTab PatientInfo"},

		{ ref: "PatientInfoTable",				selector: "NewPlanTab PatientInfo PatientInfoTable"},
		{ ref: "PatientInfoTableInformation",	selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"PatientInfoTable\"]"},
		{ ref: "PatientInfoTableBSACalcs",		selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"]"},

		{ ref: "PatientInfoMedReminders",		selector: "NewPlanTab PatientInfo MedRemindersPanel"},
		{ ref: "PatientInfoMedRemindersTitle",	selector: "NewPlanTab PatientInfo MedRemindersPanel [name=\"Title\"]"},
		{ ref: "MedRemindersGrid",	selector: "NewPlanTab PatientInfo MedRemindersPanel grid"},
		{ ref: "MedRemindersForm",		selector: "NewPlanTab PatientInfo MedRemindersPanel MedRemindersForm"},
		{ ref: "PatientInfoMedRemindersDescription",	selector: "NewPlanTab PatientInfo MedRemindersPanel [name=\"Description\"]"},
		{ ref: "PatientInfoMedRemindersWhenCycle",		selector: "NewPlanTab PatientInfo MedRemindersPanel [name=\"ReminderWhenCycle\"]"},
		{ ref: "PatientInfoMedRemindersWhenPeriod",		selector: "NewPlanTab PatientInfo MedRemindersPanel [name=\"ReminderWhenPeriod\"]"},

		{ ref: "CTOS_MedRemindersGrid",		selector: "NewPlanTab CTOS MedRemindersGrid"},
		{ ref: "CTOS_MedRemindersForm",		selector: "NewPlanTab CTOS MedRemindersForm"},
		{ ref: "CTOS_MedRemindersDescription",	selector: "NewPlanTab CTOS MedRemindersPanel [name=\"Description\"]"},
		{ ref: "CTOS_MedRemindersWhenCycle",		selector: "NewPlanTab CTOS MedRemindersPanel [name=\"ReminderWhenCycle\"]"},
		{ ref: "CTOS_MedRemindersWhenPeriod",		selector: "NewPlanTab CTOS MedRemindersPanel [name=\"ReminderWhenPeriod\"]"},

		{ ref: "PatientTemplates",				selector: "NewPlanTab PatientInfo PatientTemplates"},
		{ ref: "PatientHistory",				selector: "NewPlanTab PatientInfo PatientHistory"},
		{ ref: "LaboratoryInfo",				selector: "NewPlanTab PatientInfo LabInfo"},
		{ ref: "KnownProblems",					selector: "NewPlanTab PatientInfo KnownProblems"},

		{ ref: "CTOSDataDsp",					selector: "NewPlanTab PatientInfo CTOS dspTemplateData"},

		{ ref: "VitalSigns",					selector: "NewPlanTab PatientHistory VitalSignsHistory"},

		{ ref: "selCTOSTemplate",				selector: "NewPlanTab selCTOSTemplate"},
		{ ref: "SelectPatientSection",			selector: "NewPlanTab SelectPatient"},
		{ ref: "PatientSelectionPanel",			selector: "NewPlanTab PatientSelection"},
		{ ref: "SelectPatient",					selector: "NewPlanTab SelectPatient combobox"},
		{ ref: "ConfirmPatient",				selector: "NewPlanTab SelectPatient container[name=\"Confirm\"]"},
		{ ref: "NoPatient",						selector: "NewPlanTab SelectPatient box[name=\"NoPatient\"]"},

		{ ref: "AuthoringTab",					selector: "AuthoringTab"},
		{ ref: "NavigationTabs",				selector: "NavigationTabs"},

		{ ref: "NDGI_VitalSigns",				selector: "NursingDocs_GenInfo VitalSignsHistory"},
		{ ref: "ProgrammerBtns",				selector: "ProgrammerBtns"}
	],

	Modules2Load : [],		// Used to track which modules are in the process of being loaded and to load modules synchronously rather than asyncronously which works more efficiently on the back end.


	init: function() {
		wccConsoleLog("Initialized New Plan Tab Panel Navigation Controller!");
		this.application.btnEditTemplatClicked=false;
		this.application.on({ LoadOEMData : this.LoadOEM_OrderData, scope : this });

		this.application.on({ UpdateBSAWeightHeight : function(opts, tab2Switch2) {
			var weight = opts.weight;
			var height = opts.height;
			var Patient = this.application.Patient;
			var newBSA = "";
			if ("" !== height) {
				Patient.Height = height.substring(0, height.indexOf(" "));
			}
			if ("" !== weight) {
				Patient.Weight = weight.substring(0, weight.indexOf(" "));
			}
			if("" !== height || "" !== weight) {
				newBSA = Ext.BSA_Calc(Patient);
			}
			opts.BSA = newBSA;
 			this.ShowBSACalcsPUWin(opts, tab2Switch2);
		}, scope : this });

		this.control({
			"NewPlanTab PatientInfo MedRemindersPanel grid" : {
				select: this.selectMedReminderGridRow
			},


			"NewPlanTab PatientInfo CTOS dspTemplateData" : {
				afterrender : this.tabRendered
			},
			"NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]" : {
				change : this.TemplateTypeSelected
			},

			"NewPlanTab PatientSelection textfield[name=\"CPRS_QueryString\"]" : {
				specialkey : this.QSEnter
			},
			"NewPlanTab SelectPatient combobox" : {
				select : this.PatientSelected
			},

			"NewPlanTab CTOS button[name=\"Apply\"]" : {
				click: this.applyTemplateToPatient
			},
			"NewPlanTab CTOS button[name=\"Edit\"]" : {
				click: this.editTemplate
			},
			"NewPlanTab MedRemindersPanel" : {
				afterrender: Ext.togglePanelOnTitleBarClick
			},

			"NewPlanTab PatientSelection" : {
				afterrender: this.handlePatientSelectionRender
			},
			"NewPlanTab PatientInfo PatientInfoTable" : {
				afterrender: Ext.togglePanelOnTitleBarClick
			},
			"NewPlanTab PatientInfo PatientTemplates" : {
				afterrender: Ext.togglePanelOnTitleBarClick
			},
			"NewPlanTab PatientInfo PatientHistory" : {
				afterrender: Ext.togglePanelOnTitleBarClick
			},
			"NewPlanTab PatientInfo LabInfo" : {
				afterrender: Ext.togglePanelOnTitleBarClick
			},
			"NewPlanTab PatientInfo KnownProblems" : {
				afterrender: Ext.togglePanelOnTitleBarClick
			},
			"NewPlanTab PatientInfo AdverseEventsHistory" : {
				afterrender: Ext.togglePanelOnTitleBarClick
			},
			"NewPlanTab ToxicitySideEffectsPanel" : {
				afterrender: Ext.togglePanelOnTitleBarClick
			},
			"PatientHistory [name=\"AddVitals\"] button[text=\"Save\"]" : {
				click: this.SaveVitals
			},
			"PatientHistory [name=\"AddVitals\"] button[text=\"Cancel\"]" : {
				click: this.CancelVitals
			}
		});
		this.InitIntelligentDataElementStore();
		wccConsoleLog("New Plan Tab Panel Navigation Controller Initialization complete!");
	},

	updatePITable : function(PatientData) {	// This is part of the "NewPlan.NewPlanTab" controller so no need to get it.
		var theController = this.getController("NewPlan.NewPlanTab");
		var piTableInfo;
		piTableInfo = this.getPatientInfoTableInformation();
		if (!PatientData) {
			piTableInfo.update("");
		}
		else {
			piTableInfo.update(PatientData);
		}
	},

	clickPatientListCount : function( evt, itemClicked ) {
		if ("anchor PatientList" == itemClicked.className) {
			var thePatients = this.application.CurrentTemplate.data.PatientList;
			var theDesc = this.application.CurrentTemplate.data.Description;
			var theController = this.getController("TemplateList.TemplateListTab");
			theController.showPatientListWidget(thePatients, theDesc);
		}
	},

	tabRendered : function( theTab ) {
		theTab.mon(theTab.el, 'click', this.clickPatientListCount, this);
	},

	InitIntelligentDataElementStore : function() {
		var theStore = this.getStore("IDEntry");
		theStore.load({
			scope: this,
			callback: function(records, operation, success) {
				var IDE = [], i, len = records.length, rec;
				for (i = 0; i < len; i++) {
					rec = records[i].getData();
					IDE.push(rec);
				}
				this.application.IntelligentDataElements = IDE;
			}
		});
	},

	cancelApply: function(button){
		wccConsoleLog("CancelApplication of Template");
	},


	CancelVitals : function(btn) {
		btn.up('form').getForm().reset();
	},

	SaveVitals : function() {
		var theController = this.getController("NewPlan.CTOS.NursingDocs.GenInfoTab");
		if (theController) {
			theController.SaveVitals("PatientHistory");
		}
	},


	handlePatientSelectionRender : function( panel ) {
		var Btns = Ext.select("button.anchor.QueryCPRS4Patient");
		if (Btns) {
			Btns.on("click", this.handlePatientSelectionClickEvent, this);
		}
		if ("Programmer" === dName ) {
			// this.getProgrammerBtns().show();
		}
		Ext.togglePanelOnTitleBarClick(panel);
	},

	resetPatientInfoPanel: function(thisCtl) {
		var PatientInformationPanel = thisCtl.getPatientInfo();
		PatientInformationPanel.collapse();
	},

	resetTRSPanel: function(thisCtl, numTemplates) {
		var TRSPanel = thisCtl.getPatientTemplates(),
			buf =  "Treatment Regimens & Summaries";
		if (numTemplates && "" !== numTemplates) {
			buf += "<span class='LabInfoTitleInfo' style='margin-left: 3em; font-size: smaller;'>(" + numTemplates + ")</span>";
		}
		TRSPanel.collapse();
		TRSPanel.setTitle(buf);
	},

	resetVitalsPanel: function(thisCtl, numVitals) {
		var VitalsPanel = thisCtl.getPatientHistory(),
			buf =  "Patient Vitals ";
		if (numVitals && "" !== numVitals) {
			buf += "<span class='LabInfoTitleInfo' style='margin-left: 3em; font-size: smaller;'>(" + numVitals + ")</span>";
		}
		VitalsPanel.collapse();
		VitalsPanel.setTitle(buf);
	},

	resetLabInfoPanelPanelTitleBar: function(thisCtl, numLabResults) {
		var LabInfoPanel = thisCtl.getLaboratoryInfo(),
			buf =  "Laboratory Information ";
		if (numLabResults && "" !== numLabResults) {
			buf += "<span class='LabInfoTitleInfo' style='margin-left: 3em; font-size: smaller;'>(" + numLabResults + ")</span>";
		}
		LabInfoPanel.collapse();
		LabInfoPanel.setTitle(buf);
	},

	resetCTOSPanel: function(thisCtl) {
		var CTOSPanel = thisCtl.getCTOS();
		CTOSPanel.setActiveTab(0);
		try {   /* One or more of the controls may not be available based on role of user */
			thisCtl.getNewPlan_CTOS_Form().getForm().reset();
			Ext.ComponentQuery.query("NewPlanTab box[name=\"AllTemplatesShownMsg\"]")[0].hide();
			Ext.ComponentQuery.query("NewPlanTab selTemplate")[0].hide();
			Ext.ComponentQuery.query("NewPlanTab selDiseaseAndStage")[0].hide();
			Ext.ComponentQuery.query("NewPlanTab selCTOSTemplate")[0].hide();
			Ext.ComponentQuery.query("NewPlanTab dspTemplateData")[0].hide();
			Ext.ComponentQuery.query("NewPlanTab button[name=\"Apply\"]")[0].hide();
			Ext.ComponentQuery.query("NewPlanTab button[name=\"Edit\"]")[0].hide();
			this.getMyTemplates().hide();
			this.getSelCTOSTemplate().hide();
		}
		catch (err) {
		}
	},

	resetPanels: function(thisCtl, numTemplates, numVitals, numLabResults) {
		this.resetPatientInfoPanel(thisCtl);
		this.resetTRSPanel(thisCtl, numTemplates);
		this.resetVitalsPanel(thisCtl, numVitals);
		this.resetLabInfoPanelPanelTitleBar(thisCtl, numLabResults);
		this.resetCTOSPanel(thisCtl);
		this.getWhat2DoBtns().hide();
	},




	HandleTemplateBtnClicks : function (event, element) {
		wccConsoleLog("HandleTemplateBtnClicks - PatientInfoTable!");
		var templateName, templateID, CTOSTabs, gender, height, weight, Amputee, DateTaken;
		var tab2switch2 = element.getAttribute("tabtype");
		var btnName = element.getAttribute("name");
		var Patient = this.application.Patient;
		var fncName = "Unknown ";


		switch (btnName) {
			case "ShowTemplateDetails":
				fncName = "Show Details";
				this.application.Patient.TD = {};
				this.application.Patient.TD_TemplateID = element.getAttribute("templateid");
				this.application.Patient.TD_TemplateName = element.getAttribute("templatename");
				this.application.Patient.TD_ID = element.getAttribute("EotsID");
				this.application.Patient.TD_Type = "Show";

				Ext.widget("TreatmentDetails");
				fncName = "";
				break;
			case "GenerateEoTS":
				fncName = "Generate End of Treatment Summary";
				this.application.Patient.EoTS_TemplateID = element.getAttribute("templateid");
				this.application.Patient.EoTS_TemplateName = element.getAttribute("templatename");
				// Have TemplateID = this.application.Patient.AppliedTemplateID
				// TemplateName = this.application.Patient.AppliedTemplate.Description
				this.application.Patient.EoTS_Type = "Generate";
				Ext.widget("EndTreatmentSummary");
				fncName = "";
				break;

			case "ShowEoTS":
				fncName = "Show End of Treatment Summary";
				this.application.Patient.EoTS_TemplateID = element.getAttribute("templateid");
				this.application.Patient.EoTS_TemplateName = element.getAttribute("templatename");
				this.application.Patient.EoTS_ID = element.getAttribute("EotsID");
				this.application.Patient.EoTS_Type = "Show";
				this.application.loadMask("Loading End of Treatment Summary Information...");
				delete(this.application.Patient.EoTS);	// Clear out any previous EoTS info just in case...

				Ext.Ajax.request({
					scope : this,
					url: Ext.URLs.EoTS + "/" + this.application.Patient.EoTS_ID,
					success: function( response, opts ){
						this.application.unMask();
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						if (resp.success) {
							if (resp.records[0]) {
								this.application.Patient.EoTS = resp.records[0];
								Ext.widget("ViewEndTreatmentSummary");
							}
							else {
								alert("No records available for this EoTS");
							}
						}
						else {
							alert("load EoTS - Error");
						}
					},
					failure : function( response, opts ) {
						this.application.unMask();
						alert("EoTS Data Load Failed...");
					}
				});


				fncName = "";
				break;
		}
		if ("" !== fncName) {
			alert(fncName + " - NewPlanTab.js-HandleTemplateBtnClicks() function not yet available");
		}
	},

/**
 * Amputation information is stored in the Lookup table in the following manner:
 *  Lookup_Type = 30
 *  Lookup_Type_ID = null
 *  Name = Patient GUID
 *  Description = Amputation (e.g. "Left Foot", "Lower Left Arm", etc) One Amputation per record
 *  Use Patient Controller
 **/

	ShowBSACalcsPUWin : function(opts, tab2switch2) {
		var templateName, templateID, CTOSTabs, gender, height, weight, Amputee, DateTaken;
		var xx, yy, tmpData, tempBSA, DataEl, OEMData, OEM_Data_Record;
		var PatientInfo;
		var PatientData;

		var Patient = this.application.Patient;

			tempBSA = Patient.BSA;
			this.application.Patient.BSA_Reduction = 0;
			PatientData = Ext.ShowBSACalcs(Patient, true, null, null, null);

			/* MWB - 6/4/2014 Added new code to allow user to select Height/Weight for BSA Calculations */
			Ext.widget('window', {
				title: "Dosage Calculations",
				closeAction: "destroy",
				width: 520,
				height: 370,
				minHeight: 300,
				resizable: true,
				modal: true,
				scope : this,
				items: [ { xtype : "box", "html" : PatientData }],
				buttons : [ 
					{ "text" : "Ok", "handler" : function(btn) {
							btn.up('window').close();
						}
					}
				],
				listeners : {
					"afterrender" : function(theWin, eOpts) {
						var btn = theWin.el.select("button.changeBSAHeightWeight");
						btn.on("click", function(theBtn, evt, eOpts) {
							var theVitals = this.application.Patient.Vitals;
							var htList = [];
							var wtList = [];
							var VitalsLen = theVitals.length;
							var i, htObj, wtObj, temp1, temp2;
							var defaultValues = {"height" : "", "weight" : ""};
							for (i = 0; i < VitalsLen; i++) {
								temp1 = theVitals[i].Height;
								if ("" !== temp1) {
									temp2 = Ext.In2CM(temp1);
									htObj = { "dsp" : temp1 + " / " + temp2 + " (in/cm) - " + theVitals[i].DateTaken, "value" : temp1 + "-" + theVitals[i].DateTaken };
									if ("" == defaultValues.height) {
										defaultValues.height = htObj;
									}
									htList.push(htObj);
								}

								temp1 = theVitals[i].Weight;
								if ("" !== temp1) {
									temp2 = Ext.Pounds2Kilos(temp1);
									wtObj = { "dsp" : temp1 + " / " + temp2 + " (lbs/kg) - " + theVitals[i].DateTaken, "value" : temp1 + "-" + theVitals[i].DateTaken };
									if ("" == defaultValues.height) {
										defaultValues.weight = wtObj;
									}
									wtList.push(wtObj);
								}
							}

							var htStore = Ext.create('Ext.data.Store', {
								"fields" : ["dsp", "value"],
								"data" : htList
							});

							var wtStore = Ext.create('Ext.data.Store', {
								"fields" : ["dsp", "value"],
								"data" : wtList
							});

							var htCombo = {
								"xtype" : "combo", 
								"margin" : "10 0 10 0", 
								"width" : 350,
								"name" : "SelectBSAHeight", 
								"id" : "SelectBSAHeight",
								"fieldLabel" : "Height", 
								"labelAlign" : "right", 
								"emptyText" : "Select Height",
								"value" : htList[0].value,
								"store" : htStore,
								"queryMode" : "local",
								"displayField" : "dsp",
								"valueField" : "value"
							};

							var wtCombo = {
								"xtype" : "combo", 
								"width" : 350,
								"name" : "SelectBSAWeight", 
								"id" : "SelectBSAWeight",
								"fieldLabel" : "Weight", 
								"labelAlign" : "right", 
								"emptyText" : "Select Weight",
								"value" : wtList[0].value,
								"store" : wtStore,
								"queryMode" : "local",
								"displayField" : "dsp",
								"valueField" : "value"
							};


							Ext.widget('window', {
								title: "Change Height / Weight for BSA Calculations",
								closeAction: 'destroy',
								width: 400,
								height: 150,
								resizable: true,
								modal: true,
								scope : this,
								"defaults": { "labelAlign": "right", "labelClsExtra": "NursingDocs-label" },
								items: [ htCombo, wtCombo ],
								buttons : [ 
									{ "text" : "Save", scope : this, pWin : theWin, "handler" : function(btn) {
											var height1 = Ext.getCmp("SelectBSAHeight");
											var height = height1.getRawValue();
											var weight1 = Ext.getCmp("SelectBSAWeight");
											var weight = weight1.getRawValue();

											this.application.fireEvent("UpdateBSAWeightHeight", {height : height, weight : weight}, "DoBSACalcs");

											btn.up('window').close();
											btn.pWin.close();
										}
									},
									{ "text" : "Cancel", "handler" : function(btn) {
											btn.up('window').close();
										}
									}
								]
							}, this).show();
						}, theWin.scope);
					}
				}
			}).show();


			this.PatientDataLoadComplete("Update BSA");	// Use this call to update the BSA in the PatientInfoTable.
			if (opts.BSA) {
				Patient.BSA = opts.BSA;
			}
			if ("DoBSACalcs" === tab2switch2 && tempBSA !== Patient.BSA) {
				this.SaveBSAInfo();		// POSTs the BSA Calculations and formula as a Patient Vitals Record.
				var spanTag = Ext.get("PatientInfoTableBSA_Display");
				spanTag.setHTML(Patient.BSA);
			}
	},
	//-------------------------------------------------------------------------
	// MWB 25 Jan 2012 - Event handler for the anchor onclick events in the PatientTemplate Table.
	// When the user clicks on one of the anchors in the list of templates applied to a patient
	// an event is fired off up the stack, passing the name of the template, and the tab the template should be displayed in
	// e.g. OEM or CTOS
	// The event itself should then be captured in either the CTOS or the OEM controller and processed accordingly.
	//
	// MWB 27 Jan 2012 - Added additional functionality
	// MWB 30 Jan 2012 - Added additional functionality
	// MWB 31 Jan 2012 - Added control for the BSA Anchor
	// MWB 09 Feb 2012 - Added additional param - DateTaken
	// MWB 08 Apr 2014 - Added functionality for Add/Edit BSA and Amputations
	//
	HandleAnchorClicks : function (event, element) {
		wccConsoleLog("HandleAnchorClicks - PatientInfoTable - " + element.getAttribute("tabtype"));
		var templateName, templateID, CTOSTabs, gender, height, weight, Amputee, DateTaken;

		var xx, yy, tmpData, tempBSA, DataEl, OEMData, OEM_Data_Record;
		var PatientInfo;
		var PatientData;

		var tab2switch2 = element.getAttribute("tabtype");

		var Patient = this.application.Patient;


		if("DoBSACalcs" === tab2switch2 || "ShowBSACalcs" === tab2switch2) {
			this.ShowBSACalcsPUWin({}, tab2switch2);
		} else if("ShowAllPatientData" === tab2switch2) {
			PatientInfo = Patient;
			// PatientData = "<div style=\"margin-left: 1em;\"><ul>" + this.getPatientDataAsString() + "</ul></div>";
			var htmlData = prettyPrint( Patient, { maxDepth : 5 } ).innerHTML;
			Ext.create('Ext.window.Window', {
				title: 'Patient Info',
				height: 800,
				width: 950,
				autoScroll : true,
				html : htmlData
			}).show();

		} else if("BSA" === tab2switch2) {
			gender = element.getAttribute("gender");
			height = element.getAttribute("height");
			weight = element.getAttribute("weight");
			Amputee = element.getAttribute("amputee");
			DateTaken = element.getAttribute("date");	// MWB 09 Feb 2012 - Added additional param - DateTaken
			this.application.fireEvent("CalculateBSA", {gender : gender, height : height, weight : weight, amputee : Amputee, date : DateTaken }); // MWB 09 Feb 2012 - Added additional param - DateTaken
		} else if ("CTOS" === tab2switch2) {
			templateName = element.getAttribute("templatename");
			templateID = element.getAttribute("templateid");
			this.CTOS_DataLoad2(templateID);
			CTOSTabs = this.getCTOS();
			CTOSTabs.setActiveTab(0);		// Show the CTOS Tab
		} 
		else if ("Show Details" === tab2switch2 || "Edit" === tab2switch2) {
			alert("Function not yet available");
		} else {
			templateName = element.getAttribute("templatename");
			templateID = element.getAttribute("templateid");
			this.application.fireEvent("TemplateSelected", {tabType : tab2switch2, templateName : templateName, templateID : templateID});
		}
	},


	//KD - 01/23/2012 - This is shared function between Disease stage combo and Select Templates combo
	loadCombo : function(picker, eOpts){
		var originalHiddenVal=null;
		picker.hiddenValue = picker.getRawValue();
		picker.clearValue();

		var URI,id;

		if("Select Disease Stage Control" == picker.name){
			URI = Ext.URLs.DiseaseStage + "/";
			if(eOpts && eOpts.length && eOpts.length > 0){
				id = eOpts;
			}else{
				id = this.application.Patient.Disease.id;
			}
		} else if (picker.name == "selDisease"){
			if(eOpts && eOpts.length && "Refresh" === eOpts){
				URI = Ext.URLs.DiseaseType;
				id = '';
			}else if(null != this.application.Patient.TemplateType.id){
				URI = Ext.URLs.DiseaseType + "/Source/";
				id = this.application.Patient.TemplateType.id;
			}
		}

		picker.getStore().load({
			params: {
				URL : URI,
				ID  : id
			},
			callback: function(records,operation,success){
				if(success){
					if(null!=originalHiddenVal){
						picker.setRawValue(originalHiddenVal);
					}
				}
			}
		});

	},

	collapseCombo : function(picker,eOpts){
		if(picker.getValue() == null && picker.hiddenValue != null){
			picker.setRawValue(picker.hiddenValue);		// MWB 15 Feb 2012 - Added missing ";" as per JSLint
		}

	},

	resetTemplateFilter : function(button){

		if(null != this.application.Patient.Template){
			this.getTemplate().setRawValue(this.application.Patient.Template.description);
		}

		this.application.ResetClicked=true;
		this.loadCombo(this.getTemplate());
		this.loadCombo(this.getDisease(),"Refresh");

		this.getDiseaseAndStage().hide();
		this.getTemplate().show();
		button.hide();
		this.getAllTemplatesShownMsg().show();
	},


	editTemplate : function(button){
		this.application.loadMask("Edit Template");

		this.application.btnEditTemplatClicked=true;

		var disease = this.getDisease();

		var diseaseRecord = disease.getStore().getById(disease.getValue());

		if(0 == this.getSelTemplateType().getStore().count()){
			this.getSelTemplateType().getStore().load();
		}


		if(null === diseaseRecord){
			var newPlanCtl = this.getController("NewPlan.NewPlanTab");
			disease.getStore().load({
				params: {
						URL: Ext.URLs.DiseaseType + "/",
						ID: disease.getValue()
				},
				callback: function (records, operation, success) {
						if (success) {
							var diseaseRecord = disease.getStore().getById(disease.getValue());
							newPlanCtl.afterFindDisease(diseaseRecord);
						}else{
							Ext.MessageBox.alert('Failure', 'Cancer type could not be found for this template. ');
						}
				}
			});

		}else {
			this.afterFindDisease(diseaseRecord);
		}
	},

	afterFindDisease : function(diseaseRecord){
		var thisCtl = this.getController("Authoring.AuthoringTab");
		var existingTemplate = Ext.ComponentQuery.query('AuthoringTab fieldcontainer radiofield[name=\"Authoring_SelectTemplateType\"]')[0];


		var template=null;
		var templateTypeModel, templateType = this.getSelTemplateType();

		if(Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[0].getValue()){
			/*
			 * Assigning the template type to a Local Template. Not correct logic
			 * but just something to get past the error when editing a template.
			 */
			templateTypeModel = this.getSelTemplateType().getStore().getAt(1);
			templateType.setValue(templateTypeModel);
			template = this.getMyTemplates();
		}else if(Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[1].getValue()){
			template = this.getTemplate();
		}

		if(null == template){
			/*
			 * Assigning the template type to a Local Template. Not correct logic
			 * but just something to get past the error when editing a template.
			 */
			templateTypeModel = this.getSelTemplateType().getStore().getAt(1);
			templateType.setValue(templateTypeModel);
			template = this.getMyTemplates();
		}
		existingTemplate.setValue(true);

		var rbtn = Ext.create(Ext.form.Radio,{
			inputValue : 0
		});

		thisCtl.AuthorTypeSelected(rbtn,true,null,null);
		thisCtl.getPatientNameField().setValue(this.application.Patient.name);
		thisCtl.getPatientNameField().show();

		var templateSourceRecord = this.getSelTemplateType().getStore().findBy(

			function (record, id) {

					if(record.data.id == templateType.getValue()){
						return true;
					}

					return false;
			});

		var templateSourceRecords = [];

		var tmp = templateType.getStore().getAt(templateSourceRecord);
		templateSourceRecords.push(tmp);
		thisCtl.getTemplateSource().setValue(tmp);
		thisCtl.onTemplateTypeChange(null,templateSourceRecords,null);

		var diseaseRecords = [];
		diseaseRecords.push(diseaseRecord);

		thisCtl.getExistingDisease().setRawValue(diseaseRecord.data.name);
		thisCtl.DiseaseSelected(thisCtl.getExistingDisease(),diseaseRecords,null);

		var diseaseStage = this.getDiseaseStage();
		var diseaseStageRecord = diseaseStage.getStore().getById(diseaseStage.value.id);
		var diseaseStageRecords = [];


		if(null != diseaseStageRecord){
			diseaseStageRecords.push(diseaseStageRecord);
			thisCtl.getExistingDiseaseStage().setRawValue(diseaseStageRecord.data.name);
			thisCtl.onDiseaseStageChange(thisCtl.getExistingDiseaseStage(),diseaseStageRecords,null);
		}else{
			thisCtl.getExistingDiseaseStage().setRawValue('');
		}

		var templateRecord;
		if(null!=this.application.Patient.AppliedTemplateID){
			templateRecord = template.getStore().getById(this.application.Patient.AppliedTemplateID);
		}else{
			templateRecord = template.getStore().getById(this.application.Patient.Template.id);
		}

		template.clearValue();

		if(null==templateRecord){
			var newPlanCtl = this.getController("NewPlan.NewPlanTab");
			template.getStore().load({
				params: {
					URL: Ext.URLs.Templates + "/",
					ID: (null == this.application.Patient.Template) ? this.application.Patient.AppliedTemplateID : this.application.Patient.Template.id
				},
				callback: function(records,operation,success){
					if(success){
						templateRecord = this.getAt(0);
						newPlanCtl.afterFindTemplate(templateRecord,thisCtl,template);
					}
				}
			});

		}else{
			this.afterFindTemplate(templateRecord,thisCtl,template);
		}
	},
	afterFindTemplate : function(templateRecord,controller,template){
		var templateRecords = [];
		this.collapseCombo(template,null);
		this.collapseCombo(this.getDiseaseStage(),null);
		templateRecords.push(templateRecord);
		controller.getTemplate().setRawValue(templateRecord.data.description);
		controller.selTemplateChange(controller.getTemplate(),templateRecords,null);

		// this.getNavigationTabs().setActiveTab(1);
		// MWB - 5/29/2012 - With the addition of the "Orders" tab and the fact that the Orders tab might NOT be visible to all users
		// we need to get the index of the "Template Authoring" tab by walking the titles of the tabs.
		var allTabs = this.getNavigationTabs().items;
		allTabs.findBy(function(aTabPanel) {
			if ("Template Authoring" === aTabPanel.title) {
				this.getNavigationTabs().setActiveTab(aTabPanel);
			}
		},
		this );
	},

	initAskQues2ApplyTemplateFields : function (theFields, fieldName, fieldLabel) {
		var i, j, aField, afName, theLabel, fieldIsSet;
		if(Ext.isArray(fieldLabel)) {		// Handles Amputations Array
			for (j = 0; j < fieldLabel.length; j++) {
				fieldIsSet = fieldLabel[j].description;
				for (i = theFields.length-1; i >= 0; i--) {
					aField = theFields[i];
					afName = aField.name;
					if (afName === fieldName && fieldIsSet == afName) {
						return true;
					}
				}
			}
		}
		else {		// Handles Performance Status radio buttons list
			for (i = theFields.length-1; i >= 0; i--) {
				aField = theFields[i];
				if (aField.name === fieldName) {
					theLabel = aField.boxLabel[0];
					if (theLabel == fieldLabel) {
						return aField.inputValue;
					}
				}
			}
		}
		return "";
	},


	ShowAskQues2ApplyTemplate : function(records, operation, success) {
		var i, itemsInGroup = [];	// new Array();
		var TemplateApplied = this.application.Patient.TemplateID;
		var TemplateApproved = false;

		for (i = 0; i < records.length; i++ ){
			var record = records[i];
			if(record.data.value !== '5' ){
				itemsInGroup.push({
					boxLabel : record.data.value + ' - ' + record.data.description,
					name : 'PerfStatus',
					inputValue : record.data.id,
					width : 450
				});
			}
		}

		if(TemplateApplied && TemplateApproved){
			Ext.MessageBox.show({
				title: 'Information',
				msg: 'Template already applied. Would you like to archive existing template and apply current selection?',
				width:300,
				buttons: Ext.MessageBox.OKCANCEL,
				scope: this,
				fn: function(buttonId) {
					if("ok" === buttonId) {
						try {
							var fncName = "Generate End of Treatment Summary";
							this.application.Patient.EoTS_TemplateID = this.application.Patient.AppliedTemplate.id;
							this.application.Patient.EoTS_TemplateName = this.application.Patient.AppliedTemplate.Description;
							this.application.Patient.EoTS_Type = "Generate";
							Ext.widget("EndTreatmentSummary", { widget : "AskQues2ApplyTemplate", itemsInGroup: itemsInGroup, ChangeTemplate: true });
							fncName = "";
						}
						catch (err) {
							alert("Failure to Add Date Widget");
						}
					}
				}
			});
		}
		else {
			var theWidget = Ext.ComponentQuery.query("AskQues2ApplyTemplate");
			if (theWidget.length > 0) {
				theWidget[0].show();
			}
			else {
				theWidget = Ext.widget("AskQues2ApplyTemplate",{itemsInGroup: itemsInGroup, ChangeTemplate: false, scope:this});
			}

			var theForm = theWidget.items.items[0].getForm();
			/*
			"id",
			"name",
			"DOB",
			"Gender",
			"Age",
			"ApprovedByUser",
			"AssignedByUser",
			"ConcurRadTherapy",
			"Goal",
			"PerformanceStatus",

			// "Measurements",		// Array of measurements
			"DFN",				// Data File Name which links to MDWS
			"Disease",			// Array of diseases

			"TemplateName",		// Info on the currently active template
			"TemplateDescription",
			"TemplateID",
			"PAT_ID",				// This is really the "Treatemen ID" but for now just using the existing SQL Field name.
			// "TreatmentID",		// ID of the record containing this Treatment. This ID acts as a link for all records for this treatment process.
			"TreatmentStart",
			"TreatmentEnd",
			"TreatmentStatus",
			"ClinicalTrial",

			"WeightFormula",
			"BSA_Method",
			"BSA_Weight",
			"BSA",
			"BSAFormula",

			"Amputations",
			 */

			var PatientDetails = this.application.Patient;
			// theForm.getFields().items[35].boxLabel[0]
			var theFields = theForm.getFields().items;
			/***
			var i, aField, theLabel, thePerfStat;
			for (i = theFields.length-1; i >= 0; i--) {
				aField = theFields[i];
				if (aField.name === "PerfStatus") {
					theLabel = aField.boxLabel[0];
					if (theLabel == PatientDetails.PerformanceStatus) {
						thePerfStat = aField.inputValue;
						break;
					}
				}
			}
			***/
			var theValues2Set = {
				"startdate"              : PatientDetails.TreatmentStart, 
				"BSA_FormulaWeight"      : PatientDetails.WeightFormula,
				"BSA_Formula"            : PatientDetails.BSAFormula,
				"Goal"                   : PatientDetails.Goal,
				"ConcurRadTherapy"       : PatientDetails.ConcurRadTherapy,
				"ClinicalTrial"          : PatientDetails.ClinicalTrial !== "",
				"TypeOfTrial"            : PatientDetails.ClinicalTrial,
				"amputations"            : PatientDetails.Amputations,
				"Upper Left Arm"         : this.initAskQues2ApplyTemplateFields(theFields, "Upper Left Arm", PatientDetails.Amputations),
				"Lower Left Arm"         : this.initAskQues2ApplyTemplateFields(theFields, "Lower Left Arm", PatientDetails.Amputations),
				"Left Hand and Fingers"  : this.initAskQues2ApplyTemplateFields(theFields, "Left Hand and Fingers", PatientDetails.Amputations),
				"Left Thigh"             : this.initAskQues2ApplyTemplateFields(theFields, "Left Thigh", PatientDetails.Amputations),
				"Lower Left Leg"         : this.initAskQues2ApplyTemplateFields(theFields, "Lower Left Leg", PatientDetails.Amputations),
				"Left Foot"              : this.initAskQues2ApplyTemplateFields(theFields, "Left Foot", PatientDetails.Amputations),
				"Upper Right Arm"        : this.initAskQues2ApplyTemplateFields(theFields, "Upper Right Arm", PatientDetails.Amputations),
				"Lower Right Arm"        : this.initAskQues2ApplyTemplateFields(theFields, "Lower Right Arm", PatientDetails.Amputations),
				"Right Hand and Fingers" : this.initAskQues2ApplyTemplateFields(theFields, "Right Hand and Fingers", PatientDetails.Amputations),
				"Right Thigh"            : this.initAskQues2ApplyTemplateFields(theFields, "Right Thigh", PatientDetails.Amputations),
				"Lower Right Leg"        : this.initAskQues2ApplyTemplateFields(theFields, "Lower Right Leg", PatientDetails.Amputations),
				"Right Foot"             : this.initAskQues2ApplyTemplateFields(theFields, "Right Foot", PatientDetails.Amputations),
				"PerfStatus"             : this.initAskQues2ApplyTemplateFields(theFields, "PerfStatus", PatientDetails.PerformanceStatus),
				"WeightFormula"          : PatientDetails.WeightFormula
			};

			theForm.setValues(theValues2Set);

		}
	},




	applyTemplateToPatient : function(button){
		var startDate = new Date(this.application.Patient.TreatmentStart);
		var dateEnded = new Date(this.application.Patient.TreatmentEnd);
		var today = new Date();

		this.getStore('PerfStatStore').load({ 
			scope : this,
			callback : this.ShowAskQues2ApplyTemplate
		});
	},

	clearCTOS : function(button){
		if(this.getCTOSDataDsp().hidden==false){
			this.getCTOSDataDsp().hide();
			if ("1" === SessionTemplateAuthoring) {
				if ("Provider" === Sessionrole || "All Roles" === Sessionrole) {
					this.getApplyTemplateBtn().hide();
				}
				this.getEditTemplateBtn().hide();
			}
			this.application.selTemplate=null;

			if(!button){
				Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[0].setValue(false);
				Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[1].setValue(false);
			}else if("2" === button){
				Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[0].setValue(false);
				Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[1].setValue(false);
				if(this.getPatientInfo().hidden == false){
					this.getLaboratoryInfo().hide();
					this.getPatientHistory().hide();
					this.getPatientTemplates().hide();
					this.getPatientInfoTable().hide();
					this.getPatientInfo().hide();
					this.getSelectPatient().setValue('');
					this.getSelectPatient().getStore().removeAll();
					this.getSelectPatient().lastQuery = null;
					this.getCTOS().hide();
				}
			}
		}
	},

	TemplateTypeSelected : function(rbtn, newValue, oldValue, eOpts ) {
		wccConsoleLog("What to do has been selected");
		var selCTOSTemplateObj = this.getSelCTOSTemplate();
		this.application.Patient.AppliedTemplateID = null;
		var i;
		var theParentPanel = rbtn.up("panel");
		var What2Do = rbtn.inputValue;

		if( newValue ) {
			if ("0" === What2Do) {
				var current = this.application.Patient.AllTemplatesApplied2Patient.get("current");
				if (current) {
					var theTemplate = current[0].TemplateID;
					this.CTOS_DataLoad(theTemplate, theParentPanel);
				}
				
				this.clearCTOS(What2Do);
				selCTOSTemplateObj.hide();
			}
			else {
				this.clearCTOS(What2Do);

				var theController = this.getController("Common.selCTOSTemplate");
				theController.resetTemplateSrc(selCTOSTemplateObj);
				selCTOSTemplateObj.show();
			}
		}
	},







	// Called to complete the "TemplateApplied" process. Called from the success event of the patientTemplate.save() AJAX call in the "ApplyTemplate()" function above.
	PatientModelLoadSQLPostTemplateApplied : function( PatientGUID, TreatmentID ) {
		// console.log("Loading Patient Info Model from PatientModelLoadSQLPostTemplateApplied function");
		var pModel = this.getModel("PatientInfo");
		var pModelParam = PatientGUID;
		this.application.PatientID = PatientGUID;	// Not yet used... MWB - 5/25/2012
		this.application.TreatmentID = TreatmentID;
		this.application.PAT_ID = TreatmentID;		// PAT_ID and TreatmentID are the same thing, just set differently in different places.



		pModel.load(pModelParam, {
			scope : this,
			success : function( patientInfo, response ) {

				this.application.Patient.Amputations = patientInfo.data.Amputations;
				this.application.Patient.BSA = patientInfo.data.BSA;
				this.application.Patient.BSAFormula = patientInfo.data.BSAFormula;		// This should really be the string of the formula for calculating the BSA
				this.application.Patient.BSA_Method = patientInfo.data.BSAFormula;		// but the Framework returns the name of the method (e.g. DuBois) as the BSAFormula
				this.application.Patient.BSA_Weight = patientInfo.data.BSA_Weight;
				this.application.Patient.TemplateDescription = patientInfo.data.TemplateDescription;
				this.application.Patient.TemplateID = patientInfo.data.TemplateID;
				this.application.Patient.TemplateName = patientInfo.data.TemplateName;
				this.application.Patient.TreatmentEnd = patientInfo.data.TreatmentEnd;
				this.application.Patient.TreatmentStart = patientInfo.data.TreatmentStart;
				this.application.Patient.TreatmentStatus = patientInfo.data.TreatmentStatus;
				this.application.Patient.TreatmentID = this.application.TreatmentID;
				this.application.Patient.WeightFormula = patientInfo.data.WeightFormula;

				this.application.loadMask("Loading Patient Records");
				this.application.DataLoadCount = 5;		// Count of # of modules to load
				this.loadMDWSData();					// module 1
				this.loadTemplates("Templates");					// module 5
				this.loadAllTemplatesApplied2Patient("PatientModelLoadSQLPostTemplateApplied");
				this.loadOrderRecords("Calling Loc = pModel.load - Success");				// module 6

				if (this.application.Patient.TemplateID) {
					this.LoadSpecifiedTemplate(this.application.Patient.TemplateID, "pModel");
				}
				else {
					this.DataLoadCountDecrement("pModelLoad - PASS");
					this.PatientDataLoadComplete("No Current Template Applied to patient to load");
				}

				var theRealID = this.application.Patient.id;
				this.LoadAllData4PatientByMDWSGUID( theRealID );
			},
			failure : function (record, operation) {
				this.application.unMask();
				wccConsoleLog("Patient Info failed to load properly");
			}
		});
	},

	//----------------------------------------------------------------------------------------------------------------
	//
	//	Patient Selection via Admin Dates or entering Patient ID (First Letter of Last Name followed by last 4 of SSN
	//
	//----------------------------------------------------------------------------------------------------------------
	PatientModelLoadSQL : function( query ) {
		var PatientStore = COMS.store.Patients.create();
		this.application.loadMask("One moment please, retrieving Patient Information for " + query + "...");
		PatientStore.load({ scope : this, callback :
			function( records, operation, status) {
				this.application.unMask();
// wccConsoleLog("PatientModelLoadSQL - Load Complete");
				var CPRS_QueryString = Ext.ComponentQuery.query("NewPlanTab PatientSelection [name=\"CPRS_QueryString\"]")[0];
				var query = "";
				var SSN= "";
				var PatientInfo = {}, Patient_ID, Patient_Name;
				Patient_Name = "";
				if (CPRS_QueryString) {
					query = CPRS_QueryString.getValue();
				}

				if ("" !== query) {
					SSN = query.substring(1);
					var i, nRecs = records.length, flag = false, tmpSSN;

					for (i = 0; i < nRecs; i++) {
						tmpSSN = records[i].get("DFN");
						tmpSSN = tmpSSN.substring(2);
						if (SSN === tmpSSN) {
							flag = true;
							Patient_ID = records[i].get("id");
							Patient_Name = records[i].get("name");
							this.application.TempPatient = records[i];
						}
					}

					// Additional code here to perform proper query in MDWS for data
					var thisCtl = this.getController("NewPlan.NewPlanTab");
					var SelectPatientSection = thisCtl.getSelectPatientSection();
					var SelectPatient = thisCtl.getSelectPatient();
					var ConfirmPatient = thisCtl.getConfirmPatient();
					SelectPatientSection.show();
					SelectPatient.hide();
					if (flag) {
						PatientInfo.Patient_Name = Patient_Name;
						PatientInfo.Patient_ID = Patient_ID;
						ConfirmPatient.update( PatientInfo );
						if ("" === Patient_Name) {
							thisCtl.getNoPatient().show();
							ConfirmPatient.hide();
						}
						else {
							thisCtl.getNoPatient().hide();
							ConfirmPatient.show();
						}
						ConfirmPatient.el.select("button").on("click", this.ConfirmPatientClick, this);
					}
					else {
						SelectPatient.show();
					}
				}
			}
		});
	},

	PatientModelLoadMDWS : function(query) {
		// Load Patient Information via /Mymdws/Match/ Service Call
		// console.log("Loading Patient Info MDWS Model from PatientModelLoadMDWS function");
		var pModel = this.getModel("PatientInfoMDWS");
		var pModelParam = query;
		this.application.PatientSSN_ID = query;
		this.application.loadMask("One moment please, retrieving Patient Information for " + query + "...");

		pModel.load(pModelParam, {
			scope : this,
			success : function( patientInfo, response ) {
// wccConsoleLog("PatientModelLoadMDWS - Load Complete");
				wccConsoleLog("Patient Info Loaded - Processing");
				this.application.unMask();

				/* We now have a Match of data including the VPR */
				var theRecords = response.resultSet.records;
				this.application.PossiblePatients = [];
				for (i = 0; i < theRecords.length; i++) {
					var aRecord = theRecords[i];
					var theData = aRecord.getData();
					this.application.PossiblePatients[theData.id] = theData;
				}


				var CPRS_QueryString = Ext.ComponentQuery.query("NewPlanTab PatientSelection [name=\"CPRS_QueryString\"]")[0];
				var query = "";
				var SSN= "";
				var PatientInfo = {}, Patient_ID, Patient_Name, NoPatientFound;
				if (CPRS_QueryString) {
					query = CPRS_QueryString.getValue();
				}

				if ("" !== query) {
					var record = patientInfo.data;
					Patient_ID = record.id;
					NoPatientFound = "";
					Patient_Name = "";
					// Patient_Name = record.name;
					if (record.VPR.data.items) {
						Patient_Name = record.VPR.data.items[0].fullName;
					}
					else {
						NoPatientFound = "No patient by that ID can be found in VistA";
					}
					var data = record;
					this.application.TempPatient = record;

					// Additional code here to perform proper query in MDWS for data
					var thisCtl = this.getController("NewPlan.NewPlanTab");
					var SelectPatientSection = thisCtl.getSelectPatientSection();
					var SelectPatient = thisCtl.getSelectPatient();
					var ConfirmPatient = thisCtl.getConfirmPatient();
					SelectPatientSection.show();

					PatientInfo.Patient_Name = Patient_Name;
					PatientInfo.Patient_ID = Patient_ID;
					ConfirmPatient.update( PatientInfo );

					if ("" === Patient_Name) {
						thisCtl.getNoPatient().show();
						ConfirmPatient.hide();
					}
					else {
						thisCtl.getNoPatient().hide();
						ConfirmPatient.show();
					}

					ConfirmPatient.el.select("button").on("click", this.ConfirmPatientClick, this);
				}
			},
			failure : function (record, operation) {
				this.application.unMask();
				Ext.MessageBox.alert('Error', 'Patient Info failed to load properly.<br />' + operation.error);
				wccConsoleLog("Patient Info failed to load properly");
			}
		});
	},




	// Get here by either clicking on the "Query CPRS for Patient" button or hitting the "Enter" key in the SSN Field.
	PatientStoreQuery : function( ) {
		var thisCtl = this.getController("NewPlan.NewPlanTab");
		thisCtl.getPatientInfo().hide();
		var puWinAddCumDoseCtl = this.getController("Common.puWinAddCumDose");
		puWinAddCumDoseCtl.ClearWarning();


		var CPRS_QueryString = Ext.ComponentQuery.query("NewPlanTab PatientSelection [name=\"CPRS_QueryString\"]")[0];
		var query = "";
		if (CPRS_QueryString) {
			query = CPRS_QueryString.getValue();
		}
		if ("" === query) {
			return;
		}

		Ext.ComponentQuery.query('NewPlanTab PatientSelection [name=\"from_date\"]')[0].setValue("");
		Ext.ComponentQuery.query('NewPlanTab PatientSelection [name=\"to_date\"]')[0].setValue("");

// MWB - 2/12/2014 - UseNewQueryMethod is not used anyplace else... So it's a global intended for future use
		if (UseNewQueryMethod) {
			this.PatientModelLoadMDWS( query );
		}
		else {
			this.PatientModelLoadSQL( query );
		}
	},

	// Event handler for pressing the "Enter" key in the "Enter Patient Identification" field.
	QSEnter : function( fld, e, eOpts ) {
		// alert("QSEnter");
		if (e.ENTER === e.getKey()) {
			this.PatientStoreQuery();
		}
	},


	LoadAllData4PatientByMDWSGUID : function(patientMDWSGUID) {
		var pModel = this.getModel("PatientInfo");
		this.application.loadMask("Loading Patient Records... After selecting template");

		pModel.load(patientMDWSGUID, {
			scope : this,
			success : function( patientInfo, response ) {
				var recs = [];
				recs[0] = { data : patientInfo.data };

				var thisCtl = this.getController("NewPlan.NewPlanTab");
				var NewPlanTab = thisCtl.getNewPlanTab();
				var PatientSelection = thisCtl.getPatientSelectionPanel();
				PatientSelection.collapse();

				this.resetPanels(thisCtl, "", "", "");

				var ConfirmPatient = thisCtl.getConfirmPatient();
				ConfirmPatient.hide();

				this.PatientSelected(null, recs, null);		// Load all data via multiple Ajax calls

				// Attach event handler to the "Update" and "Show" MDWS Data buttons (styled to look like links) in "view\NewPlan\PatientInfo.js"
		//		{ xtype : "container", html : "<button class=\"anchor\" name=\"UpdateMDWSData\">Update</button> Patient Info" },
		//		{ xtype : "container", html : "<button class=\"anchor\" name=\"DisplayMDWSData\">Show</button> Updated Patient Info" },

				var Btns = Ext.ComponentQuery.query("NewPlanTab PatientInfo")[0].el.select("button.anchor");
				Btns.on("click", this.handleShowUpdateMDWSClickEvent, this);
				Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"MDWSStatus\"]")[0].show();
				Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"UpdateMDWSDataContainer\"]")[0].hide();
				Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"DisplayMDWSDataContainer\"]")[0].hide();
			},
			failure : function (record, operation) {
				this.application.unMask();
				wccConsoleLog("Patient Info failed to load properly");
			}
		});
	},

	ConfirmPatientClick : function(evt, btn) {
		var patientMDWSGUID = btn.getAttribute("pid");
		this.LoadAllData4PatientByMDWSGUID( patientMDWSGUID );
	},

	handleShowUpdateMDWSClickEvent : function( evt, btn ) {
		wccConsoleLog("handleShowUpdateMDWSClickEvent - PatientInfoTable!");

		var PatientInfo = this.application.Patient;
		var btnName = btn.getAttribute("name");
		var Update = Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"UpdateMDWSDataContainer\"]")[0];
		var Display = Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"DisplayMDWSDataContainer\"]")[0];
		if ("UpdateMDWSData" == btnName) {
			this.application.DataLoadCount = 1;
			this.loadMDWSData();
		}
		else if ("DisplayMDWSData" == btnName) {
			Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"MDWSStatus\"]")[0].hide();
			Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"UpdateMDWSDataContainer\"]")[0].show();
			Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"DisplayMDWSDataContainer\"]")[0].hide();
		}
	},










	handlePatientSelectionClickEvent : function( evt, theBtn ) {
		// console.log("handlePatientSelectionClickEvent");
		wccConsoleLog("handlePatientSelectionClickEvent - PatientInfoTable!");

		//---------------------------------
		//
		//	This block of code is in place till we can do a reliable query for Patient Information
		//	At that point we will have to create a COMS Service which will query MDWS and return either a single Patient Record
		//	OR a list of Patient Records to be used as the Store for the "SelectPatient" combo box.
		//	If a SINGLE record is returned then no combo box is required, just a single link/button to "Accept" and Use the returned Patient Record.
		//
		//---------------------------------
		// alert( "User clicked - " + theBtn.name );
		if ("SelectPatientAdminRange" === theBtn.name ) {
			// Note: For some reason MS-IE 8 receives this event even though the SelectPatientAdminRange button isn't clicked.

			// alert("Select Patient Admin Range");
			// Additional code here to perform proper query in MDWS for data
			var thisCtl = this.getController("NewPlan.NewPlanTab");
			var SelectPatientSection = thisCtl.getSelectPatientSection();
			var SelectPatient = thisCtl.getSelectPatient();
			var ConfirmPatient = thisCtl.getConfirmPatient();
			// Ext.ComponentQuery.query("NewPlanTab PatientSelection [name=\"CPRS_QueryString\"]")[0].setValue("");
			SelectPatientSection.show();
			ConfirmPatient.hide();
			SelectPatient.show();
			thisCtl.getPatientInfo().hide();
		}
		else if ("QueryCPRS4Patient" === theBtn.name ) {
			// alert("Query CPRS 4 Patient");
			// Load the "Patients" Store.
			// Upon load, find the patient looked for by DFN
			this.PatientStoreQuery();
		}
	},

	loadMDWSData : function() {
		// console.log("Loading MDWS Data - Start/End, Ajax call removed, no longer needed - MWB - 2/23/2015");
		Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"MDWSStatus\"]")[0].hide();
		this.DataLoadCountDecrement("loadMDWSData Pass");
		this.PatientDataLoadComplete("MDWS Mega Call");
	},


//------------------------------------------------------------------------------------------------------------------------------
//
//	Start of data loading section.
//	The 5 "Load" functions here load the various pieces of Patient Data Asynchronously.
//	After each function finishes loading it's particular data set a call is made to the PatientDataLoadComplete() function
//	This function will execute and completion process (e.g. unmask and finish rendering data and managing event handlers)
//
//------------------------------------------------------------------------------------------------------------------------------

	loadAllergyInfo : function() {
		// console.log("Loading Allergy Info - Start/End, Ajax call removed, no longer needed - MWB - 2/23/2015");
		this.DataLoadCountDecrement("loadAllergyInfo PASS");
		this.PatientDataLoadComplete("Allergy Info");
	},


	loadCumulativeMedDosing : function() {
// console.log("Loading Cumulative Med Dosing - Start");
		var liModel = this.getModel("PatientCumulativeDosing");
		var liModelParam = this.application.Patient.id;
		liModel.load(liModelParam, {
			scope : this,
			success : function( patientInfo, response ) {
				// console.log("Loading Cumulative Med Dosing - Finished");
				var rawData = Ext.JSON.decode(response.response.responseText);
				var tmp = "0 Records";
				this.application.Patient.CumulativeDoseTracking = rawData.records;
				this.DataLoadCountDecrement("loadCumulativeMedDosing PASS");
				this.PatientDataLoadComplete("Cumulative Medication Dose Info");
			},
			failure : function (err, response) {
				this.DataLoadCountDecrement("loadCumulativeMedDosing FAIL");
				this.PatientDataLoadComplete("Cumulative Medication Dose Info - FAILED Loading");
			}
		});
	},


	loadLabInfo : function() {
		// console.log("Loading Lab Data - Start/End, Ajax call removed, no longer needed - MWB - 2/23/2015");
		this.DataLoadCountDecrement("loadLabInfo PASS");
		this.PatientDataLoadComplete("Lab Info");
	},




	convertVPR : {
		Allergies : [],
		Vitals : [],
		Labs : [],
		Problems : [],
		RootObj : [],
		vHeight : "",
		vWeight : "",
		vIdx : "",
		aIdx : "",
		lIdx : "",
		pIdx : "",
		theVPRData : {},

		extractDate : function(aDate) {
			return (aDate.substring(5,7) + "/" + aDate.substring(8,10) + "/" + aDate.substring(0,4));
		},



		getObserved : function(aDate) {
			var d1 = aDate.split(" ");
			var d2 = d1[0].split("/");
			var d3 = d2[2] + d2[0] + d2[2];
			var d4 = d1[1].split(":");
			var d5 = d4.join("");
			return d3+d5;
		},

		ConvertAssocArray : function(theData) {
			var key, newData = [];
			for (key in theData) {
				if (theData.hasOwnProperty(key)) {
					newData.push(theData[key]);
				}
			}
			return newData;
		},

		extractAllergies : function(vDataRec) {
			var typeUID;
			if (vDataRec.uid) {
				typeUID = vDataRec.uid.split(":")[2];		// uid = "urn:va:vital:9E5A:100500:7990"
				if ("allergy" === typeUID.toLowerCase()) {
					this.Allergies.push({name: vDataRec.products[0].name, reaction : vDataRec.reactions[0].name });
					return true;
				}
			}
			return false;
		},

		extractLabs : function(rec) {
			var thisLab = { name : "", comment : "", result : "", sample : "", specimen : "", units : ""}, typeUID, nIdx, DateTaken;
			if (rec.uid) {
				typeUID = rec.uid.split(":")[2];		// uid = "urn:va:vital:9E5A:100500:7990"
				if ("lab" === typeUID.toLowerCase()) {
					nIdx = rec.observed.toString();
					DateTaken = this.extractDate(nIdx);
					thisLab.date = DateTaken;

					if (rec.typeName) {
						thisLab.name = rec.typeName;
					}
					if (rec.comment) {
						thisLab.comment = rec.comment;
					}
					if (rec.result) {
						thisLab.result = rec.result;
					}
					if (rec.sample) {
						thisLab.sample = rec.sample;
					}
					if (rec.specimen) {
						thisLab.specimen = rec.specimen;
					}
					if (rec.units) {
						thisLab.units = rec.units;
					}
					this.Labs.push(thisLab);
				}
			}
		},

		extractProblems : function(rec) {
			var thisProblem = {}, DateEntered = "", DateUpdated = "", DateOfOnset = "", Problem = "", serviceConnected = "No", statusName = "", unverified = "";
			if (rec.uid) {
				typeUID = rec.uid.split(":")[2];		// uid = "urn:va:vital:9E5A:100500:7990"
				if ("problem" === typeUID.toLowerCase()) {
					if (rec.entered) {
						DateEntered = this.extractDate(rec.entered);
					}
					if (rec.onset) {
						DateOfOnset = this.extractDate(rec.onset);
					}
					if (rec.updated) {
						DateUpdated = this.extractDate(rec.updated);
					}
					if (rec.problemText) {
						Problem = rec.problemText;
					}
					if (rec.serviceConnected) {
						serviceConnected = "Yes";
					}
					if (rec.statusName) {
						statusName = rec.statusName;
					}
					if (rec.unverified) {
						unverified = rec.unverified;
					}
					thisProblem.DateEntered = DateEntered;
					thisProblem.DateOfOnset = DateOfOnset;
					thisProblem.DateUpdated = DateUpdated;
					thisProblem.Problem = Problem;
					thisProblem.serviceConnected = serviceConnected;
					thisProblem.statusName = statusName;
					thisProblem.unverified = unverified;
					this.Problems.push(thisProblem);
				}
			}
		},

		extractVitals : function(rec) {
			var nIdx, vIdx, DateTaken, data, units;
			if (rec.hasOwnProperty("type")) {
				nIdx = rec.date.split("T")[0];
				DateTaken = this.extractDate(nIdx);
				if (this.Vitals.hasOwnProperty(nIdx)) {
				}
				else {
					this.Vitals[nIdx] = {DateTaken : DateTaken, BSA : "", BSA_Method: "", BSA_Weight : "", WeightFormula : "", PS : "No Change", PSID : "N/C"};
				}

				switch( rec.type ) {
					case "T":
						data = "Temperature";
						units = "Temperature_Units";
						break;
					case "HT":
						data = "Height";
						units = "Height_Units";
						this.Vitals[nIdx][units] = rec.units;
						if (this.application && this.application.Patient) {
							if ("" === this.application.Patient.Height) {
								this.application.Patient.Height = rec.value;
							}
						}
						break;
					case "WT":
						data = "Weight";
						units = "Weight_Units";
						this.Vitals[nIdx][units] = rec.units;
						if (this.application && this.application.Patient) {
							if ("" === this.application.Patient.Weight) {
								this.application.Patient.Weight = rec.value;
							}
						}
						break;

					case "BP":
						data = "BP";
						break;
					case "P":
						data = "Pulse";
						break;
					case "PN":
						data = "Pain";
						break;
					case "R":
						data = "Respiration";
						break;
					default:
						data = rec.type;
						break;
				}
				this.Vitals[nIdx][data] = rec.value;
				return true;
			}
			return false;
		},

		extractRoot : function(rec) {
			if (rec.hasOwnProperty("genderCode")) {
				var rootObj = rec;
				var name = rootObj.fullName;
				var dob = rootObj.dateOfBirth.toString();
				var yr = dob.slice(0, 4);
				var mon = dob.slice(5, 7);
				var day = dob.slice(8, 10);
				dob = mon + "/" + day + "/" + yr;
				var birthDate = new Date(dob);
				if (!rootObj.hasOwnProperty("gender")) {
					// "urn:va:pat-gender:M"
					var vals = rec.genderCode.split(':');
					var gc = vals[vals.length-1];
					rootObj.gender = gc;
				}
				if (!rootObj.hasOwnProperty("age")) {
					age = today.getFullYear() - birthDate.getFullYear();
					m = today.getMonth() - birthDate.getMonth();
					if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
						age--;
					}
				}
				rootObj.dob = dob;
				this.RootObj = rootObj;
				return true;
			}
			return false;
		},

		parseVPR : function (vData) {
			var rec, i, flg, vals, theVPRData, age, name, dob, yr, mon, m, day, birthDate, rootObj, 
				gc = "", 
				today=new Date(),
				len = vData.length;
			this.Allergies = [];
			this.Vitals = [];
			this.Labs = [];
			this.Problems = [];
			this.RootObj = [];

			for (i = 0; i < len; i++) {
				rec = vData[i];
				flg = this.extractRoot(rec);
				if (!flg) {
					flg = this.extractVitals(rec);
					if (!flg) {
						flg = this.extractAllergies(rec);
						if (!flg) {
							theLabs = this.extractLabs(rec);
							if (!flg) {
								flg = this.extractProblems(rec);
							}
						}
					}
				}
			}
			var theVitals = this.ConvertAssocArray(this.Vitals);
			theVPRData = { "Allergies" : this.Allergies, "Vitals" : theVitals, "Labs" : this.Labs, "Problems" : this.Problems, "rootObj" : this.RootObj };
			return theVPRData;
		}
	},





	Convert2AssocArray : function(theData) {
		var i, k, rec, key, key1, key2, recLen = theData.length, assocRec, assocArray = [];
		for (i = 0; i < recLen; i++) {
			key = "";
			key1 = "";
			key2 = "";
			rec = theData[i];
			k = rec.DateTaken;
			try {
				if (k) {
					key = k.split(" ");
					
					key1 = key[0].split("/");
					key1 = key1[2] + key1[0] + key1[1];
					if (key.length > 1) {
						key2 = key[1].split(":");
						key2 = key2[0] + key2[1] + key2[2];
					}
					key = key1 + key2;
				}
			}
			catch (e) {
				wccConsoleLog("NewPlanTab - Convert2AssocArray - Error");
			}
			if ("" !== key ) {
				if (assocArray.hasOwnProperty(key)) {
					assocRec = assocArray[key];
					for (k in assocRec) {
						if (assocRec.hasOwnProperty(k) && rec.hasOwnProperty(k)) {
							if (!assocRec[k] || "" === assocRec[k]) {
								assocRec[k] = rec[k];
							}
						}
						else if (rec.hasOwnProperty(k)) {
							assocRec[k] = rec[k];
						}
					}
				}
				else {
					assocArray[key] = rec;
				}
			}
		}
		return assocArray;
	},

	clearMostRecent : function() {
		var j, vitals = this.application.Patient.Vitals, vLen = this.application.Patient.Vitals.length;
		for (j = 0; j < vLen; j++) {
			vitals[j].MostRecent = false;
		}
	},

	MergeWithVPR_Array : function(SQLRecords) {
		var i, key, key1, sRec, vRec, VPR_vitals;
		VPR_vitals = this.Convert2AssocArray(this.application.Patient.ParsedVPR.Vitals);
		if (SQLRecords.length > 0) {
			SQLRecords = this.Convert2AssocArray(SQLRecords);
			for (key in VPR_vitals) {
				if (VPR_vitals.hasOwnProperty(key)) {
					if (SQLRecords.hasOwnProperty(key)) {
						vRec = VPR_vitals[key];
						sRec = SQLRecords[key];
						delete SQLRecords[key];
						for (key1 in sRec) {
							if (sRec.hasOwnProperty(key1)) {
								if (vRec.hasOwnProperty(key1)) {
									if (vRec[key1] == "") {
										vRec[key1] = sRec[key1];
									}
								}
								else {
									vRec[key1] = sRec[key1];
								}
							}
						}
					}
				}
				else if (SQLRecords.hasOwnProperty(key)) {
					VPR_vitals[key] = SQLRecords[key];
					delete SQLRecords[key];
				}
				else {
					wccConsoleLog("NewPlanTab - MergeWithVPR_Array - SQLRecords.hasOwnProperty = FALSE");
				}
			}

			var tmpGender = this.application.Patient.Gender;

			for (key in SQLRecords) {
				if (SQLRecords.hasOwnProperty(key)) {
					if (VPR_vitals.hasOwnProperty(key)) {
						wccConsoleLog("NewPlanTab - MergeWithVPR_Array - VPR_vitals.hasOwnProperty = TRUE");
					}
					else {
						SQLRecords[key].Observed = this.convertVPR.getObserved(SQLRecords[key].DateTaken);
						VPR_vitals[key] = SQLRecords[key];
					}
				}
			}

			var retVitals = [];
			for (key in VPR_vitals) {
				if (VPR_vitals.hasOwnProperty(key)) {
					VPR_vitals[key].Gender = tmpGender;
					retVitals.push(VPR_vitals[key]);
				}
			}
			retVitals.sort(function (a, b) {
				aD = new Date(a.DateTaken);
				bD = new Date(b.DateTaken);
				return aD>bD ? -1 : aD<bD ? 1 : 0;
			});
			return retVitals;
		}
	},


/* Note: If there are no current vitals in SQL we still need to process any vitals in the VistA VPR */
	loadVitals : function(RetCode) {
		var pVitalsModel = this.getModel("Vitals"), pVitalsModelParam = this.application.Patient.id;
		pVitalsModel.load(pVitalsModelParam, {
			scope : this,
			success : function( patientInfo, response ) {
				if (!RetCode) {
					RetCode = "Update Vitals";
				}
				var rawData = Ext.JSON.decode(response.response.responseText);
				if (rawData && rawData.records) {
					var mergedVitals = this.MergeWithVPR_Array(rawData.records);
					this.application.Patient.Vitals = mergedVitals;
				}
				this.DataLoadCountDecrement("loadVitals PASS");
				this.PatientDataLoadComplete(RetCode);
			},
			failure : function (err, response) {
				if (!RetCode) {
					RetCode = "Update Vitals";
				}
				this.DataLoadCountDecrement("loadVitals FAIL");
				this.PatientDataLoadComplete(RetCode + " - FAILED Loading");
			}
		});
	},


	reloadVPR : function() {
				Ext.Ajax.request({
					scope : this,
					url: Ext.URLs.LoadVPR + "/" + this.application.Patient.EoTS_ID,
					success: function( response, opts ){
						this.application.unMask();
						var text = response.responseText;
						var resp = Ext.JSON.decode( text );
						if (resp.success) {
							if (resp.records[0]) {
								this.application.Patient.EoTS = resp.records[0];
								Ext.widget("ViewEndTreatmentSummary");
							}
							else {
								alert("No records available for this EoTS");
							}
						}
						else {
							alert("load EoTS - Error");
						}
					},
					failure : function( response, opts ) {
						this.application.unMask();
						alert("EoTS Data Load Failed...");
					}
				});
	},

	/**
	 *
	 * Gets the current and historical templates applied to the patient from the "Patient_Assigned_Templates", "Master_Template", "EoTS" and "Lookup" tables
	 *
	 **/
	loadAllTemplatesApplied2Patient : function() {
// console.log("Loading All Templates Applied 2 Patient - Start");
		// console.log("loadAllTemplatesApplied2Patient Entry Point");
		var phModel = this.getModel("AllTemplatesApplied2Patient");
		var phModelParam = this.application.Patient.id;
		phModel.load(phModelParam, {
			scope : this,
			success : function( AllTemplatesApplied2Patient, response ) {
// console.log("Loading All Templates Applied 2 Patient - Finished");
				this.application.Patient.AllTemplatesApplied2Patient = AllTemplatesApplied2Patient;
				this.DataLoadCountDecrement("loadAllTemplatesApplied2Patient Part 1 - PASS");
				this.PatientDataLoadComplete("All Templates Applied");
				var current = AllTemplatesApplied2Patient.get("current");
				if (current && current[0]) {
					current = current[0];
					if (current.TemplateID) {
						this.LoadSpecifiedTemplate(current.TemplateID, "loadAllTemplatesApplied2Patient");
					}
					else {
						this.DataLoadCountDecrement("loadAllTemplatesApplied2Patient Part 2 - PASS");
						this.PatientDataLoadComplete("No Current Template Applied to patient to load");
					}
				}
			},
			failure : function (err, response) {
				this.DataLoadCountDecrement("loadAllTemplatesApplied2Patient Part 1 - FAIL");
				this.PatientDataLoadComplete("Templates - Failed to load - " + response.error);
			}
		});
	},




	loadTemplates : function() {
// console.log("Loading Templates - Start");
		var phModel = this.getModel("PatientTemplates");
		var phModelParam = this.application.Patient.id;
		phModel.load(phModelParam, {
			scope : this,
			success : function( patientInfo, response ) {
// console.log("Loading Templates - Finished");
// wccConsoleLog("PatientTemplates Model - Load Complete");
				var rawData = Ext.JSON.decode(response.response.responseText);
				// First take all the data received and put it into a local JSON object for the TPL to process
				wccConsoleLog("Patient Templates Loaded - Processing");

				this.application.Patient.TemplateHistory = rawData.records;


					// MWB - 5/16/2012 - Used to make sure all data sets are loaded before continuing
				this.DataLoadCountDecrement("loadTemplates PASS");

				this.PatientDataLoadComplete("Templates");


			},
			failure : function (err, response) {
// wccConsoleLog("PatientTemplates Model - Load FAILED - " + response.error);
				wccConsoleLog("PatientHistory store failed to load properly - " + response.error);
				this.DataLoadCountDecrement("loadTemplates FAIL");

				this.PatientDataLoadComplete("Templates - Failed to load - " + response.error);
			}
		});
//
//	List of Templates for patient
//
	},


	getFNRiskInfo : function(FNRisk) {
		var FNLevelInfo = FNRisk < 10 ? "Low Risk" : FNRisk <= 20 ? "Intermediate Risk" : "High Risk";
		var URL = Ext.URLs.MedRisks + "/Type/" + (FNRisk < 10 ? "Neutropenia-1" : FNRisk <= 20 ? "Neutropenia-2" : "Neutropenia-3");
		Ext.Ajax.request({
			scope : this,
			url: URL,
			success: function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				/* For some reason the text is double encoded (e.g. &lt; == &amp;lt;) */
				resp = Ext.util.Format.htmlDecode(resp);
				resp = Ext.util.Format.htmlDecode(resp);
				if (this.application.Patient) {
					if (this.application.Patient.OEMRecords) {
						this.application.Patient.OEMRecords.NeutropeniaRecommendation = resp;
						this.application.Patient.OEMRecords.FNRiskDetails = resp;
					}
				}

				this.application.unMask();
			},
			failure : function( response, opts ) {
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				this.application.unMask();
				Ext.MessageBox.alert("Retrieve Error", "Error attempting to retrieve information on Neutropenia Level - " + resp );
			}
		});
	},

	getEmoLevelInfo : function(ELevel) {
		var eLevel1 = ELevel.split(" ")[0];
		var x = "";
		switch (eLevel1) {
			case "Minimal" :
			case "Low":
				x = "Emesis-1";
				break;

			case "Low" :
			case "Medium":
				x = "Emesis-2";
				break;

			case "Moderate" :
			case "Moderate":
				x = "Emesis-3";
				break;

			case "High" :
			case "High":
				x = "Emesis-4";
				break;
			case "Very":
				x = "Emesis-5";
				break;
		}

		var URL = Ext.URLs.MedRisks + "/Type/" + x;
		Ext.Ajax.request({
			scope : this,
			url: URL,
			success: function( response, opts ){
				// console.log("getEmoLevelInfo from Site Config - Complete");
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				resp = Ext.util.Format.htmlDecode(resp);
				resp = Ext.util.Format.htmlDecode(resp);
				this.application.unMask();
				if (this.application.Patient) {
					if (this.application.Patient.OEMRecords) {
						this.application.Patient.OEMRecords.ELevelRecommendation = resp;
					}
				}
			},
			failure : function( response, opts ) {
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				this.application.unMask();
				Ext.MessageBox.alert("Retrieve Error", "Error attempting to retrieve information on Emetogenic Level - " + resp );
			}
		});
	},

	manageOrderRecordsAfterLoading : function(OEMRecords) {

			// If BSA_Dose is empty then calculate it for each record and save that record back.
			// BUT we need to calculate the BSA value and BSA_Weight before we load the records...
			// Then walk through theData.OEMRecords;
			var a, b, c, aRec, bRec, bRecUnits, calcDose, updateRecord = false, tmpDose, Dose, Units,
				theRecords, oRecLen,
				tRecords, oTherapyLen;

//			if (this.application.Patient && this.application.Patient.OEMRecords && this.application.Patient.OEMRecords.OEMRecords) {
//				theRecords = this.application.Patient.OEMRecords.OEMRecords;
				theRecords = OEMRecords;
				oRecLen = theRecords.length;
				for (a = 0; a < oRecLen; a++) {
					aRec = theRecords[a];
					if (aRec.Therapy) {
						oTherapyLen = aRec.Therapy.length;
						for (b = 0; b < oTherapyLen; b++) {
							bRec = aRec.Therapy[b];
							bRecUnits = bRec.DoseUnits.toUpperCase();
							calcDose = false;

							if (bRecUnits.search("M2") > 0 || bRecUnits.search("KG") > 0 || bRecUnits.search("AUC") >= 0 ) {
								calcDose = true;
							}

							if (calcDose) {
								if ("" === bRec.BSA_Dose || "NaN mg" === bRec.BSA_Dose) {
									if (bRecUnits.search("M2") > 0) {
										Dose = bRec.Dose * Patient.BSA;
										Dose = Ext.GeneralRounding2Digits(Dose);
										Units = bRec.DoseUnits.substr(0, bRecUnits.search("/"));
										bRec.BSA_Dose = Dose + " " + Units;
										updateRecord = true;
									}
									else if	(bRecUnits.search("KG") > 0) {
										Dose = bRec.Dose * Patient.BSA_Weight;
										Dose = Ext.GeneralRounding2Digits(Dose);
										Units = bRec.DoseUnits.substr(0, bRecUnits.search("/"));
										bRec.BSA_Dose = Dose + " " + Units;
										updateRecord = true;
									}
									else if (bRecUnits.search("AUC") >= 0) {
										Dose = Ext.CalcAUCDose(Patient, bRec.Dose);
										bRec.BSA_Dose = Dose;
										updateRecord = true;
									}
								}
								else {
									// MWB - 7/12/2012 - Fix to update Dosage Calculations every time patient info is loaded.
									// DO NOT IMPLEMENT until further notice...
									// Implement as per SIC's e-mail - 7/12/2012 08:56 AM

									if (bRecUnits.search("M2") > 0) {
										Dose = bRec.Dose * Patient.BSA;
										Dose = Ext.GeneralRounding2Digits(Dose);
										Units = bRec.DoseUnits.substr(0, bRecUnits.search("/"));
										tmpDose = Dose + " " + Units;
										if (tmpDose != bRec.BSA_Dose) {
											bRec.BSA_Dose = tmpDose;
											updateRecord = true;
										}
									}
									else if	(bRecUnits.search("KG") > 0) {
										Dose = bRec.Dose * Patient.BSA_Weight;
										Dose = Ext.GeneralRounding2Digits(Dose);
										Units = bRec.DoseUnits.substr(0, bRecUnits.search("/"));
										tmpDose = Dose + " " + Units;
										if (tmpDose != bRec.BSA_Dose) {
											bRec.BSA_Dose = tmpDose;
											updateRecord = true;
										}
									}
									else if (bRecUnits.search("AUC") >= 0) {
										Dose = Ext.CalcAUCDose(Patient, bRec.Dose);
										tmpDose = Dose;
										if (tmpDose != bRec.BSA_Dose) {
											bRec.BSA_Dose = tmpDose;
											updateRecord = true;
										}
									}

								}
							}
						}
					}
					else {
						oTherapyLen = aRec.Therapy.length;
						for (b = 0; b < oTherapyLen; b++) {
							bRec = aRec.Therapy[b];
							this.UpdateOEMRecords(aRec, bRec);
						}
					}
				}
//			}
	},

	loadOrderRecords : function( CallingLoc ) {
// console.log("Loading Orders - Start");
		var PatientID = this.application.Patient.id;
		var OEMRecordsModel = this.getModel("OEMRecords");
		// console.log("loadOrderRecords - called from multiple locations - " + CallingLoc);
/*************** RESTORE CODE - MWB 5/12/2015 */
		OEMRecordsModel.load( PatientID, {
			scope: this,
			success : function (TemplateData, response) {
				try {
					wccConsoleLog("Template Data Loaded - Processing");
					var theData = TemplateData.data;
					theData.PatientName = this.application.Patient.name;
					theData.RegimenName = this.application.Patient.TemplateName;
					theData.RegimenDescription = this.application.Patient.TemplateDescription;

					this.application.Patient.OEMRecords = theData;
					this.getEmoLevelInfo(theData.ELevelName);
					this.getFNRiskInfo(theData.FNRisk);
					this.manageOrderRecordsAfterLoading(theData);
					var thisCtl = this.getController("NewPlan.CTOS.NursingDocs.Chemotherapy");
					thisCtl.ChemoBioSectionHandler(true);
				}
				catch (err) {
					var errMsg1 = "ERROR in parsing data for Template " + this.application.Patient.TemplateName;
					alert("ERROR in Loading Order Entry Management Record Data for Template : " + this.application.Patient.TemplateName);
					wccConsoleLog(errMsg1);
					wccConsoleLog(err.message + " @ Line# " + err.lineNo);
				}
			},
			failure : function (err) {
				wccConsoleLog("Template Data failed to load properly");
			}
		});
/******************************/
	},

	//-------------------------------------------------------------------------
	//
	//	Patient Selected - Phase 1 for this panel
	//	Causes Patient Info
	//	(including Patient History, Laboratory Information and CTOS Tabset) to be displayed
	//
	//	MWB 10 Feb 2012 - Made several minor changes for code cleanup and
	//		sorted the PatientMeasurements for disply of most recent measurements first
	//
	//	MWB 22 Mar 2012 - This is the only point where the Select Event for the Combo Box is trapped.
	//		The end of this event handler fires off a "PatientSelected" event which is intercepted throughout the application
	//		When we change from a Combo Box to an Edit Field to enter Patient ID this should be the only place which needs to get changed.
	//
	PatientSelected : function(combo, recs, eOpts) {
		wccConsoleLog("NewPlanTab - Patient Selected has changed or been refreshed");
		if(null === recs){		// MWB 10 Feb 2012 - If the recs come back as null then something's wrong, exit the function
			return;
		}

		// The recs data comes from either selecting an entry in a combo box (SelectPatient), or by virtue of a query
		// (via either the PatientModelLoadMDWS() or PatientModelLoadSQL()) into the recs array.
		var piData;
		if (recs[0].data) {
			piData = recs[0].data;
		}
		else {
			piData = recs[0];
		}


		this.application.Patient = piData;
		var pVPR = this.convertVPR.parseVPR(this.application.TempPatient.VPR.data.items);
		this.application.Patient.ParsedVPR = pVPR;
		this.application.Patient.Allergies = pVPR.Allergies;
		this.application.Patient.Vitals	= pVPR.Vitals;
		this.application.Patient.name	  = pVPR.rootObj.fullName;
		this.application.Patient.Gender	= pVPR.rootObj.gender;
		this.application.Patient.Age	   = pVPR.rootObj.age;
		this.application.Patient.DOB	   = pVPR.rootObj.dob;

		// Get a handle to the frameset itself
		var thisCtl = this.getController("NewPlan.NewPlanTab");
		var fs = thisCtl.getPatientInfo();

		// Update the legend (via the setTitle method) of the Frameset and expand it
		fs.setTitle("<h2>Patient Information for - " + this.application.Patient.name + "</h2>");
		fs.show();
		fs.expand();

		// Display the selected patient's info in the table via it's template
		Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"UpdateMDWSDataContainer\"]")[0].show();
		Ext.ComponentQuery.query("NewPlanTab PatientInfo container[name=\"DisplayMDWSDataContainer\"]")[0].hide();

		var theMedRemindersPanel = this.getPatientInfoMedReminders();
		var theBtns = Ext.ComponentQuery.query("NewPlanTab PatientInfo MedRemindersPanel button");
		for (i = 0; i < theBtns.length; i++) {
			theBtns[i].hide();
		}
		this.getPatientInfoMedRemindersTitle().setReadOnly(true);
		this.getPatientInfoMedRemindersDescription().setReadOnly(true);
		this.getPatientInfoMedRemindersWhenCycle().setReadOnly(true);
		this.getPatientInfoMedRemindersWhenPeriod().setReadOnly(true);
		var theTemplateID = this.application.Patient.TemplateID;
		this.getAnyMedReminders4Template(theTemplateID);




			// MWB 02 Feb 2012 - Clear out the CTOS Tab when changing the patient
		this.updatePITable("");
		this.getPatientInfoTable().collapse();

		var piTableInfo = thisCtl.getPatientInfoTableInformation();
		piTableInfo.update("");

		var btn;
		if ("1" === SessionTemplateAuthoring) {
			var CTOSData = thisCtl.getCTOSDataDsp();
			CTOSData.update("");
			CTOSData.hide();
			btn = this.getEditTemplateBtn();
			if (btn) {
				btn.hide();
			}
		}
		if ("Provider" === Sessionrole || "All Roles" === Sessionrole) {
			btn = this.getApplyTemplateBtn();
			if (btn) {
				btn.hide();
			}
		}

		this.application.PatientSelectedRecs = recs;
		this.application.PatientSelectedOpts = eOpts;

		// this.MaskPITable("Loading Patient Information");
		this.application.loadMask("Loading Patient Records... For selected patient");
		this.application.DataLoadCount = 10;		// Count of # of modules to load
		/* Modules to load - Update this count when a new module is added
		 *	MDWS Mega Call Loaded - loadMDWSData
		 *	Lab Info Loaded - loadLabInfo
		 *	Allergy Info Loaded - loadAllergyInfo
		 *	Vitals Loaded - loadVitals
		 *	Templates Loaded - loadTemplates
		 *	All Templates Applied Loaded - loadAllTemplatesApplied2Patient
		 *	OEM Records Loaded - loadOrderRecords
		 *	Current Applied Template Loaded - LoadSpecifiedTemplate
		 *	Current Applied Template Loaded --- Yes this module is called twice for some reason, need to find out why.
		 */

		this.Modules2Load.push({func : this.loadAllergyInfo, name : "loadAllergyInfo"});
		this.Modules2Load.push({func : this.loadLabInfo, name : "loadLabInfo"});
		this.Modules2Load.push({func : this.loadMDWSData, name : "LoadMDWSData"});

		this.Modules2Load.push({func : this.loadCumulativeMedDosing, name : "loadCumulativeMedDosing"});

		this.Modules2Load.push({func : this.loadAllTemplatesApplied2Patient, name : "loadAllTemplatesApplied2Patient - PatientSelected"});
		this.Modules2Load.push({func : this.loadTemplates, name : "loadTemplates - Templates"});
		this.Modules2Load.push({func : this.loadVitals, name : "loadVitals - Vitals"});

		var puWinSelCancerCtl = this.getController("Common.puWinSelCancer");
		puWinSelCancerCtl.getDiseaseHistory(this.application.Patient);

		if (this.application.Patient.TemplateID) {
			this.LoadSpecifiedTemplate(this.application.Patient.TemplateID, "PatientSelected");
		}
		else {
			this.DataLoadCountDecrement("PatientSelected No Current Template Applied decrement of DataLoadCount");
			this.DataLoadCountDecrement("PatientSelected No Current Template Applied Second decrement of DataLoadCount");
			this.PatientDataLoadComplete("No Current Template Applied to patient to load");
		}
	},
	//
	//
	//	END Patient Selected
	//
	//-------------------------------------------------------------------------




	UpdateOEMRecords : function(aRec, bRec) {
		// console.log("UpdateOEMRecords");
		try {
			var oemEditRec = {
				"TemplateID" : this.application.Patient.OEMRecords.id,
				"OEMRecordID" : aRec.id,
				"Order_ID" : bRec.Order_ID,
				"TherapyID" : bRec.id,
				"TherapyType" : "Therapy",		// Because we're only looking at the aRec.Therapy array (first if() of the initial for(a = 0; a < oRecLen; a++) loop above
				"Instructions" : bRec.Instructions,
				"AdminTime" : bRec.AdminTime,
				"MedID" : bRec.MedID,
				"Med" : bRec.Med,
				"Reason" : (bRec.Reason || ""),		// This variable may not be set initially
				"Dose" : bRec.Dose,
				"BSA_Dose" : bRec.BSA_Dose,
				"Units" : bRec.DoseUnits,
				"InfusionMethod" : bRec.AdminMethod,
				"FluidType" : bRec.FluidType,
				"FluidVol" : bRec.FluidVol,
				"FlowRate" : bRec.FlowRate,
				"InfusionTime" : bRec.InfusionTime,
					// These variables aren't needed for a Therapy record as there's no "optional" dosing allowed for a "Therapy", only for Pre/Post.
				"Dose2" : "",
				"BSA_Dose2" : "",
				"Units2" : "",
				"InfusionMethod2" : "",
				"FluidType2" : "",
				"FluidVol2" : "",
				"FlowRate2" : "",
				"InfusionTime2" : ""
			};

			var oemRec = Ext.create(Ext.COMSModels.Edit_OEMRecord, oemEditRec);		// Create an instance of this model with the data specified
			oemRec.save();
		}
		catch (ee) {
			var ErrorObj = ee;
			var errMsg = "";
			var o;
			for (o in ee) {
				if (ee.hasOwnProperty(o)) {
					errMsg += o + "\n";
				}
			}
			alert("Error - Saving updated OEM Record in NewPlan Controller - " + ee.message + "\n" + errMsg );
		}
	},

/*********************/
	reAddHandlers : function() {
		// console.log("Re-Assigning event handlers in 30 seconds");
		// Ext.Function.defer( this.AssignBtnHandlers, 30000, this );
	},
/**********************/

	buildTemplateInfo : function(thisCtl, Patient, comeFrom) {
		var TemplateInfo, 
			patientTemplates = thisCtl.getPatientTemplates(),
			currentTemplates = this.application.Patient.CurrentTemplatesApplied2Patient,
			historicalTemplates = this.application.Patient.HistoricalTemplatesApplied2Patient,
			numRecords = 0;
		
		if (currentTemplates) {
			numRecords += currentTemplates.length;
		}
		if (historicalTemplates) {
			numRecords += historicalTemplates.length;
		}

		TemplateInfo = {};
		TemplateInfo.Historical = this.application.Patient.HistoricalTemplatesApplied2Patient;
		TemplateInfo.Current = this.application.Patient.CurrentTemplatesApplied2Patient;

		// Render # of templates for initial display of the panel - MWB - 11/11/2013
		patientTemplates.update( TemplateInfo );

		var strRecs = "No Records Available";
		if (1 === numRecords ) {
			strRecs = numRecords + " Record";
		}
		else if (numRecords > 1) {
			strRecs = numRecords + " Records";
		}
		this.resetTRSPanel(thisCtl, strRecs);
		return patientTemplates;
	},

	DataLoadCountDecrement : function(module) {
		this.application.DataLoadCount--;
		wccConsoleLog("DataLoadCountDecrement - (" + this.application.DataLoadCount + ") " + module);
	},


	fieldContainerWalk : function(item, y, z) {
		if (this.application.Patient.AllTemplatesApplied2Patient && "0" == item.inputValue) {
			var current = this.application.Patient.AllTemplatesApplied2Patient.get("current");
			var label;
			if (current) {
				label = "Select <span class=\"em\">\"" + current[0].TemplateDescription + "\"</span> template (as currently appled to patient)";
			}
			else {
				label = "No Template currently applied to this patient";
			}
			item.el.down('.x-form-cb-label').update(label);
		}
	},


	getObjLenMsg : function (Obj) {
		var tmp = "No Records Available", v, key, len = 0;
		if (Obj) {
			v = Obj;
			for (key in v) {
				if (v.hasOwnProperty(key)) {
					len++;
				}
			}
		if (len > 0) {
			tmp = len + " Record";
			tmp += (1 === len) ? "" : "s";
			}
		}
		return tmp;
	},

	updateKnownProblems : function() {
		var buf =  "Existing Conditions ";
		var tmp = "No Records Available";
		var KnownProblemsPanel = this.getKnownProblems();
		var KnownProblemsData = this.application.Patient.ParsedVPR.Problems;

		if (KnownProblemsData && KnownProblemsData.length > 0) {
			tmp = KnownProblemsData.length;
			if (tmp > 1) {
				tmp = tmp + " Records";
			}
			else {
				tmp = tmp + " Record";
			}
		}
		buf += "<span class='LabInfoTitleInfo' style='margin-left: 3em; font-size: smaller;'>(" + tmp + ")</span>";
		KnownProblemsPanel.setTitle(buf);
		KnownProblemsPanel.getStore().loadData(KnownProblemsData);
	},


	updateLabInfo : function() {
		var LaboratoryInfoPanel = this.getLaboratoryInfo();
		var LabsData = this.application.Patient.ParsedVPR.Labs;
		tmp = this.getObjLenMsg(LabsData);
		this.resetLabInfoPanelPanelTitleBar(this, tmp);
		LaboratoryInfoPanel.getStore().loadData(LabsData);
	},

	PatientDataLoadComplete : function(Loaded) {
		wccConsoleLog("PatientDataLoadComplete - " + Loaded);
		var DataLoadCount = this.application.DataLoadCount;
		var thisCtl = this.getController("NewPlan.NewPlanTab");
		var Patient = this.application.Patient;
		var piTableInfo, patientTemplates, dspVSHTemplateData, VSHTemplateDataBtns;
		var KnownProblems, CumDoseCtl;

		if ("All Templates Applied" === Loaded) {
			var historical = this.application.Patient.AllTemplatesApplied2Patient.get("historical"),
				current = this.application.Patient.AllTemplatesApplied2Patient.get("current");
			this.application.Patient.CurrentTemplatesApplied2Patient = current;
			this.application.Patient.HistoricalTemplatesApplied2Patient = historical;
			if (current && current[0]) {
				current = current[0];
				if (!this.application.Patient.AppliedTemplate) {
					this.application.Patient.AppliedTemplate = {};
					}
				this.application.Patient.AppliedTemplate.id = current.TemplateID; 
				this.application.Patient.AppliedTemplate.Description = current.TemplateDescription;
				var scratch = this.getWhat2DoBtns();
				scratch.show();
				scratch.items.each(this.fieldContainerWalk,this);

				this.application.Patient.AppliedTemplate.Name = current.TemplateName;
				this.application.Patient.AppliedTemplateID = current.TemplateID;
				this.application.Patient.TemplateDescription = current.TemplateDescription;
				this.application.Patient.TemplateName = current.TemplateName;
				this.application.Patient.TemplateID = current.TemplateID;
				this.application.Patient.TreatmentStart = current.DateStarted;
				this.application.Patient.TreatmentEnd = current.DateEnded;
			}
			patientTemplates = this.buildTemplateInfo(thisCtl, Patient, "PatientDataLoadComplete Update Templates Loaded");
			COMS.Patient = this.application.Patient;
			COMS.Application = this.application;
		}

		if ("No Current Template Applied to patient to load" === Loaded) {
				var selCTOSTemplateObj = this.getSelCTOSTemplate();
				var theController = this.getController("Common.selCTOSTemplate");
				theController.resetTemplateSrc(selCTOSTemplateObj);
				selCTOSTemplateObj.show();
		}

		if ("Update BSA" === Loaded) {
			piTableInfo = thisCtl.getPatientInfoTableInformation();
			piTableInfo.update(Patient);
			CumDoseCtl = this.getController("Common.puWinAddCumDose");
			CumDoseCtl.UpdateCumDoseInfo( );
			Ext.Function.defer( this.AssignBtnHandlers, 2000, this );
		}

		if ("Update Vitals" === Loaded) {
			var ND_VitalSignsHistory = Ext.ComponentQuery.query("NursingDocs_GenInfo fieldset[title=\"Vital Signs - Historical\"] VitalSignsHistory")[0];
			if (ND_VitalSignsHistory) {
				globalAppPatientScope = this;
				ND_VitalSignsHistory.update(Patient);
			}

			PatientHistoryVitalStats = thisCtl.getVitalSigns();
			PatientHistoryVitalStats.update(Patient);
			KnownProblems = this.getKnownProblems();
			KnownProblems.update(this.application.Patient.ParsedVPR.Problems);

			tmp = this.getObjLenMsg(this.application.Patient.Vitals);
			this.resetVitalsPanel(thisCtl, tmp);

			dspVSHTemplateData = this.getVitalSigns();
			VSHTemplateDataBtns = dspVSHTemplateData.el.select("button.dspVSHDoseCalcs");
			VSHTemplateDataBtns.on("click", this.HandleVSHCalcDoseButtons, this);

			dspVSHTemplateData = this.getNDGI_VitalSigns();
			if (dspVSHTemplateData && dspVSHTemplateData.rendered) {
				VSHTemplateDataBtns = dspVSHTemplateData.el.select("button.dspVSHDoseCalcs");
				VSHTemplateDataBtns.on("click", this.HandleVSHCalcDoseButtons, this);
			}

			COMS.Patient = this.application.Patient;
			COMS.Application = this.application;
		}


		var Modules2Load = this.Modules2Load;
		if (Modules2Load.length > 0) {
			var Module = Modules2Load.pop();
			var func2Call = Ext.bind(Module.func, this);
			// console.log("Running " + Module.name);
			func2Call();
		}
		else {
			DataLoadCount = 0;
		}


		if (DataLoadCount <= 0) {		// All remote data for this patient has been loaded
			var len, tmp;
			var PatientHistoryVitalStats;

			if (Ext.Date.isEqual(new Date(Patient.TreatmentStart), new Date(new Date().toDateString()))) {
				var PostStatus = " - Rest Day";
				if (Patient.TreatmentStatus.search("Admin Day") >= 0) {
					PostStatus = " - Admin Day";
				}
				Patient.TreatmentStatus = "Template Applied" + PostStatus;
			}

			this.application.unMask();
			this.getCTOS().show();

			thisCtl.getPatientInfo().expand();

//			this.updatePITable(Patient);
			this.getPatientInfoTable().show();

			piTableInfo = thisCtl.getPatientInfoTableInformation();
			piTableInfo.update(Patient);		//--//
			piTableInfo.show();

			CumDoseCtl = this.getController("Common.puWinAddCumDose");
			CumDoseCtl.UpdateCumDoseInfo( );

			this.updateKnownProblems();
			this.updateLabInfo();

			PatientHistoryVitalStats = thisCtl.getVitalSigns();
			PatientHistoryVitalStats.update(Patient);
			tmp = this.getObjLenMsg(this.application.Patient.Vitals);
			this.resetVitalsPanel(thisCtl, tmp);

			dspVSHTemplateData = this.getVitalSigns();
			VSHTemplateDataBtns = dspVSHTemplateData.el.select("button.dspVSHDoseCalcs");
			VSHTemplateDataBtns.on("click", this.HandleVSHCalcDoseButtons, this);

			dspVSHTemplateData = this.getNDGI_VitalSigns();
			if (dspVSHTemplateData && dspVSHTemplateData.rendered) {		// Make sure the Vital Signs in the ND/GenInfo tab are rendered before trying to attach.
				VSHTemplateDataBtns = dspVSHTemplateData.el.select("button.dspVSHDoseCalcs");
				VSHTemplateDataBtns.on("click", this.HandleVSHCalcDoseButtons, this);
			}

			patientTemplates = this.buildTemplateInfo(thisCtl, Patient, "PatientDataLoadComplete AND DataLoadCount < 0");
			patientTemplates.show();

			var thePatientInfo = this.application.Patient;
			if (thePatientInfo.CurrentTemplatesApplied2Patient.length > 0) {
				this.loadOrderRecords("CallingLoc = PatientDataLoadComplete");
			}

			Ext.Function.defer( this.AssignBtnHandlers, 2000, this );
			this.application.fireEvent("PatientSelected", this.application.PatientSelectedRecs, this.application.PatientSelectedOpts);	// MWB 10 Feb 2012 - Added additional parameters
		}
	},
	/**********************************************
	 *
	 * END PatientDataLoadComplete() function
	 *
	 **********************************************/


	HandleVSHCalcDoseButtons : function( event, element ) {
		var btnTitle = element.getAttribute("title");
		if ("Show Dosage Calculation" === btnTitle) {
			var Patient = this.application.Patient;
			var params = {};
			params.Weight = element.getAttribute("weight");
			params.Height = element.getAttribute("height");
			params.WeightFormula = element.getAttribute("weightFormula");
			params.BSA_Weight = element.getAttribute("bsa_Weight");
			params.BSA_Method = element.getAttribute("bsa_Method");
			params.Gender = Patient.Gender;
			params.Amputations = Patient.Amputations;

			params.BSA = Ext.BSA_Calc(params);


			var PatientData = Ext.ShowBSACalcs(params, false, null, null, null);

			Ext.MessageBox.show({
				title : "Dosage Calculations",
				msg : PatientData,
				buttons : Ext.MessageBox.OK
			});
		}
	},



























	AssignBtnHandlers : function() {
		try {
			var thisCtl = this.getController("NewPlan.NewPlanTab");
			Ext.Patient = this.application.Patient;		// MWB - 5/30/2012 - Need this so that the Patient Info can be accessed within xTemplates

			var patientTemplates = thisCtl.getPatientTemplates();

			var btns1 = patientTemplates.el.select("button");
			btns1.removeAllListeners();
			btns1.on("click", this.HandleTemplateBtnClicks, this);
		}
		catch (e) {
			wccConsoleLog("Error in AssignBtnHandlers");
		}
	},


	//-------------------------------------------------------------------------
	//
	//	Template Source (National/Local/Personal) Selected - Phase 1 of the CTOS Tab
	//
	//
	onTemplateTypeChange : function(combo, recs, eOpts) {
		wccConsoleLog("Select Template Type");
		this.application.Patient.TemplateType = recs[0].data;
		var thisCtl = this.getController("NewPlan.NewPlanTab");
		var obj = thisCtl.getDiseaseAndStage();
		obj.show();
		this.getResetButton().show();
	},

	//
	//
	//	END Template Source Selected
	//
	//-------------------------------------------------------------------------


	//-------------------------------------------------------------------------
	//
	//	Disease Type Selected - Phase 2 of the CTOS Tab
	//
	//
	DiseaseSelected : function(combo, recs, eOpts) {
		wccConsoleLog("Disease Type has been selected");

		if(this.application.Patient.Disease != recs[0].data){
			this.application.ResetClicked=false;
		}

		this.application.Patient.Disease = recs[0].data;

		var obj = this.getTemplate();
		obj.show();
	},
	//-------------------------------------------------------------------------
	//
	//	Disease Stage Selected - Phase 2 of the CTOS Tab
	//
	//
	onDiseaseStageChange : function(combo, recs, eOpts) {
		wccConsoleLog("Disease Type and Stage has been selected");

		this.application.Patient.DiseaseStage = recs[0].data;

		combo.hiddenValue = recs[0].data.name;

		var thisCtl = this.getController("NewPlan.NewPlanTab");
		var obj = thisCtl.getTemplate();
		obj.show();
	},



	/**************************************************
	 *
	 *	MWB 30 Jan 2012 - Modified to break out the Loading of the Template from the Select Tag
	 *	This was done to make use of the loading function by the "HandleClickEvents" function above
	 *
	 **************************************************/
// Load the selected template - Called when user clicks on the "Show Template" in the Patient Info Table via the "HandleAnchorClicks - PatientInfoTable!" function above.
// This template is one which is currently applied to the patient.
	CTOS_DataLoad2 : function(TemplateID) {
			this.application.loadMask("CTOS DataLoad2"); // MWB 19 Jan 2012 - Mask the screen
			var CTOSModel = this.getModel("CTOS");
			var CTOSModelParam = TemplateID;

			wccConsoleLog("Template Params = " + CTOSModelParam);

			this.clearCTOS();

			CTOSModel.load(CTOSModelParam, {
				scope: this,
				success: function (CTOSTemplateData, response) {
					wccConsoleLog("CTOS Loaded - Processing");
					this.application.Patient.AppliedTemplateID = TemplateID;

					var thisCtl = this.getController("NewPlan.NewPlanTab");
					var CTOSData = thisCtl.getCTOSDataDsp();

					CTOSTemplateData.data.ELevelRecommendation = CTOSTemplateData.data.ELevel[0].details;
					CTOSData.update(CTOSTemplateData.data);
					this.getDisease().setValue(CTOSTemplateData.data.Disease);
					this.loadCombo(this.getDiseaseStage(),CTOSTemplateData.data.Disease);

					if(this.getDiseaseStage().getStore().count()==0){
						this.loadCombo(this.getDiseaseStage(),this.getDisease().getValue());
					}

					this.getDiseaseStage().setValue(CTOSTemplateData.data.DiseaseStage[0].name);

					CTOSData.show();
					if ("1" === SessionTemplateAuthoring) {
						this.getEditTemplateBtn().show();
					}
					if ("Provider" === Sessionrole || "All Roles" === Sessionrole) {
						this.getApplyTemplateBtn().disable();	// Template is already applied to patient
						this.getApplyTemplateBtn().hide();	// so no need to have it available.
					}

					this.application.CurrentTemplate = CTOSData;	// MWB - 5/21/2012 - Hang onto the current template data for use in calculating the proper end date when applying the template.
					this.application.unMask(); // MWB 19 Jan 2012 - Unmask the screen

					wccConsoleLog("CTOS Loaded - Rendering complete");
				},
				failure: function (err) {
					wccConsoleLog("CTOS Data failed to load properly");
					var thisCtl = this.getController("NewPlan.NewPlanTab");
					var CTOSData = thisCtl.getCTOSDataDsp();
					CTOSData.update("<h2 class='errMsg'>No information available for Template " + this.application.Patient.Template.name + "</h2>");
					Ext.MessageBox.alert("Template Load Error", "Unknown Error in loading Template " + this.application.Patient.Template.name + " - CTOS_DataLoad2" );

					this.application.unMask();	// MWB 19 Jan 2012 - Unmask the screen
				}
			});
	},




// Load the selected template - This is done by browsing through the available templates and selecting one from the drop down.
	CTOS_DataLoad : function(TemplateID, thePanel) {
		if (thePanel) {
			thePanel.setLoading("Loading Selected Template", false);
		}
		var CTOSModel = this.getModel("CTOS");
		var CTOSModelParam = TemplateID;
		wccConsoleLog("Template Params = " + CTOSModelParam );

		CTOSModel.load(CTOSModelParam, {
			scope : this,
			thePanel : thePanel,
			success : function( CTOSTemplateData, response ) {
				wccConsoleLog("CTOS Loaded - Processing");
				var thisCtl = this.getController("NewPlan.NewPlanTab");
				var CTOSData = thisCtl.getCTOSDataDsp();
				var ApplyBtn = this.getApplyTemplateBtn();
				var TemplateApplied;


				CTOSTemplateData.data.ELevelRecommendation = CTOSTemplateData.data.ELevel[0].details;
				CTOSData.update( CTOSTemplateData.data );
				if(CTOSData.hidden){
					CTOSData.show();
				}

				var patientAppliedTemplates = Ext.ComponentQuery.query('NewPlanTab fieldcontainer radiofield[name=\"NewPlan_What2Do\"]')[0];
				TemplateApplied = patientAppliedTemplates.getValue();

				if ("1" === SessionTemplateAuthoring) {
					this.getEditTemplateBtn().show();
				}
				if ("Provider" === Sessionrole || "All Roles" === Sessionrole) {
					// Reset default button text.
					if ("0" === SessionPreceptee) {
						ApplyBtn.setText("Apply Template to Patient");
					}
					else {
						ApplyBtn.setText("Apply Template to Patient - Requires Cosigner");
					}
					
					if(TemplateApplied){
						ApplyBtn.disable();
					}else{
						ApplyBtn.enable();
					}
					if (TemplateApplied &&
						"0" === SessionPreceptee && 
						"" === this.application.Patient.CurrentTemplatesApplied2Patient[0].ApprovedByUser && 
						"" !== this.application.Patient.CurrentTemplatesApplied2Patient[0].AssignedByUser) {
						ApplyBtn.setText("Approve Regimen");
						ApplyBtn.enable();
					}
					ApplyBtn.show();
				}

				/* Manage the Med Reminders Panel for the CTOS Template Display... */
				var theTemplateID2Pass2MedReminders = CTOSTemplateData.internalId;

				var mrGrid = this.getCTOS_MedRemindersGrid();
				var mrForm = this.getCTOS_MedRemindersForm();
				var mrDescField = this.getCTOS_MedRemindersDescription();
				var mrCycleField = this.getCTOS_MedRemindersWhenCycle();
				var mrPeriodField = this.getCTOS_MedRemindersWhenPeriod();

				if (mrGrid) {
					mrGrid.show();
				}
				if (mrForm) {
					mrForm.show();
				}
				this.application.CurrentTemplate = CTOSData;	// MWB - 5/21/2012 - Hang onto the current template data for use in calculating the proper end date when applying the template.

				if (response.thePanel) {
					response.thePanel.setLoading(false, false);
				}
			},

			failure : function (err, response) {
				wccConsoleLog("Laboratory Info failed to load properly");
				var thisCtl = this.getController("NewPlan.NewPlanTab");
				var CTOSData = thisCtl.getCTOSDataDsp();
				CTOSData.update( "<h2 class='errMsg'>No information available for Template " + this.application.Patient.Template.name + "</h2>" );
				if (response.thePanel) {
					response.thePanel.setLoading(false, false);
				}
			}
		});
	},


	LoadSpecifiedTemplate : function(TemplateID, module) {
		if (this.application.Patient && this.application.Patient.AppliedTemplate && this.application.Patient.AppliedTemplate.id == TemplateID) {
			// console.log("Specified Template (" + TemplateID + ") already loaded... (from " + module + ")");
			return;
		}
		// console.log("Loading Specified Template - Start - " + TemplateID + " (from " + module + ")");
		var CTOSModel = this.getModel("CTOS");
		var CTOSModelParam = TemplateID;
		this.clearCTOS();
		CTOSModel.load(CTOSModelParam, {
			scope: this,
			success: function (CTOSTemplateData, response) {
				// console.log("Loading Specified Template - Finished");
				this.application.Patient.AppliedTemplateID = TemplateID;
				CTOSTemplateData.data.ELevelRecommendation = CTOSTemplateData.data.ELevel[0].details;
				this.application.Patient.AppliedTemplate = CTOSTemplateData.data;
				this.DataLoadCountDecrement("LoadSpecifiedTemplate (from " + module + ") - PASS");
				this.PatientDataLoadComplete("Current Applied Template Loaded");
			},
			failure : function (err, response) {
				this.DataLoadCountDecrement("LoadSpecifiedTemplate (from " + module + ") - FAIL");
				this.PatientDataLoadComplete("Current Applied Template - Failed to load - " + response.error);
				Ext.MessageBox.alert("Loading Template Error", "NewPlanTab - Current Applied Template - Failed to load - " + response.error);
			}
		});
	},


	ShowSelectedTemplate : function(theTemplate) {
		this.application.Patient.Template = theTemplate;
		combo.hiddenValue = this.application.Patient.Template.description;
		this.CTOS_DataLoad(this.application.Patient.Template.id, null);
	},

	selTemplateChange : function(combo, recs, eOpts) {
		wccConsoleLog("Template has been selected");
		var theTemplate = recs[0].data;
		this.ShowSelectedTemplate(theTemplate);
	},


	SaveBSAInfo : function() {	// Used to update the BSA if it's recalculated
		var Patient = this.application.Patient;
		var ThisAdminDay = this.application.Patient.ThisAdminDay;		// This is the OEM Record for a specific Admin Day -
		// { id, AdminDate, Cycle, Day, PostTherapy, PostTherapyInstr, PreTherapy, PreTherapyInstr, Therapy, TherapyInstr }

		var dt = new Date();
		var record = {};
		if (ThisAdminDay) {
			record.Cycle = ThisAdminDay.Cycle;
			record.Day = ThisAdminDay.Day;
		}
		else {	// This is NOT an AdminDay for this Regimen
			record.Cycle = "";
			record.Day = "";
		}
		record.PatientID = Patient.id;
		record.DateTaken = Ext.Date.format(dt, "m/d/Y H:i:s");
		record.Height = String(Patient.Height);
		record.Weight = String(Patient.Weight);
		record.BSA = String(Patient.BSA);
		record.WeightFormula = Patient.WeightFormula;
		record.BSA_Method = Patient.BSA_Method;
		record.BSA_Weight = Patient.BSA_Weight;


		record.BP = "";
		record.Systolic = "";
		record.Diastolic = "";
		record.Temperature = "";
		record.Pulse = "";
		record.Respiration = "";
		record.Pain = 0;
		record.SPO2 = "";


		record.DateTaken = Ext.Date.format(dt, "m/d/Y H:i:s");

		record.Height = String(Patient.Height);
		record.Weight = String(Patient.Weight);
		record.WeightFormula = Patient.WeightFormula;
		record.BSA_Method = Patient.BSA_Method;
		record.BSA_Weight = Patient.BSA_Weight;
		record.BSA = String(Patient.BSA);

		record.BP = "";
		record.Diastolic = 0;
		record.Systolic = 0;

		record.Cycle = "";
		record.Day = "";
		record.Pain = null;
		record.Pulse = 0;
		record.Respiration = "";
		record.SPO2 = "";
		record.Temperature = "";
		record.PatientID = Patient.id;
		var params = Ext.encode(record);

		Ext.Ajax.request({
			url: Ext.URLs.AddVitals,
			method : "POST",
			jsonData : params,
			success: function( response, opts ){
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );

				if (!resp.success) {
					Ext.MessageBox.alert("Saving Error", "ND - GenInfo - Vitals Information Section, Save Error - " + resp.msg );
				}
			},
			failure : function( response, opts ) {
				var text = response.responseText;
				var resp = Ext.JSON.decode( text );
				Ext.MessageBox.alert("Saving Error", "ND - GenInfo - Vitals Information Section, Save Error - " + "e.message" + "<br />" + resp.msg );
			}
		});
		return (true);
	},

	LoadOEM_OrderData : function() {
		if (this.application.Patient) {
			this.application.DataLoadCount = 1;
			this.loadOrderRecords("CallingLoc = LoadOEM_OrderData");
		}
	},




	selectMedReminderGridRow : function(theRowModel, record, index, eOpts) {
		var records = theRowModel.getSelection();
		var theForm = this.getMedRemindersForm();
		if (!theForm.isVisible()) {
			theForm.show();
		}
		var theData = record.getData();
		var aForm = theForm.getForm();
		aForm.setValues({
			"ReminderWhenCycle" : theData.ReminderWhenCycle, 
			"ReminderWhenPeriod" : theData.ReminderWhenPeriod,
			"Title" : theData.Title,
			"Description" : theData.Description,
			"MR_ID" : theData.MR_ID,
			"TemplateID" : theData.TemplateID
		});
	},



	getAnyMedReminders4Template : function(TemplateID) {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();
		MedRemindersStore.removeAll();
		if ("" !== TemplateID) {
			MedRemindersStore.proxy.url = Ext.URLs.MedReminders + "/" + TemplateID;
			MedRemindersStore.load();
		}
	},

	RefreshMedRemindersGrid : function() {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();
		MedRemindersStore.removeAll(true);
		MedRemindersGrid.getView().refresh(true);
	},

	AddMedReminders2Store : function(MedReminders) {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();
		MedRemindersStore.removeAll();
		MedRemindersStore.add(MedReminders);
	},


	getMedRemindersInArray : function() {
		var MedRemindersGrid = this.getMedRemindersGrid();
		var MedRemindersStore = MedRemindersGrid.getStore();

		var MedRemindersArray = [], MedRemindersRec, limitCount = MedRemindersStore.count(), i, MedRemindersModel;
		for (i = 0; i < limitCount; i++) {
			MedRemindersModel = MedRemindersStore.getAt(i);
			MedRemindersRec = Ext.create(Ext.COMSModels.MedReminder, {
				"MR_ID" : MedRemindersModel.data.MR_ID,
				"TemplateID" : MedRemindersModel.data.TemplateID, 
				"Title" : MedRemindersModel.data.Title,
				"Description" : MedRemindersModel.data.Description,
				"ReminderWhenCycle" : MedRemindersModel.data.ReminderWhenCycle,
				"ReminderWhenPeriod" : MedRemindersModel.data.ReminderWhenPeriod
			});
			MedRemindersArray.push(MedRemindersRec);
		}
		return MedRemindersArray;
	}

});




Ext.define("COMS.controller.NewPlan.OEM", {
	extend: "Ext.app.Controller",

	stores: [
		"Templates"
	],


	views: [
		"NewPlan.OEM",
		"NewPlan.CTOS.OEMGoal",
		"NewPlan.CTOS.OEMPerformanceStatus",

		"NewPlan.CTOS.OEM_Edit"
	],

	refs: [
		{ ref: "MyTemplates",         selector: "NewPlanTab PatientInfo OEM selAppliedTemplate" },
		{ ref: "dspOEMTemplateData",  selector: "NewPlanTab PatientInfo OEM dspOEMTemplateData" },
		{ ref: "OEMTab",              selector: "NewPlanTab PatientInfo OEM" },
		{ ref: "CTOS_Tabs",           selector: "NewPlanTab CTOS" },
		{ ref: "CTOSTab",             selector: "NewPlanTab CTOS [title=\"Chemotherapy Template Order Source\"]" },
		{ ref: "OEM_Help",            selector: "NewPlanTab OEM [name=\"Help\"]" },
		{ ref: "OEM_Level1",          selector : "OEM container[name=\"OEM_Level1\"]" },
		{ ref: "SelectAdminDay2View", selector : "OEM combo[name=\"SelectAdminDay2View\"]" },
		{ ref : "GoalBtn",            selector : "OEM OEM_Level1 [name=\"AddGoal\"]" }
	],

	init: function () {
		wccConsoleLog("Initialized OEM Tab Controller!");

		this.application.on( { TemplateSelected : this.TemplateSelected, scope : this } );
		this.application.on( { DisplayOEMData : this.displayOEM_Data, scope : this } );	// Display the OEM Data
		this.application.on( { DisplayOEMRecordData : this.DisplayOEMRecordData, scope : this } );	// Display the OEM Record Data
		this.application.on( { PatientSelected : this.PatientSelected, scope : this } );

		this.control({
			"NewPlanTab PatientInfo OEM selAppliedTemplate": {
				select: this.selTemplateChange,
				beforequery: this.selTemplateQuery
			},
			"NewPlanTab PatientInfo OEM" : {
				beforeactivate : this.BeforeTabActivated
			},
			"OEM combo[name=\"SelectAdminDay2View\"]" : {
				select : this.selAdminDayChange
			},
			"NewPlanTab OEM" : {
					afterrender : this.DelegateHandlers,
					beforeactivate : this.ActivatingThisTab,	/* Still takes long after clicking tab before hitting this point */
					beforerender : this.ActivatingThisTab2,
					beforeshow : this.ActivatingThisTab3,
					beforedeactivate : this.ActivatingThisTab4,
					// beforedeactivate : this.ActivatingThisTab5,
					blur : this.ActivatingThisTab6,
					beforestatesave : this.ActivatingThisTab7,
					click : this.ActivatingThisTab8,
					statesave : this.ActivatingThisTab9
			}
		});
	},

	// Determines if the date passed is an Admin Day for this Regimen
	// If the date passed is an Admin Day then the OEM Data for that day is returned
	// else returns null.
	theDate_Cycle : "",
	theDate_Dat : "",

	MaskOEMData : function(flg) {
		this.showToday();
		var thePanel = this.getDspOEMTemplateData();
		if (flg) {
			thePanel.setLoading( "Loading Patient OEM Information", false );
		}
		else {
			thePanel.setLoading( false, false );
			this.showToday();
		}
	},
	IsDayAnAdminDay : function( theDate ) {
		var j, theData, dataLen, thePatient, AdminDay, dayData;
		try {
			thePatient = this.application.Patient;
			if (thePatient.OEMRecords) {
				theData = thePatient.OEMRecords.OEMRecords;
				dataLen = theData.length;
				for (j = 0; j < dataLen; j++) {
					dayData = theData[j];
					AdminDay = theData[j].AdminDate;
					if (theDate === AdminDay) {
						return theData[j];
					}
				}
			}
		}
		catch (e) {
		}
		return null;
	},

	ActivatingThisTab : function( theTab, eOpts ) {
		this.TabEventTracker("1. beforeactivate", theTab, eOpts);
	},
	ActivatingThisTab2 : function( theTab, eOpts ) {
		this.TabEventTracker("2. beforerender", theTab, eOpts);
	},
	ActivatingThisTab3 : function( theTab, eOpts ) {
		this.TabEventTracker("3. beforeshow", theTab, eOpts);
	},
	ActivatingThisTab4 : function( theTab, eOpts ) {
		this.TabEventTracker("4. beforedeactivate", theTab, eOpts);
	},
	ActivatingThisTab5 : function( theTab, eOpts ) {
		this.TabEventTracker("5. N/A", theTab, eOpts);
	},
	ActivatingThisTab6 : function( theTab, eOpts ) {
		this.TabEventTracker("6. blur", theTab, eOpts);
	},
	ActivatingThisTab7 : function( theTab, eOpts ) {
		this.TabEventTracker("7. beforestatesave", theTab, eOpts);
	},
	ActivatingThisTab8 : function( theTab, eOpts ) {
		this.TabEventTracker("8. click", theTab, eOpts);
	},
	ActivatingThisTab9 : function( theTab, eOpts ) {
		this.TabEventTracker("9. statesave", theTab, eOpts);
	},

	TabEventTracker : function( msg, theTab, eOpts) {
		// console.log("OEM Tab Event Tracker - " + msg);
	},

	DelegateHandlers : function(theTab, b, c) {
		theTab.el.on(
			{
				"click" : function(e,t, o) { 
					if (!t.classList) {
						t.classList = t.className.split(" ");
					}
					var classList = Ext.Array.clone(t.classList);
					if (Ext.Array.contains(classList, "EditOEM_Record")) {
						return this.handleEditOEM_Record(e, t);
					}
					if (Ext.Array.contains(classList, "OEM_RecordMedHold")) {
						return this.handleOEM_RecordMedHold(e, t);
					}
					if (Ext.Array.contains(classList, "OEM_RecordMedCancel")) {
						return this.handleOEM_RecordMedCancel(e, t);
					}
					if (Ext.Array.contains(classList, "ChangeOEM_AdminDate")) {
						return this.HandleChangeAdminDateButtons(e, t);
					}
					if (Ext.Array.contains(classList, "EditPerformanceStatus")) {
						return this.HandleOEMLevel1Buttons(e, t);
					}
					if (Ext.Array.contains(classList, "dspOEMDoseCalcs")) {
						return this.HandleOEMCalcDoseButtons(e, t);
					}
				},
				scope: this, 
				delegate: "button.anchor" 
			}
		);
	},


	ShowCurrentOEMRecord : function() {
		// if today is an Admin Day then show today's OEM Records
		var LinkName, 
			Elements, 
			theElement, 
			theID, 
			tmpData = this.IsDayAnAdminDay( Ext.Date.format( new Date(), "m/d/Y") );
		if (null !== tmpData) {
			var i;
			LinkName = "Section_Cycle_" + tmpData.Cycle + "_Day_" + tmpData.Day;
			Elements = Ext.query(".OEMRecord");
			for (i = 0; i < Elements.length; i++) {
				theElement = Elements[i];
				theID = theElement.id;
				if (theID === LinkName) {
					theElement.style.display="";
				}
				else {
					theElement.style.display="none";
				}
			}
		}
	},

	DisplayOEMRecordData : function( PatientInfo ) {
		this.MaskOEMData(true);
		var PatientID = this.application.Patient.id;
		var OEMRecordsModel = this.getModel("OEMRecords");
		OEMRecordsModel.load( PatientID, {
			scope: this,
			success: function (TemplateData, response) {
				this.MaskOEMData(false);
				var i, vvv = TemplateData.OEMRecordsStore.data.items, vvvLen = vvv.length;
				var newArray = [];
				for (i = 0; i < vvvLen; i++) {
					newArray[i] = vvv[i].getData();
				}
				this.application.Patient.OEMRecords.OEMRecords = newArray;
				this.RenderData4EachAdminDay(this.application.Patient.OEMRecords);
			},
			failure: function (err) {
				this.MaskOEMData(false);
				this.DataLoadCountDecrement("loadOrderRecords FAIL");
				this.PatientDataLoadComplete("Templates - Failed to load");
			}
		});
	},

	displayOEM_Data : function( PatientInfo ) {
		var theData = this.initTheData(PatientInfo);
		if (theData) {
			this.RenderData4TopLevelOEMPage(theData);
			this.RenderData4EachAdminDay(theData);
		}
	},

	initTheData : function( PatientInfo ) {
		var theData = PatientInfo.OEMRecords;
		if (PatientInfo.OEMDataRendered) {
			return null;
		}
		theData.TreatmentStart = PatientInfo.TreatmentStart;
		theData.TreatmentEnd = PatientInfo.TreatmentEnd;

		if (!theData.SiteConfig) {
			theData.SiteConfig = this.application.SiteConfig;
		}

		if (!theData.Patient) {
			theData.Patient = PatientInfo;
		}
		return theData;
	},

	updateAdminDay2ViewCombo : function(theData) {
		var j, AdminDay2ViewCombo, ComboStore, ComboStoreIndex = 0, Record, DataRecords, dRecordsLen;

		AdminDay2ViewCombo = this.getSelectAdminDay2View();
		ComboStore = AdminDay2ViewCombo.getStore();
		ComboStore.removeAll();

		if (theData.OEMRecords) {
			Record = { date : "Show All", LinkName : "Cycle_0_Day_0" };
			ComboStore.insert(ComboStoreIndex++, Record);
			DataRecords = theData.OEMRecords;
			dRecordsLen = DataRecords.length;
			for (j = 0; j < dRecordsLen; j++) {
				Record = { date : DataRecords[j].AdminDate, LinkName : ("Cycle_" + DataRecords[j].Cycle + "_Day_" + (DataRecords[j].Day)) };
				ComboStore.insert(ComboStoreIndex++, Record);
			}
		}
		else {
			Record = { date : "No Data Available", LinkName : "None" };
			ComboStore.insert(ComboStoreIndex++, Record);
		}
		AdminDay2ViewCombo.show();
	},

	RenderData4TopLevelOEMPage : function(theData) {
		var OEMLevel1;
		OEMLevel1 = this.getOEM_Level1();
		OEMLevel1.update(theData);
		OEMLevel1.show();
	},

	RenderData4EachAdminDay : function(theData) {
		var dspOEMTemplateData;
		dspOEMTemplateData = this.getDspOEMTemplateData();
		dspOEMTemplateData.update( theData );
		dspOEMTemplateData.show();
		this.updateAdminDay2ViewCombo(theData);
		this.application.Patient.OEMDataRendered = true;
		this.ShowCurrentOEMRecord();
	},



/***********************************************************************************
 *
 *	Called when the "selAdminDayChange" event is triggered from the List of Administration Days drop down 
 *	to display a particular OEM Record for a particular Administration Day
 *
 ***********************************************************************************/
	hideAllAdminDays : function() {
		var Elements = Ext.query(".OEMRecord");
		var ElLen = Elements.length;
		var i, theElement, theID;

		for (i = 0; i < ElLen; i++) {
			theElement = Elements[i];
			theElement.style.display="none";
		}
	},
	showAllAdminDays : function() {
		var Elements = Ext.query(".OEMRecord");
		var ElLen = Elements.length;
		var i, theElement, theID;

		for (i = 0; i < ElLen; i++) {
			theElement = Elements[i];
			theElement.style.display="block";
		}
	},
	showToday : function() {
		var Showing = false,
			today = Ext.util.Format.date(new Date()),
			Elements = Ext.query(".OEMRecord"),
			ElLen = Elements.length,
			i, theElement;
		this.hideAllAdminDays();

		for (i = 0; i < ElLen; i++) {
			theElement = Elements[i];
			if (theElement.innerText.indexOf(today) > 0) {
				theElement.style.display="block";
				Showing = true;
			}
		}
		if (!Showing) {
			if (Elements && Elements.length > 0) {
				Elements[0].style.display="block";
			}
		}
	},

	selAdminDayChange : function(combo, recs, eOpts) {
		var thisCtl = this.getController("NewPlan.OEM");
		var Elements = Ext.query(".OEMRecord");
		var ElLen = Elements.length;
		var theData = recs[0];

		thisCtl = this.getController("NewPlan.OEM");
		var dspDate = theData.data.date;
		var LinkName = theData.data.LinkName;
		Elements = Ext.query(".OEMRecord");
		ElLen = Elements.length;
		var i;
		var theElement;
		var tmpName;
		var theID;

		if ("Cycle_0_Day_0" === LinkName) {
			this.showAllAdminDays();
		}
		else {
			tmpName = "Section_" + LinkName;
			this.hideAllAdminDays();
			for (i = 0; i < ElLen; i++) {
				theElement = Elements[i];
				theID = theElement.id;
				if (theID === tmpName) {
					theElement.style.display="block";
				}
			}
		}
	},


/***********************************************************************************
 *
 *	Called when the "selAdminDayChange" event is triggered from the List of Administration Days drop down 
 *	to display a particular OEM Record for a particular Administration Day
 *
 ***********************************************************************************/
	HandleOEMCalcDoseButtons : function (evt, aBtn) {
		// button attributes
		// title = "Show Dosage Calculation"
		// name = "dspOEMDoseCalcs"

		// dose = The dose being administered
		// units = The units
		// calcDose = The calculated (aka BSA/KG/AUC) Dose
		// doseunits = The Units for the dose to be administered (e.g. mg/m2)

		// class = "anchor" <- Not needed
		// id = the element id, Not needed
		var btnTitle = aBtn.getAttribute("title");
		var dose, units, calcDose, doseUnits, PatientData, Patient = this.application.Patient;

		if ("Show Dosage Calculation" === btnTitle) {
			calcDose = aBtn.getAttribute("calcDose");

			var origDose = aBtn.getAttribute("dose");
			var t1 = aBtn.getAttribute("doseunits").toLowerCase().replace(" ", "");
			// if ("mg/kg" == Units || "units / m2" == Units || "units / kg" == Units || "units/m2" == Units || "units/kg" == Units || "mg/m2" == Units || "mg/kg" == Units) {
			
			if ("mg/kg" == t1 || "units/kg" == t1) {
				var PatientWeightInKilos = Ext.Pounds2Kilos(Patient.Weight);
				dose = origDose * PatientWeightInKilos;
				dose = dose + " " + t1;
			}
			else {
				var t2 = t1.split("/");
				if ("m2" === t2[1]) {
					t2[1] = "m<sup>2</sup>";
				}
				dose = origDose + " " + t1;
			}
			
			PatientData = Ext.ShowBSACalcs(Patient, false, dose, calcDose, origDose);
			var title = "Dosage Calculations";
			Ext.MessageBox.show({
				title : title,
				msg : PatientData,
				buttons : Ext.MessageBox.OK
			});

		}
	},

	/**********************
	 *
	 *	Called when the user clicks on the OEM tab.
	 *	If the current patient has a template applied to them then the tab will display
	 *	And render the currently applied template.
	 *	Makes use of functionality also in the "TemplateSelected" method below.
	 *
	 **********************/
	TabActivated : false,


	HandleChangeAdminDateButtons : function( event, element ) {
		var ChangeAdminDate = Ext.widget("puWinChangeAdminDate");
		var AdminDate = element.getAttribute("admindate");
		var thisCtl = this.getController("Common.puWinChangeAdminDate");
		thisCtl.initializeCurAdminDate(AdminDate);
	},


/***********************************************************************************
 *
 *
 ***********************************************************************************/
    procPerfStatStoreRecords: function (records, operation, success) {
        var i, len, record, patientIsDead = '5', itemsInGroup = [];	// new Array();
        len = records.length;
        for (i = 0; i < len; i++) {
            record = records[i];
            if(patientIsDead === record.data.value){
                // console.log("procPerfStatStoreRecords - He's Dead Jim");
                break;
            }
            itemsInGroup.push({
                boxLabel : record.data.value + ' - ' + record.data.description,
                name : 'PerfStatus',
                inputValue : record.data.id,
                width : 360
            });
        }

        var Widget = "OEMPerformanceStatus";
        var Query = "OEMPerformanceStatus button[text=\"Save\"]";
        var params = {"itemsInGroup": itemsInGroup};
        var Win = Ext.widget(Widget, params);
        var SaveBtn = Ext.ComponentQuery.query(Query)[0];
        SaveBtn.on("click", this.SaveOEM_PS, this );
    }, 

	HandleOEMLevel1Buttons : function (event, element) {
		event.stopEvent( );
		var BtnName = element.getAttribute("name");
		var Win, SaveBtn, Widget, Query, params;

		switch(BtnName) {
			case "EditPerformanceStatus" : 
                var myStore = this.getStore('PerfStatStore');
                myStore.load({ scope: this, callback: this.procPerfStatStoreRecords });
                break;

            case "AddClinicalTrial" :
                alert("Add Clinical Trial - Not Currently Available - (NewPlan\\OEM)");
                Widget = "OEMClinicalTrial";
                Query = "OEMClinicalTrial button[text=\"Save\"]";
                params = null;
                Win = Ext.widget(Widget, params);
                SaveBtn = Ext.ComponentQuery.query(Query)[0];
                SaveBtn.on("click", this.SaveOEM_PS, this );
                break;
            case "AddGoal" : 
                alert("Add Goal - Not Currently Available - (NewPlan\\OEM)");
                Widget = "OEMGoal";
                Query = "OEMGoal button[text=\"Save\"]";
                params = null;
                Win = Ext.widget(Widget, params);
                SaveBtn = Ext.ComponentQuery.query(Query)[0];
                SaveBtn.on("click", this.SaveOEM_PS, this );
                break;
        }
    },

/***********************************************************************************
 *
 *
 ***********************************************************************************/
	SaveOEM_PS : function(button, event, eOpts) {
		var PatientInfo = this.application.Patient;
		var win = button.up("window");
		var form = win.down("form");
		var PSID = form.getValues().PerfStatus;

		var NewPS;
		var myStore = this.getStore('PerfStatStore');
        myStore.each( function(record){
			if (PSID === record.data.id) {
				NewPS = record.data.value + ' - ' + record.data.description;
			}
        });
		this.application.NewPerformanceStatus = NewPS;
		var rec = Ext.create(Ext.COMSModels.Vitals, {
			"PatientID" : PatientInfo.id,
			"PS_ID" : PSID,
			"DateTaken" : ""
		});
		rec.save(
			{ 
				scope : this, 
				callback : function(rec, oper) {
					if (oper.success) {
					    var newPlanTabCtl = this.getController("NewPlan.NewPlanTab");
						newPlanTabCtl.loadVitals("Update Vitals");
						this.application.Patient.OEMRecords.PerformanceStatus = this.application.NewPerformanceStatus;
						var thisCtl = this.getController("NewPlan.OEM");
						var OEMLevel1 = thisCtl.getOEM_Level1();
						OEMLevel1.update(this.application.Patient.OEMRecords);
					}
					else {
						Ext.MessageBox.alert("Saving Error", "Performance State, Save Error - " + oper.error);
					}
				}
			}
		);

		win.close();
	},


/***********************************************************************************
 *
 *
 ***********************************************************************************/
	BeforeTabActivated : function(thePanel, eOpts) {
		var PatientInfo = this.application.Patient;

		var retFlg = true;
		if ("" === PatientInfo.TemplateID) {
			alert("No Template has been applied to this patient\nTab will not display");
			this.getCTOS_Tabs().setActiveTab( 0 );
			retFlg = false;
		} else if (!PatientInfo.BSA_Method) {
			alert("You must enter/select a Body Surface Area by clicking on the \"Calculate Body Surface Area\" link above.\nTab will not display");
			this.getCTOS_Tabs().setActiveTab( 0 );
			retFlg = false;
		}
		if (retFlg) {
			var templateObj = {};
			templateObj.name = PatientInfo.TemplateName;
			templateObj.id = PatientInfo.TemplateID;
			templateObj.description = PatientInfo.TemplateDescription;
			this.TabActivated = true;
			this.getAndRenderTemplateData (templateObj);
			this.TabActivated = false;
		}
		return retFlg;
	},

	/**********************
	 *
	 *	Event called by clicking on one of the links in the List of Patient's Templates
	 *	Then activates the "OEM" Tab and renders the selected template there.
	 *
	 **********************/
	TemplateSelected : function( opts, arg2) {
		var theTab = opts.tabType;
		var templateObj = {};
		templateObj.name = opts.templateName;
		templateObj.id = opts.templateID;
		templateObj.description = "";
		var tab2Show;

		if ("OEM" === theTab) {
			var PatientInfo = this.application.Patient;
			if (!PatientInfo.BSA_Method) {
				alert("Body Surface Area is NOT available\nClick on the \"Calculate Body Surface Area\" link below to calculate the Body Surface Area to be used for Dosing");
				return;
			}
			if ("Manual Entry" === PatientInfo.BSA_Method && "" === PatientInfo.BSA) {
				alert("Body Surface Area is NOT available\nPlease enter a \"Capped BSA Value\" below to calculate the Body Surface Area to be used for Dosing");
				return;
			}
			tab2Show = this.getOEMTab();
			this.getAndRenderTemplateData (templateObj);
		}
		else if ("CTOS" === theTab) {
			tab2Show = this.getCTOSTab();
		}

		this.getCTOS_Tabs().setActiveTab( tab2Show );


	},


	/**********************
	 *
	 *	Called when the "PatientSelected" event is triggered from the top of the NewTab Panel Select Patient drop down
	 *	This adjusts the values in the "Select Applied Template" drop down based on the selected user
	 *	This will eventually be eliminated as we will not use a drop down to select the Template.
	 *	A list of applied templates links will do this process
	 *
	 **********************/
	PatientSelected: function (combo, recs, eOpts) {
		wccConsoleLog("OEM Tab - Patient Selected has changed");
		var tpl = new Ext.XTemplate("");
		var dspOEMTemplateData = this.getDspOEMTemplateData();
		try {
			var theEl = dspOEMTemplateData.getEl();
			if (theEl) {
				tpl.overwrite(theEl, {});
				var templateModel = this.getModel("LookupTable_Templates");
				templateModel.proxy.url = Ext.URLs.Templates + "/Patient/" + this.application.Patient.id;
				var TemplateSelector = this.getMyTemplates();
				TemplateSelector.getStore().removeAll(); // clear out the store for the combo
				TemplateSelector.reset();
			}

		} catch (e) {
		}


		if (this.application.Patient.TemplateID) {
			this.application.Patient.OEMDataRendered = false;
		}
	
		this.getCTOS_Tabs().setActiveTab( this.getCTOSTab() );		// Force the "CTOS" tab to be opened when changing a patient
	},


	/**********************
	 *
	 *	Called when the user selects an applied template
	 *	This will eventually be eliminated as we will not use a drop down to select the Template.
	 *	A list of applied templates links will do this process
	 *
	 **********************/
	selTemplateQuery: function (qe) {
		if ("" === qe.combo.lastValue) {
			delete qe.combo.lastQuery;
		}
		var templateModel = this.getModel("LookupTable_Templates");
		templateModel.proxy.url = Ext.URLs.Templates + "/Patient/" + this.application.Patient.id;
	},










/***********************************************************************************
 *
 *
 ***********************************************************************************/
	getAndRenderTemplateData: function(TemplateObj) {
		if (!this.application.TempMedRecord) {
			this.application.TempMedRecord = this.getModel(Ext.COMSModels.Edit_OEMRecord);
		}
		wccConsoleLog("Template applied to patient has been selected");
		if (!this.TabActivated) {
			return;
		}

		var PatientInfo = this.application.Patient;
		if (PatientInfo.OEMRecords) {
			this.displayOEM_Data (PatientInfo);
		}
		else {
			this.application.Patient.Template = TemplateObj;

			var NewPlanTabCtl = this.getController("NewPlan.NewPlanTab");
			NewPlanTabCtl.loadOrderRecords("Calling Loc = getAndRenderTemplateData");
		}
	},

/**********************************************************************************************
 *
 *
 *
 *
 **********************************************************************************************/
    handleOEM_RecordMedCancel : function( event, element) {
        event.stopEvent(  );
        var dlgMsg, dlgTitle, newStat;
            dlgTitle = "Cancel Medication - ";
            dlgMsg = "Cancel medication for this date only or all future Administration dates";
            newStat = "Cancel";
/*******************************************************************/
        Ext.Msg.show({
            title: dlgTitle + element.getAttribute("med"),
            msg: dlgMsg,
            buttonText: {
                yes: 'This date Only', no: 'All Future', cancel: 'Cancel'
            },
            scope:this,
            status: newStat,
            buttons: Ext.Msg.YESNOCANCEL,
            el : element,
            fn: function(btnID, txt, opt) {
                var matchRecord, matchMed, matchMedID, DrugSection, ridx, record, PREbtnID, TbtnID, POSTbtnID;
                var Data = this.application.Patient.OEMRecords;
                var records = Data.OEMRecords;
                var TherapyID;
                var idx = opt.el.getAttribute("typeidx");
                idx--;
                record = records[idx];

                var type = opt.el.getAttribute("type");
                var medIdx = opt.el.getAttribute("medidx");
                if ("Pre" === type) {
                    DrugSection = record.PreTherapy;
                }
                else if ("Pos" === type || "Post" === type) {
                    DrugSection = record.PostTherapy;
                }
                else {
                    DrugSection = record.Therapy;
                }
                if (DrugSection.length > 0) {
                    matchRecord = DrugSection[medIdx-1];
                    // matchMed = matchRecord.Med;
                    matchMedID = matchRecord.MedID;
                    TherapyID = matchRecord.id;
                }

                if ("cancel" === btnID) {
					if("Clear" == opt.status) {
						Ext.MessageBox.alert("Cancel Medication", "Release Hold of - " + opt.el.getAttribute("med") + " has been cancelled");
					}
					else {
						Ext.MessageBox.alert("Cancel Medication", opt.status + " Medication - " + opt.el.getAttribute("med") + " has been cancelled");
					}
                }
                else {
                    if ("This date Only" === opt.buttonText[btnID]) {
                        ridx = idx;
                        this.HoldSingleMedRecord(records, type, ridx, medIdx, opt.status, matchMedID, TherapyID);
                    }
                    else if ("All Future" === opt.buttonText[btnID]) {
                        for (ridx = idx; ridx < records.length; ridx++ ) {
                            this.HoldSingleMedRecord(records, type, ridx, medIdx, opt.status, matchMedID, TherapyID);
                        }
                    }
                }
            }
        });
/*******************************************************************/
    },

/**********************************************************************************************
 *
 *
 *
 *
 **********************************************************************************************/
HoldSingleMedRecord : function(records, type, ridx, medIdx, nStatus, matchMedID, TherapyID) {
    var i, MedList, matchingRecord, tempMedRecord, aRecord, PID, record = records[ridx];
    this.application.loadMask("Setting Hold/Cancel Status");
    PID = this.application.Patient.id;
    var Type = "Therapy";
    if ("Pre" === type) {
        Type = "Pre";
    }
    else if ("Pos" === type || "Post" === type) {
        Type = "Post";
    }
    var URL = Ext.URLs.HoldCancel + "/" + TherapyID + "/" + Type + "/" + nStatus;
    var URL2 = Ext.URLs.OrderHoldCancel + "/" + PID + "/" + TherapyID + "/" + Type + "/" + nStatus;
	Ext.Ajax.request({
		scope : this,
		url: URL,
        method: "PUT",
		success: function( response, opts ){
			var text = response.responseText;
			var resp = Ext.JSON.decode( text );
			if (resp.success) {
				this.application.unMask();
				/* Update on screen display */
				var btnID, btnStatus, aBtn, PostBtnID = type + "_" + record.Cycle + "_" + record.Day + "_" + medIdx;
				if ("Hold" === nStatus) {
					btnStatus = "Release from Hold";
					btnID = "Hold_" + PostBtnID;
					aBtn = Ext.select("#" + btnID);
					if (aBtn && aBtn.elements && aBtn.elements[0] && aBtn.elements[0].childNodes) {
						aBtn.elements[0].childNodes[0].nodeValue = btnStatus;
					}
				}
				else if ("Cancel" === nStatus) {
					btnStatus = "";
					btnID = "Edit_" + PostBtnID;
					aBtn = Ext.select("#" + btnID);
					if (aBtn && aBtn.elements && aBtn.elements[0] && aBtn.elements[0].childNodes) {
						aBtn.elements[0].childNodes[0].nodeValue = btnStatus;
					}
					btnID = "Hold_" + PostBtnID;
					aBtn = Ext.select("#" + btnID);
					if (aBtn && aBtn.elements && aBtn.elements[0] && aBtn.elements[0].childNodes) {
						aBtn.elements[0].childNodes[0].nodeValue = btnStatus;
					}
					btnID = "Cancel_" + PostBtnID;
					aBtn = Ext.select("#" + btnID);
					if (aBtn && aBtn.elements && aBtn.elements[0] && aBtn.elements[0].childNodes) {
						aBtn.elements[0].childNodes[0].nodeValue = btnStatus;
					}
				}
				else {
					btnStatus = "Hold";
					btnID = "Hold_" + PostBtnID;
					aBtn = Ext.select("#" + btnID);
					if (aBtn && aBtn.elements && aBtn.elements[0] && aBtn.elements[0].childNodes) {
						aBtn.elements[0].childNodes[0].nodeValue = btnStatus;
					}
				}
			}
		},
		failure : function( response, opts ) {
			this.application.unMask();
			alert("EoTS Data Load Failed...");
		}
	});

},


handleOEM_RecordMedHold : function( event, element) {
    event.stopEvent(  );
    var dlgMsg, dlgTitle, newStat;
    if ("Release from Hold" == element.textContent) {
        dlgTitle = "Release Medication Hold - ";
        dlgMsg = "Release medication hold for this date only or all future Administration dates";
        newStat = "Clear";
    }
    else if ("Hold" == element.textContent) {
        dlgTitle = "Hold Medication - ";
        dlgMsg = "Hold medication for this date only or all future Administration dates";
        newStat = "Hold";
    }
    else {
        dlgTitle = "Cancel Medication - ";
        dlgMsg = "Cancel medication for this date only or all future Administration dates";
        newStat = "Cancel";
    }
    Ext.Msg.show({
        title: dlgTitle + element.getAttribute("med"),
        msg: dlgMsg,
        buttonText: {
            yes: 'This date Only', no: 'All Future', cancel: 'Cancel'
        },
        scope:this,
        status: newStat,
        buttons: Ext.Msg.YESNOCANCEL,
        el : element,
        fn: function(btnID, txt, opt) {
            var matchRecord, matchMed, matchMedID, DrugSection, ridx, record, PREbtnID, TbtnID, POSTbtnID;
            var TherapyID;
            var Data = this.application.Patient.OEMRecords;
            var records = Data.OEMRecords;
            var idx = opt.el.getAttribute("typeidx");
            idx--;
            record = records[idx];

            var type = opt.el.getAttribute("type");
            var medIdx = opt.el.getAttribute("medidx");
            if ("Pre" === type) {
                DrugSection = record.PreTherapy;
            }
            else if ("Post" === type || "Pos" === type) {
                DrugSection = record.PostTherapy;
            }
            else {
                DrugSection = record.Therapy;
            }
            if (DrugSection.length > 0) {
                matchRecord = DrugSection[medIdx-1];
                matchMedID = matchRecord.MedID;
                TherapyID = matchRecord.id;
            }

            if ("cancel" === btnID) {
				if("Clear" == opt.status) {
					Ext.MessageBox.alert("Medication Hold", "Release Hold of - " + opt.el.getAttribute("med") + " has been cancelled");
				}
				else {
					Ext.MessageBox.alert("Medication Hold", opt.status + " Medication - " + opt.el.getAttribute("med") + " has been cancelled");
				}
            }
            else {
                if ("This date Only" === opt.buttonText[btnID]) {
                    ridx = idx;
                    this.HoldSingleMedRecord(records, type, ridx, medIdx, opt.status, matchMedID, TherapyID);
                }
                else if ("All Future" === opt.buttonText[btnID]) {
                    for (ridx = idx; ridx < records.length; ridx++ ) {
                        this.HoldSingleMedRecord(records, type, ridx, medIdx, opt.status, matchMedID, TherapyID);
                    }
                }
            }
        }
    });
},

/***********************************************************************************
 *
 * MWB 13 Feb 2012
 * Handle click of Anchor to Edit a specific drug in an OEM Record
 * Anchors rendered in the OEM.js view as part of the XTemplate
 *
 ***********************************************************************************/
handleEditOEM_Record : function (event, element) {
    event.stopEvent(  );
		var anchorName = element.getAttribute("name");
		var anchorCycle = element.getAttribute("cycle");
		var anchorDay = element.getAttribute("day");
		var anchorType = element.getAttribute("type");
		var anchorIdx = element.getAttribute("typeidx");	// The index which specifies the index into the arrays of Admin Days
		var medIdx = element.getAttribute("medidx");		// The index into the array of Meds for the specified therapy
		var Data = this.application.Patient.OEMRecords;

		// MWB 14 Feb 2012 -- In Real Code need to get the specific record from the OEM Record Data attached to the Patient object
		// But currently need to adjust the OEM Record Data stored. The "Dosing" comes in as a single string rather than the individual components needed.
		var DrugSection;
		var theCycles = Data.OEMRecords;
//		var thisDay = theCycles[anchorCycle-1];			// MWB - 3/30/2012 - Why was the line below commented out and replaced by this one???
		var thisDay = theCycles[anchorIdx-1];		// Identifies the day based on the idx into the array of Cycles [ = ((#Days/Cycle) * (Cycle#)) + (Day in Cycle))]


		var MedRecord = {};

		var title;
		switch(anchorType) {
			case "Pre" :
				title = "Edit Pre-Therapy Drug";
				DrugSection = thisDay.PreTherapy;
				MedRecord.TherapyType = "Pre";
				break;
			case "Post" : 
				title = "Edit Post-Therapy Drug";
				DrugSection = thisDay.PostTherapy;
				MedRecord.TherapyType = "Post";
				break;
			default:
				title = "Edit Therapy Drug";
				DrugSection = thisDay.Therapy;
				MedRecord.TherapyType = "Therapy";
				break;
		}
		var mr = DrugSection[medIdx-1];

		// Ideally these values should probably be stored in the DB but they're only really needed when editing a particular record
		// And to put them in the DB would entail changing the Model and back end store to little real necessity
		MedRecord.Order_ID = mr.Order_ID;
		MedRecord.CycleIdx = anchorCycle;
		MedRecord.DayIdx = anchorDay;
		MedRecord.MedIdx = medIdx;

		MedRecord.TemplateID = Data.id;
		MedRecord.OEMRecordID = thisDay.id;

		MedRecord.TherapyID = mr.id;

		MedRecord.Instructions = mr.Instructions;
		MedRecord.AdminTime = mr.AdminTime;
		MedRecord.MedID = mr.MedID;
		MedRecord.Med = mr.Med;

		if ("Therapy" === MedRecord.TherapyType) {
			MedRecord.Dose = mr.Dose;
			MedRecord.BSA_Dose = mr.BSA_Dose;
			MedRecord.Units = mr.DoseUnits;
			MedRecord.InfusionMethod = mr.AdminMethod;
			MedRecord.FluidType = mr.FluidType;
			MedRecord.InfusionTime1 = mr.InfusionTime;

			MedRecord.FluidVol = mr.FluidVol;
			MedRecord.FlowRate = mr.FlowRate;
		}
		else {
			MedRecord.Dose = mr.Dose1;
			MedRecord.BSA_Dose = mr.BSA_Dose1;
			MedRecord.Units = mr.DoseUnits1;
			MedRecord.InfusionMethod = mr.AdminMethod1;
			MedRecord.FluidType = mr.FluidType1;

			MedRecord.FluidVol = mr.FluidVol1;
			MedRecord.FlowRate = mr.FlowRate1;

			MedRecord.Dose2 = mr.Dose2;
			MedRecord.BSA_Dose2 = mr.BSA_Dose2;
			MedRecord.Units2 = mr.DoseUnits2;
			MedRecord.InfusionMethod2 = mr.AdminMethod2;
			MedRecord.FluidType2 = mr.FluidType2;
			MedRecord.FluidVol2 = mr.FluidVol2;
			MedRecord.FlowRate2 = mr.FlowRate2;
			MedRecord.InfusionTime1 = mr.InfusionTime1;
			MedRecord.InfusionTime2 = mr.InfusionTime2;
		}

		var EditRecordWin = Ext.widget("EditOEMRecord");
		EditRecordWin.setTitle(title);
		this.application.fireEvent("OEMEditRecord", MedRecord, anchorType);
		return false;
},



	/**********************
	 *
	 *	Called when the user selects a template.
	 *	This method makes a call to the back end service to retrieve the data for the selected template
	 *	Then parses it to make a JSON Data Object and passes it off to the XTemplate for rendering in the OEM Tab
	 *
	 **********************/
	selTemplateChange: function (combo, recs, eOpts) {
		wccConsoleLog("Template applied to patient has been selected");
		this.getAndRenderTemplateData (recs[0].data);
	}


});




Ext.define("COMS.controller.NewPlan.OEM_Edit", {
	extend: "Ext.app.Controller",
	stores: [ "ReasonStore", "FluidType", "DrugStore", "DrugUnitsStore", "InfusionStore" ],
	views: [ "NewPlan.CTOS.OEM_Edit" ],
	refs: [
		{
			ref: "theForm",
			selector : "EditOEMRecord form"
		},
		{
			ref: "SelectedMed",
			selector : "EditOEMRecord SelectDrug"
		},
		{
			ref: "FluidVol",
			selector : "EditOEMRecord FluidVol[name=\"FluidVol\"]"
		},
		{
			ref: "FlowRate",
			selector : "EditOEMRecord FlowRate[name=\"FlowRate\"]"
		},
		{
			ref: "InfusionTime",
			selector : "EditOEMRecord displayfield[name=\"InfusionTime\"]"
		},
		{
			ref: "FluidInfo",
			selector : "EditOEMRecord container[name=\"fluidInfo\"]"
		},
        {
            ref:  "SelectReason",
            selector : "EditOEMRecord SelectReason"
        }
	],


	// Ext.ComponentQuery.query("EditOEMRecord FluidVol[name=\"FluidVol2\"]")[0].el.dom
	init: function () {
		wccConsoleLog("Initialized Edit OEM Record Controller!");

		this.application.on({ OEMEditRecord : this.OEMEditRecord, scope : this });

		this.control({

            "EditOEMRecord button[text=\"Save\"]" : {
                click: this.SaveChanges
            },
            "EditOEMRecord button[text=\"Cancel\"]" : {
                click: this.CloseWidget
            },

			"EditOEMRecord FlowRate[name=\"FlowRate\"]" : { 
				blur : this.CalcInfusionTime
			},
			"EditOEMRecord FlowRate[name=\"FlowRate2\"]" : { 
				blur : this.CalcInfusionTime2
			},
			"EditOEMRecord InfusionMethod[name=\"InfusionMethod\"]" : {
				select: this.routeSelected
			}
		});
	},


	routeSelected : function(combo, records, eOpts) {
		var thisCtl = this.getController("NewPlan.OEM_Edit");
		var route = combo.getValue();
		var theContainer = this.getFluidInfo();
		var aContainer;
		if (Ext.routeRequiresFluid(route)) {
			theContainer.show();
		}
		else {
			theContainer.hide();
		}
	},
	CalcInfusionTime : function() {
		var thisCtl = this.getController("NewPlan.OEM_Edit");

		var FluidVol = thisCtl.getFluidVol();
		var FlowRate = thisCtl.getFlowRate();
		var InfusionTime = thisCtl.getInfusionTime();

		InfusionTime.setValue( Ext.CalcInfusionTime(FluidVol.getValue(), FlowRate.getValue(), true) );
	},
	CalcInfusionTime2 : function() {
		var thisCtl = this.getController("NewPlan.OEM_Edit");

		var FluidVol = thisCtl.getFluidVol2();
		var FlowRate = thisCtl.getFlowRate2();
		var InfusionTime = thisCtl.getInfusionTime2();

		InfusionTime.setValue( Ext.CalcInfusionTime(FluidVol.getValue(), FlowRate.getValue(), true) );
	},

	SaveMedRecord : function(record, values, multipleRecords) {
		record.set(values);
		var PatientInfo = this.application.Patient;
		var MedRecord = PatientInfo.MedRecord;
		var MedRecord2Check; 
		var CycleIdx = MedRecord.CycleIdx;
		var DayIdx = MedRecord.DayIdx;
		var MedIdx = MedRecord.MedIdx;
		var MedID = MedRecord.MedID;
		var TherapyType = MedRecord.TherapyType;
		var saveCfg, CalcDayIndex;

		var AdminDaysPerCycle = PatientInfo.OEMRecords.AdminDaysPerCycle;

		var MaxRecords = PatientInfo.OEMRecords.OEMRecords.length;
		var i, CkRecord2Match;
		for (i = 0; i < MaxRecords; i++) {
			CkRecord2Match = PatientInfo.OEMRecords.OEMRecords[i];
			if (CkRecord2Match.Cycle == CycleIdx && CkRecord2Match.Day == DayIdx) {
				CalcDayIndex = i;
			}
		}
		var Record2Change = PatientInfo.OEMRecords.OEMRecords[CalcDayIndex];


		// MWB - 3/15/2012 - Need to check if the dose unites is based on Surface Area then calculating BSA Dose then

		MedRecord.BSA_Dose1 = "";
		MedRecord.BSA_Dose2 = "";

		if (values.Units.indexOf("/m2") > 0 || values.Units.indexOf("/ m2") > 0) {
			MedRecord.BSA_Dose1 = values.Dose * PatientInfo.BSA;
		}
		MedRecord.BSA_Dose1 = Ext.GeneralRounding2Digits(MedRecord.BSA_Dose1);

		MedRecord.Dose1 = values.Dose;
		MedRecord.DoseUnits1 = values.Units;
		MedRecord.FlowRate1 = values.FlowRate;
		MedRecord.FluidType1 = values.FluidType;
		MedRecord.FluidVol1 = values.FluidVol;
		MedRecord.AdminMethod1 = values.InfusionMethod;
		MedRecord.Reason = values.Reason;

		var MedRecord1 = {};

		MedRecord1.AdminMethod1 = MedRecord.AdminMethod1;
		MedRecord1.AdminTime = MedRecord.AdminTime;
		MedRecord1.BSA_Dose1 = MedRecord.BSA_Dose1;
		MedRecord1.Dose1 = MedRecord.Dose1;
		MedRecord1.DoseUnits1 = MedRecord.DoseUnits1;
		MedRecord1.FlowRate1 = MedRecord.FlowRate1;
		MedRecord1.FluidType1 = MedRecord.FluidType1;
		MedRecord1.FluidVol1 = MedRecord.FluidVol1;
		MedRecord1.InfusionTime1 = MedRecord.InfusionTime1;
		MedRecord1.Instructions = values.Instructions;
		MedRecord1.Med = MedRecord.Med;
		MedRecord1.MedID = MedRecord.MedID;
		MedRecord1.id = MedRecord.id;
		MedRecord1.Reason = MedRecord.Reason;

		MedRecord1.MedIdx = PatientInfo.MedRecord.MedIdx;
		MedRecord1.TherapyType = PatientInfo.MedRecord.TherapyType;
		MedRecord1.AdminDaysPerCycle = PatientInfo.OEMRecords.AdminDaysPerCycle;


		if (multipleRecords) {
			for (i = CalcDayIndex; i < MaxRecords; i++) {
				CkRecord2Match = PatientInfo.OEMRecords.OEMRecords[i];
				if ("Pre" == TherapyType) {
					MedRecord2Check = PatientInfo.OEMRecords.OEMRecords[i].PreTherapy[MedIdx - 1];
				}else if ("Post" == TherapyType) {
					MedRecord2Check = PatientInfo.OEMRecords.OEMRecords[i].PostTherapy[MedIdx - 1];
				} else {
					MedRecord2Check = PatientInfo.OEMRecords.OEMRecords[i].Therapy[MedIdx - 1];
				}
				if (MedRecord2Check.MedID === MedID) {
					if ("Pre" == TherapyType) {
						PatientInfo.OEMRecords.OEMRecords[i].PreTherapy[MedIdx - 1] = MedRecord1;
					}else if ("Post" == TherapyType) {
						PatientInfo.OEMRecords.OEMRecords[i].PostTherapy[MedIdx - 1] = MedRecord1;
					} else {
						PatientInfo.OEMRecords.OEMRecords[i].Therapy[MedIdx - 1] = MedRecord1;
					}

					saveCfg = { scope : this};
					record.save();
				}
			}
			PatientInfo.OEMDataRendered = false;		// Force the tab contents to be re-calculated
		}
		else {
			// MedRecord1.CycleIdx = PatientInfo.MedRecord.CycleIdx;
			// MedRecord1.DayIdx = PatientInfo.MedRecord.DayIdx;

			if ("Pre" == TherapyType) {
				PatientInfo.OEMRecords.OEMRecords[CalcDayIndex].PreTherapy[MedIdx - 1] = MedRecord1;
			}else if ("Post" == TherapyType) {
				PatientInfo.OEMRecords.OEMRecords[CalcDayIndex].PostTherapy[MedIdx - 1] = MedRecord1;
			} else {
				PatientInfo.OEMRecords.OEMRecords[CalcDayIndex].Therapy[MedIdx - 1] = MedRecord1;
			}

			saveCfg = { scope : this, callback : function( records, operation, success ) {
				var PatientInfo = this.application.Patient;
				var CycleIdx = PatientInfo.MedRecord.CycleIdx;
				var DayIdx = PatientInfo.MedRecord.DayIdx;
				var MedIdx = PatientInfo.MedRecord.MedIdx;
				PatientInfo.OEMDataRendered = false;		// Force the tab contents to be re-calculated
			}};
	//		record.save(saveCfg);
			record.save();
		}
	
		PatientInfo = this.application.Patient;
		PatientInfo.OEMDataRendered = false;
		this.application.fireEvent("DisplayOEMData", PatientInfo);
	},
	
	SaveChanges : function(button, event, eOpts) {
		var win = button.up("window"),
			form = win.down("form"),
			record = form.getRecord(),
			values = form.getValues(),
			thisCtl = this.getController("NewPlan.OEM_Edit"),
			sReason = thisCtl.getSelectReason(),
			strReason = sReason.rawValue,
			dlgTitle = "Save Medication Edits - ",
			dlgMsg = "Save medication edits for this date only or all future Administration dates",
			newStat = "Cancel",
			theMed = thisCtl.getSelectedMed(),
			medName = theMed.getValue();

		if (!form.form.isValid()) {
			Ext.MessageBox.alert("Medication Edits", "Please select a reason for the change in medication");
			return;
		}

		values.Reason = strReason;

		Ext.Msg.show({
			title: dlgTitle + medName,
			msg: dlgMsg,
			modal: true,
			buttonText: {
				yes: 'This date Only', no: 'All Future', cancel: 'Cancel'
			},
			scope:this,
			status: newStat,
			buttons: Ext.Msg.YESNOCANCEL,
			// el : element,
			fn: function(btnID, txt, opt) {
				if ("cancel" === btnID) {
					Ext.MessageBox.alert("Medication Edit", "Medication edit - " + medName + " has been cancelled");
			    }
				else {
					if ("This date Only" === opt.buttonText[btnID]) {
						this.SaveMedRecord(record, values, false);
					}
					else if ("All Future" === opt.buttonText[btnID]) {
						this.SaveMedRecord(record, values, true);
					}
					win.close();
				}
			}
		});
	},

	CloseWidget : function(button, event, eOpts) {
        var win = button.up('window');
		win.close();
	},


// MWB 5 Mar 2012
// Note: There are currently bugs in the 4.1 Library with regards to the Table Layout which prevents controlling the hide/showing of elements
// See : http://www.sencha.com/forum/showthread.php?183820-4.1-B3-Error-when-calling-hide-on-nested-elements

	toggleFluidInfo : function(showBlock) {
		return;
/************************** KEEP IN PLACE TILL ABOVE NOTED PROBLEM CAN BE RESOLVED
		if (showBlock) {
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfoSpacer\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidType\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfoVol\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfoRate\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"InfusionTime\"]")[0].show();
		}
		else {
			Ext.ComponentQuery.query("EditOEMRecord form container[name=\"FluidInfoSpacer\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidType\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfoVol\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfoRate\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"InfusionTime\"]")[0].hide();
		}
***************************/
	},

// MWB 5 Mar 2012
// Note: There are currently bugs in the 4.1 Library with regards to the Table Layout which prevents controlling the hide/showing of elements
// See : http://www.sencha.com/forum/showthread.php?183820-4.1-B3-Error-when-calling-hide-on-nested-elements
	toggleOptionalDosing : function(showBlock) {
		return;
/************************** KEEP IN PLACE TILL ABOVE NOTED PROBLEM CAN BE RESOLVED
		if (showBlock) {
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"OptionalDosingLabel\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"OptionalDosing\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"Dose2\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"Units2\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"InfusionMethod2\"]")[0].show();
		}
		else {
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"OptionalDosingLabel\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"OptionalDosing\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"Dose2\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"Units2\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"InfusionMethod2\"]")[0].hide();
		}
*****************/
	},


// MWB 5 Mar 2012
// Note: There are currently bugs in the 4.1 Library with regards to the Table Layout which prevents controlling the hide/showing of elements
// See : http://www.sencha.com/forum/showthread.php?183820-4.1-B3-Error-when-calling-hide-on-nested-elements
	toggleFluidInfo2 : function(showBlock) {
		return;
/************************** KEEP IN PLACE TILL ABOVE NOTED PROBLEM CAN BE RESOLVED
		if (showBlock) {
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfoSpacer\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidType2\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfo2Vol\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfo2Rate\"]")[0].show();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"InfusionTime2\"]")[0].show();
		}
		else {
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfo2Spacer\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidType2\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfo2Vol\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"FluidInfo2Rate\"]")[0].hide();
			Ext.ComponentQuery.query("EditOEMRecord form [name=\"InfusionTime2\"]")[0].hide();
		}
***************/
	},


	OEMEditRecord : function(MedRecord, RecordType, arg2) {
		this.application.Patient.MedRecord = MedRecord;

		var thisCtl = this.getController("NewPlan.OEM_Edit");
		var theForm = thisCtl.getTheForm();
		var ShowOptional = false;
		var ShowFluid = false, ShowFluid2 = false;

		if ("IV" == MedRecord.InfusionMethod.substr(0, 2)) {
			ShowFluid = true;
			this.toggleFluidInfo(true);
		}

		MedRecord.State = "";
		var EditRecordModel = this.getModel(Ext.COMSModels.Edit_OEMRecord);
		var aRecord = COMS.model.OEMEditRecord.create(MedRecord);


		theForm.loadRecord(aRecord);
	}


});


Ext.define("COMS.controller.NewPlan.PatientHistory", {
	"extend" : "Ext.app.Controller",
	"views" : [
		"NewPlan.PatientHistory"
	],
	"refs" : [
		{ ref : "AddVitalsPanel", selector: "PatientHistory container[name=\"AddVitals\"]"},
	],
	"init" : function() {
		this.control({
			"scope" : this,
			"PatientHistory" : {
				"afterrender" : this.RenderPanel
			},
			"PatientHistory button[name=\"Show_Hide_Add_Vitals\"]" : {
				"click" : this.ShowHideVitals
			}
		});
	},

	RenderPanel : function (panel) {
	},

	ShowHideVitals : function (btn) {
		var thePanel = this.getAddVitalsPanel();
		if (thePanel.hidden) {
			thePanel.show();
			theButton.setText("Hide Add Vitals");
		} else {
			thePanel.hide();
			theButton.setText("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add Vitals&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
		}
	}

});

/*************************************
 *
 *	Note: Once the BSA is calculated it's stored in the "this.application.Patient.BSA" variable for global access.
 *	The name of the BSA Formula (Mosteller, DuBois, etc) is also stored in "this.application.Patient.BSA_Method"
 *
 *************************************/
Ext.define("COMS.controller.NewPlan.PatientInfoTable", {
	extend: "Ext.app.Controller",
	views : [
		"NewPlan.PatientInfoTable"
	],
	WeightInKilos : 0,
	Weight2Use : 0,
	TypeOfWeight : "",
	HeightInMeters : 0,


	refs: [
		{
			ref: "PatientInfo",
			selector: "NewPlanTab PatientInfo"
		},
		{
			ref: "PatientInfoTable",
			selector: "NewPlanTab PatientInfo PatientInfoTable"
		},
		{
			ref: "BSA_Section",
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"]"
		},

			// Display only fields for displaying the currently selected Patients info
		{
			ref: "BSA_Gender",
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container displayfield[name=\"BSA_Gender\"]"
		},
		{
			ref: "BSA_Height",
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container displayfield[name=\"BSA_Height\"]"
		},
		{
			ref: "BSA_Weight",
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container displayfield[name=\"BSA_Weight\"]"
		},
		{
			ref: "BSA_Amputee",
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container displayfield[name=\"BSA_Amputee\"]"
		},

			// Fields
		{
			ref: "BSA_FormulaWeight",	// Combo box for selecting the type of weight to use
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container combo[name=\"BSA_FormulaWeight\"]"
		},

		{
			ref: "BSA_Formula",			// Combo box for selecting the type of BSA Formula to use
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container combo[name=\"BSA_Formula\"]"
		},
		{
			ref: "BSA_CappedValue",		// Text field (numeric filter) for manually entering the BSA Value
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container [name=\"BSA_CappedValue\"]"
		},
		{
			ref: "BSA_Calc",			// Display field to display the calculated BSA value
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container [name=\"BSA_Calc\"]"
		},
		{
			ref: "BSA_OtherWeight",		// Text field (numeric filter) for manually entering the "Other" weight Value
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container [name=\"BSA_OtherWeight\"]"
		},
		{
			ref: "BSA_CalcWeight",		// Display field to display the calculated weight based on the type of weight selected
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] container [name=\"BSA_CalcWeight\"]"
		},

		{
			ref: "BSA_CalcFormula",		// Display field to display the BSA Calculation Formula
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] [name=\"BSA_CalcFormula\"]"
		},
		{
			ref: "BSA_WeightFormula",	// Display field to display the Weight Calculation Formula
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] [name=\"BSA_WeightFormula\"]"
		},
		{
			ref: "CTOS_Tabs",			// The CTOS Tabset
			selector: "NewPlanTab PatientInfo CTOS"
		},
		{
			ref: "BSA_OEM_Link",		// The Link to the OEM tab, next to the BSA Calculation
			selector: "NewPlanTab PatientInfo PatientInfoTable container[name=\"BSA_OEM_Link\"]"
		}
	],


	// Ext.ComponentQuery.query("NewPlanTab PatientInfo PatientInfoTable container[name=\"BSAInfoTable\"] [name=\"BSA_CalcFormula\"]")[0].el.dom
	init: function() {
		wccConsoleLog("Initialized PatientInformationTable Controller!");
		this.application.on({ PatientSelected : this.PatientSelected, scope : this });

//		var ptInfo = Ext.ComponentQuery.query("PatientInfoTable")[0];
//		ptInfo.body.query(".AddEditAmputation");

		this.control({
			"NewPlanTab PatientInfo" : {
				afterrender : this.PatientInfoRendered
			}
		});
	},


	/* See: http://stackoverflow.com/questions/8079942/ext-js-proper-technique-to-add-listeners-to-dom-created-via-an-xtemplate */
	/* Also see: Element.addListener delegate property */
	attachCOMSEvents : function() {
		/* Switching Contrast Mode */
		/*
		Ext.getBody().on("click", function(event, target){
			alert("Switching to Normal Contrast Mode");
			location.href = document.url;
		}, null, {
			delegate: "button#NormalContrastMode"
		});
		Ext.getBody().on("click", function(event, target){
			alert("Switching to High Contrast Mode");
			location.href = document.url;
		}, null, {
			delegate: "button#HighContrastMode"
		});
		*/
	},


	PatientSelected : function(recs, eOpts) {	// MWB 10 Feb 2012 - This event is passed up from the PatientSelected handler in the NewPlanTab controller, NOT from the combo itself
		wccConsoleLog("Patient selected - Adjust BSA Calculations");
		// console.log("PatientSelected within PatientInfoTable");
		var thisCtl = this.getController("NewPlan.PatientInfoTable");
		var piData = recs[0].data;

		
		try {
			thisCtl.getBSA_WeightFormula().labelEl.dom.innerHTML = "";
			thisCtl.getBSA_CalcFormula().labelEl.dom.innerHTML = "";

			thisCtl.getBSA_FormulaWeight().setValue("");
			thisCtl.getBSA_Formula().setValue("");
			thisCtl.getBSA_WeightFormula().setValue("");
			thisCtl.getBSA_CalcFormula().setValue("");
			thisCtl.getBSA_CappedValue().setValue("");
			thisCtl.getBSA_Calc().setValue("");
			thisCtl.getBSA_OtherWeight().setValue("");
			thisCtl.getBSA_CalcWeight().setValue("");
			thisCtl.getBSA_Section().hide();
			thisCtl.getBSA_OEM_Link().hide();
		}
		catch (e) {
			// Not really an error, just that the components have not yet been rendered
			wccConsoleLog("Patient Selected - Potential Error!!!");
		}
	},

	PatientInfoRendered : function(thePanel, opts) {
		this.AssignLinkClicksInPatientInformationTable(thePanel, opts);
	},

	HandleBtnClicks : function(cmp, tag) {
		// console.log("NewPlan - PatientInfoTable - HandleBtnClicks");
		// debugger;
	},


	showAmputationWiget : function() {
		if (!this.puWinAmputations) {
			this.puWinAmputations = Ext.widget("puWinSelAmputation");
			this.puWinAmputations.show();
		}
		else {
			this.puWinAmputations.show();
		}
	},

	ShowBSAWidget : function() {
		if (!this.puWinBSA) {
			this.puWinBSA = Ext.widget("puWinSelBSA");
			this.puWinBSA.show();
		}
		else {
			try {
			this.puWinBSA.show();
		}
			catch (e) {
				this.puWinBSA = Ext.widget("puWinSelBSA");
				this.puWinBSA.show();
			}
		}
	},

	ShowCancerWidget : function() {
		if (!this.puWinCancer) {
			this.puWinCancer = Ext.widget("puWinSelCancer");
			this.puWinCancer.show();
		}
		else {
			try {
			this.puWinCancer.show();
		}
			catch (e) {
				this.puWinCancer = Ext.widget("puWinSelCancer");
				this.puWinCancer.show();
			}
		}
	},

	DeleteSelectedCancerFromPatient : function(params) {
		var PDH_ID = params.DiseaseData.PDH_ID;
		delete params.DiseaseData;
		var puWinSelCancer = params.getController( "Common.puWinSelCancer" );
		puWinSelCancer.delDiseaseHistory(params.application.Patient, PDH_ID);
	},

	DeleteCancerWidget : function() {
		var Patient = this.application.Patient;
		var CancerIdx = this.application.CancerIdx;
		var DiseaseData = Patient.Disease;
		if (CancerIdx >= 0 && CancerIdx <= DiseaseData.length) {
			DiseaseData = DiseaseData[CancerIdx];
			delete this.application.CancerIdx;

			var msg = "Are you sure you want to remove:";
			msg += "<div style=\"margin-left: 2em;\">Cancer Type: " + DiseaseData.DiseaseName + "</div>";
			msg += "<div style=\"margin-left: 2em;\">Cancer Stage: " + DiseaseData.DiseaseStage + "</div>";

			Ext.Msg.show({
				title:"Remove Cancer Type?",
				msg: msg,
				buttons: Ext.Msg.YESNO,
				icon: Ext.Msg.QUESTION,
				CancerIdx : CancerIdx,
				fn: function(buttonId, str, opt) {
					if ("yes" == buttonId) {
						this.DiseaseData = DiseaseData;
						Ext.COMS_LockSection(this.application.Patient.id, "AddEditCancer", this.DeleteSelectedCancerFromPatient, this);
					}
					else {
						Ext.MessageBox.alert("Cancel", "Cancer type has NOT been removed.");
					}
				},
				scope: this
			});
		}
		else {
		}
	},


	ShowAddCumulativeMedication : function() {
		try {
			if (!this.puWinCumDose) {
				this.puWinCumDose = Ext.widget("puWinAddCumDose");
				this.puWinCumDose.show();
			}
			else {
				this.puWinCumDose.show();
			}
		}
		catch (e) {
			this.puWinCumDose = Ext.widget("puWinAddCumDose");
			this.puWinCumDose.show();
		}
	},


	AssignLinkClicksInPatientInformationTable : function(thePanel, opts) {
	/* See: http://stackoverflow.com/questions/8079942/ext-js-proper-technique-to-add-listeners-to-dom-created-via-an-xtemplate */
		thePanel.body.on("click", 
			function( evt, target ) {
				var theClass = target.className;
				
				var thisCtl = this.getController("NewPlan.NewPlanTab");
				// var tabType = target.getAttribute("tabtype");

/**
 * Amputation information is stored in the Lookup table in the following manner:
 *  Lookup_Type = 30
 *  Lookup_Type_ID = null
 *  Name = Patient GUID
 *  Description = Amputation (e.g. "Left Foot", "Lower Left Arm", etc) One Amputation per record
 *  Use Patient Controller
 **/
				switch( theClass ) {
					case "anchor AddEditAmputation" : 
						// console.log("Click Anchor");
						Ext.COMS_LockSection(this.application.Patient.id, "Amputations", this.showAmputationWiget);
						break;
					case "anchor AddEditBSA" : 
						Ext.COMS_LockSection(this.application.Patient.id, "AddEditBSA", this.ShowBSAWidget);
						break;
					case "anchor AddEditCancer" : 
						Ext.COMS_LockSection(this.application.Patient.id, "AddEditCancer", this.ShowCancerWidget);
						break;
					case "anchor DeleteCancerType" : 
						// console.log("Click Delete Cancer Type");
						this.application.CancerIdx = target.getAttribute("CancerIdx");
						this.DeleteCancerWidget();
						// Ext.COMS_LockSection(this.application.Patient.id, "AddEditCancer", this.DeleteCancerWidget, this);
						break;
					case "anchor AddCumulativeMedication" :
						Ext.COMS_LockSection(this.application.Patient.id, "AddCumulativeMedication", this.ShowAddCumulativeMedication);
						break;
					case "anchor DoBSACalcs" : 
						thisCtl.ShowBSACalcsPUWin({}, "DoBSACalcs");
						break;
					case "anchor ShowBSACalcs" : 
						thisCtl.ShowBSACalcsPUWin({}, "ShowBSACalcs");
						break;
					case "anchor ShowAllPatientData" : 
						var Patient = this.application.Patient;
						var htmlData = prettyPrint( Patient, { maxDepth : 5 } ).innerHTML;
						Ext.create('Ext.window.Window', {
							title: 'Patient Info',
							height: 800,
							width: 950,
							autoScroll : true,
							html : htmlData
						}).show();
						break;
				}
			},
			this, 
			{
				delegate : "button.anchor"
			}
		);
	}
});


Ext.define("COMS.controller.NewPlan.Reason4EOTSAnswer", {
    extend : "Ext.app.Controller",
    stores : [
    ],

	models : ["EndTreatmentSummary"],

    views : [
		"NewPlan.Reason4EOTSAnswer"
    ],

    refs: [
		{ ref: "Reason4EOTSHead", selector: "EndTreatmentSummary [name=\"Reason4EOTSHead\"]"},

		// Radio Groups
		{ ref: "Reason4EOTSAnswer", selector: "EndTreatmentSummary [name=\"Reason4EOTSAnswer\"]"},
		{ ref: "Reason4EOTS_TCReason", selector: "EndTreatmentSummary [name=\"Reason4EOTS_TCReason\"]"},
		{ ref: "Reason4EOTS_PDReason", selector: "EndTreatmentSummary [name=\"Reason4EOTS_PDReason\"]"},

		// Radio Buttons for each group
		{ ref: "EOTS_Reason", selector: "EndTreatmentSummary [name=\"EOTS_Reason\"]"},
		{ ref: "EOTS_TChange", selector: "EndTreatmentSummary [name=\"EOTS_TChange\"]"},
		{ ref: "EOTS_PDChange", selector: "EndTreatmentSummary [name=\"EOTS_PDChange\"]"},

		// "Other" text fields for "Other" option for each group
		{ ref: "EOTS_ReasonOther", selector: "EndTreatmentSummary [name=\"EOTS_ReasonOther\"]"},
		{ ref: "EOTS_TChangeOther", selector: "EndTreatmentSummary [name=\"EOTS_TChangeOther\"]"},
		{ ref: "EOTS_PDChangeOther", selector: "EndTreatmentSummary [name=\"EOTS_PDChangeOther\"]"}
	],


    init: function() {
        wccConsoleLog("Initialized Reason for End of Treatment Controller!");
        this.control({

				// Change Button in one of the 3 Radio Groups
			"EndTreatmentSummary [name=\"Reason4EOTSAnswer\"]" : {
				change : this.Reason4Change1
			},
			"EndTreatmentSummary [name=\"Reason4EOTS_TCReason\"]" : {
				change : this.Reason4Change2
			},
			"EndTreatmentSummary [name=\"Reason4EOTS_PDReason\"]" : {
				change : this.Reason4Change3
			},

			"EndTreatmentSummary [name=\"EOTS_ReasonOther\"]" : {
				blur : this.Reason4ChangeDone,
				specialkey : this.Look4Enter
			},
			"EndTreatmentSummary [name=\"EOTS_TChangeOther\"]" : {
				blur : this.Reason4ChangeDone,
				specialkey : this.Look4Enter
			},
			"EndTreatmentSummary [name=\"EOTS_PDChangeOther\"]" : {
				blur : this.Reason4ChangeDone,
				specialkey : this.Look4Enter
			}
        });
    },

	Look4Enter : function( theField, evt, eOpts ) {
		var theKey = evt.getKey();
		if (evt.ENTER === theKey) {
			this.Reason4ChangeDone( theField, "", "", eOpts);
		}
	},


		// Reason4EOTSAnswer btn has changed
	Reason4Change1 : function( theField, nValue, oValue, eOpts) {
		this.Reason4Change(theField, nValue, oValue, eOpts);
	},

		// Reason4EOTS_TCReason btn has changed
	Reason4Change2 : function( theField, nValue, oValue, eOpts) {
		this.Reason4Change(theField, nValue, oValue, eOpts);
	},

		// Reason4EOTS_PDReason btn has changed
	Reason4Change3 : function( theField, nValue, oValue, eOpts) {
		this.Reason4Change(theField, nValue, oValue, eOpts);
	},



	Reason4Change : function( theField, nValue, oValue, eOpts) {
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		var Head = thisCtl.getReason4EOTSHead();
		var FieldName = theField.name;
		var ReasonMsg = "";
		var EndOfChange = false;

// Reason4EOTSAnswer is the name of the group of buttons for the top level
// EOTS_Reason is the name of the Radio Buttons for the top level.
// EOTS_ReasonOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTSAnswer = this.getReason4EOTSAnswer();
		var EOTS_Reason = this.getEOTS_Reason();
		var EOTS_ReasonOther = this.getEOTS_ReasonOther();

// Reason4EOTS_TCReason is the name of the group of buttons for the secondary level, IF the "Treatment Change" button was clicked at the top level
// EOTS_TChange is the name of the Radio Buttons for the secondary level, IF the "Treatment Change" button was clicked at the top level
// EOTS_TChangeOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTS_TCReason = this.getReason4EOTS_TCReason();
		var EOTS_TChange = this.getEOTS_TChange();
		var EOTS_TChangeOther = this.getEOTS_TChangeOther();

// Reason4EOTS_PDReason is the name of the group of buttons for the secondary level, IF the "Patient Discontinuation" button was clicked at the top level
// EOTS_PDChange is the name of the Radio Buttons for the secondary level, IF the "Patient Discontinuation" button was clicked at the top level
// EOTS_PDChangeOther is the name of the Text Field for the text if the "Other" button is set
		var Reason4EOTS_PDReason = this.getReason4EOTS_PDReason();
		var EOTS_PDChange = this.getEOTS_PDChange();
		var EOTS_PDChangeOther = this.getEOTS_PDChangeOther();

		Reason4EOTSAnswer.hide();
		EOTS_ReasonOther.hide();

		Reason4EOTS_TCReason.hide();
		EOTS_TChangeOther.hide();

		Reason4EOTS_PDReason.hide();
		EOTS_PDChangeOther.hide();


		// Determine which radio button was clicked and show/hide appropriate sections as needed
		if ("Reason4EOTSAnswer" === FieldName) {	// Top level radio button clicked
			ReasonMsg = nValue.EOTS_Reason;

			if ("Treatment Change" === ReasonMsg ) {	// If Treatment Change is checked then need to display secondary set of Radio Buttons
				Reason4EOTS_TCReason.show();		// Secondary set of Radio Buttons
				Reason4EOTSAnswer.show();
			}
			else if ("Patient Discontinuation" === ReasonMsg ) {	// If Patient Discontinuation is checked then need to display secondary set of Radio Buttons
				Reason4EOTS_PDReason.show();		// Secondary set of Radio Buttons
				Reason4EOTSAnswer.show();
			}
			else if ("Other" === ReasonMsg) {	// Needs to show the text field for an "Other" reason
				EOTS_ReasonOther.show();
				Reason4EOTSAnswer.show();
			}
			else {
				EndOfChange = true;
			}
		}

		// Treatment Change - Process Secondary Buttons
		else if ("Reason4EOTS_TCReason" === FieldName) {	// User has selected "Treatment Change" so this handles the secondary radio buttons
			ReasonMsg = "Treatment Change - " + nValue.EOTS_TChange;

			if ("Other" === nValue.EOTS_TChange) {	// Needs to show the text field for an "Other" reason for "Treatment Change"
				Reason4EOTS_TCReason.show();		// Secondary set of Radio Buttons
				EOTS_TChangeOther.show();
				Reason4EOTSAnswer.show();
			}
			else {
				EndOfChange = true;
			}
		}

		// Patient Discontinuation - Process Secondary Buttons
		else if ("Reason4EOTS_PDReason" === FieldName) {	// User has selected "Patient Discontinuation" so this handles the secondary radio buttons
			ReasonMsg = "Patient Discontinuation - " + nValue.EOTS_PDChange;

			if ("Other" === nValue.EOTS_PDChange) {	// Needs to show the text field for an "Other" reason for "Patient Discontinuation"
				EOTS_PDChangeOther.show();
				Reason4EOTSAnswer.show();
				Reason4EOTS_PDReason.show();
			}
			else {
				EndOfChange = true;
			}
		}




		else if ("EOTS_ReasonOther" === FieldName) {		// Top level reason for change 
			ReasonMsg = nValue;
		}
		else if ("EOTS_TChangeOther" === FieldName) {		// Top level reason for change 
			ReasonMsg = "Treatment Change - " + nValue;
		}
		else if ("EOTS_PDChangeOther" === FieldName) {		// Top level reason for change 
			ReasonMsg = "Patient Discontinuation - " + nValue;
		}


		var Reason = "<span style=\"font-weight: normal; font-size: 100%;\">" + ReasonMsg + "</span>";
		var ChangeBtn = "";
		
		if (EndOfChange) {
			ChangeBtn = "<button class=\"anchor\" name=\"ChangeReason\" style=\"margin-left: 1em;\">Change</button>";
			this.FinishUpReason4Change(Reason, ChangeBtn);
		}
		else {
			thisCtl.getReason4EOTSHead().el.setHTML("<h2>Reason for generating End of Treatment Summary - " + Reason + ChangeBtn + "</h2>");
		}
	},





	Reason4ChangeDone : function( theField, nValue, oValue, eOpts) {
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");
		var answer1 = thisCtl.getReason4EOTSAnswer().getValue();
		var answer2 = thisCtl.getReason4EOTS_TCReason().getValue();
		var answer3 = thisCtl.getReason4EOTS_PDReason().getValue();

		var answer = "";
		if ("Treatment Change" === answer1.EOTS_Reason) {
			answer = answer1.EOTS_Reason + " - " + answer1.EOTS_TChange + " - " + theField.value;
		}
		else if ("Patient Discontinuation" === answer1.EOTS_Reason) {
			answer = answer1.EOTS_Reason + " - " + answer1.EOTS_PDChange + " - " + theField.value;
		}
		else if ("Other" === answer1.EOTS_Reason) {
			answer = answer1.EOTS_Reason + " - " + theField.value;
		}

		var ChangeBtn = "<button class=\"anchor\" name=\"ChangeReason\" style=\"margin-left: 1em;\">Change</button>";
		this.FinishUpReason4Change(answer, ChangeBtn);

	},


	FinishUpReason4Change : function(Reason, Btn) {
		this.EoTSData.EndReason = Reason;
		var Patient = this.application.Patient;
		this.getReason4EOTSHead().el.setHTML("<h2>Reason for generating End of Treatment Summary - " + Reason + Btn + "</h2>");
		var ChangeBtnEl = Ext.ComponentQuery.query("EndTreatmentSummary")[0].el.select("button.anchor");
		ChangeBtnEl.on("click", this.HandleChangeClicks, this);

		this.EoTSData.TreatmentOriginalEnd = "";

		var i, tHist = Patient.TemplateHistory;
		var thLen = 0;
		if (tHist) {
			thLen = tHist.length;
		}
		if (this.application.Patient.EoTS_TemplateID === Patient.TemplateID) {		// Terminating current template
			this.EoTSData.TreatmentStart = Patient.TreatmentStart;
			this.EoTSData.TreatmentOriginalEnd = Patient.TreatmentEnd;
			this.EoTSData.TreatmentEnd = Ext.Date.format(new Date(), "m/d/Y");
		}
		else {
			for (i = 0; i < thLen; i++) {
				if (tHist[i].TemplateID === this.application.Patient.EoTS_TemplateID) {
					this.EoTSData.TreatmentStart = tHist[i].DateStarted;
					this.EoTSData.TreatmentEnd = tHist[i].DateEnded;
				}
			}
		}

		this.EoTSData.Name = Patient.name;
		this.EoTSData.PatientID = Patient.id;		// MWB - 6/12/2012
		this.EoTSData.PAT_ID = Patient.PAT_ID;


		this.EoTSData.Gender = Patient.Gender;
		this.EoTSData.Age = Patient.Age;
		this.EoTSData.DOB = Patient.DOB;
		this.EoTSData.Amputations = Patient.Amputations;
		this.EoTSData.TemplateName = this.application.Patient.EoTS_TemplateName;
		this.EoTSData.TemplateID = this.application.Patient.EoTS_TemplateID;
		this.EoTSData.TemplateDescription = "";
		this.EoTSData.TreatmentStatus = "Ended";
		this.EoTSData.Disease = Patient.Disease;		// Contains an array of objects consisting of { Type : "", Stage : ""}
		this.EoTSData.Allergies = Patient.Allergies;	// Contains an array of objects consisting of { name : "", type : "", comment : "" }
		this.EoTSData.Trial = Patient.ClinicalTrial || "NOT a clinical trial";

		this.getVitals();

		var Ctl = this.getController("NewPlan.CTOS.FlowSheetTab");
		var thisCtl = this.getController("NewPlan.EndTreatmentSummary");

		
		thisCtl.CycleDates = [];
		thisCtl.PerformanceStatus = [];
		thisCtl.DiseaseResponse = [];
		thisCtl.Toxicity = [];
		thisCtl.Other = [];
		thisCtl.Drugs = [];

		thisCtl.EoTS_PerformanceStatus = [];
		thisCtl.EoTS_DiseaseResponse = [];
		thisCtl.EoTS_Toxicity = [];
		thisCtl.EoTS_Other = [];
		thisCtl.EoTS_Drugs = [];
		
		
		var Flowsheet = Ctl.createFlowsheet(thisCtl.parseFlowsheetData);

		this.EoTSData.OriginalEnd = this.application.Patient.TreatmentEnd;
		this.EoTSData.Meds = this.EoTS_Drugs;
		this.EoTSData.DiseaseResponse = this.EoTS_DiseaseResponse;
		this.EoTSData.Toxicity = this.EoTS_Toxicity;
		this.EoTSData.Other = this.EoTS_Other;

		this.EoTSData.TreatmentReport = "";
		this.EoTSData.PatientDiseaseResponse = "";
		this.EoTSData.ToxicitySideEffects = "";
		this.EoTSData.ProviderReport = "";
		this.EoTSData.FollowUpAppointments = "";

		this.getReason4EOTSAnswer().hide();
		this.getPatientInfoTable().show();
		this.getPatientInfoTableHeader().show();
		this.getPatientInfoTableBody().show();
		this.getSaveBtn().show();
		this.getCancelBtn().show();


		var PatientInfo = this.application.Patient;
		var PITableHdr = this.getPatientInfoTableHeader();
		var PITable = this.getPatientInfoTable();

		PITableHdr.update( this.EoTSData );

		PITable.update( this.EoTSData );

		this.application.unMask();
	}


});

Ext.define("COMS.controller.NewPlan.TreatmentDetails", {
    extend : "Ext.app.Controller",
	TDData : {},		// This is used for storing the TD Data calculated within this controller rather than passing a variable around.
    views : [
		"NewPlan.TreatmentDetails"
    ],

    refs: [
		{ ref: "PatientInfoTable", selector: "TreatmentDetails [name=\"PatientInfoTable\"]"},
		{ ref: "PatientInfoTableHeader", selector: "TreatmentDetails [name=\"PatientInfoTableHeader\"]"},
		{ ref: "PatientInfoTableBody", selector: "TreatmentDetails [name=\"PatientInfoTableBody\"]"}
	],
	init: function() {
		wccConsoleLog("Initialized Treatment Details Controller!");
		this.control({
			"TreatmentDetails button[action=\"cancel\"]": {
				click: this.CancelTD
			},

			"TreatmentDetails" : {
				afterrender : this.AfterRenderWindow,
				close : this.CloseTDWin,
				resize : this.ResizeTable
			}
		});
	},

	CancelTD : function(button) {
		var win = button.up('window');
		win.close();
	},

	// Resize the TD Window based on the browser's size via the "onWindowResize" event handler
	AfterRenderWindow : function(theWin, eOPts) {
		Ext.EventManager.onWindowResize( this.ResizeTheTDWin, theWin );
		var max = Ext.getBody().getViewSize().height;
		var smaller = max * 0.1;
		smaller = max - smaller;
		theWin.setHeight(smaller);
		Ext.Function.defer( theWin.focus, 2000, this );
		var theTpl = this.getPatientInfoTableHeader();
		var TDData;
		TDData = Ext.apply({}, this.application.Patient);
/**
		if (0 === TDData.TD.Vitals.length) {
			TDData.TD.FirstVitals = {};
			TDData.TD.LastVitals = {};
		}
		else {
			TDData.TD.FirstVitals = TDData.TD.Vitals[0];
			TDData.TD.LastVitals = TDData.TD.Vitals[1];
		}
**/
		TDData.Disease = [];
		theTpl.update(TDData);
	},

	ResizeTheTDWin : function() {
		var max = Ext.getBody().getViewSize().height;
		var smaller = max * 0.1;
		smaller = max - smaller;
		this.setHeight(smaller);
	},

	ResizeTable : function(theWin, width, height, eOpts) {
		var tBody = this.getPatientInfoTableBody();
		if (tBody) {
			var max = theWin.getHeight();
			var smaller = max - 230;
			tBody.setHeight(smaller);
		}
	},


	// Make sure to remove the "onWindowResize" event handler when the TD window is closed.
	CloseTDWin : function(theWin, eOPts) {
		Ext.EventManager.removeResizeListener( this.ResizeTheTDWin, theWin );
	}
});


Ext.define("COMS.controller.NewPlan.ViewEndTreatmentSummary", {
    extend : "Ext.app.Controller",
	EoTSData : {},		// This is used for storing the EoTS Data calculated within this controller rather than passing a variable around.
    views : [
		"NewPlan.ViewEndTreatmentSummary"
    ],

    refs: [
		{ ref: "PatientInfoTable", selector: "ViewEndTreatmentSummary [name=\"PatientInfoTable\"]"},
		{ ref: "PatientInfoTableHeader", selector: "ViewEndTreatmentSummary [name=\"PatientInfoTableHeader\"]"},
		{ ref: "PatientInfoTableBody", selector: "ViewEndTreatmentSummary [name=\"PatientInfoTableBody\"]"},
		{ ref: "Reason4EOTSHead", selector: "ViewEndTreatmentSummary [name=\"Reason4EOTSHead\"]"}
	],
    init: function() {
        wccConsoleLog("Initialized End of Treatment Summary Controller!");
        this.control({
            "ViewEndTreatmentSummary button[action=\"cancel\"]": {
                click: this.CancelEoTS
            },

            "ViewEndTreatmentSummary" : {
				afterrender : this.AfterRenderWindow,
				close : this.CloseEoTSWin,
				resize : this.ResizeTable
            }

        });
    },

	CancelEoTS : function(button) {
        var win = button.up('window');
        win.close();
	},

	// Resize the EoTS Window based on the browser's size via the "onWindowResize" event handler
	AfterRenderWindow : function(theWin, eOPts) {
		Ext.EventManager.onWindowResize( this.ResizeTheEoTSWin, theWin );
		var max = Ext.getBody().getViewSize().height;
		var smaller = max * 0.1;
		smaller = max - smaller;
		theWin.setHeight(smaller);
		Ext.Function.defer( theWin.focus, 2000, this );
		var theTpl = this.getPatientInfoTableHeader();
		var EoTSData;
		EoTSData = Ext.apply({}, this.application.Patient);

/*********** MWB - 10/30/2013
var SampleData = {
	"Amputations": [
		{
			"description": "Left Hand and Fingers"
		},
		{
			"description": "Left Foot"
		}
	],

	"Vitals": [
		{
			"Height": "70",
			"Weight": "172",
			"BP": "146/84",
			"WeightFormula": "Actual Weight",
			"BSA_Method": "DuBois",
			"BSA": "",
			"BSA_Weight": 78,
			"DateTaken": "07/16/2012",
			"Temperature": "98.4",
			"Pulse": "76",
			"Respiration": "12",
			"Pain": "4",
			"SPO2": "",
			"Cycle": "",
			"Day": "",
			"PS": "Fully active, able to carry on all pre-disease performance without restriction",
			"PSID": "0",
			"Age": 77,
			"Gender": "M",
			"Amputations": [
				{
					"description": "Left Hand and Fingers"
				},
				{
					"description": "Left Foot"
				}
			]
		},
		{
			"Height": "70",
			"Weight": "172",
			"BP": "146/84",
			"WeightFormula": "Actual Weight",
			"BSA_Method": "DuBois",
			"BSA": 1.84,
			"BSA_Weight": 78,
			"DateTaken": "07/30/2012",
			"Temperature": "98.4",
			"Pulse": "76",
			"Respiration": "12",
			"Pain": "4",
			"SPO2": "",
			"Cycle": "",
			"Day": "",
			"PS": "Fully active, able to carry on all pre-disease performance without restriction",
			"PSID": "0",
			"Age": 77,
			"Gender": "M",
			"Amputations": [
				{ "description": "Left Hand and Fingers" },
				{ "description": "Left Foot" }
			]
		}
	],

	"ProviderReport": "Provider Report<br>",
	"FollowUpAppointments": "Follow-Up Appointments<br>",

	"Meds" : [
		{ "name" : "Saline", "administered" : [
			{ "day" : "Cycle 1, Day 1", "date" : "7/13/2012", "dosage" : "8 mg" }
		]},
		{ "name" : "Dexamathasone", "administered" : [ ] }
	],
	"DiseaseResponse" : [
		{ "day" : "Cycle 1, Day 1", "date" : "7/13/2012", "desc" : "Minimal response noted" }
	],
	"Toxicity" : [
		{ "day" : "Cycle 1, Day 1", "date" : "7/13/2012", "desc" : "None at this time" }
	],
	"Other" : [
		{ "day" : "Cycle 1, Day 1", "date" : "7/13/2012", "desc" : "Minimal response noted" }
	],
	"id": null
};
**************************************/


//		EoTSData.Amputations = Ext.apply({}, SampleData.Amputations);
//		EoTSData.EoTS.FirstVitals = Ext.apply({}, SampleData.Vitals[0]);
//		EoTSData.EoTS.LastVitals = Ext.apply({}, SampleData.Vitals[1]);
//		EoTSData.EoTS.ProviderReport = Ext.apply({}, SampleData.ProviderReport);
//		EoTSData.EoTS.FollowUpAppointments = Ext.apply({}, SampleData.FollowUpAppointments);
//		EoTSData.EoTS.Meds = Ext.apply({}, SampleData.Meds);

//		EoTSData.EoTS.DiseaseResponse = Ext.apply({}, SampleData.DiseaseResponse);
//		EoTSData.EoTS.Toxicity = Ext.apply({}, SampleData.Toxicity);
//		EoTSData.EoTS.Other = Ext.apply({}, SampleData.Other);


if (0 === EoTSData.EoTS.Vitals.length) {
	EoTSData.EoTS.FirstVitals = {};
	EoTSData.EoTS.LastVitals = {};
}
else {
	EoTSData.EoTS.FirstVitals = EoTSData.EoTS.Vitals[0];
	EoTSData.EoTS.LastVitals = EoTSData.EoTS.Vitals[1];
}


		EoTSData.Disease = [];
		theTpl.update(EoTSData);
	},

	ResizeTheEoTSWin : function() {
		var max = Ext.getBody().getViewSize().height;
		var smaller = max * 0.1;
		smaller = max - smaller;
		this.setHeight(smaller);
	},

	ResizeTable : function(theWin, width, height, eOpts) {
		var tBody = this.getPatientInfoTableBody();
		if (tBody) {
			var max = theWin.getHeight();
			var smaller = max - 230;
			tBody.setHeight(smaller);
		}
	},


	// Make sure to remove the "onWindowResize" event handler when the EoTS window is closed.
	CloseEoTSWin : function(theWin, eOPts) {
		Ext.EventManager.removeResizeListener( this.ResizeTheEoTSWin, theWin );
	}
});


Ext.define("COMS.controller.Orders.OrdersTab", {
	"extend" : "Ext.app.Controller",
	"stores" : ["OrdersStore"],
	"views" : ["Orders.OrdersTab"],
	"models" : ["OrdersTable"],

	"refs" : [
		{
			"ref" : "Orders",
			"selector" : "OrdersTab"
		}
	],

	"init" : function () {
		this.control({
			"OrdersTab": {
				collapse: this.collapseCombo,
				activate : this.PanelReady,
				beforeactivate : this.PanelReady,
				enable : this.PanelReady,
				focus : this.PanelReady,
				afterrender : this.PanelReady
			},
			"OrdersTab button[text=\"Refresh\"]": {
				click: this.HandleRefresh
			},
			"OrdersTab button[text=\"Update Records\"]": {
				click: function () {
					var theGrid = this.getOrders();
					theGrid.setLoading( "Updating Order Records", false );

					this.PostedRecsFailed = [];
					this.PostedRecs = [];

					var HandleResponse = function(record, status, theScope) {
						if (theScope.PostedRecs.length <= 0) {
							var theGrid = theScope.getOrders();
							theGrid.setLoading( false, false );
							if (theScope.PostedRecsFailed.length <= 0) {
								Ext.MessageBox.alert("Success", "The Order Status has been updated.");
								theScope.getController("Orders.OrdersTab").LoadOrdersStore(true);
							}
							else {
								Ext.MessageBox.alert("Invalid", "The Order Status was not updated");
							}
						}
						else {
							var aRec = theScope.PostedRecs.pop();
							if (aRec) {
								var tmpData = aRec.getData();
								// --- //console.log("Saving a single Record - " + tmpData.drug + " - " + tmpData.type + " - " + tmpData.route);
								aRec.save({
									scope: theScope,
									success: ResponseAlertGood,
									failure: ResponseAlertFail
								});
							}
						}
					};
					var ResponseAlertFail = function(record) {
						this.PostedRecsFailed.push(record);
						HandleResponse(record, false, this);
					};
					var ResponseAlertGood = function(record) {
						HandleResponse(record, true, this);
					};

					var theStore = Ext.getStore("OrdersStore");
					var DirtyRecords = theStore.getUpdatedRecords();
					var drLen = DirtyRecords.length;
					this.NumRecords = drLen;
					if (drLen > 0) {
						// Run Update Process for each record.
						var i, rec;
						for (i = 0; i < drLen; i++) {
							this.CurRecIdx = i;
							rec = DirtyRecords[i];
							var recData = rec.getData();
							var orderStatus = recData.orderstatus;
							if (null == orderStatus || "" == orderStatus) {
								Ext.MessageBox.alert("Information", "Please select an Order Status");
								return;
							}

							var order = Ext.create("COMS.model.OrdersTable", {
								orderstatus: orderStatus,
								templateID: recData.templateID,
								drug: recData.drug,
								dose: recData.dose,
								unit: recData.unit,
								patientID: recData.patientID,
								dfn: recData.dfn,
								type: recData.type,
								route: recData.route,
								orderid: recData.orderid,
								Last_Name: recData.Last_Name,
								adminDay : recData.adminDate
							});
							this.PostedRecs.push(order);
						}
						HandleResponse(null, null, this);	// Save the first record.
					}
					else {
						theGrid.setLoading( false, false );
					}
				}
			}
		});
	},

	PanelReady : function (thePanel, eOpts) {
	},

	"HandleRefresh" : function (button, evt, eOpts) {
		this.LoadOrdersStore(false);
	},

	"LoadOrdersStore" : function (LoadAndRenderOEMTab) {
		var PatientInfo, theStore;
		theStore = Ext.getStore("OrdersStore");
		if (theStore) {
			theStore.load({
				scope: this,
				callback: function() {
					if (false !== LoadAndRenderOEMTab) {
						if (this.application.Patient) {
							PatientInfo = this.application.Patient;
							PatientInfo.OEMDataRendered = false;
							this.application.fireEvent("DisplayOEMRecordData", PatientInfo);
						}
					}
				}
			});
		}
	}
});

Ext.define("COMS.controller.ProgrammerBtns", {
	extend: "Ext.app.Controller",
	views: [
		"ProgrammerBtns",
		"NewPlan.CTOS.FlowSheetOptionalQues",
		"NewPlan.CTOS.NursingDocs.puWinViewInfusionReactions",
		"TemplateList.puWinListPatients",
		"Common.puWinChangeAdminDate",
		"Common.DEMOpuWin"
	],

	init: function () {
		this.control({
			"scope" : this,
			"ProgrammerBtns button[text=\"Debugger\"]" : {
				"click" : this.ClickDebugger
			},
			"ProgrammerBtns button[text=\"Load Treatment Data\"]" : {
				"click" : this.ClickLoadTreatmentData
			},
			"ProgrammerBtns button[text=\"FS Optional Ques\"]" : {
				"click" : this.ClickShowFSOptionalQues
			},
			"ProgrammerBtns button[text=\"Infusion Reactions\"]" : {
				"click" : this.ClickShowInfusionReactions
			},
			"ProgrammerBtns button[text=\"Refresh Cumulative Dosing\"]" : {
				"click" : this.ClickRefreshCumulativeDosing
			},
			"ProgrammerBtns button[text=\"Add Cumulative Dosing\"]" : {
				"click" : this.ClickAddCumulativeDosing
			},
			"ProgrammerBtns button[text=\"Patients List\"]" : {
				"click" : this.ClickPatientsList
			},
			"ProgrammerBtns button[text=\"Change Admin Date\"]" : {
				"click" : this.ClickChangeAdminDate
			},
			"ProgrammerBtns button[text=\"Demo Pop Up Window\"]" : {
				"click" : this.DemoPUWin
			},
			"ProgrammerBtns button[text=\"Load Vitals\"]" : {
				"click" : this.ClickLoadVitals
			}
		});
	},

	PatientCheck : function() {
		if (!this.application.Patient) {
			alert("Patient has not been selected/loaded yet");
			return false;
		}
		return true;
	},

	ClickDebugger : function() {
		debugger;
	},

	ClickLoadVitals : function() {
		if (this.PatientCheck()) {
			var thisCtl = this.getController("NewPlan.NewPlanTab");
			thisCtl.loadVitals("Vitals");
		}
	},


	ClickPatientsList : function() {
		if (!this.application.TemplateListPatients) {
			this.application.TemplateListPatients = [
				{
					"Patient_ID": "239103B8-7413-E411-BAD9-000C2935B86F",
					"Date_Started": "07/25/2014",
					"Template_ID": "EEFB3BB2-3134-41B9-BFFE-E05554783DDD",
					"First_Name": "PATIENT",
					"Last_Name": "ONEHUNDREDTHIRTY",
					"SSID": "o0130 ",
					"Name": "PATIENT ONEHUNDREDTHIRTY"
				},
				{
					"Patient_ID": "BCA19DBA-1314-E411-BAD9-000C2935B86F",
					"Date_Started": "07/25/2014",
					"Template_ID": "EEFB3BB2-3134-41B9-BFFE-E05554783DDD",
					"First_Name": "PATIENT",
					"Last_Name": "ONEHUNDREDTHIRTYONE",
					"SSID": "o0131 ",
					"Name": "PATIENT ONEHUNDREDTHIRTYONE"
				},
				{
					"Patient_ID": "14483335-1514-E411-BAD9-000C2935B86F",
					"Date_Started": "07/25/2014",
					"Template_ID": "EEFB3BB2-3134-41B9-BFFE-E05554783DDD",
					"First_Name": "PATIENT",
					"Last_Name": "ONEHUNDREDTHIRTYTWO",
					"SSID": "o0132 ",
					"Name": "PATIENT ONEHUNDREDTHIRTYTWO"
				},
				{
					"Patient_ID": "3D33A5FE-9A16-E411-BAD9-000C2935B86F",
					"Date_Started": "08/08/2014",
					"Template_ID": "EEFB3BB2-3134-41B9-BFFE-E05554783DDD",
					"First_Name": "PATIENT",
					"Last_Name": "ONEHUNDREDTHIRTYFIVE",
					"SSID": "o0135 ",
					"Name": "PATIENT ONEHUNDREDTHIRTYFIVE"
				}
			];
		}
		Ext.widget("puWinListPatients");
	},

	DemoPUWin : function() {
		var DemoPUWin = Ext.widget("DEMOpuWin");
	},

	ClickAddCumulativeDosing : function() {
		if (this.PatientCheck()) {
			var thisCtl = this.getController("Common.puWinAddCumDose");
			var Info = { "MedID" : "B495474E-A99F-E111-903E-000C2935B86F", "UnitsID" : "AB85F3AA-0B21-E111-BF57-000C2935B86F", "AdministeredDose" : "54,321"};
			thisCtl.SaveNewCumDoseInfo( Info );
		}
	},

	ClickRefreshCumulativeDosing : function() {
		if (this.PatientCheck()) {
			var thisCtl = this.getController("Common.puWinAddCumDose");
			thisCtl.RefreshPatientInfoDetails();
		}
	},

	ClickShowInfusionReactions : function() {
		if (this.PatientCheck()) {
			var InfusionReactions = Ext.widget("puWinViewInfusionReactions");
			InfusionReactions = InfusionReactions;
		}
	},

	ClickShowFSOptionalQues : function() {
		var OptQues = Ext.widget("FlowSheetOptionalQues");
		OptQues = OptQues;
	},

	ClickLoadTreatmentData : function() {
		if (this.PatientCheck()) {
			// var theStore = Ext.getStore("ND_Treatment");
			// this.application.Patient.TreatmentStore = theStore;
			var thisCtl = this.getController("NewPlan.CTOS.NursingDocs.TreatmentTab");
			thisCtl.LoadPreviousTreatmentData();
		}
	},

	ClickChangeAdminDate : function() {
		// var thisCtl = this.getController("Common.puWinChangeAdminDate");
		var ChangeAdminDate = Ext.widget("puWinChangeAdminDate");
		ChangeAdminDate = ChangeAdminDate;
	}

});




Ext.define('COMS.controller.TemplateList.TemplateListTab', {
    extend: 'Ext.app.Controller',
    stores: [
        "TemplateListStore",
		"TemplateListByLocationStore"
    ],
    views: [
        'TemplateList.TemplateListTab',
		"Common.selCTOSTemplate"
    ],

    refs: [
        { ref: "theGrid", selector: "TemplateListTab grid"},
        {
            ref: "TemplateType",
            selector: "TemplateListTab selCTOSTemplate selTemplateType"
        }
    ],

	init: function () {
		this.control({
			"scope" : this,

			"TemplateListTab" : {
				"beforerender" : this.renderPanel
			},
			"TemplateListTab selCTOSTemplate selTemplateType": {
				"select" : this.TemplateTypeChange
			},
			"TemplateListTab selCTOSTemplate button": {
				"click" : this.ShowAllTemplates
			},
			"TemplateListTab grid" : {
				"cellclick" : this.clickCell
			}
		});
	},

	showPatientListWidget : function(thePatients, theTemplateDesc) {
		this.application.TemplateListPatients = thePatients;
		var theWidget = Ext.widget("puWinListPatients");
		var theTitle = "Patients Currently Undergoing Treatment - " + theTemplateDesc;
		theWidget.setTitle( theTitle );
	},

	clickCell : function(grid,td,cellIndex,record,tr,rowIndex,e,eOpts) {
		var columnIndex;
		columnIndex = this.getColumnIndex(grid, "PatientCount");     
		if (cellIndex == columnIndex) {       //you have a match...do your popup code here    
			var theData = record.getData();
			this.showPatientListWidget( theData.Patients, theData.description );
		}
		columnIndex = this.getColumnIndex(grid, "id");     
		if (cellIndex == columnIndex) {       //you have a match...do your popup code here    
			// Print/View
		}
	}, 

	getColumnIndex: function (grid, dataIndex) {   
		var gridColumns = grid.headerCt.getGridColumns();   
		for (var i = 0; i < gridColumns.length; i++) {
			if (gridColumns[i].dataIndex == dataIndex) {
				return i;
			}
		}
	},

	renderPanel: function (panel) {
		var theGrid = this.getTheGrid();
		theGrid.getStore().load();
		return true;
	},
    TemplateTypeChange: function (combo, recs, eOpts) {
        var guid = combo.getValue();
        var text = combo.getRawValue();
        var theGrid = this.getTheGrid();
        theGrid.reconfigure("TemplateListByLocationStore");
        var newURL = Ext.URLs.TemplateListByLocation + "/" + guid;
        theGrid.getStore().load({url : newURL});
    },

    ShowAllTemplates: function() {
        var theGrid = this.getTheGrid();
        theGrid.reconfigure("TemplateListStore");
        theGrid.getStore().load();
    }
});


Ext.define('COMS.controller.TemplateList.puWinListPatients', {
	extend: 'Ext.app.Controller',
	views: [ "TemplateList.puWinListPatients" ],

	refs: [
		{ ref: "theGrid", selector: "puWinListPatients grid"}
	],

	init: function () {
		this.control({
			"scope" : this,
			"puWinListPatients" : {
				"beforerender" : this.renderPanel,
				"close" : function() { delete this.application.TemplateListPatients; }
			},
			"puWinListPatients button": {
				"click" : this.closeWindow
			}
		});
	},

	closeWindow : function(btn) {
		delete this.application.TemplateListPatients;
		btn.up('window').close();
	},


	renderPanel: function (panel) {
		if (this.application.TemplateListPatients) {
			var theGrid = this.getTheGrid();
			theGrid.getStore().loadData(this.application.TemplateListPatients);
		}
		else {
			Ext.Msg.alert("Error", "No Patient Information is available for display for this template");
		}
		return true;
	}
});


Ext.define('COMS.controller.TemplatePromotion.TemplatePromotionTab', {
    extend: 'Ext.app.Controller',
    stores: [ "TemplateListStore", "TemplateListByLocationStore" ],
    views: [ "TemplatePromotion.TemplatePromotionTab" ],
    refs: [ { ref: "theGrid", selector: "TemplatePromotionTab"} ],

	init: function () {
		this.control({
			"scope" : this,

			"TemplatePromotionTab" : {
				"cellclick" : this.clickCell
			},
			"TemplatePromotionTab button[text=\"Refresh\"]": {
				"click" : this.HandleRefresh
			},
			"TemplatePromotionTab button[text=\"Update Records\"]": {
				"click" : function () {
					var theGrid = this.getTheGrid();
					theGrid.setLoading( "Updating Template Records", false );

					this.PostedRecsFailed = [];
					this.PostedRecs = [];

					var HandleResponse = function(record, status, theScope) {
						if (theScope.PostedRecs.length <= 0) {
							var theGrid = theScope.getTheGrid();
							theGrid.setLoading( false, false );
							if (theScope.PostedRecsFailed.length <= 0) {
								Ext.MessageBox.alert("Success", "The Template list has been updated.");
								theScope.HandleRefresh();
							}
							else {
								Ext.MessageBox.alert("Invalid", "The Template list has not updated");
							}
						}
						else {
							var aRec = theScope.PostedRecs.pop();
							if (aRec) {
								Ext.Ajax.request({
									url: Ext.URLs.TemplateLocation + aRec.ID,
									method : "PUT",
									jsonData : aRec,
									scope: theScope,
									success: ResponseAlertGood,
									failure: ResponseAlertFail
								});
							}
						}
					};
					var ResponseAlertFail = function(record) {
						this.PostedRecsFailed.push(record);
						HandleResponse(record, false, this);
					};
					var ResponseAlertGood = function(record) {
						HandleResponse(record, true, this);
					};

					var theStore = theGrid.getStore();
					var DirtyRecords = theStore.getUpdatedRecords();
					var drLen = DirtyRecords.length;
					this.NumRecords = drLen;
					if (drLen > 0) {
						// Run Update Process for each record.
						var i, rec;
						for (i = 0; i < drLen; i++) {
							this.CurRecIdx = i;
							rec = DirtyRecords[i];
							var Location = rec.get("Location");
							var recID = rec.get("id");
							if (null == Location || "" == Location) {
								Ext.MessageBox.alert("Information", "Please select a Location");
								return;
							}
							var JSON_Data = {"LocationID" : Location, "ID" : recID, "NationalLevel" : false };
							var aName = TemplateLocationStore.findRecord( "id", Location).getData().Name;
							if ("National Templates" == aName) {
								JSON_Data.NationalLevel = true;
							}
							this.PostedRecs.push(JSON_Data);
						}
						HandleResponse(null, null, this);	// Save the first record.
					}
					else {
						theGrid.setLoading( false, false );
					}
				}
			}
		});
	},

	showPatientListWidget : function(thePatients, theTemplateDesc) {
		this.application.TemplateListPatients = thePatients;
		var theWidget = Ext.widget("puWinListPatients");
		var theTitle = "Patients Currently Undergoing Treatment - " + theTemplateDesc;
		theWidget.setTitle( theTitle );
	},

	clickCell : function(grid,td,cellIndex,record,tr,rowIndex,e,eOpts) {
		var columnIndex;
		columnIndex = this.getColumnIndex(grid, "PatientCount");     
		if (cellIndex == columnIndex) {       //you have a match...do your popup code here    
			var theData = record.getData();
			this.showPatientListWidget( theData.Patients, theData.description );
		}
		columnIndex = this.getColumnIndex(grid, "id");     
		if (cellIndex == columnIndex) {       //you have a match...do your popup code here    
			// Print/View
		}
	}, 

	getColumnIndex: function (grid, dataIndex) {   
		var gridColumns = grid.headerCt.getGridColumns();   
		for (var i = 0; i < gridColumns.length; i++) {
			if (gridColumns[i].dataIndex == dataIndex) {
				return i;
			}
		}
	},
    TemplateTypeChange: function (combo, recs, eOpts) {
        var guid = combo.getValue();
        var text = combo.getRawValue();
        var theGrid = this.getTheGrid();
        theGrid.reconfigure("TemplateListByLocationStore");
        var newURL = Ext.URLs.TemplateListByLocation + "/" + guid;
        theGrid.getStore().load({url : newURL});
    },

    ShowAllTemplates: function() {
        var theGrid = this.getTheGrid();
        theGrid.reconfigure("TemplateListStore");
        theGrid.getStore().load();
    },

	HandleRefresh : function () {
        var theGrid = this.getTheGrid();
        theGrid.getStore().load();
		return true;
	}

});


Ext.application({
	name: "COMS",

	/******************** LIST OF CONTROLLERS *****************/
	controllers: [
		// Include all controllers used in this app here
		// Each controller must include all the views used by that controller
		// as part of that controller definition
		// Controllers must be included here if a store is used in the view managed by the controller
		"Navigation",
		"ProgrammerBtns",
		"CkBoxTArea",
		"Common.DEMOpuWin",
		"Common.EmeticInfo",
		"NewPlan.CTOS.FS_Toxicity",
		"Common.SelectAdverseReactionAlerts",
		"Common.puWinSelAmputation",
		"Common.puWinSelCancer",
		"Common.puWinAddCumDose",
		"Common.puWinSelBSA",
		"Common.selCTOSTemplate",
		"Common.puWinChangeAdminDate",
		"Common.MedRemindersForm",
		"Common.puWinTreatmentAmmend",
		"NewPlan.AdverseEventsHistory",
		"NewPlan.AskQues2ApplyTemplate",
		"NewPlan.NewPlanTab",
		"NewPlan.AmputationSelection",
//		"NewPlan.PatientHistory",
		"Orders.OrdersTab",
		"Authoring.AuthoringTab",
		"TemplateList.TemplateListTab",
		"TemplateList.puWinListPatients",
		"TemplatePromotion.TemplatePromotionTab",
		"Authoring.DrugRegimen",
		"Authoring.Hydration",
		"Management.AdminTab",
		"Management.DiseaseStaging",
		"Management.IntelligentDataElements",
		"Management.Toxicity",
		"Management.AddLookups",
		"Management.CumulativeDosing",
		"Management.EmeticMeds",
		"Management.Lockout",
		"Management.Inventory",
		"NewPlan.CTOS.NursingDocs.DischargeInstructions",
		"NewPlan.OEM",
		"NewPlan.PatientInfoTable",
		"NewPlan.OEM_Edit",
		"NewPlan.CTOS.FlowSheetTab",
		"NewPlan.CTOS.FlowSheetOptionalQues",
		"NewPlan.CTOS.ChronologyTab",
		"NewPlan.CTOS.PatientSummaryTab",
		"NewPlan.CTOS.NursingDocs.NursingDocs",
		"NewPlan.CTOS.NursingDocs.GenInfoTab",
		"NewPlan.CTOS.NursingDocs.AssessmentTab",
		"NewPlan.CTOS.NursingDocs.PreTreatmentTab",
		"NewPlan.CTOS.NursingDocs.TreatmentTab",
		"NewPlan.CTOS.NursingDocs.React_AssessTab",
		"NewPlan.CTOS.NursingDocs.EducationTab",
		"NewPlan.CTOS.NursingDocs.Chemotherapy",
//		"NewPlan.CTOS.NursingDocs.VitalSignsEntryForm",
		"NewPlan.CTOS.NursingDocs.puWinViewInfusionReactions",
		"Messages.MessagesTab",
		"NewPlan.EndTreatmentSummary",
		"NewPlan.ViewEndTreatmentSummary",
		"NewPlan.TreatmentDetails"
	],

	launch: function () {
		wccConsoleLog("Launching Application Base");
//		console.log("Disable Cache - app.launch()");
		Ext.Loader.setConfig({ disableCaching:false });
		Ext.Ajax.disableCaching = false;
		Ext.Loader.config.disableCaching = false;
		Ext.HandleLogout();

		Ext.QuickTips.init();
		Ext.create("Ext.container.Container", {
			id: "AppContainer",
			renderTo: "MainContent",
			layout: "fit",
			items: [{
				xtype: "NavigationTabs"
			}, {
				xtype: "container",
				contentEl: "EndControls"
			}]
		});

		Ext.get("Loader").fadeOut({
			duration: 1000
		});
		Ext.get("application").fadeIn({
			duration: 1000
		});
		Ext.get("footer").fadeIn({
			duration: 1000
		});
		wccConsoleLog("Application created");


		/******************************
		 *
		 *	MWB 15 Feb 2012 - Added additional global functions for use throughout the app
		 *	These functions are now part of the Ext library and can be accessed anywhere via:
		 *	Ext.FcnName(params)
		 *	e.g. Ext.CalcInfusionTime( 1000, 100) returns ==> "10 / 0" (e.g. 10 hours / 0 minutes);
		 *
		 ******************************/


		Ext.apply(Ext, {
			roundNumber: function (number, decimals) { // Arguments: number to round, number of decimal places
				var n1 = parseFloat(number);
				var n2 = n1.toFixed(parseInt(decimals, 10));
				return n2;
			},
				// Note this function DOES fail if num = "123.000"
			FormatNumber : function(num) {		// Formats number with the "Always Lead, Never Follow" format (e.g. 123,456 and 0.567 not 123,456.00 or .678)
				var n1 = parseInt(num, 10);
				if (n1 == num) {
					return Ext.util.Format.number(num, "0,000");
				}
				var ret = Ext.util.Format.number(num, "0,000.00");
				var n = ret.search(/0$/i);
				if (n>0) {
					ret = ret.substring(0, ret.length - 1);
				}
				 return ret;
			},

			in2cm: function (height) { // Inches to Centimeters; rounded to 2 decimal places
				return Ext.In2CM(height);
			},

			lbs2kg: function (weight) { // Pounds to Kilograms; rounded to 2 decimal places
				return Ext.Pounds2Kilos(weight);
			},
			f2C: function (f) { // Degrees Farenheight to Celcius; rounded to 1 decimal place
				return Ext.TempF2C(f);
			},

			CalcInfusionTime: function (vol, rate, label) { // Calculate Infusion time in Hrs/Min given Volume and Rate.
				var infTime = vol / rate;
				var Hrs = infTime.toFixed(3);
				var tmp = Hrs.split(".");
				// var Frac;
				if (tmp.length > 1) {
					Hrs = tmp[0];
					// Frac = tmp[1];
				}
				var Min = 0;
				if (infTime > 1) {
					Min = ((infTime - Hrs) * 60).toFixed(0);
				} else if (infTime < 1) {
					Min = (infTime * 60).toFixed(0);
				}
				if (Min > 50) { // Handle rounding of weird flow rates, should never happen in Real World but does in testing.
					Hrs = 1 + parseInt(Hrs, 10);
					Min = 0;
				}

				var retbuf = Hrs + " / " + Min;
				if (label) {
					retbuf = (Hrs + " hrs / " + Min + " min");
				}
				return retbuf;
			}
		});
	},

	loadText: "",
	showLoadingMask: function (loadingMessage) {
		if (Ext.isEmpty(loadingMessage)) {
			this.loadText = 'Loading... Please wait';
		}
		//Use the mask function on the Ext.getBody() element to mask the body element during Ajax calls
		Ext.Ajax.on('beforerequest', function () {
				//            console.log("Loading"); 
				Ext.getBody().mask(this.loadText, 'loading');
			},
			Ext.getBody()
		);
		Ext.Ajax.on('requestcomplete', Ext.getBody().unmask, Ext.getBody());
		Ext.Ajax.on('requestexception', Ext.getBody().unmask, Ext.getBody());
	},

	loadMask: function (msg) {
		if (!msg) {
			msg = "One moment please, loading data...";
		}

		Ext.getBody().mask(msg, "x-mask-loading").setHeight(1000 + Ext.getBody().getHeight());
	},
	unMask: function () {
		Ext.getBody().unmask();
	}

});

